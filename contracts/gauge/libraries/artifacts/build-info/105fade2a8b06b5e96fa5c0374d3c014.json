{
	"id": "105fade2a8b06b5e96fa5c0374d3c014",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.7.6",
	"solcLongVersion": "0.7.6+commit.7338295f",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/gauge/libraries/SafeCast.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Safe casting methods\n/// @notice Contains methods for safely casting between types\nlibrary SafeCast {\n    /// @notice Cast a uint128 to an int128, revert on overflow\n    /// @param y The uint128 to be cast\n    /// @return z The cast integer, now type int128\n    function toInt128(uint128 y) internal pure returns (int128 z) {\n        require(y < 2 ** 127);\n        z = int128(y);\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": [],
			"evmVersion": "berlin"
		}
	},
	"output": {
		"contracts": {
			"contracts/gauge/libraries/SafeCast.sol": {
				"SafeCast": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Safe casting methods",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/gauge/libraries/SafeCast.sol\":165:469  library SafeCast {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/gauge/libraries/SafeCast.sol\":165:469  library SafeCast {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220c34b45cb072cfa62c1cfc2d8723cfea6fd96a247c794e38e88ed9e42a786bc3564736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c34b45cb072cfa62c1cfc2d8723cfea6fd96a247c794e38e88ed9e42a786bc3564736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC3 0x4B GASLIMIT 0xCB SMOD 0x2C STATICCALL PUSH3 0xC1CFC2 0xD8 PUSH19 0x3CFEA6FD96A247C794E38E88ED9E42A786BC35 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "165:304:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c34b45cb072cfa62c1cfc2d8723cfea6fd96a247c794e38e88ed9e42a786bc3564736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC3 0x4B GASLIMIT 0xCB SMOD 0x2C STATICCALL PUSH3 0xC1CFC2 0xD8 PUSH19 0x3CFEA6FD96A247C794E38E88ED9E42A786BC35 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "165:304:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"toInt128(uint128)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 165,
									"end": 469,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 165,
									"end": 469,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 165,
									"end": 469,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 165,
									"end": 469,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 165,
									"end": 469,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 165,
									"end": 469,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 165,
									"end": 469,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 165,
									"end": 469,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 165,
									"end": 469,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 165,
									"end": 469,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 165,
									"end": 469,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 165,
									"end": 469,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 165,
									"end": 469,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 165,
									"end": 469,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 165,
									"end": 469,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 165,
									"end": 469,
									"name": "INVALID",
									"source": 0
								},
								{
									"begin": 165,
									"end": 469,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 165,
									"end": 469,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 165,
									"end": 469,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 165,
									"end": 469,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 165,
									"end": 469,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 165,
									"end": 469,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 165,
									"end": 469,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 165,
									"end": 469,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 165,
									"end": 469,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 165,
									"end": 469,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 165,
									"end": 469,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220c34b45cb072cfa62c1cfc2d8723cfea6fd96a247c794e38e88ed9e42a786bc3564736f6c63430007060033",
									".code": [
										{
											"begin": 165,
											"end": 469,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 165,
											"end": 469,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 165,
											"end": 469,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 165,
											"end": 469,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 165,
											"end": 469,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 165,
											"end": 469,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 165,
											"end": 469,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 165,
											"end": 469,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 165,
											"end": 469,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Safe casting methods\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains methods for safely casting between types\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/gauge/libraries/SafeCast.sol\":\"SafeCast\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/gauge/libraries/SafeCast.sol\":{\"keccak256\":\"0x04853dcb98f23fb58b2569e75089626c29ee9b983783991f7e635089e1a1aeff\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://2e13bdf6622b466aeccad321c89d768f77517c391b247db3c67bce32b31ea3e4\",\"dweb:/ipfs/QmRbNQJ9tjzre3vjLYkTpgyAKcUbGr3QK2zmPfLokB7ZWf\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Contains methods for safely casting between types",
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/gauge/libraries/SafeCast.sol": {
				"ast": {
					"absolutePath": "contracts/gauge/libraries/SafeCast.sol",
					"exportedSymbols": {
						"SafeCast": [
							27
						]
					},
					"id": 28,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "71:94:0",
								"text": "@title Safe casting methods\n @notice Contains methods for safely casting between types"
							},
							"fullyImplemented": true,
							"id": 27,
							"linearizedBaseContracts": [
								27
							],
							"name": "SafeCast",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 25,
										"nodeType": "Block",
										"src": "406:61:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															},
															"id": 15,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 11,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 5,
																"src": "424:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_170141183460469231731687303715884105728_by_1",
																	"typeString": "int_const 1701...(31 digits omitted)...5728"
																},
																"id": 14,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 12,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "428:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "313237",
																	"id": 13,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "433:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_127_by_1",
																		"typeString": "int_const 127"
																	},
																	"value": "127"
																},
																"src": "428:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_170141183460469231731687303715884105728_by_1",
																	"typeString": "int_const 1701...(31 digits omitted)...5728"
																}
															},
															"src": "424:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 10,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "416:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 16,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "416:21:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 17,
												"nodeType": "ExpressionStatement",
												"src": "416:21:0"
											},
											{
												"expression": {
													"id": 23,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 18,
														"name": "z",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 8,
														"src": "447:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_int128",
															"typeString": "int128"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 21,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 5,
																"src": "458:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															],
															"id": 20,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "451:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_int128_$",
																"typeString": "type(int128)"
															},
															"typeName": {
																"id": 19,
																"name": "int128",
																"nodeType": "ElementaryTypeName",
																"src": "451:6:0",
																"typeDescriptions": {}
															}
														},
														"id": 22,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "451:9:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int128",
															"typeString": "int128"
														}
													},
													"src": "447:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"id": 24,
												"nodeType": "ExpressionStatement",
												"src": "447:13:0"
											}
										]
									},
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "188:151:0",
										"text": "@notice Cast a uint128 to an int128, revert on overflow\n @param y The uint128 to be cast\n @return z The cast integer, now type int128"
									},
									"id": 26,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toInt128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 6,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 26,
												"src": "362:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 4,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "362:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "361:11:0"
									},
									"returnParameters": {
										"id": 9,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 8,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 26,
												"src": "396:8:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 7,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "396:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "395:10:0"
									},
									"scope": 27,
									"src": "344:123:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 28,
							"src": "165:304:0"
						}
					],
					"src": "45:425:0"
				},
				"id": 0
			}
		}
	}
}