{
	"id": "e7b94fdf8dc8d15089e75f8f48edafb5",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.7.6",
	"solcLongVersion": "0.7.6+commit.7338295f",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/core/VeloSwapV3.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.7.6;\r\npragma abicoder v2;\r\n\r\nimport \"./interfaces/ICLPool.sol\";\r\n\r\nimport \"./libraries/LowGasSafeMath.sol\";\r\nimport \"./libraries/SafeCast.sol\";\r\nimport \"./libraries/Tick.sol\";\r\nimport \"./libraries/TickBitmap.sol\";\r\nimport \"./libraries/Position.sol\";\r\n\r\nimport \"./libraries/FullMath.sol\";\r\nimport \"./libraries/FixedPoint128.sol\";\r\nimport \"./libraries/TransferHelper.sol\";\r\nimport \"./libraries/TickMath.sol\";\r\nimport \"./libraries/LiquidityMath.sol\";\r\nimport \"./libraries/LiquidityAmounts.sol\";\r\nimport \"./libraries/SqrtPriceMath.sol\";\r\n\r\nimport \"./interfaces/ICLFactory.sol\";\r\nimport \"./interfaces/IFactoryRegistry.sol\";\r\nimport \"./interfaces/IERC20Minimal.sol\";\r\nimport \"./interfaces/callback/ICLMintCallback.sol\";\r\nimport \"./interfaces/callback/ICLSwapCallback.sol\";\r\nimport \"contracts/libraries/VelodromeTimeLibrary.sol\";\r\nimport \"./IERC721.sol\";\r\nimport \"./INonfungiblePositionManager.sol\";\r\n\r\ninterface Oracle {\r\n    function GetPrice(address pooladdress) external view returns (uint256 price);\r\n    function getAmountsforLiquidity(address pool, uint256 usdAmount) external view returns (uint amount0, uint amount1);\r\n}\r\n\r\n\r\n\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\ncontract V3Swap is ICLSwapCallback {\r\n    address public pool; // token0/token1 pool address\r\n    address public token0; // token0 on Optimism\r\n    address public token1; // token1 on Optimism\r\n    address public farmNFT;\r\n    address public admin;\r\n    int24 public tickSpacing;\r\n    int24 public spaceMultiplier;\r\n    address public oracle = 0xf0F8249cA6493AaEbBF971B3a2FD8A2e6736981E;\r\n\r\n    struct Deposit {\r\n        address owner;\r\n        uint128 liquidity;\r\n        address token0;\r\n        address token1;\r\n    }\r\n\r\n    mapping(uint256 => Deposit) public deposits;\r\n\r\n    event SwapExecuted(address indexed user, uint256 amountIn, uint256 amountOut);\r\n\r\n    constructor() {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    function _newAdmin(address newAdmin) external {\r\n        require(msg.sender == admin, \"Only owner can do this\");\r\n        admin = newAdmin;\r\n    }\r\n\r\n    function _newPool(address newPool) external {\r\n        require(msg.sender == admin, \"Only owner can do this\");\r\n        pool = newPool;\r\n        token0 = ICLPoolConstants(pool).token0();\r\n        token1 = ICLPoolConstants(pool).token1();\r\n        farmNFT = ICLPoolConstants(pool).nft();\r\n        tickSpacing = ICLPoolConstants(pool).tickSpacing();\r\n    }\r\n\r\n    function Swap0for1(uint256 amountIn) public payable {\r\n        require(amountIn > 0, \"Invalid input amount\");\r\n\r\n        IERC20(token0).transferFrom(msg.sender, address(this), amountIn);\r\n\r\n        // Get current sqrtPriceX96 from the pool\r\n        (uint160 sqrtPriceX96, , , , , ) = ICLPoolState(pool).slot0();\r\n        uint160 sqrtPriceLimitX96 = uint160(sqrtPriceX96 * 99 / 100); // 1% slippage\r\n\r\n        // Ensure valid range\r\n        if (sqrtPriceLimitX96 <= TickMath.MIN_SQRT_RATIO) {\r\n            sqrtPriceLimitX96 = TickMath.MIN_SQRT_RATIO + 1;\r\n        }\r\n\r\n        // Approve pool to spend token0\r\n        IERC20Minimal(token0).approve(pool, amountIn);\r\n\r\n        // Prepare data for callback (not strictly needed here, but included for completeness)\r\n        bytes memory data = abi.encode(address(this));\r\n\r\n        // Call the pool's swap function\r\n        ICLPoolActions(pool).swap(\r\n            msg.sender,     // recipient\r\n            true,              // zeroForOne: token0 -> token1\r\n            int256(amountIn),  // exact input\r\n            sqrtPriceLimitX96, // price limit\r\n            data               // callback data\r\n        );\r\n    }\r\n\r\n    function Swap1for0(uint256 amountIn) public payable {\r\n        require(amountIn > 0, \"Invalid input amount\");\r\n\r\n        IERC20(token1).transferFrom(msg.sender, address(this), amountIn);\r\n\r\n        // Get current sqrtPriceX96 from the pool\r\n        (uint160 sqrtPriceX96, , , , , ) = ICLPoolState(pool).slot0();\r\n        uint160 sqrtPriceLimitX96 = uint160(sqrtPriceX96 * 101 / 100); // 1% slippage\r\n\r\n        // Ensure valid range\r\n        if (sqrtPriceLimitX96 <= TickMath.MIN_SQRT_RATIO) {\r\n            sqrtPriceLimitX96 = TickMath.MIN_SQRT_RATIO - 1;\r\n        }\r\n\r\n        // Approve pool to spend token0\r\n        IERC20Minimal(token1).approve(pool, amountIn);\r\n\r\n        // Prepare data for callback (not strictly needed here, but included for completeness)\r\n        bytes memory data = abi.encode(address(this));\r\n\r\n        // Call the pool's swap function\r\n        ICLPoolActions(pool).swap(\r\n            msg.sender,     // recipient\r\n            false,              // zeroForOne: token0 -> token1\r\n            int256(amountIn),  // exact input\r\n            sqrtPriceLimitX96, // price limit\r\n            data               // callback data\r\n        );\r\n    }\r\n\r\n    // This is the required callback for the pool to call after swap\r\n    function uniswapV3SwapCallback(\r\n        int256 amount0Delta,\r\n        int256 amount1Delta,\r\n        bytes calldata /* data */\r\n    ) external override {\r\n        require(msg.sender == pool, \"Callback only from pool\");\r\n\r\n        // If amount0Delta > 0, we must pay that amount of token0 to the pool\r\n        if (amount0Delta > 0) {\r\n            IERC20Minimal(token0).transfer(pool, uint256(amount0Delta));\r\n        }\r\n        // If amount1Delta > 0, we must pay that amount of token1 to the pool (not expected in token0->token1 swap)\r\n        if (amount1Delta > 0) {\r\n            IERC20Minimal(token1).transfer(pool, uint256(amount1Delta));\r\n        }\r\n    }\r\n\r\n    function approveTokens(uint approve0, uint approve1) external payable {\r\n        IERC20Minimal(token0).approve(farmNFT, approve0);\r\n        IERC20Minimal(token1).approve(farmNFT, approve1);\r\n    }\r\n\r\n}"
			},
			"contracts/core/INonfungiblePositionManager.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.7.5;\r\npragma abicoder v2;\r\n\r\n\r\n/// @title Non-fungible token for positions\r\n/// @notice Wraps CL positions in a non-fungible token interface which allows for them to be transferred\r\n/// and authorized.\r\ninterface INonfungiblePositionManager\r\n{\r\n    /// @notice Emitted when liquidity is increased for a position NFT\r\n    /// @dev Also emitted when a token is minted\r\n    /// @param tokenId The ID of the token for which liquidity was increased\r\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\r\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\r\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\r\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\r\n    /// @notice Emitted when liquidity is decreased for a position NFT\r\n    /// @param tokenId The ID of the token for which liquidity was decreased\r\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\r\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\r\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\r\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\r\n    /// @notice Emitted when tokens are collected for a position NFT\r\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\r\n    /// @param tokenId The ID of the token for which underlying tokens were collected\r\n    /// @param recipient The address of the account that received the collected tokens\r\n    /// @param amount0 The amount of token0 owed to the position that was collected\r\n    /// @param amount1 The amount of token1 owed to the position that was collected\r\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\r\n    /// @notice Emitted when a new Token Descriptor is set\r\n    /// @param tokenDescriptor Address of the new Token Descriptor\r\n    event TokenDescriptorChanged(address indexed tokenDescriptor);\r\n    /// @notice Emitted when a new Owner is set\r\n    /// @param owner Address of the new Owner\r\n    event TransferOwnership(address indexed owner);\r\n\r\n    /// @notice Returns the position information associated with a given token ID.\r\n    /// @dev Throws if the token ID is not valid.\r\n    /// @param tokenId The ID of the token that represents the position\r\n    /// @return nonce The nonce for permits\r\n    /// @return operator The address that is approved for spending\r\n    /// @return token0 The address of the token0 for a specific pool\r\n    /// @return token1 The address of the token1 for a specific pool\r\n    /// @return tickSpacing The tick spacing associated with the pool\r\n    /// @return tickLower The lower end of the tick range for the position\r\n    /// @return tickUpper The higher end of the tick range for the position\r\n    /// @return liquidity The liquidity of the position\r\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\r\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\r\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\r\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\r\n    function positions(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (\r\n            uint96 nonce,\r\n            address operator,\r\n            address token0,\r\n            address token1,\r\n            int24 tickSpacing,\r\n            int24 tickLower,\r\n            int24 tickUpper,\r\n            uint128 liquidity,\r\n            uint256 feeGrowthInside0LastX128,\r\n            uint256 feeGrowthInside1LastX128,\r\n            uint128 tokensOwed0,\r\n            uint128 tokensOwed1\r\n        );\r\n\r\n    /// @notice Returns the address of the Token Descriptor, that handles generating token URIs for Positions\r\n    function tokenDescriptor() external view returns (address);\r\n\r\n    /// @notice Returns the address of the Owner, that is allowed to set a new TokenDescriptor\r\n    function owner() external view returns (address);\r\n\r\n    struct MintParams {\r\n        address token0;\r\n        address token1;\r\n        int24 tickSpacing;\r\n        int24 tickLower;\r\n        int24 tickUpper;\r\n        uint256 amount0Desired;\r\n        uint256 amount1Desired;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint160 sqrtPriceX96;\r\n    }\r\n\r\n    /// @notice Creates a new position wrapped in a NFT\r\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\r\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\r\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\r\n    /// @return tokenId The ID of the token that represents the minted position\r\n    /// @return liquidity The amount of liquidity for this position\r\n    /// @return amount0 The amount of token0\r\n    /// @return amount1 The amount of token1\r\n    function mint(MintParams calldata params)\r\n        external\r\n        payable\r\n        returns (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\r\n\r\n    struct IncreaseLiquidityParams {\r\n        uint256 tokenId;\r\n        uint256 amount0Desired;\r\n        uint256 amount1Desired;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        uint256 deadline;\r\n    }\r\n\r\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\r\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\r\n    /// amount0Desired The desired amount of token0 to be spent,\r\n    /// amount1Desired The desired amount of token1 to be spent,\r\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\r\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\r\n    /// deadline The time by which the transaction must be included to effect the change\r\n    /// @return liquidity The new liquidity amount as a result of the increase\r\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\r\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\r\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\r\n        external\r\n        payable\r\n        returns (uint128 liquidity, uint256 amount0, uint256 amount1);\r\n\r\n    struct DecreaseLiquidityParams {\r\n        uint256 tokenId;\r\n        uint128 liquidity;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        uint256 deadline;\r\n    }\r\n\r\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\r\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\r\n    /// amount The amount by which liquidity will be decreased,\r\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\r\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\r\n    /// deadline The time by which the transaction must be included to effect the change\r\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\r\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\r\n    /// @dev The use of this function can cause a loss to users of the NonfungiblePositionManager\r\n    /// @dev for tokens that have very high decimals.\r\n    /// @dev The amount of tokens necessary for the loss is: 3.4028237e+38.\r\n    /// @dev This is equivalent to 1e20 value with 18 decimals.\r\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\r\n        external\r\n        payable\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    struct CollectParams {\r\n        uint256 tokenId;\r\n        address recipient;\r\n        uint128 amount0Max;\r\n        uint128 amount1Max;\r\n    }\r\n\r\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\r\n    /// @notice Used to update staked positions before deposit and withdraw\r\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\r\n    /// recipient The account that should receive the tokens,\r\n    /// amount0Max The maximum amount of token0 to collect,\r\n    /// amount1Max The maximum amount of token1 to collect\r\n    /// @return amount0 The amount of fees collected in token0\r\n    /// @return amount1 The amount of fees collected in token1\r\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\r\n\r\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\r\n    /// must be collected first.\r\n    /// @param tokenId The ID of the token that is being burned\r\n    function burn(uint256 tokenId) external payable;\r\n\r\n    /// @notice Sets a new Token Descriptor\r\n    /// @param _tokenDescriptor Address of the new Token Descriptor to be chosen\r\n    function setTokenDescriptor(address _tokenDescriptor) external;\r\n\r\n    /// @notice Sets a new Owner address\r\n    /// @param _owner Address of the new Owner to be chosen\r\n    function setOwner(address _owner) external;\r\n}\r\n"
			},
			"contracts/core/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.7.6;\r\npragma abicoder v2;\r\n\r\ninterface IERC721 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\r\n     *   a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\r\n     *   {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\r\n     *   a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the address zero.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n"
			},
			"contracts/libraries/VelodromeTimeLibrary.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity =0.7.6;\n\nlibrary VelodromeTimeLibrary {\n    uint256 internal constant WEEK = 7 days;\n\n    /// @dev Returns start of epoch based on current timestamp\n    function epochStart(uint256 timestamp) internal pure returns (uint256) {\n        return timestamp - (timestamp % WEEK);\n    }\n\n    /// @dev Returns start of next epoch / end of current epoch\n    function epochNext(uint256 timestamp) internal pure returns (uint256) {\n        return timestamp - (timestamp % WEEK) + WEEK;\n    }\n\n    /// @dev Returns start of voting window\n    function epochVoteStart(uint256 timestamp) internal pure returns (uint256) {\n        return timestamp - (timestamp % WEEK) + 1 hours;\n    }\n\n    /// @dev Returns end of voting window / beginning of unrestricted voting window\n    function epochVoteEnd(uint256 timestamp) internal pure returns (uint256) {\n        return timestamp - (timestamp % WEEK) + WEEK - 1 hours;\n    }\n}\n"
			},
			"contracts/core/interfaces/callback/ICLSwapCallback.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for ICLPoolActions#swap\n/// @notice Any contract that calls ICLPoolActions#swap must implement this interface\ninterface ICLSwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via ICLPool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a CLPool deployed by the canonical CLFactory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the ICLPoolActions#swap call\n    function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external;\n}\n"
			},
			"contracts/core/interfaces/callback/ICLMintCallback.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for ICLPoolActions#mint\n/// @notice Any contract that calls ICLPoolActions#mint must implement this interface\ninterface ICLMintCallback {\n    /// @notice Called to `msg.sender` after minting liquidity to a position from ICLPool#mint.\n    /// @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\n    /// The caller of this method must be checked to be a CLPool deployed by the canonical CLFactory.\n    /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\n    /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\n    /// @param data Any data passed through by the caller via the ICLPoolActions#mint call\n    function uniswapV3MintCallback(uint256 amount0Owed, uint256 amount1Owed, bytes calldata data) external;\n}\n"
			},
			"contracts/core/interfaces/IERC20Minimal.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Minimal ERC20 interface for CL\n/// @notice Contains a subset of the full ERC20 interface that is used in CL\ninterface IERC20Minimal {\n    /// @notice Returns the balance of a token\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\n    /// @return The number of tokens held by the account\n    function balanceOf(address account) external view returns (uint256);\n\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\n    /// @param recipient The account that will receive the amount transferred\n    /// @param amount The number of tokens to send from the sender to the recipient\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /// @notice Returns the current allowance given to a spender by an owner\n    /// @param owner The account of the token owner\n    /// @param spender The account of the token spender\n    /// @return The current allowance granted by `owner` to `spender`\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\n    /// @param amount The amount of tokens allowed to be used by `spender`\n    /// @return Returns true for a successful approval, false for unsuccessful\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\n    /// @param sender The account from which the transfer will be initiated\n    /// @param recipient The recipient of the transfer\n    /// @param amount The amount of the transfer\n    /// @return Returns true for a successful transfer, false for unsuccessful\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\n    /// @param value The amount of tokens that were transferred\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\n    /// @param owner The account that approved spending of its tokens\n    /// @param spender The account for which the spending allowance was modified\n    /// @param value The new allowance from the owner to the spender\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
			},
			"contracts/core/interfaces/IFactoryRegistry.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity =0.7.6;\n\ninterface IFactoryRegistry {\n    function approve(address poolFactory, address votingRewardsFactory, address gaugeFactory) external;\n\n    function isPoolFactoryApproved(address poolFactory) external returns (bool);\n\n    function factoriesToPoolFactory(address poolFactory)\n        external\n        returns (address votingRewardsFactory, address gaugeFactory);\n}\n"
			},
			"contracts/core/interfaces/ICLFactory.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport {IVoter} from \"contracts/core/interfaces/IVoter.sol\";\nimport {IFactoryRegistry} from \"contracts/core/interfaces/IFactoryRegistry.sol\";\n\n/// @title The interface for the CL Factory\n/// @notice The CL Factory facilitates creation of CL pools and control over the protocol fees\ninterface ICLFactory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when the swapFeeManager of the factory is changed\n    /// @param oldFeeManager The swapFeeManager before the swapFeeManager was changed\n    /// @param newFeeManager The swapFeeManager after the swapFeeManager was changed\n    event SwapFeeManagerChanged(address indexed oldFeeManager, address indexed newFeeManager);\n\n    /// @notice Emitted when the swapFeeModule of the factory is changed\n    /// @param oldFeeModule The swapFeeModule before the swapFeeModule was changed\n    /// @param newFeeModule The swapFeeModule after the swapFeeModule was changed\n    event SwapFeeModuleChanged(address indexed oldFeeModule, address indexed newFeeModule);\n\n    /// @notice Emitted when the unstakedFeeManager of the factory is changed\n    /// @param oldFeeManager The unstakedFeeManager before the unstakedFeeManager was changed\n    /// @param newFeeManager The unstakedFeeManager after the unstakedFeeManager was changed\n    event UnstakedFeeManagerChanged(address indexed oldFeeManager, address indexed newFeeManager);\n\n    /// @notice Emitted when the unstakedFeeModule of the factory is changed\n    /// @param oldFeeModule The unstakedFeeModule before the unstakedFeeModule was changed\n    /// @param newFeeModule The unstakedFeeModule after the unstakedFeeModule was changed\n    event UnstakedFeeModuleChanged(address indexed oldFeeModule, address indexed newFeeModule);\n\n    /// @notice Emitted when the defaultUnstakedFee of the factory is changed\n    /// @param oldUnstakedFee The defaultUnstakedFee before the defaultUnstakedFee was changed\n    /// @param newUnstakedFee The defaultUnstakedFee after the unstakedFeeModule was changed\n    event DefaultUnstakedFeeChanged(uint24 indexed oldUnstakedFee, uint24 indexed newUnstakedFee);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(address indexed token0, address indexed token1, int24 indexed tickSpacing, address pool);\n\n    /// @notice Emitted when a new tick spacing is enabled for pool creation via the factory\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools\n    /// @param fee The default fee for a pool created with a given tickSpacing\n    event TickSpacingEnabled(int24 indexed tickSpacing, uint24 indexed fee);\n\n    /// @notice The voter contract, used to create gauges\n    /// @return The address of the voter contract\n    function voter() external view returns (IVoter);\n\n    /// @notice The address of the pool implementation contract used to deploy proxies / clones\n    /// @return The address of the pool implementation contract\n    function poolImplementation() external view returns (address);\n\n    /// @notice Factory registry for valid pool / gauge / rewards factories\n    /// @return The address of the factory registry\n    function factoryRegistry() external view returns (IFactoryRegistry);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the current swapFeeManager of the factory\n    /// @dev Can be changed by the current swap fee manager via setSwapFeeManager\n    /// @return The address of the factory swapFeeManager\n    function swapFeeManager() external view returns (address);\n\n    /// @notice Returns the current swapFeeModule of the factory\n    /// @dev Can be changed by the current swap fee manager via setSwapFeeModule\n    /// @return The address of the factory swapFeeModule\n    function swapFeeModule() external view returns (address);\n\n    /// @notice Returns the current unstakedFeeManager of the factory\n    /// @dev Can be changed by the current unstaked fee manager via setUnstakedFeeManager\n    /// @return The address of the factory unstakedFeeManager\n    function unstakedFeeManager() external view returns (address);\n\n    /// @notice Returns the current unstakedFeeModule of the factory\n    /// @dev Can be changed by the current unstaked fee manager via setUnstakedFeeModule\n    /// @return The address of the factory unstakedFeeModule\n    function unstakedFeeModule() external view returns (address);\n\n    /// @notice Returns the current defaultUnstakedFee of the factory\n    /// @dev Can be changed by the current unstaked fee manager via setDefaultUnstakedFee\n    /// @return The default Unstaked Fee of the factory\n    function defaultUnstakedFee() external view returns (uint24);\n\n    /// @notice Returns a default fee for a tick spacing.\n    /// @dev Use getFee for the most up to date fee for a given pool.\n    /// A tick spacing can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param tickSpacing The enabled tick spacing. Returns 0 if not enabled\n    /// @return fee The default fee for the given tick spacing\n    function tickSpacingToFee(int24 tickSpacing) external view returns (uint24 fee);\n\n    /// @notice Returns a list of enabled tick spacings. Used to iterate through pools created by the factory\n    /// @dev Tick spacings cannot be removed. Tick spacings are not ordered\n    /// @return List of enabled tick spacings\n    function tickSpacings() external view returns (int24[] memory);\n\n    /// @notice Returns the pool address for a given pair of tokens and a tick spacing, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param tickSpacing The tick spacing of the pool\n    /// @return pool The pool address\n    function getPool(address tokenA, address tokenB, int24 tickSpacing) external view returns (address pool);\n\n    /// @notice Return address of pool created by this factory given its `index`\n    /// @param index Index of the pool\n    /// @return The pool address in the given index\n    function allPools(uint256 index) external view returns (address);\n\n    /// @notice Returns the number of pools created from this factory\n    /// @return Number of pools created from this factory\n    function allPoolsLength() external view returns (uint256);\n\n    /// @notice Used in VotingEscrow to determine if a contract is a valid pool of the factory\n    /// @param pool The address of the pool to check\n    /// @return Whether the pool is a valid pool of the factory\n    function isPair(address pool) external view returns (bool);\n\n    /// @notice Get swap & flash fee for a given pool. Accounts for default and dynamic fees\n    /// @dev Swap & flash fee is denominated in pips. i.e. 1e-6\n    /// @param pool The pool to get the swap & flash fee for\n    /// @return The swap & flash fee for the given pool\n    function getSwapFee(address pool) external view returns (uint24);\n\n    /// @notice Get unstaked fee for a given pool. Accounts for default and dynamic fees\n    /// @dev Unstaked fee is denominated in pips. i.e. 1e-6\n    /// @param pool The pool to get the unstaked fee for\n    /// @return The unstaked fee for the given pool\n    function getUnstakedFee(address pool) external view returns (uint24);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param tickSpacing The desired tick spacing for the pool\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. The call will\n    /// revert if the pool already exists, the tick spacing is invalid, or the token arguments are invalid\n    /// @return pool The address of the newly created pool\n    function createPool(address tokenA, address tokenB, int24 tickSpacing, uint160 sqrtPriceX96)\n        external\n        returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Updates the swapFeeManager of the factory\n    /// @dev Must be called by the current swap fee manager\n    /// @param _swapFeeManager The new swapFeeManager of the factory\n    function setSwapFeeManager(address _swapFeeManager) external;\n\n    /// @notice Updates the swapFeeModule of the factory\n    /// @dev Must be called by the current swap fee manager\n    /// @param _swapFeeModule The new swapFeeModule of the factory\n    function setSwapFeeModule(address _swapFeeModule) external;\n\n    /// @notice Updates the unstakedFeeManager of the factory\n    /// @dev Must be called by the current unstaked fee manager\n    /// @param _unstakedFeeManager The new unstakedFeeManager of the factory\n    function setUnstakedFeeManager(address _unstakedFeeManager) external;\n\n    /// @notice Updates the unstakedFeeModule of the factory\n    /// @dev Must be called by the current unstaked fee manager\n    /// @param _unstakedFeeModule The new unstakedFeeModule of the factory\n    function setUnstakedFeeModule(address _unstakedFeeModule) external;\n\n    /// @notice Updates the defaultUnstakedFee of the factory\n    /// @dev Must be called by the current unstaked fee manager\n    /// @param _defaultUnstakedFee The new defaultUnstakedFee of the factory\n    function setDefaultUnstakedFee(uint24 _defaultUnstakedFee) external;\n\n    /// @notice Enables a certain tickSpacing\n    /// @dev Tick spacings may never be removed once enabled\n    /// @param tickSpacing The spacing between ticks to be enforced in the pool\n    /// @param fee The default fee associated with a given tick spacing\n    function enableTickSpacing(int24 tickSpacing, uint24 fee) external;\n}\n"
			},
			"contracts/core/libraries/SqrtPriceMath.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport \"./LowGasSafeMath.sol\";\nimport \"./SafeCast.sol\";\n\nimport \"./FullMath.sol\";\nimport \"./UnsafeMath.sol\";\nimport \"./FixedPoint96.sol\";\n\n/// @title Functions based on Q64.96 sqrt price and liquidity\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\nlibrary SqrtPriceMath {\n    using LowGasSafeMath for uint256;\n    using SafeCast for uint256;\n\n    /// @notice Gets the next sqrt price given a delta of token0\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\n    /// price less in order to not send too much output.\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\n    /// @param liquidity The amount of usable liquidity\n    /// @param amount How much of token0 to add or remove from virtual reserves\n    /// @param add Whether to add or remove the amount of token0\n    /// @return The price after adding or removing amount, depending on add\n    function getNextSqrtPriceFromAmount0RoundingUp(uint160 sqrtPX96, uint128 liquidity, uint256 amount, bool add)\n        internal\n        pure\n        returns (uint160)\n    {\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\n        if (amount == 0) return sqrtPX96;\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\n\n        if (add) {\n            uint256 product;\n            if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\n                uint256 denominator = numerator1 + product;\n                if (denominator >= numerator1) {\n                    // always fits in 160 bits\n                    return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\n                }\n            }\n\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\n        } else {\n            uint256 product;\n            // if the product overflows, we know the denominator underflows\n            // in addition, we must check that the denominator does not underflow\n            require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\n            uint256 denominator = numerator1 - product;\n            return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\n        }\n    }\n\n    /// @notice Gets the next sqrt price given a delta of token1\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\n    /// price less in order to not send too much output.\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\n    /// @param liquidity The amount of usable liquidity\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\n    /// @param add Whether to add, or remove, the amount of token1\n    /// @return The price after adding or removing `amount`\n    function getNextSqrtPriceFromAmount1RoundingDown(uint160 sqrtPX96, uint128 liquidity, uint256 amount, bool add)\n        internal\n        pure\n        returns (uint160)\n    {\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\n        // in both cases, avoid a mulDiv for most inputs\n        if (add) {\n            uint256 quotient = (\n                amount <= type(uint160).max\n                    ? (amount << FixedPoint96.RESOLUTION) / liquidity\n                    : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\n            );\n\n            return uint256(sqrtPX96).add(quotient).toUint160();\n        } else {\n            uint256 quotient = (\n                amount <= type(uint160).max\n                    ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\n                    : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\n            );\n\n            require(sqrtPX96 > quotient);\n            // always fits 160 bits\n            return uint160(sqrtPX96 - quotient);\n        }\n    }\n\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\n    /// @param liquidity The amount of usable liquidity\n    /// @param amountIn How much of token0, or token1, is being swapped in\n    /// @param zeroForOne Whether the amount in is token0 or token1\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\n    function getNextSqrtPriceFromInput(uint160 sqrtPX96, uint128 liquidity, uint256 amountIn, bool zeroForOne)\n        internal\n        pure\n        returns (uint160 sqrtQX96)\n    {\n        require(sqrtPX96 > 0);\n        require(liquidity > 0);\n\n        // round to make sure that we don't pass the target price\n        return zeroForOne\n            ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\n            : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\n    }\n\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\n    /// @param sqrtPX96 The starting price before accounting for the output amount\n    /// @param liquidity The amount of usable liquidity\n    /// @param amountOut How much of token0, or token1, is being swapped out\n    /// @param zeroForOne Whether the amount out is token0 or token1\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\n    function getNextSqrtPriceFromOutput(uint160 sqrtPX96, uint128 liquidity, uint256 amountOut, bool zeroForOne)\n        internal\n        pure\n        returns (uint160 sqrtQX96)\n    {\n        require(sqrtPX96 > 0);\n        require(liquidity > 0);\n\n        // round to make sure that we pass the target price\n        return zeroForOne\n            ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\n            : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\n    }\n\n    /// @notice Gets the amount0 delta between two prices\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The amount of usable liquidity\n    /// @param roundUp Whether to round the amount up or down\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\n    function getAmount0Delta(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity, bool roundUp)\n        internal\n        pure\n        returns (uint256 amount0)\n    {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\n\n        require(sqrtRatioAX96 > 0);\n\n        return roundUp\n            ? UnsafeMath.divRoundingUp(FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96), sqrtRatioAX96)\n            : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\n    }\n\n    /// @notice Gets the amount1 delta between two prices\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The amount of usable liquidity\n    /// @param roundUp Whether to round the amount up, or down\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\n    function getAmount1Delta(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity, bool roundUp)\n        internal\n        pure\n        returns (uint256 amount1)\n    {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        return roundUp\n            ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\n            : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\n    }\n\n    /// @notice Helper that gets signed token0 delta\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\n    function getAmount0Delta(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, int128 liquidity)\n        internal\n        pure\n        returns (int256 amount0)\n    {\n        return liquidity < 0\n            ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\n            : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\n    }\n\n    /// @notice Helper that gets signed token1 delta\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\n    function getAmount1Delta(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, int128 liquidity)\n        internal\n        pure\n        returns (int256 amount1)\n    {\n        return liquidity < 0\n            ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\n            : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\n    }\n}\n"
			},
			"contracts/core/libraries/LiquidityAmounts.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\nimport \"contracts/core/libraries/FullMath.sol\";\r\nimport \"contracts/core/libraries/FixedPoint96.sol\";\r\n\r\n/// @title Liquidity amount functions\r\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\r\nlibrary LiquidityAmounts {\r\n    /// @notice Downcasts uint256 to uint128\r\n    /// @param x The uint258 to be downcasted\r\n    /// @return y The passed value, downcasted to uint128\r\n    function toUint128(uint256 x) private pure returns (uint128 y) {\r\n        require((y = uint128(x)) == x);\r\n    }\r\n\r\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\r\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\r\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\r\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\r\n    /// @param amount0 The amount0 being sent in\r\n    /// @return liquidity The amount of returned liquidity\r\n    function getLiquidityForAmount0(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint256 amount0)\r\n        internal\r\n        pure\r\n        returns (uint128 liquidity)\r\n    {\r\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\r\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\r\n    }\r\n\r\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\r\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\r\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\r\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\r\n    /// @param amount1 The amount1 being sent in\r\n    /// @return liquidity The amount of returned liquidity\r\n    function getLiquidityForAmount1(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint256 amount1)\r\n        internal\r\n        pure\r\n        returns (uint128 liquidity)\r\n    {\r\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n        return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\r\n    }\r\n\r\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\r\n    /// pool prices and the prices at the tick boundaries\r\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\r\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\r\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\r\n    /// @param amount0 The amount of token0 being sent in\r\n    /// @param amount1 The amount of token1 being sent in\r\n    /// @return liquidity The maximum amount of liquidity received\r\n    function getLiquidityForAmounts(\r\n        uint160 sqrtRatioX96,\r\n        uint160 sqrtRatioAX96,\r\n        uint160 sqrtRatioBX96,\r\n        uint256 amount0,\r\n        uint256 amount1\r\n    ) internal pure returns (uint128 liquidity) {\r\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n\r\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\r\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\r\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\r\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\r\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\r\n\r\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\r\n        } else {\r\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\r\n        }\r\n    }\r\n\r\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\r\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\r\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\r\n    /// @param liquidity The liquidity being valued\r\n    /// @return amount0 The amount of token0\r\n    function getAmount0ForLiquidity(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity)\r\n        internal\r\n        pure\r\n        returns (uint256 amount0)\r\n    {\r\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n\r\n        return FullMath.mulDiv(\r\n            uint256(liquidity) << FixedPoint96.RESOLUTION, sqrtRatioBX96 - sqrtRatioAX96, sqrtRatioBX96\r\n        ) / sqrtRatioAX96;\r\n    }\r\n\r\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\r\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\r\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\r\n    /// @param liquidity The liquidity being valued\r\n    /// @return amount1 The amount of token1\r\n    function getAmount1ForLiquidity(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity)\r\n        internal\r\n        pure\r\n        returns (uint256 amount1)\r\n    {\r\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n\r\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\r\n    }\r\n\r\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\r\n    /// pool prices and the prices at the tick boundaries\r\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\r\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\r\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\r\n    /// @param liquidity The liquidity being valued\r\n    /// @return amount0 The amount of token0\r\n    /// @return amount1 The amount of token1\r\n    function getAmountsForLiquidity(\r\n        uint160 sqrtRatioX96,\r\n        uint160 sqrtRatioAX96,\r\n        uint160 sqrtRatioBX96,\r\n        uint128 liquidity\r\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\r\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n\r\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\r\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\r\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\r\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\r\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\r\n        } else {\r\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\r\n        }\r\n    }\r\n}\r\n"
			},
			"contracts/core/libraries/LiquidityMath.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Math library for liquidity\nlibrary LiquidityMath {\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\n    /// @param x The liquidity before change\n    /// @param y The delta by which liquidity should be changed\n    /// @return z The liquidity delta\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\n        if (y < 0) {\n            require((z = x - uint128(-y)) < x, \"LS\");\n        } else {\n            require((z = x + uint128(y)) >= x, \"LA\");\n        }\n    }\n}\n"
			},
			"contracts/core/libraries/TickMath.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0 <0.8.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n        require(absTick <= uint256(MAX_TICK), \"T\");\n\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, \"R\");\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n    }\n}\n"
			},
			"contracts/core/libraries/TransferHelper.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport \"../interfaces/IERC20Minimal.sol\";\n\n/// @title TransferHelper\n/// @notice Contains helper methods for interacting with ERC20 tokens that do not consistently return true/false\nlibrary TransferHelper {\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Calls transfer on token contract, errors with TF if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(address token, address to, uint256 value) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20Minimal.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TF\");\n    }\n}\n"
			},
			"contracts/core/libraries/FixedPoint128.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.4.0;\n\n/// @title FixedPoint128\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\nlibrary FixedPoint128 {\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\n}\n"
			},
			"contracts/core/libraries/FullMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.0 <0.8.0;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = a * b\n        // Compute the product mod 2**256 and mod 2**256 - 1\n        // then use the Chinese Remainder Theorem to reconstruct\n        // the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2**256 + prod0\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(a, b, not(0))\n            prod0 := mul(a, b)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division\n        if (prod1 == 0) {\n            require(denominator > 0);\n            assembly {\n                result := div(prod0, denominator)\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2**256.\n        // Also prevents denominator == 0\n        require(denominator > prod1);\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0]\n        // Compute remainder using mulmod\n        uint256 remainder;\n        assembly {\n            remainder := mulmod(a, b, denominator)\n        }\n        // Subtract 256 bit number from 512 bit number\n        assembly {\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator\n        // Compute largest power of two divisor of denominator.\n        // Always >= 1.\n        uint256 twos = -denominator & denominator;\n        // Divide denominator by power of two\n        assembly {\n            denominator := div(denominator, twos)\n        }\n\n        // Divide [prod1 prod0] by the factors of two\n        assembly {\n            prod0 := div(prod0, twos)\n        }\n        // Shift in bits from prod1 into prod0. For this we need\n        // to flip `twos` such that it is 2**256 / twos.\n        // If twos is zero, then it becomes one\n        assembly {\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        prod0 |= prod1 * twos;\n\n        // Invert denominator mod 2**256\n        // Now that denominator is an odd number, it has an inverse\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n        // Compute the inverse by starting with a seed that is correct\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\n        uint256 inv = (3 * denominator) ^ 2;\n        // Now use Newton-Raphson iteration to improve the precision.\n        // Thanks to Hensel's lifting lemma, this also works in modular\n        // arithmetic, doubling the correct bits in each step.\n        inv *= 2 - denominator * inv; // inverse mod 2**8\n        inv *= 2 - denominator * inv; // inverse mod 2**16\n        inv *= 2 - denominator * inv; // inverse mod 2**32\n        inv *= 2 - denominator * inv; // inverse mod 2**64\n        inv *= 2 - denominator * inv; // inverse mod 2**128\n        inv *= 2 - denominator * inv; // inverse mod 2**256\n\n        // Because the division is now exact we can divide by multiplying\n        // with the modular inverse of denominator. This will give us the\n        // correct result modulo 2**256. Since the precoditions guarantee\n        // that the outcome is less than 2**256, this is the final result.\n        // We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inv;\n        return result;\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\n        result = mulDiv(a, b, denominator);\n        if (mulmod(a, b, denominator) > 0) {\n            require(result < type(uint256).max);\n            result++;\n        }\n    }\n}\n"
			},
			"contracts/core/libraries/Position.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0 <0.8.0;\n\nimport \"./FullMath.sol\";\nimport \"./FixedPoint128.sol\";\nimport \"./LiquidityMath.sol\";\n\n/// @title Position\n/// @notice Positions represent an owner address' liquidity between a lower and upper tick boundary\n/// @dev Positions store additional state for tracking fees owed to the position\nlibrary Position {\n    // info stored for each user's position\n    struct Info {\n        // the amount of liquidity owned by this position\n        uint128 liquidity;\n        // fee growth per unit of liquidity as of the last update to liquidity or fees owed\n        uint256 feeGrowthInside0LastX128;\n        uint256 feeGrowthInside1LastX128;\n        // the fees owed to the position owner in token0/token1\n        uint128 tokensOwed0;\n        uint128 tokensOwed1;\n    }\n\n    /// @notice Returns the Info struct of a position, given an owner and position boundaries\n    /// @param self The mapping containing all user positions\n    /// @param owner The address of the position owner\n    /// @param tickLower The lower tick boundary of the position\n    /// @param tickUpper The upper tick boundary of the position\n    /// @return position The position info struct of the given owners' position\n    function get(mapping(bytes32 => Info) storage self, address owner, int24 tickLower, int24 tickUpper)\n        internal\n        view\n        returns (Position.Info storage position)\n    {\n        position = self[keccak256(abi.encodePacked(owner, tickLower, tickUpper))];\n    }\n\n    /// @notice Credits accumulated fees to a user's position\n    /// @param self The individual position to update\n    /// @param liquidityDelta The change in pool liquidity as a result of the position update\n    /// @param feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries\n    /// @param feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries\n    /// @param staked Signifies if the position is staked in the gauge or not\n    function update(\n        Info storage self,\n        int128 liquidityDelta,\n        uint256 feeGrowthInside0X128,\n        uint256 feeGrowthInside1X128,\n        bool staked\n    ) internal {\n        Info memory _self = self;\n\n        uint128 liquidityNext;\n        if (liquidityDelta == 0) {\n            require(_self.liquidity > 0, \"NP\"); // disallow pokes for 0 liquidity positions\n            liquidityNext = _self.liquidity;\n        } else {\n            liquidityNext = LiquidityMath.addDelta(_self.liquidity, liquidityDelta);\n        }\n\n        uint128 tokensOwed0;\n        uint128 tokensOwed1;\n        if (!staked) {\n            // calculate accumulated fees\n            tokensOwed0 = uint128(\n                FullMath.mulDiv(\n                    feeGrowthInside0X128 - _self.feeGrowthInside0LastX128, _self.liquidity, FixedPoint128.Q128\n                )\n            );\n            tokensOwed1 = uint128(\n                FullMath.mulDiv(\n                    feeGrowthInside1X128 - _self.feeGrowthInside1LastX128, _self.liquidity, FixedPoint128.Q128\n                )\n            );\n        }\n\n        // update the position\n        if (liquidityDelta != 0) self.liquidity = liquidityNext;\n        self.feeGrowthInside0LastX128 = feeGrowthInside0X128;\n        self.feeGrowthInside1LastX128 = feeGrowthInside1X128;\n        if (tokensOwed0 > 0 || tokensOwed1 > 0) {\n            // overflow is acceptable, have to withdraw before you hit type(uint128).max fees\n            self.tokensOwed0 += tokensOwed0;\n            self.tokensOwed1 += tokensOwed1;\n        }\n    }\n}\n"
			},
			"contracts/core/libraries/TickBitmap.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport \"./BitMath.sol\";\n\n/// @title Packed tick initialized state library\n/// @notice Stores a packed mapping of tick index to its initialized state\n/// @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\nlibrary TickBitmap {\n    /// @notice Computes the position in the mapping where the initialized bit for a tick lives\n    /// @param tick The tick for which to compute the position\n    /// @return wordPos The key in the mapping containing the word in which the bit is stored\n    /// @return bitPos The bit position in the word where the flag is stored\n    function position(int24 tick) private pure returns (int16 wordPos, uint8 bitPos) {\n        wordPos = int16(tick >> 8);\n        bitPos = uint8(tick % 256);\n    }\n\n    /// @notice Flips the initialized state for a given tick from false to true, or vice versa\n    /// @param self The mapping in which to flip the tick\n    /// @param tick The tick to flip\n    /// @param tickSpacing The spacing between usable ticks\n    function flipTick(mapping(int16 => uint256) storage self, int24 tick, int24 tickSpacing) internal {\n        require(tick % tickSpacing == 0); // ensure that the tick is spaced\n        (int16 wordPos, uint8 bitPos) = position(tick / tickSpacing);\n        uint256 mask = 1 << bitPos;\n        self[wordPos] ^= mask;\n    }\n\n    /// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\n    /// to the left (less than or equal to) or right (greater than) of the given tick\n    /// @param self The mapping in which to compute the next initialized tick\n    /// @param tick The starting tick\n    /// @param tickSpacing The spacing between usable ticks\n    /// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\n    /// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\n    /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\n    function nextInitializedTickWithinOneWord(\n        mapping(int16 => uint256) storage self,\n        int24 tick,\n        int24 tickSpacing,\n        bool lte\n    ) internal view returns (int24 next, bool initialized) {\n        int24 compressed = tick / tickSpacing;\n        if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\n\n        if (lte) {\n            (int16 wordPos, uint8 bitPos) = position(compressed);\n            // all the 1s at or to the right of the current bitPos\n            uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\n            uint256 masked = self[wordPos] & mask;\n\n            // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\n            initialized = masked != 0;\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\n            next = initialized\n                ? (compressed - int24(bitPos - BitMath.mostSignificantBit(masked))) * tickSpacing\n                : (compressed - int24(bitPos)) * tickSpacing;\n        } else {\n            // start from the word of the next tick, since the current tick state doesn't matter\n            (int16 wordPos, uint8 bitPos) = position(compressed + 1);\n            // all the 1s at or to the left of the bitPos\n            uint256 mask = ~((1 << bitPos) - 1);\n            uint256 masked = self[wordPos] & mask;\n\n            // if there are no initialized ticks to the left of the current tick, return leftmost in the word\n            initialized = masked != 0;\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\n            next = initialized\n                ? (compressed + 1 + int24(BitMath.leastSignificantBit(masked) - bitPos)) * tickSpacing\n                : (compressed + 1 + int24(type(uint8).max - bitPos)) * tickSpacing;\n        }\n    }\n}\n"
			},
			"contracts/core/libraries/Tick.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0 <0.8.0;\n\nimport \"./LowGasSafeMath.sol\";\nimport \"./SafeCast.sol\";\n\nimport \"./TickMath.sol\";\nimport \"./LiquidityMath.sol\";\n\n/// @title Tick\n/// @notice Contains functions for managing tick processes and relevant calculations\nlibrary Tick {\n    using LowGasSafeMath for int256;\n    using SafeCast for int256;\n\n    // info stored for each initialized individual tick\n    struct Info {\n        // the total position liquidity that references this tick\n        // includes both staked and unstaked liquidity\n        uint128 liquidityGross;\n        // amount of net liquidity added (subtracted) when tick is crossed from left to right (right to left)\n        // includes both staked and unstaked liquidity\n        int128 liquidityNet;\n        // amount of net staked liquidity added (subtracted) when tick is crossed from left to right (right to left)\n        int128 stakedLiquidityNet;\n        // fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)\n        // only has relative meaning, not absolute — the value depends on when the tick is initialized\n        uint256 feeGrowthOutside0X128;\n        uint256 feeGrowthOutside1X128;\n        // reward growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)\n        // only has relative meaning, not absolute — the value depends on when the tick is initialized\n        uint256 rewardGrowthOutsideX128;\n        // the cumulative tick value on the other side of the tick\n        int56 tickCumulativeOutside;\n        // the seconds per unit of liquidity on the _other_ side of this tick (relative to the current tick)\n        // only has relative meaning, not absolute — the value depends on when the tick is initialized\n        uint160 secondsPerLiquidityOutsideX128;\n        // the seconds spent on the other side of the tick (relative to the current tick)\n        // only has relative meaning, not absolute — the value depends on when the tick is initialized\n        uint32 secondsOutside;\n        // true iff the tick is initialized, i.e. the value is exactly equivalent to the expression liquidityGross != 0\n        // these 8 bits are set to prevent fresh sstores when crossing newly initialized ticks\n        bool initialized;\n    }\n\n    struct LiquidityNets {\n        int128 liquidityNet;\n        int128 stakedLiquidityNet;\n    }\n\n    /// @notice Derives max liquidity per tick from given tick spacing\n    /// @dev Executed within the pool constructor\n    /// @param tickSpacing The amount of required tick separation, realized in multiples of `tickSpacing`\n    ///     e.g., a tickSpacing of 3 requires ticks to be initialized every 3rd tick i.e., ..., -6, -3, 0, 3, 6, ...\n    /// @return The max liquidity per tick\n    function tickSpacingToMaxLiquidityPerTick(int24 tickSpacing) internal pure returns (uint128) {\n        int24 minTick = (TickMath.MIN_TICK / tickSpacing) * tickSpacing;\n        int24 maxTick = (TickMath.MAX_TICK / tickSpacing) * tickSpacing;\n        uint24 numTicks = uint24((maxTick - minTick) / tickSpacing) + 1;\n        return type(uint128).max / numTicks;\n    }\n\n    /// @notice Retrieves fee growth data\n    /// @param self The mapping containing all tick information for initialized ticks\n    /// @param tickLower The lower tick boundary of the position\n    /// @param tickUpper The upper tick boundary of the position\n    /// @param tickCurrent The current tick\n    /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\n    /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\n    /// @return feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries\n    /// @return feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries\n    function getFeeGrowthInside(\n        mapping(int24 => Tick.Info) storage self,\n        int24 tickLower,\n        int24 tickUpper,\n        int24 tickCurrent,\n        uint256 feeGrowthGlobal0X128,\n        uint256 feeGrowthGlobal1X128\n    ) internal view returns (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) {\n        Info storage lower = self[tickLower];\n        Info storage upper = self[tickUpper];\n\n        // calculate fee growth below\n        uint256 feeGrowthBelow0X128;\n        uint256 feeGrowthBelow1X128;\n        if (tickCurrent >= tickLower) {\n            feeGrowthBelow0X128 = lower.feeGrowthOutside0X128;\n            feeGrowthBelow1X128 = lower.feeGrowthOutside1X128;\n        } else {\n            feeGrowthBelow0X128 = feeGrowthGlobal0X128 - lower.feeGrowthOutside0X128;\n            feeGrowthBelow1X128 = feeGrowthGlobal1X128 - lower.feeGrowthOutside1X128;\n        }\n\n        // calculate fee growth above\n        uint256 feeGrowthAbove0X128;\n        uint256 feeGrowthAbove1X128;\n        if (tickCurrent < tickUpper) {\n            feeGrowthAbove0X128 = upper.feeGrowthOutside0X128;\n            feeGrowthAbove1X128 = upper.feeGrowthOutside1X128;\n        } else {\n            feeGrowthAbove0X128 = feeGrowthGlobal0X128 - upper.feeGrowthOutside0X128;\n            feeGrowthAbove1X128 = feeGrowthGlobal1X128 - upper.feeGrowthOutside1X128;\n        }\n\n        feeGrowthInside0X128 = feeGrowthGlobal0X128 - feeGrowthBelow0X128 - feeGrowthAbove0X128;\n        feeGrowthInside1X128 = feeGrowthGlobal1X128 - feeGrowthBelow1X128 - feeGrowthAbove1X128;\n    }\n\n    function getRewardGrowthInside(\n        mapping(int24 => Tick.Info) storage self,\n        int24 tickLower,\n        int24 tickUpper,\n        int24 tickCurrent,\n        uint256 rewardGrowthGlobalX128\n    ) internal view returns (uint256 rewardGrowthInsideX128) {\n        Info storage lower = self[tickLower];\n        Info storage upper = self[tickUpper];\n\n        // calculate reward growth below\n        uint256 rewardGrowthBelowX128;\n        if (tickCurrent >= tickLower) {\n            rewardGrowthBelowX128 = lower.rewardGrowthOutsideX128;\n        } else {\n            rewardGrowthBelowX128 = rewardGrowthGlobalX128 - lower.rewardGrowthOutsideX128;\n        }\n\n        // calculate reward growth above\n        uint256 rewardGrowthAboveX128;\n        if (tickCurrent < tickUpper) {\n            rewardGrowthAboveX128 = upper.rewardGrowthOutsideX128;\n        } else {\n            rewardGrowthAboveX128 = rewardGrowthGlobalX128 - upper.rewardGrowthOutsideX128;\n        }\n\n        rewardGrowthInsideX128 = rewardGrowthGlobalX128 - rewardGrowthBelowX128 - rewardGrowthAboveX128;\n    }\n\n    /// @notice Updates a tick and returns true if the tick was flipped from initialized to uninitialized, or vice versa\n    /// @param self The mapping containing all tick information for initialized ticks\n    /// @param tick The tick that will be updated\n    /// @param tickCurrent The current tick\n    /// @param liquidityDelta A new amount of liquidity to be added (subtracted) when tick is crossed from left to right (right to left)\n    /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\n    /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\n    /// @param rewardGrowthGlobalX128 The all-time global reward growth, per unit of liquidity\n    /// @param secondsPerLiquidityCumulativeX128 The all-time seconds per max(1, liquidity) of the pool\n    /// @param tickCumulative The tick * time elapsed since the pool was first initialized\n    /// @param time The current block timestamp cast to a uint32\n    /// @param upper true for updating a position's upper tick, or false for updating a position's lower tick\n    /// @param maxLiquidity The maximum liquidity allocation for a single tick\n    /// @return flipped Whether the tick was flipped from initialized to uninitialized, or vice versa\n    function update(\n        mapping(int24 => Tick.Info) storage self,\n        int24 tick,\n        int24 tickCurrent,\n        int128 liquidityDelta,\n        uint256 feeGrowthGlobal0X128,\n        uint256 feeGrowthGlobal1X128,\n        uint256 rewardGrowthGlobalX128,\n        uint160 secondsPerLiquidityCumulativeX128,\n        int56 tickCumulative,\n        uint32 time,\n        bool upper,\n        uint128 maxLiquidity\n    ) internal returns (bool flipped) {\n        Tick.Info storage info = self[tick];\n\n        uint128 liquidityGrossBefore = info.liquidityGross;\n        uint128 liquidityGrossAfter = LiquidityMath.addDelta(liquidityGrossBefore, liquidityDelta);\n\n        require(liquidityGrossAfter <= maxLiquidity, \"LO\");\n\n        flipped = (liquidityGrossAfter == 0) != (liquidityGrossBefore == 0);\n\n        if (liquidityGrossBefore == 0) {\n            // by convention, we assume that all growth before a tick was initialized happened _below_ the tick\n            if (tick <= tickCurrent) {\n                info.feeGrowthOutside0X128 = feeGrowthGlobal0X128;\n                info.feeGrowthOutside1X128 = feeGrowthGlobal1X128;\n                info.rewardGrowthOutsideX128 = rewardGrowthGlobalX128;\n                info.secondsPerLiquidityOutsideX128 = secondsPerLiquidityCumulativeX128;\n                info.tickCumulativeOutside = tickCumulative;\n                info.secondsOutside = time;\n            }\n            info.initialized = true;\n        }\n\n        info.liquidityGross = liquidityGrossAfter;\n\n        // when the lower (upper) tick is crossed left to right (right to left), liquidity must be added (removed)\n        info.liquidityNet = upper\n            ? int256(info.liquidityNet).sub(liquidityDelta).toInt128()\n            : int256(info.liquidityNet).add(liquidityDelta).toInt128();\n    }\n\n    /// @notice Updates the staked liquidity component of a tick. Assumes tick is already initialized with an existing position.\n    /// @notice We reuse existing liquidity for staking, so there is no change in liquidity\n    /// @param self The mapping containing all tick information for initialized ticks\n    /// @param tick The tick that will be updated\n    /// @param stakedLiquidityDelta The amount of staked liquidity to be added (subtracted) when tick is crossed from left to right (right to left)\n    /// @param upper true for updating a position's upper tick, or false for updating a position's lower tick\n    function updateStake(mapping(int24 => Tick.Info) storage self, int24 tick, int128 stakedLiquidityDelta, bool upper)\n        internal\n    {\n        Tick.Info storage info = self[tick];\n        // when the lower (upper) tick is crossed left to right (right to left), staked liquidity must be added (removed)\n        info.stakedLiquidityNet = upper\n            ? int256(info.stakedLiquidityNet).sub(stakedLiquidityDelta).toInt128()\n            : int256(info.stakedLiquidityNet).add(stakedLiquidityDelta).toInt128();\n    }\n\n    /// @notice Clears tick data\n    /// @param self The mapping containing all initialized tick information for initialized ticks\n    /// @param tick The tick that will be cleared\n    function clear(mapping(int24 => Tick.Info) storage self, int24 tick) internal {\n        delete self[tick];\n    }\n\n    /// @notice Transitions to next tick as needed by price movement\n    /// @param self The mapping containing all tick information for initialized ticks\n    /// @param tick The destination tick of the transition\n    /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\n    /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\n    /// @param secondsPerLiquidityCumulativeX128 The current seconds per liquidity\n    /// @param tickCumulative The tick * time elapsed since the pool was first initialized\n    /// @param time The current block.timestamp\n    /// @param rewardGrowthGlobalX128 The all-time global reward growth, per unit of liquidity\n    /// @return nets The amount of liquidity and staked liquidity added (subtracted) when tick is crossed from left to right (right to left)\n    function cross(\n        mapping(int24 => Tick.Info) storage self,\n        int24 tick,\n        uint256 feeGrowthGlobal0X128,\n        uint256 feeGrowthGlobal1X128,\n        uint160 secondsPerLiquidityCumulativeX128,\n        int56 tickCumulative,\n        uint32 time,\n        uint256 rewardGrowthGlobalX128\n    ) internal returns (LiquidityNets memory nets) {\n        Tick.Info storage info = self[tick];\n        info.feeGrowthOutside0X128 = feeGrowthGlobal0X128 - info.feeGrowthOutside0X128;\n        info.feeGrowthOutside1X128 = feeGrowthGlobal1X128 - info.feeGrowthOutside1X128;\n        info.rewardGrowthOutsideX128 = rewardGrowthGlobalX128 - info.rewardGrowthOutsideX128;\n        info.secondsPerLiquidityOutsideX128 = secondsPerLiquidityCumulativeX128 - info.secondsPerLiquidityOutsideX128;\n        info.tickCumulativeOutside = tickCumulative - info.tickCumulativeOutside;\n        info.secondsOutside = time - info.secondsOutside;\n        nets.liquidityNet = info.liquidityNet;\n        nets.stakedLiquidityNet = info.stakedLiquidityNet;\n    }\n}\n"
			},
			"contracts/core/libraries/SafeCast.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Safe casting methods\n/// @notice Contains methods for safely casting between types\nlibrary SafeCast {\n    /// @notice Cast a uint256 to a uint160, revert on overflow\n    /// @param y The uint256 to be downcasted\n    /// @return z The downcasted integer, now type uint160\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\n        require((z = uint160(y)) == y);\n    }\n\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\n    /// @param y The int256 to be downcasted\n    /// @return z The downcasted integer, now type int128\n    function toInt128(int256 y) internal pure returns (int128 z) {\n        require((z = int128(y)) == y);\n    }\n\n    /// @notice Cast a uint256 to a int256, revert on overflow\n    /// @param y The uint256 to be casted\n    /// @return z The casted integer, now type int256\n    function toInt256(uint256 y) internal pure returns (int256 z) {\n        require(y < 2 ** 255);\n        z = int256(y);\n    }\n}\n"
			},
			"contracts/core/libraries/LowGasSafeMath.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.0;\n\n/// @title Optimized overflow and underflow safe math operations\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\nlibrary LowGasSafeMath {\n    /// @notice Returns x + y, reverts if sum overflows uint256\n    /// @param x The augend\n    /// @param y The addend\n    /// @return z The sum of x and y\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x);\n    }\n\n    /// @notice Returns x - y, reverts if underflows\n    /// @param x The minuend\n    /// @param y The subtrahend\n    /// @return z The difference of x and y\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x);\n    }\n\n    /// @notice Returns x * y, reverts if overflows\n    /// @param x The multiplicand\n    /// @param y The multiplier\n    /// @return z The product of x and y\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(x == 0 || (z = x * y) / x == y);\n    }\n\n    /// @notice Returns x + y, reverts if overflows or underflows\n    /// @param x The augend\n    /// @param y The addend\n    /// @return z The sum of x and y\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\n        require((z = x + y) >= x == (y >= 0));\n    }\n\n    /// @notice Returns x - y, reverts if overflows or underflows\n    /// @param x The minuend\n    /// @param y The subtrahend\n    /// @return z The difference of x and y\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\n        require((z = x - y) <= x == (y >= 0));\n    }\n}\n"
			},
			"contracts/core/interfaces/ICLPool.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport \"./pool/ICLPoolConstants.sol\";\nimport \"./pool/ICLPoolState.sol\";\nimport \"./pool/ICLPoolDerivedState.sol\";\nimport \"./pool/ICLPoolActions.sol\";\nimport \"./pool/ICLPoolOwnerActions.sol\";\nimport \"./pool/ICLPoolEvents.sol\";\n\n/// @title The interface for a CL Pool\n/// @notice A CL pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface ICLPool is\n    ICLPoolConstants,\n    ICLPoolState,\n    ICLPoolDerivedState,\n    ICLPoolActions,\n    ICLPoolEvents,\n    ICLPoolOwnerActions\n{}\n"
			},
			"contracts/core/libraries/BitMath.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title BitMath\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\nlibrary BitMath {\n    /// @notice Returns the index of the most significant bit of the number,\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\n    /// @dev The function satisfies the property:\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\n    /// @return r the index of the most significant bit\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\n        require(x > 0);\n\n        if (x >= 0x100000000000000000000000000000000) {\n            x >>= 128;\n            r += 128;\n        }\n        if (x >= 0x10000000000000000) {\n            x >>= 64;\n            r += 64;\n        }\n        if (x >= 0x100000000) {\n            x >>= 32;\n            r += 32;\n        }\n        if (x >= 0x10000) {\n            x >>= 16;\n            r += 16;\n        }\n        if (x >= 0x100) {\n            x >>= 8;\n            r += 8;\n        }\n        if (x >= 0x10) {\n            x >>= 4;\n            r += 4;\n        }\n        if (x >= 0x4) {\n            x >>= 2;\n            r += 2;\n        }\n        if (x >= 0x2) r += 1;\n    }\n\n    /// @notice Returns the index of the least significant bit of the number,\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\n    /// @dev The function satisfies the property:\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\n    /// @return r the index of the least significant bit\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\n        require(x > 0);\n\n        r = 255;\n        if (x & type(uint128).max > 0) {\n            r -= 128;\n        } else {\n            x >>= 128;\n        }\n        if (x & type(uint64).max > 0) {\n            r -= 64;\n        } else {\n            x >>= 64;\n        }\n        if (x & type(uint32).max > 0) {\n            r -= 32;\n        } else {\n            x >>= 32;\n        }\n        if (x & type(uint16).max > 0) {\n            r -= 16;\n        } else {\n            x >>= 16;\n        }\n        if (x & type(uint8).max > 0) {\n            r -= 8;\n        } else {\n            x >>= 8;\n        }\n        if (x & 0xf > 0) {\n            r -= 4;\n        } else {\n            x >>= 4;\n        }\n        if (x & 0x3 > 0) {\n            r -= 2;\n        } else {\n            x >>= 2;\n        }\n        if (x & 0x1 > 0) r -= 1;\n    }\n}\n"
			},
			"contracts/core/libraries/FixedPoint96.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.4.0;\n\n/// @title FixedPoint96\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\n/// @dev Used in SqrtPriceMath.sol\nlibrary FixedPoint96 {\n    uint8 internal constant RESOLUTION = 96;\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\n}\n"
			},
			"contracts/core/libraries/UnsafeMath.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Math functions that do not check inputs or outputs\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\nlibrary UnsafeMath {\n    /// @notice Returns ceil(x / y)\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\n    /// @param x The dividend\n    /// @param y The divisor\n    /// @return z The quotient, ceil(x / y)\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        assembly {\n            z := add(div(x, y), gt(mod(x, y), 0))\n        }\n    }\n}\n"
			},
			"contracts/core/interfaces/pool/ICLPoolEvents.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface ICLPoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld, uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the gauge\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectFees(address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
			},
			"contracts/core/interfaces/pool/ICLPoolOwnerActions.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface ICLPoolOwnerActions {\n    /// @notice Collect the gauge fee accrued to the pool\n    /// @return amount0 The gauge fee collected in token0\n    /// @return amount1 The gauge fee collected in token1\n    function collectFees() external returns (uint128 amount0, uint128 amount1);\n}\n"
			},
			"contracts/core/interfaces/pool/ICLPoolActions.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface ICLPoolActions {\n    /// @notice Initialize function used in proxy deployment\n    /// @dev Can be called once only\n    /// Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @dev not locked because it initializes unlocked\n    /// @param _factory The CL factory contract address\n    /// @param _token0 The first token of the pool by address sort order\n    /// @param _token1 The second token of the pool by address sort order\n    /// @param _tickSpacing The pool tick spacing\n    /// @param _factoryRegistry The address of the factory registry managing the pool factory\n    /// @param _sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    function initialize(\n        address _factory,\n        address _token0,\n        address _token1,\n        int24 _tickSpacing,\n        address _factoryRegistry,\n        uint160 _sqrtPriceX96\n    ) external;\n\n    /// @notice Initialize gauge and nft manager\n    /// @dev Callable only once, by the gauge factory\n    /// @param _gauge The gauge corresponding to this pool\n    /// @param _nft The position manager used for position management\n    function setGaugeAndPositionManager(address _gauge, address _nft) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of ICLMintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(address recipient, int24 tickLower, int24 tickUpper, uint128 amount, bytes calldata data)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @param owner Owner of the position in the pool (nft manager or gauge)\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested,\n        address owner\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(int24 tickLower, int24 tickUpper, uint128 amount)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Burn liquidity from the supplied owner and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @param owner Owner of the position in the pool (nft manager or gauge)\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(int24 tickLower, int24 tickUpper, uint128 amount, address owner)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Convert existing liquidity into staked liquidity\n    /// @notice Only callable by the gauge associated with this pool\n    /// @param stakedLiquidityDelta The amount by which to increase or decrease the staked liquidity\n    /// @param tickLower The lower tick of the position for which to stake liquidity\n    /// @param tickUpper The upper tick of the position for which to stake liquidity\n    /// @param positionUpdate If the nft and gauge position should be updated\n    function stake(int128 stakedLiquidityDelta, int24 tickLower, int24 tickUpper, bool positionUpdate) external;\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of ICLSwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of ICLFlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(address recipient, uint256 amount0, uint256 amount1, bytes calldata data) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n\n    /// @notice Updates rewardGrowthGlobalX128 every time when any tick is crossed,\n    /// or when any position is staked/unstaked from the gauge\n    function updateRewardsGrowthGlobal() external;\n\n    /// @notice Syncs rewards with gauge\n    /// @param rewardRate the rate rewards being distributed during the epoch\n    /// @param rewardReserve the available rewards to be distributed during the epoch\n    /// @param periodFinish the end of the current period of rewards, updated once per epoch\n    function syncReward(uint256 rewardRate, uint256 rewardReserve, uint256 periodFinish) external;\n}\n"
			},
			"contracts/core/interfaces/pool/ICLPoolDerivedState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface ICLPoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (int56 tickCumulativeInside, uint160 secondsPerLiquidityInsideX128, uint32 secondsInside);\n}\n"
			},
			"contracts/core/interfaces/pool/ICLPoolState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface ICLPoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            bool unlocked\n        );\n\n    /// @notice The pool's swap & flash fee in pips, i.e. 1e-6\n    /// @dev Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.\n    /// @return The swap & flash fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool's unstaked fee in pips, i.e. 1e-6\n    /// @dev Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.\n    /// @return The unstaked fee\n    function unstakedFee() external view returns (uint24);\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The reward growth as a Q128.128 rewards of emission collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function rewardGrowthGlobalX128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the gauge\n    /// @dev Gauge fees will never exceed uint128 max in either token\n    function gaugeFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice the emission rate of time-based farming\n    function rewardRate() external view returns (uint256);\n\n    /// @notice acts as a virtual reserve that holds information on how many rewards are yet to be distributed\n    function rewardReserve() external view returns (uint256);\n\n    /// @notice timestamp of the end of the current epoch's rewards\n    function periodFinish() external view returns (uint256);\n\n    /// @notice last time the rewardReserve and rewardRate were updated\n    function lastUpdated() external view returns (uint32);\n\n    /// @notice tracks total rewards distributed when no staked liquidity in active tick for epoch ending at periodFinish\n    /// @notice this amount is rolled over on the next call to notifyRewardAmount\n    /// @dev rollover will always be smaller than the rewards distributed that epoch\n    function rollover() external view returns (uint256);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    /// @dev This value includes staked liquidity\n    function liquidity() external view returns (uint128);\n\n    /// @notice The currently in range staked liquidity available to the pool\n    /// @dev This value has no relationship to the total staked liquidity across all ticks\n    function stakedLiquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// stakedLiquidityNet how much staked liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// rewardGrowthOutsideX128 the reward growth on the other side of the tick from the current tick in emission token\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            int128 stakedLiquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            uint256 rewardGrowthOutsideX128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n\n    /// @notice Returns data about reward growth within a tick range.\n    /// RewardGrowthGlobalX128 can be supplied as a parameter for claimable reward calculations.\n    /// @dev Used in gauge reward/earned calculations\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @param _rewardGrowthGlobalX128 a calculated rewardGrowthGlobalX128 or 0 (in case of 0 it means we use the rewardGrowthGlobalX128 from state)\n    /// @return rewardGrowthInsideX128 The reward growth in the range\n    function getRewardGrowthInside(int24 tickLower, int24 tickUpper, uint256 _rewardGrowthGlobalX128)\n        external\n        view\n        returns (uint256 rewardGrowthInsideX128);\n}\n"
			},
			"contracts/core/interfaces/pool/ICLPoolConstants.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are not defined as immutable (due to proxy pattern) but are effectively immutable.\n/// @notice i.e., the methods will always return the same values\ninterface ICLPoolConstants {\n    /// @notice The contract that deployed the pool, which must adhere to the ICLFactory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The gauge corresponding to this pool\n    /// @return The gauge contract address\n    function gauge() external view returns (address);\n\n    /// @notice The nft manager\n    /// @return The nft manager contract address\n    function nft() external view returns (address);\n\n    /// @notice The factory registry that manages pool <> gauge <> reward factory relationships\n    /// @return The factory registry contract address\n    function factoryRegistry() external view returns (address);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
			},
			"contracts/core/interfaces/IVoter.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity =0.7.6;\npragma abicoder v2;\n\nimport {IVotingEscrow} from \"contracts/core/interfaces/IVotingEscrow.sol\";\nimport {IFactoryRegistry} from \"contracts/core/interfaces/IFactoryRegistry.sol\";\n\ninterface IVoter {\n    function ve() external view returns (IVotingEscrow);\n\n    function vote(uint256 _tokenId, address[] calldata _poolVote, uint256[] calldata _weights) external;\n\n    function gauges(address _pool) external view returns (address);\n\n    function gaugeToFees(address _gauge) external view returns (address);\n\n    function gaugeToBribes(address _gauge) external view returns (address);\n\n    function createGauge(address _poolFactory, address _pool) external returns (address);\n\n    function distribute(address gauge) external;\n\n    function factoryRegistry() external view returns (IFactoryRegistry);\n\n    /// @dev Utility to distribute to gauges of pools in array.\n    /// @param _gauges Array of gauges to distribute to.\n    function distribute(address[] memory _gauges) external;\n\n    function isAlive(address _gauge) external view returns (bool);\n\n    function killGauge(address _gauge) external;\n\n    function emergencyCouncil() external view returns (address);\n\n    /// @notice Claim emissions from gauges.\n    /// @param _gauges Array of gauges to collect emissions from.\n    function claimRewards(address[] memory _gauges) external;\n\n    /// @notice Claim fees for a given NFT.\n    /// @dev Utility to help batch fee claims.\n    /// @param _fees    Array of FeesVotingReward contracts to collect from.\n    /// @param _tokens  Array of tokens that are used as fees.\n    /// @param _tokenId Id of veNFT that you wish to claim fees for.\n    function claimFees(address[] memory _fees, address[][] memory _tokens, uint256 _tokenId) external;\n}\n"
			},
			"contracts/core/interfaces/IVotingEscrow.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity =0.7.6;\n\ninterface IVotingEscrow {\n    function team() external returns (address);\n\n    /// @notice Deposit `_value` tokens for `msg.sender` and lock for `_lockDuration`\n    /// @param _value Amount to deposit\n    /// @param _lockDuration Number of seconds to lock tokens for (rounded down to nearest week)\n    /// @return TokenId of created veNFT\n    function createLock(uint256 _value, uint256 _lockDuration) external returns (uint256);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"contracts/core/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC-721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC-721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/IERC721.sol\":{\"keccak256\":\"0xa5d0054dd7767bd5a6b897102ce1ec058a8d36b0c34f49a394e2b9d302f4700d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://852f1c467f89daa70d729231e543b11c47e2f125202ed123fe9ac9410868fd64\",\"dweb:/ipfs/QmeaFw32FQ9QAXen9EKZkafK4jfXogcEGex4R446DQjJ5i\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/core/INonfungiblePositionManager.sol": {
				"INonfungiblePositionManager": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "DecreaseLiquidity",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "IncreaseLiquidity",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "tokenDescriptor",
									"type": "address"
								}
							],
							"name": "TokenDescriptorChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "TransferOwnership",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint128",
											"name": "amount0Max",
											"type": "uint128"
										},
										{
											"internalType": "uint128",
											"name": "amount1Max",
											"type": "uint128"
										}
									],
									"internalType": "struct INonfungiblePositionManager.CollectParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "uint128",
											"name": "liquidity",
											"type": "uint128"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct INonfungiblePositionManager.DecreaseLiquidityParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "decreaseLiquidity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct INonfungiblePositionManager.IncreaseLiquidityParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "increaseLiquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "token0",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "token1",
											"type": "address"
										},
										{
											"internalType": "int24",
											"name": "tickSpacing",
											"type": "int24"
										},
										{
											"internalType": "int24",
											"name": "tickLower",
											"type": "int24"
										},
										{
											"internalType": "int24",
											"name": "tickUpper",
											"type": "int24"
										},
										{
											"internalType": "uint256",
											"name": "amount0Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint160",
											"name": "sqrtPriceX96",
											"type": "uint160"
										}
									],
									"internalType": "struct INonfungiblePositionManager.MintParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint96",
									"name": "nonce",
									"type": "uint96"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								}
							],
							"name": "setOwner",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_tokenDescriptor",
									"type": "address"
								}
							],
							"name": "setTokenDescriptor",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tokenDescriptor",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Collect(uint256,address,uint256,uint256)": {
								"details": "The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior",
								"params": {
									"amount0": "The amount of token0 owed to the position that was collected",
									"amount1": "The amount of token1 owed to the position that was collected",
									"recipient": "The address of the account that received the collected tokens",
									"tokenId": "The ID of the token for which underlying tokens were collected"
								}
							},
							"DecreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"params": {
									"amount0": "The amount of token0 that was accounted for the decrease in liquidity",
									"amount1": "The amount of token1 that was accounted for the decrease in liquidity",
									"liquidity": "The amount by which liquidity for the NFT position was decreased",
									"tokenId": "The ID of the token for which liquidity was decreased"
								}
							},
							"IncreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"details": "Also emitted when a token is minted",
								"params": {
									"amount0": "The amount of token0 that was paid for the increase in liquidity",
									"amount1": "The amount of token1 that was paid for the increase in liquidity",
									"liquidity": "The amount by which liquidity for the NFT position was increased",
									"tokenId": "The ID of the token for which liquidity was increased"
								}
							},
							"TokenDescriptorChanged(address)": {
								"params": {
									"tokenDescriptor": "Address of the new Token Descriptor"
								}
							},
							"TransferOwnership(address)": {
								"params": {
									"owner": "Address of the new Owner"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"burn(uint256)": {
								"params": {
									"tokenId": "The ID of the token that is being burned"
								}
							},
							"collect((uint256,address,uint128,uint128))": {
								"params": {
									"params": "tokenId The ID of the NFT for which tokens are being collected, recipient The account that should receive the tokens, amount0Max The maximum amount of token0 to collect, amount1Max The maximum amount of token1 to collect"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": {
								"details": "The use of this function can cause a loss to users of the NonfungiblePositionManagerfor tokens that have very high decimals.The amount of tokens necessary for the loss is: 3.4028237e+38.This is equivalent to 1e20 value with 18 decimals.",
								"params": {
									"params": "tokenId The ID of the token for which liquidity is being decreased, amount The amount by which liquidity will be decreased, amount0Min The minimum amount of token0 that should be accounted for the burned liquidity, amount1Min The minimum amount of token1 that should be accounted for the burned liquidity, deadline The time by which the transaction must be included to effect the change"
								},
								"returns": {
									"amount0": "The amount of token0 accounted to the position's tokens owed",
									"amount1": "The amount of token1 accounted to the position's tokens owed"
								}
							},
							"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": {
								"params": {
									"params": "tokenId The ID of the token for which liquidity is being increased, amount0Desired The desired amount of token0 to be spent, amount1Desired The desired amount of token1 to be spent, amount0Min The minimum amount of token0 to spend, which serves as a slippage check, amount1Min The minimum amount of token1 to spend, which serves as a slippage check, deadline The time by which the transaction must be included to effect the change"
								},
								"returns": {
									"amount0": "The amount of token0 to acheive resulting liquidity",
									"amount1": "The amount of token1 to acheive resulting liquidity",
									"liquidity": "The new liquidity amount as a result of the increase"
								}
							},
							"mint((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160))": {
								"details": "Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized a method does not exist, i.e. the pool is assumed to be initialized.",
								"params": {
									"params": "The params necessary to mint a position, encoded as `MintParams` in calldata"
								},
								"returns": {
									"amount0": "The amount of token0",
									"amount1": "The amount of token1",
									"liquidity": "The amount of liquidity for this position",
									"tokenId": "The ID of the token that represents the minted position"
								}
							},
							"positions(uint256)": {
								"details": "Throws if the token ID is not valid.",
								"params": {
									"tokenId": "The ID of the token that represents the position"
								},
								"returns": {
									"feeGrowthInside0LastX128": "The fee growth of token0 as of the last action on the individual position",
									"feeGrowthInside1LastX128": "The fee growth of token1 as of the last action on the individual position",
									"liquidity": "The liquidity of the position",
									"nonce": "The nonce for permits",
									"operator": "The address that is approved for spending",
									"tickLower": "The lower end of the tick range for the position",
									"tickSpacing": "The tick spacing associated with the pool",
									"tickUpper": "The higher end of the tick range for the position",
									"token0": "The address of the token0 for a specific pool",
									"token1": "The address of the token1 for a specific pool",
									"tokensOwed0": "The uncollected amount of token0 owed to the position as of the last computation",
									"tokensOwed1": "The uncollected amount of token1 owed to the position as of the last computation"
								}
							},
							"setOwner(address)": {
								"params": {
									"_owner": "Address of the new Owner to be chosen"
								}
							},
							"setTokenDescriptor(address)": {
								"params": {
									"_tokenDescriptor": "Address of the new Token Descriptor to be chosen"
								}
							}
						},
						"title": "Non-fungible token for positions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"burn(uint256)": "42966c68",
							"collect((uint256,address,uint128,uint128))": "fc6f7865",
							"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": "0c49ccbe",
							"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": "219f5d17",
							"mint((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160))": "b5007d1f",
							"owner()": "8da5cb5b",
							"positions(uint256)": "99fbab88",
							"setOwner(address)": "13af4035",
							"setTokenDescriptor(address)": "b6dc7ea3",
							"tokenDescriptor()": "5a9d7a68"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"DecreaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"IncreaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenDescriptor\",\"type\":\"address\"}],\"name\":\"TokenDescriptorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Max\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Max\",\"type\":\"uint128\"}],\"internalType\":\"struct INonfungiblePositionManager.CollectParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.DecreaseLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"decreaseLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.IncreaseLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"increaseLiquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"internalType\":\"struct INonfungiblePositionManager.MintParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenDescriptor\",\"type\":\"address\"}],\"name\":\"setTokenDescriptor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDescriptor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Collect(uint256,address,uint256,uint256)\":{\"details\":\"The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\",\"params\":{\"amount0\":\"The amount of token0 owed to the position that was collected\",\"amount1\":\"The amount of token1 owed to the position that was collected\",\"recipient\":\"The address of the account that received the collected tokens\",\"tokenId\":\"The ID of the token for which underlying tokens were collected\"}},\"DecreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was accounted for the decrease in liquidity\",\"amount1\":\"The amount of token1 that was accounted for the decrease in liquidity\",\"liquidity\":\"The amount by which liquidity for the NFT position was decreased\",\"tokenId\":\"The ID of the token for which liquidity was decreased\"}},\"IncreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"details\":\"Also emitted when a token is minted\",\"params\":{\"amount0\":\"The amount of token0 that was paid for the increase in liquidity\",\"amount1\":\"The amount of token1 that was paid for the increase in liquidity\",\"liquidity\":\"The amount by which liquidity for the NFT position was increased\",\"tokenId\":\"The ID of the token for which liquidity was increased\"}},\"TokenDescriptorChanged(address)\":{\"params\":{\"tokenDescriptor\":\"Address of the new Token Descriptor\"}},\"TransferOwnership(address)\":{\"params\":{\"owner\":\"Address of the new Owner\"}}},\"kind\":\"dev\",\"methods\":{\"burn(uint256)\":{\"params\":{\"tokenId\":\"The ID of the token that is being burned\"}},\"collect((uint256,address,uint128,uint128))\":{\"params\":{\"params\":\"tokenId The ID of the NFT for which tokens are being collected, recipient The account that should receive the tokens, amount0Max The maximum amount of token0 to collect, amount1Max The maximum amount of token1 to collect\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))\":{\"details\":\"The use of this function can cause a loss to users of the NonfungiblePositionManagerfor tokens that have very high decimals.The amount of tokens necessary for the loss is: 3.4028237e+38.This is equivalent to 1e20 value with 18 decimals.\",\"params\":{\"params\":\"tokenId The ID of the token for which liquidity is being decreased, amount The amount by which liquidity will be decreased, amount0Min The minimum amount of token0 that should be accounted for the burned liquidity, amount1Min The minimum amount of token1 that should be accounted for the burned liquidity, deadline The time by which the transaction must be included to effect the change\"},\"returns\":{\"amount0\":\"The amount of token0 accounted to the position's tokens owed\",\"amount1\":\"The amount of token1 accounted to the position's tokens owed\"}},\"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))\":{\"params\":{\"params\":\"tokenId The ID of the token for which liquidity is being increased, amount0Desired The desired amount of token0 to be spent, amount1Desired The desired amount of token1 to be spent, amount0Min The minimum amount of token0 to spend, which serves as a slippage check, amount1Min The minimum amount of token1 to spend, which serves as a slippage check, deadline The time by which the transaction must be included to effect the change\"},\"returns\":{\"amount0\":\"The amount of token0 to acheive resulting liquidity\",\"amount1\":\"The amount of token1 to acheive resulting liquidity\",\"liquidity\":\"The new liquidity amount as a result of the increase\"}},\"mint((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160))\":{\"details\":\"Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized a method does not exist, i.e. the pool is assumed to be initialized.\",\"params\":{\"params\":\"The params necessary to mint a position, encoded as `MintParams` in calldata\"},\"returns\":{\"amount0\":\"The amount of token0\",\"amount1\":\"The amount of token1\",\"liquidity\":\"The amount of liquidity for this position\",\"tokenId\":\"The ID of the token that represents the minted position\"}},\"positions(uint256)\":{\"details\":\"Throws if the token ID is not valid.\",\"params\":{\"tokenId\":\"The ID of the token that represents the position\"},\"returns\":{\"feeGrowthInside0LastX128\":\"The fee growth of token0 as of the last action on the individual position\",\"feeGrowthInside1LastX128\":\"The fee growth of token1 as of the last action on the individual position\",\"liquidity\":\"The liquidity of the position\",\"nonce\":\"The nonce for permits\",\"operator\":\"The address that is approved for spending\",\"tickLower\":\"The lower end of the tick range for the position\",\"tickSpacing\":\"The tick spacing associated with the pool\",\"tickUpper\":\"The higher end of the tick range for the position\",\"token0\":\"The address of the token0 for a specific pool\",\"token1\":\"The address of the token1 for a specific pool\",\"tokensOwed0\":\"The uncollected amount of token0 owed to the position as of the last computation\",\"tokensOwed1\":\"The uncollected amount of token1 owed to the position as of the last computation\"}},\"setOwner(address)\":{\"params\":{\"_owner\":\"Address of the new Owner to be chosen\"}},\"setTokenDescriptor(address)\":{\"params\":{\"_tokenDescriptor\":\"Address of the new Token Descriptor to be chosen\"}}},\"title\":\"Non-fungible token for positions\",\"version\":1},\"userdoc\":{\"events\":{\"Collect(uint256,address,uint256,uint256)\":{\"notice\":\"Emitted when tokens are collected for a position NFT\"},\"DecreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is decreased for a position NFT\"},\"IncreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is increased for a position NFT\"},\"TokenDescriptorChanged(address)\":{\"notice\":\"Emitted when a new Token Descriptor is set\"},\"TransferOwnership(address)\":{\"notice\":\"Emitted when a new Owner is set\"}},\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens must be collected first.\"},\"collect((uint256,address,uint128,uint128))\":{\"notice\":\"Collects up to a maximum amount of fees owed to a specific position to the recipientUsed to update staked positions before deposit and withdraw\"},\"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))\":{\"notice\":\"Decreases the amount of liquidity in a position and accounts it to the position\"},\"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\"},\"mint((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160))\":{\"notice\":\"Creates a new position wrapped in a NFT\"},\"owner()\":{\"notice\":\"Returns the address of the Owner, that is allowed to set a new TokenDescriptor\"},\"positions(uint256)\":{\"notice\":\"Returns the position information associated with a given token ID.\"},\"setOwner(address)\":{\"notice\":\"Sets a new Owner address\"},\"setTokenDescriptor(address)\":{\"notice\":\"Sets a new Token Descriptor\"},\"tokenDescriptor()\":{\"notice\":\"Returns the address of the Token Descriptor, that handles generating token URIs for Positions\"}},\"notice\":\"Wraps CL positions in a non-fungible token interface which allows for them to be transferred and authorized.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/INonfungiblePositionManager.sol\":\"INonfungiblePositionManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/INonfungiblePositionManager.sol\":{\"keccak256\":\"0xfe7d9ee66050cd945f09f5a54bada3d8eb3b024aedc37b9c521703c61e3ac892\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f5d4cc3b9d41b44b2419a72bc3cd27bc0608e0b488196348b4a2e342d2114467\",\"dweb:/ipfs/QmYKKT5uccPQQSBT54wN2yZV5phs4kPYr76WvUerYiKbWp\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Collect(uint256,address,uint256,uint256)": {
								"notice": "Emitted when tokens are collected for a position NFT"
							},
							"DecreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is decreased for a position NFT"
							},
							"IncreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is increased for a position NFT"
							},
							"TokenDescriptorChanged(address)": {
								"notice": "Emitted when a new Token Descriptor is set"
							},
							"TransferOwnership(address)": {
								"notice": "Emitted when a new Owner is set"
							}
						},
						"kind": "user",
						"methods": {
							"burn(uint256)": {
								"notice": "Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens must be collected first."
							},
							"collect((uint256,address,uint128,uint128))": {
								"notice": "Collects up to a maximum amount of fees owed to a specific position to the recipientUsed to update staked positions before deposit and withdraw"
							},
							"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": {
								"notice": "Decreases the amount of liquidity in a position and accounts it to the position"
							},
							"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": {
								"notice": "Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`"
							},
							"mint((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160))": {
								"notice": "Creates a new position wrapped in a NFT"
							},
							"owner()": {
								"notice": "Returns the address of the Owner, that is allowed to set a new TokenDescriptor"
							},
							"positions(uint256)": {
								"notice": "Returns the position information associated with a given token ID."
							},
							"setOwner(address)": {
								"notice": "Sets a new Owner address"
							},
							"setTokenDescriptor(address)": {
								"notice": "Sets a new Token Descriptor"
							},
							"tokenDescriptor()": {
								"notice": "Returns the address of the Token Descriptor, that handles generating token URIs for Positions"
							}
						},
						"notice": "Wraps CL positions in a non-fungible token interface which allows for them to be transferred and authorized.",
						"version": 1
					}
				}
			},
			"contracts/core/VeloSwapV3.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/VeloSwapV3.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/IERC721.sol\":{\"keccak256\":\"0xa5d0054dd7767bd5a6b897102ce1ec058a8d36b0c34f49a394e2b9d302f4700d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://852f1c467f89daa70d729231e543b11c47e2f125202ed123fe9ac9410868fd64\",\"dweb:/ipfs/QmeaFw32FQ9QAXen9EKZkafK4jfXogcEGex4R446DQjJ5i\"]},\"contracts/core/INonfungiblePositionManager.sol\":{\"keccak256\":\"0xfe7d9ee66050cd945f09f5a54bada3d8eb3b024aedc37b9c521703c61e3ac892\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f5d4cc3b9d41b44b2419a72bc3cd27bc0608e0b488196348b4a2e342d2114467\",\"dweb:/ipfs/QmYKKT5uccPQQSBT54wN2yZV5phs4kPYr76WvUerYiKbWp\"]},\"contracts/core/VeloSwapV3.sol\":{\"keccak256\":\"0xf6eabb16a995b2eab7fd41ddc06e791e9acc70585c315ac75512a01934480e8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3f796bc4eda37d6ee6323786b8dc07689589dbe4d172d960a8a168d881448a97\",\"dweb:/ipfs/QmRDKGCqnb42tY85RP2eMR41qDfc5esGSAQuhm8u8GB1Ab\"]},\"contracts/core/interfaces/ICLFactory.sol\":{\"keccak256\":\"0x2b8dda4776bd095c900e408b2cb21324f72694bed75c69972cd0cb3b16b1bff0\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d37ae64eabec6197ef78c9fd1d4c699398937ca5f3e9f852b11b32082ab2e680\",\"dweb:/ipfs/QmWLLA5bV17Q3fS5fDdukXsaquZ5sNoP8KvBAEfYQHfK3Z\"]},\"contracts/core/interfaces/ICLPool.sol\":{\"keccak256\":\"0x0a11e1392c4b5ef4e47a3415a9b1a2118e9370d52a253dbd1c910bbbb615e91f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://0c04e689e0589f3d67961fd5febcdc0f39c0700aeebef2537ccfb29ddba29de1\",\"dweb:/ipfs/QmbuthGhVJsx45dpgF7p71VSuLshREAsaLJu34HQNgRJoz\"]},\"contracts/core/interfaces/IERC20Minimal.sol\":{\"keccak256\":\"0xa7d3b1fd5f9b9d8848a3ed9d1137eb9c79fa1fa4484347e0f75e285a2e51ea40\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://0a3f7e24d48048a87d541cc014fd51ff4cc3c54aeb78b559d17d75884671fb43\",\"dweb:/ipfs/QmWQC2DiaLXaj3QnwUgvZrKP3xvWVxUjxXDfTMmq6aziYc\"]},\"contracts/core/interfaces/IFactoryRegistry.sol\":{\"keccak256\":\"0xa2dbe19a5c9e221ffd8e4612ee8a4aa1233ab0ad059d4b7d91a8dca1153bcea0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://47a01d481d3a1f5172b8601d267439e24662849d7ebb3e1e66ec46d541e57831\",\"dweb:/ipfs/QmYG56TEtS8dwHrNaHxGrTp8r6cDzRkuGKsHBbiToUVEvX\"]},\"contracts/core/interfaces/IVoter.sol\":{\"keccak256\":\"0x029239646ad77a70b26a702b7e286521a03d5b89d148ff7c13d9bf56f6203187\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://eccfb9403ee8f5e7f604eccb0cafcbd047c1f73371537227011e6d557895fa68\",\"dweb:/ipfs/QmTjDHzzKTzkYhTeiWA1po8YL3USKkkMZSxZixVgsSQcXK\"]},\"contracts/core/interfaces/IVotingEscrow.sol\":{\"keccak256\":\"0x17ee815f29f7bc6a1528203976ed5bfdd945354dd72a7d322e8b092e331beb3d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9845c5056470191730c8a8688663bc9808172e57395c1c6053b5145bf9fd5098\",\"dweb:/ipfs/QmXyoRGbDe6KPngPsKXWZCyLLdmRTFKdhVD5Gf1Y15rG7a\"]},\"contracts/core/interfaces/callback/ICLMintCallback.sol\":{\"keccak256\":\"0x22d4ed43f7d7313e676e80f7ae3315f53c3a84fbf256efae5116ef0aba32c1e8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a21d9618b9a9c2fe2cf35d9d6d608dd02a112bd05e6020fbe71e7e09064c2be7\",\"dweb:/ipfs/QmeBQiyVmxVTPT3ftVFDkiDVgZLMar6SQegryLC7A3jmLr\"]},\"contracts/core/interfaces/callback/ICLSwapCallback.sol\":{\"keccak256\":\"0xb93e1ef2be3090a64b3b024f60253aef64b875f61dffaef8b9231351f8054948\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b16ccd544a6a551c977b7a7d6b6b9704c68e86624d66ecb16d945d3b88239458\",\"dweb:/ipfs/QmPBP5K81AFfHazhbbVb9ZXh6hzKeLqZcEUxnrkKNY7z2L\"]},\"contracts/core/interfaces/pool/ICLPoolActions.sol\":{\"keccak256\":\"0x7699f31261ab40982e34febe16128f1edfdad39075969195301352ea66bcac40\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://074f1c470e11f30d0fae8b95b963c9d19dcbd2c5bd17ad4ebba95c5f0f073044\",\"dweb:/ipfs/QmdDWMUspgBXfLhcxqESez9rSwA8JYNRycmhkhuKoDCWqJ\"]},\"contracts/core/interfaces/pool/ICLPoolConstants.sol\":{\"keccak256\":\"0xfad00d4ca1a40ef27d9614a98483ca67c4491b6f19e376901745c57a6949b512\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://2b5ea522565efb803d146673ff9e37aa090a5abff334fea587da62f4fb5d6647\",\"dweb:/ipfs/QmVRPscHFVjYFvRbJf41zVLtA2jVLbEUH66KGtEzspXnWS\"]},\"contracts/core/interfaces/pool/ICLPoolDerivedState.sol\":{\"keccak256\":\"0xc15e4192a1b7b756cababb994341dc8e78627e1341465e47b1dcb66e9ed54af8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ee4b9269244f6b7ac57cba3b8966ac188220596d16cef71d186f0a6446593b4e\",\"dweb:/ipfs/QmQjyc5ggDgoAv4YbL5uKpNxRDoTvVYw6vePFgu4aNigmQ\"]},\"contracts/core/interfaces/pool/ICLPoolEvents.sol\":{\"keccak256\":\"0x32fbcac8952f1c5c44b466b0e1c28634ce71372c0f65242aa0d821cebdddcc2b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://19f22382292967f97640f84a7edfa01cf7deb303bf882344b9985007f1dcbef2\",\"dweb:/ipfs/Qmej7vWwun9fRBCrcvzPHdZP1jtLSCxJtjTSdkVTcgWeAE\"]},\"contracts/core/interfaces/pool/ICLPoolOwnerActions.sol\":{\"keccak256\":\"0xeafd14ae3e15c9f663507e004c599618bfd5d2a90d58b3b450f9372f9e3f54f8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://49472c8cf06dc7084e22fc57ffdce860aa7a9ff77f12e4bef0c13a078bbc5831\",\"dweb:/ipfs/Qmd29vWULezsJJzhw3wZxsU6Hsng5949v2TiVCbdga4Vqe\"]},\"contracts/core/interfaces/pool/ICLPoolState.sol\":{\"keccak256\":\"0xe57d65825a097d6f0ab55d7ae39b528695b3df65320ed524124fbb55949bfcf9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b63b25beebe612acfd564f40b0d95b3844ee71bf969a3357419e7a54f1ece961\",\"dweb:/ipfs/Qmdk3mNLz3cSZscbXFsJp69gjgxFcBv6K5mdc6tjnmtFSR\"]},\"contracts/core/libraries/BitMath.sol\":{\"keccak256\":\"0x82e425066110aac05ed8a9fc90f9ee85142b6f434769447e49d4438a8d9fcd82\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://77a97078bc992c18c59cb61e07fa4632c8a26b6babf00f3b16eabb5dcaa953b4\",\"dweb:/ipfs/QmTj15ufLWk6AxedSVXBcLp5cYf2DCJAeDi94cVemCkm54\"]},\"contracts/core/libraries/FixedPoint128.sol\":{\"keccak256\":\"0x2d1f4f73ae0d8f0a210b8d30084659b57c56ac8f2f96011fca36f00a6d417178\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://2ba88933f16cd2df398e19c6ad227268f83c03081b70d243c97116d2ed9bc241\",\"dweb:/ipfs/QmTUGxdh8snzEM9VrTSS47StCg9VVWvvLJtJeNnMTFY4xb\"]},\"contracts/core/libraries/FixedPoint96.sol\":{\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://186d3b528866065a5856f96d2aeec698efa99f8da913e9adf34f8cc296cc993d\",\"dweb:/ipfs/QmUAiMvtAQp8c9dy57bqJYzG7hkb1uChiPaQmt264skoqP\"]},\"contracts/core/libraries/FullMath.sol\":{\"keccak256\":\"0x5340256039418f5d03512a44173d3dcf1da277a73a461e06fb5668f49cfc46f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75dee99795d1125875233a7f1d356935099cc97b4085c0e451060d77db85d144\",\"dweb:/ipfs/QmTGqyrxVLQd8TBaarqSQDiYvq1QFutCdmTyXk6JpxzKTN\"]},\"contracts/core/libraries/LiquidityAmounts.sol\":{\"keccak256\":\"0xae7f7b0bbbd864bc1761ec5eac62ec761f2ef168d32ef9e914e337b077ebba4a\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b57b2f04997cd6055404801982f57083f8e9242935b3ebf3bbed032f5035f2f1\",\"dweb:/ipfs/QmdxHVMQEA32jnyroWZG2sk4NPtQFWXPfkDDYvRtK2APFA\"]},\"contracts/core/libraries/LiquidityMath.sol\":{\"keccak256\":\"0xd1059ccc904c8752cec175e8d99e31921c6cd7f3a9c2dd315ce34ac486172ac9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f3630a49e62fa056e2cc4e0278b6f17c5f7e1c9ad2190540cf84c152b58cdef8\",\"dweb:/ipfs/QmdGjKRTNY2qLXJtR2rXU8Nxk4pZwXfbzZYNn3F472QEn6\"]},\"contracts/core/libraries/LowGasSafeMath.sol\":{\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bfc1d5d58e59015086b0e65a6c3a2ddad312e2350480510f6c0c8167f3d71a37\",\"dweb:/ipfs/QmQndULYjFsHKHjMAKLMfc12vWbVB5FawtioHtvwcWRJZp\"]},\"contracts/core/libraries/Position.sol\":{\"keccak256\":\"0xcf1e701e3fae35be8b77ff1217cfdd23d33eb16fd3cec70be8ea6888f87af285\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://c8c89746dd30e76cc029d4e090e402b28aae0659cc71800758b99137dfe85f55\",\"dweb:/ipfs/QmY4Ft1YBLqzqwTgNdpCyRd7WrY78zKgg4Ddv2zqZiBEiE\"]},\"contracts/core/libraries/SafeCast.sol\":{\"keccak256\":\"0xd4c1c1b67f946b077d7c52a158113763a89a210fc2927b8491055a962ecd18c0\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://5344400c74320ca8dbe19241db7ff49babbd6c875c1b561c79d6e4315a9fb5f9\",\"dweb:/ipfs/QmRKCNTbkovxK1WvejXZr3iAHhGN97ZT1yWGsWCJFkrT5X\"]},\"contracts/core/libraries/SqrtPriceMath.sol\":{\"keccak256\":\"0xefd51a282ca9fbc89394776e7f5c6f96fa084ca26b71d99727780332c87d1843\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1f09b719eff523f65d0d11fc476b9735e1390018d5ff585991d0fc644e913ecf\",\"dweb:/ipfs/QmNiZxxQhqteYgJdhCQ3cZ4S7bTQf2AQRUJqMVvPY3doot\"]},\"contracts/core/libraries/Tick.sol\":{\"keccak256\":\"0xb5ebd80c667f4501dba65f4e39e51ff36e5334480849e0ed8604222d20b4ed1e\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://246f590513441ac0f307170f5099e4a0c0b1f579406fc30b909b249858dbd099\",\"dweb:/ipfs/QmaA5uC3eck7nMqyJbpSPEhmXmAXaKLNBSS1Lfnzzzjc95\"]},\"contracts/core/libraries/TickBitmap.sol\":{\"keccak256\":\"0xd829fadfca3f8f5870c877c7eeceb4a692603c16b711174526129987e8745f5b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1d2cbf3802f7e611708a45bc390ee9307d947e49b348294591659444b9989c05\",\"dweb:/ipfs/Qmcny7JNyVYCtcZG3b1BL4ThuKREmAkE9ZKaC3i32pnt7X\"]},\"contracts/core/libraries/TickMath.sol\":{\"keccak256\":\"0x2aa3180a8a59b34a513b948d3f2207b5376de7a2c37065853b7c9fbf0cd3d43f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://c4d46ca5384037f14497c6268342b15becf8bbe1a8fecbcd89ca5b80f41fabc2\",\"dweb:/ipfs/QmanLcdh7EppV4yJ1CdWfPB67es3nEjrDiByAYwgkSE58D\"]},\"contracts/core/libraries/TransferHelper.sol\":{\"keccak256\":\"0x3bbe07a0684d98efe73f7012e446873494e74983e1f75a16d42c25b956d61651\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://78ac9659c70ba3253a6e526ba5a144994fb3d32df2e9537787eeb45aae320aec\",\"dweb:/ipfs/QmbaZRbPP2wFZ9coJd2iyPM37hm3kXzPLuRtL6KKr1MCSL\"]},\"contracts/core/libraries/UnsafeMath.sol\":{\"keccak256\":\"0x5f36d7d16348d8c37fe64fda932018d6e5e8acecd054f0f97d32db62d20c6c88\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://4bd4e817ea3d2c26bb2be7e58db3eaa403119562c18d4c09cc92fb31aa231496\",\"dweb:/ipfs/QmbpjgL8Hf1mhmUyf9hpuPk4noGAggCdTqaRBFKqNF3AQw\"]},\"contracts/libraries/VelodromeTimeLibrary.sol\":{\"keccak256\":\"0x53d5f0b1b864a7dc552ef0291526938a36b1936517d17f62515bb6ba51c1260d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bbc80fd3b18f04224a2a813d6c20a305c7e0479d6414a78d482b45635bc97dba\",\"dweb:/ipfs/QmQFbXCkjzeFgY5M8DyeKZjxeuN8xGdmUmjNH7FNMkLi8T\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"Oracle": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "pooladdress",
									"type": "address"
								}
							],
							"name": "GetPrice",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "price",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "usdAmount",
									"type": "uint256"
								}
							],
							"name": "getAmountsforLiquidity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"GetPrice(address)": "f29d0040",
							"getAmountsforLiquidity(address,uint256)": "941e0eb8"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pooladdress\",\"type\":\"address\"}],\"name\":\"GetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"}],\"name\":\"getAmountsforLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/VeloSwapV3.sol\":\"Oracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/IERC721.sol\":{\"keccak256\":\"0xa5d0054dd7767bd5a6b897102ce1ec058a8d36b0c34f49a394e2b9d302f4700d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://852f1c467f89daa70d729231e543b11c47e2f125202ed123fe9ac9410868fd64\",\"dweb:/ipfs/QmeaFw32FQ9QAXen9EKZkafK4jfXogcEGex4R446DQjJ5i\"]},\"contracts/core/INonfungiblePositionManager.sol\":{\"keccak256\":\"0xfe7d9ee66050cd945f09f5a54bada3d8eb3b024aedc37b9c521703c61e3ac892\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f5d4cc3b9d41b44b2419a72bc3cd27bc0608e0b488196348b4a2e342d2114467\",\"dweb:/ipfs/QmYKKT5uccPQQSBT54wN2yZV5phs4kPYr76WvUerYiKbWp\"]},\"contracts/core/VeloSwapV3.sol\":{\"keccak256\":\"0xf6eabb16a995b2eab7fd41ddc06e791e9acc70585c315ac75512a01934480e8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3f796bc4eda37d6ee6323786b8dc07689589dbe4d172d960a8a168d881448a97\",\"dweb:/ipfs/QmRDKGCqnb42tY85RP2eMR41qDfc5esGSAQuhm8u8GB1Ab\"]},\"contracts/core/interfaces/ICLFactory.sol\":{\"keccak256\":\"0x2b8dda4776bd095c900e408b2cb21324f72694bed75c69972cd0cb3b16b1bff0\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d37ae64eabec6197ef78c9fd1d4c699398937ca5f3e9f852b11b32082ab2e680\",\"dweb:/ipfs/QmWLLA5bV17Q3fS5fDdukXsaquZ5sNoP8KvBAEfYQHfK3Z\"]},\"contracts/core/interfaces/ICLPool.sol\":{\"keccak256\":\"0x0a11e1392c4b5ef4e47a3415a9b1a2118e9370d52a253dbd1c910bbbb615e91f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://0c04e689e0589f3d67961fd5febcdc0f39c0700aeebef2537ccfb29ddba29de1\",\"dweb:/ipfs/QmbuthGhVJsx45dpgF7p71VSuLshREAsaLJu34HQNgRJoz\"]},\"contracts/core/interfaces/IERC20Minimal.sol\":{\"keccak256\":\"0xa7d3b1fd5f9b9d8848a3ed9d1137eb9c79fa1fa4484347e0f75e285a2e51ea40\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://0a3f7e24d48048a87d541cc014fd51ff4cc3c54aeb78b559d17d75884671fb43\",\"dweb:/ipfs/QmWQC2DiaLXaj3QnwUgvZrKP3xvWVxUjxXDfTMmq6aziYc\"]},\"contracts/core/interfaces/IFactoryRegistry.sol\":{\"keccak256\":\"0xa2dbe19a5c9e221ffd8e4612ee8a4aa1233ab0ad059d4b7d91a8dca1153bcea0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://47a01d481d3a1f5172b8601d267439e24662849d7ebb3e1e66ec46d541e57831\",\"dweb:/ipfs/QmYG56TEtS8dwHrNaHxGrTp8r6cDzRkuGKsHBbiToUVEvX\"]},\"contracts/core/interfaces/IVoter.sol\":{\"keccak256\":\"0x029239646ad77a70b26a702b7e286521a03d5b89d148ff7c13d9bf56f6203187\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://eccfb9403ee8f5e7f604eccb0cafcbd047c1f73371537227011e6d557895fa68\",\"dweb:/ipfs/QmTjDHzzKTzkYhTeiWA1po8YL3USKkkMZSxZixVgsSQcXK\"]},\"contracts/core/interfaces/IVotingEscrow.sol\":{\"keccak256\":\"0x17ee815f29f7bc6a1528203976ed5bfdd945354dd72a7d322e8b092e331beb3d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9845c5056470191730c8a8688663bc9808172e57395c1c6053b5145bf9fd5098\",\"dweb:/ipfs/QmXyoRGbDe6KPngPsKXWZCyLLdmRTFKdhVD5Gf1Y15rG7a\"]},\"contracts/core/interfaces/callback/ICLMintCallback.sol\":{\"keccak256\":\"0x22d4ed43f7d7313e676e80f7ae3315f53c3a84fbf256efae5116ef0aba32c1e8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a21d9618b9a9c2fe2cf35d9d6d608dd02a112bd05e6020fbe71e7e09064c2be7\",\"dweb:/ipfs/QmeBQiyVmxVTPT3ftVFDkiDVgZLMar6SQegryLC7A3jmLr\"]},\"contracts/core/interfaces/callback/ICLSwapCallback.sol\":{\"keccak256\":\"0xb93e1ef2be3090a64b3b024f60253aef64b875f61dffaef8b9231351f8054948\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b16ccd544a6a551c977b7a7d6b6b9704c68e86624d66ecb16d945d3b88239458\",\"dweb:/ipfs/QmPBP5K81AFfHazhbbVb9ZXh6hzKeLqZcEUxnrkKNY7z2L\"]},\"contracts/core/interfaces/pool/ICLPoolActions.sol\":{\"keccak256\":\"0x7699f31261ab40982e34febe16128f1edfdad39075969195301352ea66bcac40\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://074f1c470e11f30d0fae8b95b963c9d19dcbd2c5bd17ad4ebba95c5f0f073044\",\"dweb:/ipfs/QmdDWMUspgBXfLhcxqESez9rSwA8JYNRycmhkhuKoDCWqJ\"]},\"contracts/core/interfaces/pool/ICLPoolConstants.sol\":{\"keccak256\":\"0xfad00d4ca1a40ef27d9614a98483ca67c4491b6f19e376901745c57a6949b512\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://2b5ea522565efb803d146673ff9e37aa090a5abff334fea587da62f4fb5d6647\",\"dweb:/ipfs/QmVRPscHFVjYFvRbJf41zVLtA2jVLbEUH66KGtEzspXnWS\"]},\"contracts/core/interfaces/pool/ICLPoolDerivedState.sol\":{\"keccak256\":\"0xc15e4192a1b7b756cababb994341dc8e78627e1341465e47b1dcb66e9ed54af8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ee4b9269244f6b7ac57cba3b8966ac188220596d16cef71d186f0a6446593b4e\",\"dweb:/ipfs/QmQjyc5ggDgoAv4YbL5uKpNxRDoTvVYw6vePFgu4aNigmQ\"]},\"contracts/core/interfaces/pool/ICLPoolEvents.sol\":{\"keccak256\":\"0x32fbcac8952f1c5c44b466b0e1c28634ce71372c0f65242aa0d821cebdddcc2b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://19f22382292967f97640f84a7edfa01cf7deb303bf882344b9985007f1dcbef2\",\"dweb:/ipfs/Qmej7vWwun9fRBCrcvzPHdZP1jtLSCxJtjTSdkVTcgWeAE\"]},\"contracts/core/interfaces/pool/ICLPoolOwnerActions.sol\":{\"keccak256\":\"0xeafd14ae3e15c9f663507e004c599618bfd5d2a90d58b3b450f9372f9e3f54f8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://49472c8cf06dc7084e22fc57ffdce860aa7a9ff77f12e4bef0c13a078bbc5831\",\"dweb:/ipfs/Qmd29vWULezsJJzhw3wZxsU6Hsng5949v2TiVCbdga4Vqe\"]},\"contracts/core/interfaces/pool/ICLPoolState.sol\":{\"keccak256\":\"0xe57d65825a097d6f0ab55d7ae39b528695b3df65320ed524124fbb55949bfcf9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b63b25beebe612acfd564f40b0d95b3844ee71bf969a3357419e7a54f1ece961\",\"dweb:/ipfs/Qmdk3mNLz3cSZscbXFsJp69gjgxFcBv6K5mdc6tjnmtFSR\"]},\"contracts/core/libraries/BitMath.sol\":{\"keccak256\":\"0x82e425066110aac05ed8a9fc90f9ee85142b6f434769447e49d4438a8d9fcd82\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://77a97078bc992c18c59cb61e07fa4632c8a26b6babf00f3b16eabb5dcaa953b4\",\"dweb:/ipfs/QmTj15ufLWk6AxedSVXBcLp5cYf2DCJAeDi94cVemCkm54\"]},\"contracts/core/libraries/FixedPoint128.sol\":{\"keccak256\":\"0x2d1f4f73ae0d8f0a210b8d30084659b57c56ac8f2f96011fca36f00a6d417178\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://2ba88933f16cd2df398e19c6ad227268f83c03081b70d243c97116d2ed9bc241\",\"dweb:/ipfs/QmTUGxdh8snzEM9VrTSS47StCg9VVWvvLJtJeNnMTFY4xb\"]},\"contracts/core/libraries/FixedPoint96.sol\":{\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://186d3b528866065a5856f96d2aeec698efa99f8da913e9adf34f8cc296cc993d\",\"dweb:/ipfs/QmUAiMvtAQp8c9dy57bqJYzG7hkb1uChiPaQmt264skoqP\"]},\"contracts/core/libraries/FullMath.sol\":{\"keccak256\":\"0x5340256039418f5d03512a44173d3dcf1da277a73a461e06fb5668f49cfc46f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75dee99795d1125875233a7f1d356935099cc97b4085c0e451060d77db85d144\",\"dweb:/ipfs/QmTGqyrxVLQd8TBaarqSQDiYvq1QFutCdmTyXk6JpxzKTN\"]},\"contracts/core/libraries/LiquidityAmounts.sol\":{\"keccak256\":\"0xae7f7b0bbbd864bc1761ec5eac62ec761f2ef168d32ef9e914e337b077ebba4a\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b57b2f04997cd6055404801982f57083f8e9242935b3ebf3bbed032f5035f2f1\",\"dweb:/ipfs/QmdxHVMQEA32jnyroWZG2sk4NPtQFWXPfkDDYvRtK2APFA\"]},\"contracts/core/libraries/LiquidityMath.sol\":{\"keccak256\":\"0xd1059ccc904c8752cec175e8d99e31921c6cd7f3a9c2dd315ce34ac486172ac9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f3630a49e62fa056e2cc4e0278b6f17c5f7e1c9ad2190540cf84c152b58cdef8\",\"dweb:/ipfs/QmdGjKRTNY2qLXJtR2rXU8Nxk4pZwXfbzZYNn3F472QEn6\"]},\"contracts/core/libraries/LowGasSafeMath.sol\":{\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bfc1d5d58e59015086b0e65a6c3a2ddad312e2350480510f6c0c8167f3d71a37\",\"dweb:/ipfs/QmQndULYjFsHKHjMAKLMfc12vWbVB5FawtioHtvwcWRJZp\"]},\"contracts/core/libraries/Position.sol\":{\"keccak256\":\"0xcf1e701e3fae35be8b77ff1217cfdd23d33eb16fd3cec70be8ea6888f87af285\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://c8c89746dd30e76cc029d4e090e402b28aae0659cc71800758b99137dfe85f55\",\"dweb:/ipfs/QmY4Ft1YBLqzqwTgNdpCyRd7WrY78zKgg4Ddv2zqZiBEiE\"]},\"contracts/core/libraries/SafeCast.sol\":{\"keccak256\":\"0xd4c1c1b67f946b077d7c52a158113763a89a210fc2927b8491055a962ecd18c0\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://5344400c74320ca8dbe19241db7ff49babbd6c875c1b561c79d6e4315a9fb5f9\",\"dweb:/ipfs/QmRKCNTbkovxK1WvejXZr3iAHhGN97ZT1yWGsWCJFkrT5X\"]},\"contracts/core/libraries/SqrtPriceMath.sol\":{\"keccak256\":\"0xefd51a282ca9fbc89394776e7f5c6f96fa084ca26b71d99727780332c87d1843\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1f09b719eff523f65d0d11fc476b9735e1390018d5ff585991d0fc644e913ecf\",\"dweb:/ipfs/QmNiZxxQhqteYgJdhCQ3cZ4S7bTQf2AQRUJqMVvPY3doot\"]},\"contracts/core/libraries/Tick.sol\":{\"keccak256\":\"0xb5ebd80c667f4501dba65f4e39e51ff36e5334480849e0ed8604222d20b4ed1e\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://246f590513441ac0f307170f5099e4a0c0b1f579406fc30b909b249858dbd099\",\"dweb:/ipfs/QmaA5uC3eck7nMqyJbpSPEhmXmAXaKLNBSS1Lfnzzzjc95\"]},\"contracts/core/libraries/TickBitmap.sol\":{\"keccak256\":\"0xd829fadfca3f8f5870c877c7eeceb4a692603c16b711174526129987e8745f5b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1d2cbf3802f7e611708a45bc390ee9307d947e49b348294591659444b9989c05\",\"dweb:/ipfs/Qmcny7JNyVYCtcZG3b1BL4ThuKREmAkE9ZKaC3i32pnt7X\"]},\"contracts/core/libraries/TickMath.sol\":{\"keccak256\":\"0x2aa3180a8a59b34a513b948d3f2207b5376de7a2c37065853b7c9fbf0cd3d43f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://c4d46ca5384037f14497c6268342b15becf8bbe1a8fecbcd89ca5b80f41fabc2\",\"dweb:/ipfs/QmanLcdh7EppV4yJ1CdWfPB67es3nEjrDiByAYwgkSE58D\"]},\"contracts/core/libraries/TransferHelper.sol\":{\"keccak256\":\"0x3bbe07a0684d98efe73f7012e446873494e74983e1f75a16d42c25b956d61651\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://78ac9659c70ba3253a6e526ba5a144994fb3d32df2e9537787eeb45aae320aec\",\"dweb:/ipfs/QmbaZRbPP2wFZ9coJd2iyPM37hm3kXzPLuRtL6KKr1MCSL\"]},\"contracts/core/libraries/UnsafeMath.sol\":{\"keccak256\":\"0x5f36d7d16348d8c37fe64fda932018d6e5e8acecd054f0f97d32db62d20c6c88\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://4bd4e817ea3d2c26bb2be7e58db3eaa403119562c18d4c09cc92fb31aa231496\",\"dweb:/ipfs/QmbpjgL8Hf1mhmUyf9hpuPk4noGAggCdTqaRBFKqNF3AQw\"]},\"contracts/libraries/VelodromeTimeLibrary.sol\":{\"keccak256\":\"0x53d5f0b1b864a7dc552ef0291526938a36b1936517d17f62515bb6ba51c1260d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bbc80fd3b18f04224a2a813d6c20a305c7e0479d6414a78d482b45635bc97dba\",\"dweb:/ipfs/QmQFbXCkjzeFgY5M8DyeKZjxeuN8xGdmUmjNH7FNMkLi8T\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"V3Swap": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"name": "SwapExecuted",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"name": "Swap0for1",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"name": "Swap1for0",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newAdmin",
									"type": "address"
								}
							],
							"name": "_newAdmin",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newPool",
									"type": "address"
								}
							],
							"name": "_newPool",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "admin",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "approve0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "approve1",
									"type": "uint256"
								}
							],
							"name": "approveTokens",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "deposits",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "farmNFT",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "oracle",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "pool",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "spaceMultiplier",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/core/VeloSwapV3.sol\":1900:6427  contract V3Swap is ICLSwapCallback {\r... */\n  mstore(0x40, 0x80)\n    /* \"contracts/core/VeloSwapV3.sol\":2220:2286  address public oracle = 0xf0F8249cA6493AaEbBF971B3a2FD8A2e6736981E */\n  0x05\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n    /* \"contracts/core/VeloSwapV3.sol\":2244:2286  0xf0F8249cA6493AaEbBF971B3a2FD8A2e6736981E */\n  0xf0f8249ca6493aaebbf971b3a2fd8a2e6736981e\n    /* \"contracts/core/VeloSwapV3.sol\":2220:2286  address public oracle = 0xf0F8249cA6493AaEbBF971B3a2FD8A2e6736981E */\n  or\n  swap1\n  sstore\n    /* \"contracts/core/VeloSwapV3.sol\":2566:2617  constructor() {\r... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"contracts/core/VeloSwapV3.sol\":2591:2596  admin */\n  0x04\n    /* \"contracts/core/VeloSwapV3.sol\":2591:2609  admin = msg.sender */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n    /* \"contracts/core/VeloSwapV3.sol\":2599:2609  msg.sender */\n  caller\n    /* \"contracts/core/VeloSwapV3.sol\":2591:2609  admin = msg.sender */\n  or\n  swap1\n  sstore\n    /* \"contracts/core/VeloSwapV3.sol\":1900:6427  contract V3Swap is ICLSwapCallback {\r... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/core/VeloSwapV3.sol\":1900:6427  contract V3Swap is ICLSwapCallback {\r... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xd2aca8cd\n      gt\n      tag_17\n      jumpi\n      dup1\n      0xeb20ad47\n      gt\n      tag_18\n      jumpi\n      dup1\n      0xeb20ad47\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xf851a440\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xfa461e33\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xfd1c1518\n      eq\n      tag_16\n      jumpi\n      jump(tag_1)\n    tag_18:\n      dup1\n      0xd2aca8cd\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xda802f80\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xdb638298\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xe6f4d0aa\n      eq\n      tag_12\n      jumpi\n      jump(tag_1)\n    tag_17:\n      dup1\n      0x7dc0d1d0\n      gt\n      tag_19\n      jumpi\n      dup1\n      0x7dc0d1d0\n      eq\n      tag_5\n      jumpi\n      dup1\n      0xb02c43d0\n      eq\n      tag_6\n      jumpi\n      dup1\n      0xd0c93a7c\n      eq\n      tag_7\n      jumpi\n      dup1\n      0xd21220a7\n      eq\n      tag_8\n      jumpi\n      jump(tag_1)\n    tag_19:\n      dup1\n      0x0dfe1681\n      eq\n      tag_2\n      jumpi\n      dup1\n      0x16f0115b\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x1c335703\n      eq\n      tag_4\n      jumpi\n    tag_1:\n      0x00\n      dup1\n      revert\n        /* \"contracts/core/VeloSwapV3.sol\":1998:2019  address public token0 */\n    tag_2:\n      callvalue\n      dup1\n      iszero\n      tag_20\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_20:\n      pop\n      tag_21\n      tag_22\n      jump\t// in\n    tag_21:\n      mload(0x40)\n      tag_23\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_23:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/core/VeloSwapV3.sol\":1942:1961  address public pool */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_25\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_25:\n      pop\n      tag_21\n      tag_27\n      jump\t// in\n        /* \"contracts/core/VeloSwapV3.sol\":6226:6422  function approveTokens(uint approve0, uint approve1) external payable {\r... */\n    tag_4:\n      tag_29\n      tag_30\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n    tag_29:\n      stop\n        /* \"contracts/core/VeloSwapV3.sol\":2220:2286  address public oracle = 0xf0F8249cA6493AaEbBF971B3a2FD8A2e6736981E */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_33\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_33:\n      pop\n      tag_21\n      tag_35\n      jump\t// in\n        /* \"contracts/core/VeloSwapV3.sol\":2428:2471  mapping(uint256 => Deposit) public deposits */\n    tag_6:\n      callvalue\n      dup1\n      iszero\n      tag_37\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_37:\n      pop\n      tag_38\n      tag_39\n      calldatasize\n      0x04\n      tag_40\n      jump\t// in\n    tag_39:\n      tag_41\n      jump\t// in\n    tag_38:\n      mload(0x40)\n      tag_23\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_43\n      jump\t// in\n        /* \"contracts/core/VeloSwapV3.sol\":2154:2178  int24 public tickSpacing */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_44\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_44:\n      pop\n      tag_45\n      tag_46\n      jump\t// in\n    tag_45:\n      mload(0x40)\n      tag_23\n      swap2\n      swap1\n      tag_48\n      jump\t// in\n        /* \"contracts/core/VeloSwapV3.sol\":2048:2069  address public token1 */\n    tag_8:\n      callvalue\n      dup1\n      iszero\n      tag_49\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_49:\n      pop\n      tag_21\n      tag_51\n      jump\t// in\n        /* \"contracts/core/VeloSwapV3.sol\":2779:3133  function _newPool(address newPool) external {\r... */\n    tag_9:\n      callvalue\n      dup1\n      iszero\n      tag_53\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_53:\n      pop\n      tag_29\n      tag_55\n      calldatasize\n      0x04\n      tag_56\n      jump\t// in\n    tag_55:\n      tag_57\n      jump\t// in\n        /* \"contracts/core/VeloSwapV3.sol\":2098:2120  address public farmNFT */\n    tag_10:\n      callvalue\n      dup1\n      iszero\n      tag_58\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_58:\n      pop\n      tag_21\n      tag_60\n      jump\t// in\n        /* \"contracts/core/VeloSwapV3.sol\":3141:4306  function Swap0for1(uint256 amountIn) public payable {\r... */\n    tag_11:\n      tag_29\n      tag_63\n      calldatasize\n      0x04\n      tag_40\n      jump\t// in\n    tag_63:\n      tag_64\n      jump\t// in\n        /* \"contracts/core/VeloSwapV3.sol\":2625:2771  function _newAdmin(address newAdmin) external {\r... */\n    tag_12:\n      callvalue\n      dup1\n      iszero\n      tag_65\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_65:\n      pop\n      tag_29\n      tag_67\n      calldatasize\n      0x04\n      tag_56\n      jump\t// in\n    tag_67:\n      tag_68\n      jump\t// in\n        /* \"contracts/core/VeloSwapV3.sol\":4314:5481  function Swap1for0(uint256 amountIn) public payable {\r... */\n    tag_13:\n      tag_29\n      tag_70\n      calldatasize\n      0x04\n      tag_40\n      jump\t// in\n    tag_70:\n      tag_71\n      jump\t// in\n        /* \"contracts/core/VeloSwapV3.sol\":2127:2147  address public admin */\n    tag_14:\n      callvalue\n      dup1\n      iszero\n      tag_72\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_72:\n      pop\n      tag_21\n      tag_74\n      jump\t// in\n        /* \"contracts/core/VeloSwapV3.sol\":5559:6218  function uniswapV3SwapCallback(\r... */\n    tag_15:\n      callvalue\n      dup1\n      iszero\n      tag_76\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_76:\n      pop\n      tag_29\n      tag_78\n      calldatasize\n      0x04\n      tag_79\n      jump\t// in\n    tag_78:\n      tag_80\n      jump\t// in\n        /* \"contracts/core/VeloSwapV3.sol\":2185:2213  int24 public spaceMultiplier */\n    tag_16:\n      callvalue\n      dup1\n      iszero\n      tag_81\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_81:\n      pop\n      tag_45\n      tag_83\n      jump\t// in\n        /* \"contracts/core/VeloSwapV3.sol\":1998:2019  address public token0 */\n    tag_22:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n      dup2\n      jump\t// out\n        /* \"contracts/core/VeloSwapV3.sol\":1942:1961  address public pool */\n    tag_27:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x00))\n      dup2\n      jump\t// out\n        /* \"contracts/core/VeloSwapV3.sol\":6226:6422  function approveTokens(uint approve0, uint approve1) external payable {\r... */\n    tag_32:\n        /* \"contracts/core/VeloSwapV3.sol\":6321:6327  token0 */\n      sload(0x01)\n        /* \"contracts/core/VeloSwapV3.sol\":6337:6344  farmNFT */\n      sload(0x03)\n        /* \"contracts/core/VeloSwapV3.sol\":6307:6355  IERC20Minimal(token0).approve(farmNFT, approve0) */\n      mload(0x40)\n      shl(0xe0, 0x095ea7b3)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloSwapV3.sol\":6321:6327  token0 */\n      swap3\n      dup4\n      and\n      swap3\n        /* \"contracts/core/VeloSwapV3.sol\":6307:6336  IERC20Minimal(token0).approve */\n      0x095ea7b3\n      swap3\n        /* \"contracts/core/VeloSwapV3.sol\":6307:6355  IERC20Minimal(token0).approve(farmNFT, approve0) */\n      tag_86\n      swap3\n        /* \"contracts/core/VeloSwapV3.sol\":6337:6344  farmNFT */\n      swap2\n      and\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":6346:6354  approve0 */\n      dup7\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":6307:6355  IERC20Minimal(token0).approve(farmNFT, approve0) */\n      0x04\n      add\n      tag_87\n      jump\t// in\n    tag_86:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_88\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_88:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_90\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_90:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_91\n      swap2\n      swap1\n      tag_92\n      jump\t// in\n    tag_91:\n      pop\n        /* \"contracts/core/VeloSwapV3.sol\":6380:6386  token1 */\n      sload(0x02)\n        /* \"contracts/core/VeloSwapV3.sol\":6396:6403  farmNFT */\n      sload(0x03)\n        /* \"contracts/core/VeloSwapV3.sol\":6366:6414  IERC20Minimal(token1).approve(farmNFT, approve1) */\n      mload(0x40)\n      shl(0xe0, 0x095ea7b3)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloSwapV3.sol\":6380:6386  token1 */\n      swap3\n      dup4\n      and\n      swap3\n        /* \"contracts/core/VeloSwapV3.sol\":6366:6395  IERC20Minimal(token1).approve */\n      0x095ea7b3\n      swap3\n        /* \"contracts/core/VeloSwapV3.sol\":6366:6414  IERC20Minimal(token1).approve(farmNFT, approve1) */\n      tag_93\n      swap3\n        /* \"contracts/core/VeloSwapV3.sol\":6396:6403  farmNFT */\n      swap2\n      and\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":6405:6413  approve1 */\n      dup6\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":6366:6414  IERC20Minimal(token1).approve(farmNFT, approve1) */\n      0x04\n      add\n      tag_87\n      jump\t// in\n    tag_93:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_94\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_94:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_96\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_96:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_97\n      swap2\n      swap1\n      tag_92\n      jump\t// in\n    tag_97:\n      pop\n        /* \"contracts/core/VeloSwapV3.sol\":6226:6422  function approveTokens(uint approve0, uint approve1) external payable {\r... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/core/VeloSwapV3.sol\":2220:2286  address public oracle = 0xf0F8249cA6493AaEbBF971B3a2FD8A2e6736981E */\n    tag_35:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x05))\n      dup2\n      jump\t// out\n        /* \"contracts/core/VeloSwapV3.sol\":2428:2471  mapping(uint256 => Deposit) public deposits */\n    tag_41:\n      mstore(0x20, 0x06)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      dup1\n      sload\n      0x01\n      dup3\n      add\n      sload\n      0x02\n      dup4\n      add\n      sload\n      0x03\n      swap1\n      swap4\n      add\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      dup4\n      and\n      swap4\n      sub(shl(0x80, 0x01), 0x01)\n      swap1\n      swap3\n      and\n      swap3\n      swap2\n      dup3\n      and\n      swap2\n      and\n      dup5\n      jump\t// out\n        /* \"contracts/core/VeloSwapV3.sol\":2154:2178  int24 public tickSpacing */\n    tag_46:\n      sload(0x04)\n      shl(0xa0, 0x01)\n      swap1\n      div\n      0x02\n      signextend\n      dup2\n      jump\t// out\n        /* \"contracts/core/VeloSwapV3.sol\":2048:2069  address public token1 */\n    tag_51:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n      dup2\n      jump\t// out\n        /* \"contracts/core/VeloSwapV3.sol\":2779:3133  function _newPool(address newPool) external {\r... */\n    tag_57:\n        /* \"contracts/core/VeloSwapV3.sol\":2856:2861  admin */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x04))\n        /* \"contracts/core/VeloSwapV3.sol\":2842:2852  msg.sender */\n      caller\n        /* \"contracts/core/VeloSwapV3.sol\":2842:2861  msg.sender == admin */\n      eq\n        /* \"contracts/core/VeloSwapV3.sol\":2834:2888  require(msg.sender == admin, \"Only owner can do this\") */\n      tag_99\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_100\n      swap1\n      tag_101\n      jump\t// in\n    tag_100:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_99:\n        /* \"contracts/core/VeloSwapV3.sol\":2899:2903  pool */\n      0x00\n        /* \"contracts/core/VeloSwapV3.sol\":2899:2913  pool = newPool */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup4\n      dup2\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap2\n      dup3\n      swap1\n      sstore\n        /* \"contracts/core/VeloSwapV3.sol\":2933:2964  ICLPoolConstants(pool).token0() */\n      0x40\n      dup1\n      mload\n      shl(0xe0, 0x0dfe1681)\n      dup2\n      mstore\n      swap1\n      mload\n        /* \"contracts/core/VeloSwapV3.sol\":2950:2954  pool */\n      swap3\n      swap1\n      swap2\n      and\n      swap2\n        /* \"contracts/core/VeloSwapV3.sol\":2933:2962  ICLPoolConstants(pool).token0 */\n      0x0dfe1681\n      swap2\n        /* \"contracts/core/VeloSwapV3.sol\":2933:2964  ICLPoolConstants(pool).token0() */\n      0x04\n      dup1\n      dup3\n      add\n      swap3\n      0x20\n      swap3\n      swap1\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"contracts/core/VeloSwapV3.sol\":2950:2954  pool */\n      dup7\n        /* \"contracts/core/VeloSwapV3.sol\":2933:2964  ICLPoolConstants(pool).token0() */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_102\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_102:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_104\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_104:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_105\n      swap2\n      swap1\n      tag_106\n      jump\t// in\n    tag_105:\n        /* \"contracts/core/VeloSwapV3.sol\":2924:2930  token0 */\n      0x01\n        /* \"contracts/core/VeloSwapV3.sol\":2924:2964  token0 = ICLPoolConstants(pool).token0() */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      dup4\n      and\n      or\n      swap1\n      sstore\n      0x00\n        /* \"contracts/core/VeloSwapV3.sol\":3001:3005  pool */\n      sload\n        /* \"contracts/core/VeloSwapV3.sol\":2984:3015  ICLPoolConstants(pool).token1() */\n      0x40\n      dup1\n      mload\n      shl(0xe0, 0xd21220a7)\n      dup2\n      mstore\n      swap1\n      mload\n        /* \"contracts/core/VeloSwapV3.sol\":3001:3005  pool */\n      swap2\n      swap1\n      swap3\n      and\n      swap2\n        /* \"contracts/core/VeloSwapV3.sol\":2984:3013  ICLPoolConstants(pool).token1 */\n      0xd21220a7\n      swap2\n        /* \"contracts/core/VeloSwapV3.sol\":2984:3015  ICLPoolConstants(pool).token1() */\n      0x04\n      dup1\n      dup4\n      add\n      swap3\n      0x20\n      swap3\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"contracts/core/VeloSwapV3.sol\":3001:3005  pool */\n      dup7\n        /* \"contracts/core/VeloSwapV3.sol\":2984:3015  ICLPoolConstants(pool).token1() */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_107\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_107:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_109\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_109:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_110\n      swap2\n      swap1\n      tag_106\n      jump\t// in\n    tag_110:\n        /* \"contracts/core/VeloSwapV3.sol\":2975:2981  token1 */\n      0x02\n        /* \"contracts/core/VeloSwapV3.sol\":2975:3015  token1 = ICLPoolConstants(pool).token1() */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      dup4\n      and\n      or\n      swap1\n      sstore\n      0x00\n        /* \"contracts/core/VeloSwapV3.sol\":3053:3057  pool */\n      sload\n        /* \"contracts/core/VeloSwapV3.sol\":3036:3064  ICLPoolConstants(pool).nft() */\n      0x40\n      dup1\n      mload\n      shl(0xe1, 0x23e66501)\n      dup2\n      mstore\n      swap1\n      mload\n        /* \"contracts/core/VeloSwapV3.sol\":3053:3057  pool */\n      swap2\n      swap1\n      swap3\n      and\n      swap2\n        /* \"contracts/core/VeloSwapV3.sol\":3036:3062  ICLPoolConstants(pool).nft */\n      0x47ccca02\n      swap2\n        /* \"contracts/core/VeloSwapV3.sol\":3036:3064  ICLPoolConstants(pool).nft() */\n      0x04\n      dup1\n      dup4\n      add\n      swap3\n      0x20\n      swap3\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"contracts/core/VeloSwapV3.sol\":3053:3057  pool */\n      dup7\n        /* \"contracts/core/VeloSwapV3.sol\":3036:3064  ICLPoolConstants(pool).nft() */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_111\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_111:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_113\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_113:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_114\n      swap2\n      swap1\n      tag_106\n      jump\t// in\n    tag_114:\n        /* \"contracts/core/VeloSwapV3.sol\":3026:3033  farmNFT */\n      0x03\n        /* \"contracts/core/VeloSwapV3.sol\":3026:3064  farmNFT = ICLPoolConstants(pool).nft() */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      dup4\n      and\n      or\n      swap1\n      sstore\n      0x00\n        /* \"contracts/core/VeloSwapV3.sol\":3106:3110  pool */\n      sload\n        /* \"contracts/core/VeloSwapV3.sol\":3089:3125  ICLPoolConstants(pool).tickSpacing() */\n      0x40\n      dup1\n      mload\n      shl(0xe2, 0x34324e9f)\n      dup2\n      mstore\n      swap1\n      mload\n        /* \"contracts/core/VeloSwapV3.sol\":3106:3110  pool */\n      swap2\n      swap1\n      swap3\n      and\n      swap2\n        /* \"contracts/core/VeloSwapV3.sol\":3089:3123  ICLPoolConstants(pool).tickSpacing */\n      0xd0c93a7c\n      swap2\n        /* \"contracts/core/VeloSwapV3.sol\":3089:3125  ICLPoolConstants(pool).tickSpacing() */\n      0x04\n      dup1\n      dup4\n      add\n      swap3\n      0x20\n      swap3\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"contracts/core/VeloSwapV3.sol\":3106:3110  pool */\n      dup7\n        /* \"contracts/core/VeloSwapV3.sol\":3089:3125  ICLPoolConstants(pool).tickSpacing() */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_115\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_115:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_117\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_117:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_118\n      swap2\n      swap1\n      tag_119\n      jump\t// in\n    tag_118:\n        /* \"contracts/core/VeloSwapV3.sol\":3075:3086  tickSpacing */\n      0x04\n      0x14\n        /* \"contracts/core/VeloSwapV3.sol\":3075:3125  tickSpacing = ICLPoolConstants(pool).tickSpacing() */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0x02\n      signextend\n      0xffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/core/VeloSwapV3.sol\":2779:3133  function _newPool(address newPool) external {\r... */\n      pop\n      jump\t// out\n        /* \"contracts/core/VeloSwapV3.sol\":2098:2120  address public farmNFT */\n    tag_60:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x03))\n      dup2\n      jump\t// out\n        /* \"contracts/core/VeloSwapV3.sol\":3141:4306  function Swap0for1(uint256 amountIn) public payable {\r... */\n    tag_64:\n        /* \"contracts/core/VeloSwapV3.sol\":3223:3224  0 */\n      0x00\n        /* \"contracts/core/VeloSwapV3.sol\":3212:3220  amountIn */\n      dup2\n        /* \"contracts/core/VeloSwapV3.sol\":3212:3224  amountIn > 0 */\n      gt\n        /* \"contracts/core/VeloSwapV3.sol\":3204:3249  require(amountIn > 0, \"Invalid input amount\") */\n      tag_121\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_100\n      swap1\n      tag_123\n      jump\t// in\n    tag_121:\n        /* \"contracts/core/VeloSwapV3.sol\":3269:3275  token0 */\n      sload(0x01)\n        /* \"contracts/core/VeloSwapV3.sol\":3262:3326  IERC20(token0).transferFrom(msg.sender, address(this), amountIn) */\n      mload(0x40)\n      shl(0xe0, 0x23b872dd)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloSwapV3.sol\":3269:3275  token0 */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":3262:3289  IERC20(token0).transferFrom */\n      0x23b872dd\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":3262:3326  IERC20(token0).transferFrom(msg.sender, address(this), amountIn) */\n      tag_124\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":3290:3300  msg.sender */\n      caller\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":3310:3314  this */\n      address\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":3317:3325  amountIn */\n      dup7\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":3262:3326  IERC20(token0).transferFrom(msg.sender, address(this), amountIn) */\n      0x04\n      add\n      tag_125\n      jump\t// in\n    tag_124:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_126\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_126:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_128\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_128:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_129\n      swap2\n      swap1\n      tag_92\n      jump\t// in\n    tag_129:\n      pop\n        /* \"contracts/core/VeloSwapV3.sol\":3391:3411  uint160 sqrtPriceX96 */\n      0x00\n        /* \"contracts/core/VeloSwapV3.sol\":3438:3442  pool */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloSwapV3.sol\":3425:3449  ICLPoolState(pool).slot0 */\n      and\n      0x3850c7bd\n        /* \"contracts/core/VeloSwapV3.sol\":3425:3451  ICLPoolState(pool).slot0() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0xc0\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_130\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_130:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_132\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_132:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_133\n      swap2\n      swap1\n      tag_134\n      jump\t// in\n    tag_133:\n        /* \"contracts/core/VeloSwapV3.sol\":3390:3451  (uint160 sqrtPriceX96, , , , , ) = ICLPoolState(pool).slot0() */\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"contracts/core/VeloSwapV3.sol\":3462:3487  uint160 sqrtPriceLimitX96 */\n      0x00\n        /* \"contracts/core/VeloSwapV3.sol\":3518:3521  100 */\n      0x64\n        /* \"contracts/core/VeloSwapV3.sol\":3498:3510  sqrtPriceX96 */\n      dup3\n        /* \"contracts/core/VeloSwapV3.sol\":3513:3515  99 */\n      0x63\n        /* \"contracts/core/VeloSwapV3.sol\":3498:3515  sqrtPriceX96 * 99 */\n      mul\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloSwapV3.sol\":3498:3521  sqrtPriceX96 * 99 / 100 */\n      and\n      dup2\n      tag_135\n      jumpi\n      invalid\n    tag_135:\n      div\n      swap1\n      pop\n        /* \"contracts/core/libraries/TickMath.sol\":824:834  4295128739 */\n      0x01000276a3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloSwapV3.sol\":3585:3629  sqrtPriceLimitX96 <= TickMath.MIN_SQRT_RATIO */\n      dup3\n      and\n      gt\n        /* \"contracts/core/VeloSwapV3.sol\":3581:3705  if (sqrtPriceLimitX96 <= TickMath.MIN_SQRT_RATIO) {\r... */\n      tag_136\n      jumpi\n      pop\n        /* \"contracts/core/VeloSwapV3.sol\":3666:3693  TickMath.MIN_SQRT_RATIO + 1 */\n      0x01000276a4\n        /* \"contracts/core/VeloSwapV3.sol\":3581:3705  if (sqrtPriceLimitX96 <= TickMath.MIN_SQRT_RATIO) {\r... */\n    tag_136:\n        /* \"contracts/core/VeloSwapV3.sol\":3772:3778  token0 */\n      sload(0x01)\n      0x00\n        /* \"contracts/core/VeloSwapV3.sol\":3788:3792  pool */\n      sload\n        /* \"contracts/core/VeloSwapV3.sol\":3758:3803  IERC20Minimal(token0).approve(pool, amountIn) */\n      mload(0x40)\n      shl(0xe0, 0x095ea7b3)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloSwapV3.sol\":3772:3778  token0 */\n      swap3\n      dup4\n      and\n      swap3\n        /* \"contracts/core/VeloSwapV3.sol\":3758:3787  IERC20Minimal(token0).approve */\n      0x095ea7b3\n      swap3\n        /* \"contracts/core/VeloSwapV3.sol\":3758:3803  IERC20Minimal(token0).approve(pool, amountIn) */\n      tag_137\n      swap3\n        /* \"contracts/core/VeloSwapV3.sol\":3788:3792  pool */\n      swap2\n      and\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":3794:3802  amountIn */\n      dup8\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":3758:3803  IERC20Minimal(token0).approve(pool, amountIn) */\n      0x04\n      add\n      tag_87\n      jump\t// in\n    tag_137:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_138\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_138:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_140\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_140:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_141\n      swap2\n      swap1\n      tag_92\n      jump\t// in\n    tag_141:\n      pop\n        /* \"contracts/core/VeloSwapV3.sol\":3912:3929  bytes memory data */\n      0x00\n        /* \"contracts/core/VeloSwapV3.sol\":3951:3955  this */\n      address\n        /* \"contracts/core/VeloSwapV3.sol\":3932:3957  abi.encode(address(this)) */\n      add(0x20, mload(0x40))\n      tag_142\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_142:\n      0x40\n      dup1\n      mload\n      not(0x1f)\n      dup2\n      dup5\n      sub\n      add\n      dup2\n      mstore\n      swap1\n      dup3\n      swap1\n      mstore\n        /* \"contracts/core/VeloSwapV3.sol\":4027:4031  pool */\n      sload(0x00)\n      shl(0xe3, 0x02515961)\n        /* \"contracts/core/VeloSwapV3.sol\":4012:4298  ICLPoolActions(pool).swap(\r... */\n      dup4\n      mstore\n        /* \"contracts/core/VeloSwapV3.sol\":3932:3957  abi.encode(address(this)) */\n      swap1\n      swap3\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloSwapV3.sol\":4027:4031  pool */\n      and\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":4012:4037  ICLPoolActions(pool).swap */\n      0x128acb08\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":4012:4298  ICLPoolActions(pool).swap(\r... */\n      tag_143\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":4052:4062  msg.sender */\n      caller\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":4027:4031  pool */\n      0x01\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":4165:4173  amountIn */\n      dup10\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":4205:4222  sqrtPriceLimitX96 */\n      dup9\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":3932:3957  abi.encode(address(this)) */\n      dup9\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":4012:4298  ICLPoolActions(pool).swap(\r... */\n      0x04\n      add\n      tag_144\n      jump\t// in\n    tag_143:\n      0x40\n      dup1\n      mload\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_145\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_145:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_147\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_147:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_148\n      swap2\n      swap1\n      tag_149\n      jump\t// in\n    tag_148:\n      pop\n      pop\n        /* \"contracts/core/VeloSwapV3.sol\":3141:4306  function Swap0for1(uint256 amountIn) public payable {\r... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/core/VeloSwapV3.sol\":2625:2771  function _newAdmin(address newAdmin) external {\r... */\n    tag_68:\n        /* \"contracts/core/VeloSwapV3.sol\":2704:2709  admin */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x04))\n        /* \"contracts/core/VeloSwapV3.sol\":2690:2700  msg.sender */\n      caller\n        /* \"contracts/core/VeloSwapV3.sol\":2690:2709  msg.sender == admin */\n      eq\n        /* \"contracts/core/VeloSwapV3.sol\":2682:2736  require(msg.sender == admin, \"Only owner can do this\") */\n      tag_151\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_100\n      swap1\n      tag_101\n      jump\t// in\n    tag_151:\n        /* \"contracts/core/VeloSwapV3.sol\":2747:2752  admin */\n      0x04\n        /* \"contracts/core/VeloSwapV3.sol\":2747:2763  admin = newAdmin */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/core/VeloSwapV3.sol\":2625:2771  function _newAdmin(address newAdmin) external {\r... */\n      jump\t// out\n        /* \"contracts/core/VeloSwapV3.sol\":4314:5481  function Swap1for0(uint256 amountIn) public payable {\r... */\n    tag_71:\n        /* \"contracts/core/VeloSwapV3.sol\":4396:4397  0 */\n      0x00\n        /* \"contracts/core/VeloSwapV3.sol\":4385:4393  amountIn */\n      dup2\n        /* \"contracts/core/VeloSwapV3.sol\":4385:4397  amountIn > 0 */\n      gt\n        /* \"contracts/core/VeloSwapV3.sol\":4377:4422  require(amountIn > 0, \"Invalid input amount\") */\n      tag_154\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_100\n      swap1\n      tag_123\n      jump\t// in\n    tag_154:\n        /* \"contracts/core/VeloSwapV3.sol\":4442:4448  token1 */\n      sload(0x02)\n        /* \"contracts/core/VeloSwapV3.sol\":4435:4499  IERC20(token1).transferFrom(msg.sender, address(this), amountIn) */\n      mload(0x40)\n      shl(0xe0, 0x23b872dd)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloSwapV3.sol\":4442:4448  token1 */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":4435:4462  IERC20(token1).transferFrom */\n      0x23b872dd\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":4435:4499  IERC20(token1).transferFrom(msg.sender, address(this), amountIn) */\n      tag_156\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":4463:4473  msg.sender */\n      caller\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":4483:4487  this */\n      address\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":4490:4498  amountIn */\n      dup7\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":4435:4499  IERC20(token1).transferFrom(msg.sender, address(this), amountIn) */\n      0x04\n      add\n      tag_125\n      jump\t// in\n    tag_156:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_157\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_157:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_159\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_159:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_160\n      swap2\n      swap1\n      tag_92\n      jump\t// in\n    tag_160:\n      pop\n        /* \"contracts/core/VeloSwapV3.sol\":4564:4584  uint160 sqrtPriceX96 */\n      0x00\n        /* \"contracts/core/VeloSwapV3.sol\":4611:4615  pool */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloSwapV3.sol\":4598:4622  ICLPoolState(pool).slot0 */\n      and\n      0x3850c7bd\n        /* \"contracts/core/VeloSwapV3.sol\":4598:4624  ICLPoolState(pool).slot0() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0xc0\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_161\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_161:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_163\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_163:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_164\n      swap2\n      swap1\n      tag_134\n      jump\t// in\n    tag_164:\n        /* \"contracts/core/VeloSwapV3.sol\":4563:4624  (uint160 sqrtPriceX96, , , , , ) = ICLPoolState(pool).slot0() */\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"contracts/core/VeloSwapV3.sol\":4635:4660  uint160 sqrtPriceLimitX96 */\n      0x00\n        /* \"contracts/core/VeloSwapV3.sol\":4692:4695  100 */\n      0x64\n        /* \"contracts/core/VeloSwapV3.sol\":4671:4683  sqrtPriceX96 */\n      dup3\n        /* \"contracts/core/VeloSwapV3.sol\":4686:4689  101 */\n      0x65\n        /* \"contracts/core/VeloSwapV3.sol\":4671:4689  sqrtPriceX96 * 101 */\n      mul\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloSwapV3.sol\":4671:4695  sqrtPriceX96 * 101 / 100 */\n      and\n      dup2\n      tag_165\n      jumpi\n      invalid\n    tag_165:\n      div\n      swap1\n      pop\n        /* \"contracts/core/libraries/TickMath.sol\":824:834  4295128739 */\n      0x01000276a3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloSwapV3.sol\":4759:4803  sqrtPriceLimitX96 <= TickMath.MIN_SQRT_RATIO */\n      dup3\n      and\n      gt\n        /* \"contracts/core/VeloSwapV3.sol\":4755:4879  if (sqrtPriceLimitX96 <= TickMath.MIN_SQRT_RATIO) {\r... */\n      tag_166\n      jumpi\n      pop\n        /* \"contracts/core/VeloSwapV3.sol\":4840:4867  TickMath.MIN_SQRT_RATIO - 1 */\n      0x01000276a2\n        /* \"contracts/core/VeloSwapV3.sol\":4755:4879  if (sqrtPriceLimitX96 <= TickMath.MIN_SQRT_RATIO) {\r... */\n    tag_166:\n        /* \"contracts/core/VeloSwapV3.sol\":4946:4952  token1 */\n      sload(0x02)\n      0x00\n        /* \"contracts/core/VeloSwapV3.sol\":4962:4966  pool */\n      sload\n        /* \"contracts/core/VeloSwapV3.sol\":4932:4977  IERC20Minimal(token1).approve(pool, amountIn) */\n      mload(0x40)\n      shl(0xe0, 0x095ea7b3)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloSwapV3.sol\":4946:4952  token1 */\n      swap3\n      dup4\n      and\n      swap3\n        /* \"contracts/core/VeloSwapV3.sol\":4932:4961  IERC20Minimal(token1).approve */\n      0x095ea7b3\n      swap3\n        /* \"contracts/core/VeloSwapV3.sol\":4932:4977  IERC20Minimal(token1).approve(pool, amountIn) */\n      tag_167\n      swap3\n        /* \"contracts/core/VeloSwapV3.sol\":4962:4966  pool */\n      swap2\n      and\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":4968:4976  amountIn */\n      dup8\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":4932:4977  IERC20Minimal(token1).approve(pool, amountIn) */\n      0x04\n      add\n      tag_87\n      jump\t// in\n    tag_167:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_168\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_168:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_170\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_170:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_171\n      swap2\n      swap1\n      tag_92\n      jump\t// in\n    tag_171:\n      pop\n        /* \"contracts/core/VeloSwapV3.sol\":5086:5103  bytes memory data */\n      0x00\n        /* \"contracts/core/VeloSwapV3.sol\":5125:5129  this */\n      address\n        /* \"contracts/core/VeloSwapV3.sol\":5106:5131  abi.encode(address(this)) */\n      add(0x20, mload(0x40))\n      tag_172\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_172:\n      0x40\n      dup1\n      mload\n      not(0x1f)\n      dup2\n      dup5\n      sub\n      add\n      dup2\n      mstore\n      swap1\n      dup3\n      swap1\n      mstore\n        /* \"contracts/core/VeloSwapV3.sol\":5201:5205  pool */\n      0x00\n      dup1\n      sload\n      shl(0xe3, 0x02515961)\n        /* \"contracts/core/VeloSwapV3.sol\":5186:5473  ICLPoolActions(pool).swap(\r... */\n      dup5\n      mstore\n        /* \"contracts/core/VeloSwapV3.sol\":5106:5131  abi.encode(address(this)) */\n      swap2\n      swap4\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloSwapV3.sol\":5201:5205  pool */\n      swap1\n      swap2\n      and\n      swap2\n        /* \"contracts/core/VeloSwapV3.sol\":5186:5211  ICLPoolActions(pool).swap */\n      0x128acb08\n      swap2\n        /* \"contracts/core/VeloSwapV3.sol\":5186:5473  ICLPoolActions(pool).swap(\r... */\n      tag_143\n      swap2\n        /* \"contracts/core/VeloSwapV3.sol\":5226:5236  msg.sender */\n      caller\n      swap2\n        /* \"contracts/core/VeloSwapV3.sol\":5201:5205  pool */\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":5340:5348  amountIn */\n      dup10\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":5380:5397  sqrtPriceLimitX96 */\n      dup9\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":5106:5131  abi.encode(address(this)) */\n      dup9\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":5186:5473  ICLPoolActions(pool).swap(\r... */\n      0x04\n      add\n      tag_144\n      jump\t// in\n        /* \"contracts/core/VeloSwapV3.sol\":2127:2147  address public admin */\n    tag_74:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x04))\n      dup2\n      jump\t// out\n        /* \"contracts/core/VeloSwapV3.sol\":5559:6218  function uniswapV3SwapCallback(\r... */\n    tag_80:\n        /* \"contracts/core/VeloSwapV3.sol\":5744:5748  pool */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x00))\n        /* \"contracts/core/VeloSwapV3.sol\":5730:5740  msg.sender */\n      caller\n        /* \"contracts/core/VeloSwapV3.sol\":5730:5748  msg.sender == pool */\n      eq\n        /* \"contracts/core/VeloSwapV3.sol\":5722:5776  require(msg.sender == pool, \"Callback only from pool\") */\n      tag_179\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_100\n      swap1\n      tag_181\n      jump\t// in\n    tag_179:\n        /* \"contracts/core/VeloSwapV3.sol\":5887:5888  0 */\n      0x00\n        /* \"contracts/core/VeloSwapV3.sol\":5872:5884  amount0Delta */\n      dup5\n        /* \"contracts/core/VeloSwapV3.sol\":5872:5888  amount0Delta > 0 */\n      sgt\n        /* \"contracts/core/VeloSwapV3.sol\":5868:5976  if (amount0Delta > 0) {\r... */\n      iszero\n      tag_182\n      jumpi\n        /* \"contracts/core/VeloSwapV3.sol\":5919:5925  token0 */\n      sload(0x01)\n      0x00\n        /* \"contracts/core/VeloSwapV3.sol\":5936:5940  pool */\n      sload\n        /* \"contracts/core/VeloSwapV3.sol\":5905:5964  IERC20Minimal(token0).transfer(pool, uint256(amount0Delta)) */\n      mload(0x40)\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloSwapV3.sol\":5919:5925  token0 */\n      swap3\n      dup4\n      and\n      swap3\n        /* \"contracts/core/VeloSwapV3.sol\":5905:5935  IERC20Minimal(token0).transfer */\n      0xa9059cbb\n      swap3\n        /* \"contracts/core/VeloSwapV3.sol\":5905:5964  IERC20Minimal(token0).transfer(pool, uint256(amount0Delta)) */\n      tag_183\n      swap3\n        /* \"contracts/core/VeloSwapV3.sol\":5936:5940  pool */\n      swap2\n      and\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":5950:5962  amount0Delta */\n      dup9\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":5905:5964  IERC20Minimal(token0).transfer(pool, uint256(amount0Delta)) */\n      0x04\n      add\n      tag_87\n      jump\t// in\n    tag_183:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_184\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_184:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_186\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_186:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_187\n      swap2\n      swap1\n      tag_92\n      jump\t// in\n    tag_187:\n      pop\n        /* \"contracts/core/VeloSwapV3.sol\":5868:5976  if (amount0Delta > 0) {\r... */\n    tag_182:\n        /* \"contracts/core/VeloSwapV3.sol\":6122:6123  0 */\n      0x00\n        /* \"contracts/core/VeloSwapV3.sol\":6107:6119  amount1Delta */\n      dup4\n        /* \"contracts/core/VeloSwapV3.sol\":6107:6123  amount1Delta > 0 */\n      sgt\n        /* \"contracts/core/VeloSwapV3.sol\":6103:6211  if (amount1Delta > 0) {\r... */\n      iszero\n      tag_188\n      jumpi\n        /* \"contracts/core/VeloSwapV3.sol\":6154:6160  token1 */\n      sload(0x02)\n      0x00\n        /* \"contracts/core/VeloSwapV3.sol\":6171:6175  pool */\n      sload\n        /* \"contracts/core/VeloSwapV3.sol\":6140:6199  IERC20Minimal(token1).transfer(pool, uint256(amount1Delta)) */\n      mload(0x40)\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloSwapV3.sol\":6154:6160  token1 */\n      swap3\n      dup4\n      and\n      swap3\n        /* \"contracts/core/VeloSwapV3.sol\":6140:6170  IERC20Minimal(token1).transfer */\n      0xa9059cbb\n      swap3\n        /* \"contracts/core/VeloSwapV3.sol\":6140:6199  IERC20Minimal(token1).transfer(pool, uint256(amount1Delta)) */\n      tag_189\n      swap3\n        /* \"contracts/core/VeloSwapV3.sol\":6171:6175  pool */\n      swap2\n      and\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":6185:6197  amount1Delta */\n      dup8\n      swap1\n        /* \"contracts/core/VeloSwapV3.sol\":6140:6199  IERC20Minimal(token1).transfer(pool, uint256(amount1Delta)) */\n      0x04\n      add\n      tag_87\n      jump\t// in\n    tag_189:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_190\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_190:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_192\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_192:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_193\n      swap2\n      swap1\n      tag_92\n      jump\t// in\n    tag_193:\n      pop\n        /* \"contracts/core/VeloSwapV3.sol\":6103:6211  if (amount1Delta > 0) {\r... */\n    tag_188:\n        /* \"contracts/core/VeloSwapV3.sol\":5559:6218  function uniswapV3SwapCallback(\r... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/core/VeloSwapV3.sol\":2185:2213  int24 public spaceMultiplier */\n    tag_83:\n      sload(0x04)\n      shl(0xb8, 0x01)\n      swap1\n      div\n      0x02\n      signextend\n      dup2\n      jump\t// out\n        /* \"#utility.yul\":14:180   */\n    tag_195:\n        /* \"#utility.yul\":92:105   */\n      dup1\n      mload\n        /* \"#utility.yul\":141:154   */\n      dup1\n      iszero\n        /* \"#utility.yul\":134:155   */\n      iszero\n        /* \"#utility.yul\":124:156   */\n      dup2\n      eq\n        /* \"#utility.yul\":114:116   */\n      tag_197\n      jumpi\n        /* \"#utility.yul\":170:171   */\n      0x00\n        /* \"#utility.yul\":167:168   */\n      dup1\n        /* \"#utility.yul\":160:172   */\n      revert\n        /* \"#utility.yul\":114:116   */\n    tag_197:\n        /* \"#utility.yul\":73:180   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":185:351   */\n    tag_198:\n        /* \"#utility.yul\":264:277   */\n      dup1\n      mload\n        /* \"#utility.yul\":317:318   */\n      0x02\n        /* \"#utility.yul\":306:326   */\n      dup2\n      swap1\n      signextend\n        /* \"#utility.yul\":296:327   */\n      dup2\n      eq\n        /* \"#utility.yul\":286:288   */\n      tag_197\n      jumpi\n        /* \"#utility.yul\":341:342   */\n      0x00\n        /* \"#utility.yul\":338:339   */\n      dup1\n        /* \"#utility.yul\":331:343   */\n      revert\n        /* \"#utility.yul\":356:521   */\n    tag_201:\n        /* \"#utility.yul\":436:449   */\n      dup1\n      mload\n        /* \"#utility.yul\":489:495   */\n      0xffff\n        /* \"#utility.yul\":478:496   */\n      dup2\n      and\n        /* \"#utility.yul\":468:497   */\n      dup2\n      eq\n        /* \"#utility.yul\":458:460   */\n      tag_197\n      jumpi\n        /* \"#utility.yul\":511:512   */\n      0x00\n        /* \"#utility.yul\":508:509   */\n      dup1\n        /* \"#utility.yul\":501:513   */\n      revert\n        /* \"#utility.yul\":526:785   */\n    tag_56:\n      0x00\n        /* \"#utility.yul\":638:640   */\n      0x20\n        /* \"#utility.yul\":626:635   */\n      dup3\n        /* \"#utility.yul\":617:624   */\n      dup5\n        /* \"#utility.yul\":613:636   */\n      sub\n        /* \"#utility.yul\":609:641   */\n      slt\n        /* \"#utility.yul\":606:608   */\n      iszero\n      tag_205\n      jumpi\n        /* \"#utility.yul\":659:665   */\n      dup1\n        /* \"#utility.yul\":651:657   */\n      dup2\n        /* \"#utility.yul\":644:666   */\n      revert\n        /* \"#utility.yul\":606:608   */\n    tag_205:\n        /* \"#utility.yul\":703:712   */\n      dup2\n        /* \"#utility.yul\":690:713   */\n      calldataload\n        /* \"#utility.yul\":722:755   */\n      tag_206\n        /* \"#utility.yul\":749:754   */\n      dup2\n        /* \"#utility.yul\":722:755   */\n      tag_207\n      jump\t// in\n    tag_206:\n        /* \"#utility.yul\":774:779   */\n      swap4\n        /* \"#utility.yul\":596:785   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":790:1053   */\n    tag_106:\n      0x00\n        /* \"#utility.yul\":913:915   */\n      0x20\n        /* \"#utility.yul\":901:910   */\n      dup3\n        /* \"#utility.yul\":892:899   */\n      dup5\n        /* \"#utility.yul\":888:911   */\n      sub\n        /* \"#utility.yul\":884:916   */\n      slt\n        /* \"#utility.yul\":881:883   */\n      iszero\n      tag_209\n      jumpi\n        /* \"#utility.yul\":934:940   */\n      dup1\n        /* \"#utility.yul\":926:932   */\n      dup2\n        /* \"#utility.yul\":919:941   */\n      revert\n        /* \"#utility.yul\":881:883   */\n    tag_209:\n        /* \"#utility.yul\":971:980   */\n      dup2\n        /* \"#utility.yul\":965:981   */\n      mload\n        /* \"#utility.yul\":990:1023   */\n      tag_206\n        /* \"#utility.yul\":1017:1022   */\n      dup2\n        /* \"#utility.yul\":990:1023   */\n      tag_207\n      jump\t// in\n        /* \"#utility.yul\":1058:1272   */\n    tag_92:\n      0x00\n        /* \"#utility.yul\":1178:1180   */\n      0x20\n        /* \"#utility.yul\":1166:1175   */\n      dup3\n        /* \"#utility.yul\":1157:1164   */\n      dup5\n        /* \"#utility.yul\":1153:1176   */\n      sub\n        /* \"#utility.yul\":1149:1181   */\n      slt\n        /* \"#utility.yul\":1146:1148   */\n      iszero\n      tag_212\n      jumpi\n        /* \"#utility.yul\":1199:1205   */\n      dup1\n        /* \"#utility.yul\":1191:1197   */\n      dup2\n        /* \"#utility.yul\":1184:1206   */\n      revert\n        /* \"#utility.yul\":1146:1148   */\n    tag_212:\n        /* \"#utility.yul\":1227:1266   */\n      tag_206\n        /* \"#utility.yul\":1256:1265   */\n      dup3\n        /* \"#utility.yul\":1227:1266   */\n      tag_195\n      jump\t// in\n        /* \"#utility.yul\":1277:1493   */\n    tag_119:\n      0x00\n        /* \"#utility.yul\":1398:1400   */\n      0x20\n        /* \"#utility.yul\":1386:1395   */\n      dup3\n        /* \"#utility.yul\":1377:1384   */\n      dup5\n        /* \"#utility.yul\":1373:1396   */\n      sub\n        /* \"#utility.yul\":1369:1401   */\n      slt\n        /* \"#utility.yul\":1366:1368   */\n      iszero\n      tag_215\n      jumpi\n        /* \"#utility.yul\":1419:1425   */\n      dup1\n        /* \"#utility.yul\":1411:1417   */\n      dup2\n        /* \"#utility.yul\":1404:1426   */\n      revert\n        /* \"#utility.yul\":1366:1368   */\n    tag_215:\n        /* \"#utility.yul\":1447:1487   */\n      tag_206\n        /* \"#utility.yul\":1477:1486   */\n      dup3\n        /* \"#utility.yul\":1447:1487   */\n      tag_198\n      jump\t// in\n        /* \"#utility.yul\":1498:1751   */\n    tag_149:\n      0x00\n      dup1\n        /* \"#utility.yul\":1636:1638   */\n      0x40\n        /* \"#utility.yul\":1624:1633   */\n      dup4\n        /* \"#utility.yul\":1615:1622   */\n      dup6\n        /* \"#utility.yul\":1611:1634   */\n      sub\n        /* \"#utility.yul\":1607:1639   */\n      slt\n        /* \"#utility.yul\":1604:1606   */\n      iszero\n      tag_218\n      jumpi\n        /* \"#utility.yul\":1657:1663   */\n      dup1\n        /* \"#utility.yul\":1649:1655   */\n      dup2\n        /* \"#utility.yul\":1642:1664   */\n      revert\n        /* \"#utility.yul\":1604:1606   */\n    tag_218:\n      pop\n      pop\n        /* \"#utility.yul\":1685:1701   */\n      dup1\n      mload\n        /* \"#utility.yul\":1741:1743   */\n      0x20\n        /* \"#utility.yul\":1726:1744   */\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":1720:1745   */\n      mload\n        /* \"#utility.yul\":1685:1701   */\n      swap1\n      swap3\n        /* \"#utility.yul\":1720:1745   */\n      swap1\n      swap2\n      pop\n        /* \"#utility.yul\":1594:1751   */\n      jump\t// out\n        /* \"#utility.yul\":1756:2531   */\n    tag_79:\n      0x00\n      dup1\n      0x00\n      dup1\n        /* \"#utility.yul\":1919:1921   */\n      0x60\n        /* \"#utility.yul\":1907:1916   */\n      dup6\n        /* \"#utility.yul\":1898:1905   */\n      dup8\n        /* \"#utility.yul\":1894:1917   */\n      sub\n        /* \"#utility.yul\":1890:1922   */\n      slt\n        /* \"#utility.yul\":1887:1889   */\n      iszero\n      tag_220\n      jumpi\n        /* \"#utility.yul\":1940:1946   */\n      dup2\n        /* \"#utility.yul\":1932:1938   */\n      dup3\n        /* \"#utility.yul\":1925:1947   */\n      revert\n        /* \"#utility.yul\":1887:1889   */\n    tag_220:\n        /* \"#utility.yul\":1981:1990   */\n      dup5\n        /* \"#utility.yul\":1968:1991   */\n      calldataload\n        /* \"#utility.yul\":1958:1991   */\n      swap4\n      pop\n        /* \"#utility.yul\":2038:2040   */\n      0x20\n        /* \"#utility.yul\":2027:2036   */\n      dup6\n        /* \"#utility.yul\":2023:2041   */\n      add\n        /* \"#utility.yul\":2010:2042   */\n      calldataload\n        /* \"#utility.yul\":2000:2042   */\n      swap3\n      pop\n        /* \"#utility.yul\":2093:2095   */\n      0x40\n        /* \"#utility.yul\":2082:2091   */\n      dup6\n        /* \"#utility.yul\":2078:2096   */\n      add\n        /* \"#utility.yul\":2065:2097   */\n      calldataload\n        /* \"#utility.yul\":2116:2134   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":2157:2159   */\n      dup1\n        /* \"#utility.yul\":2149:2155   */\n      dup3\n        /* \"#utility.yul\":2146:2160   */\n      gt\n        /* \"#utility.yul\":2143:2145   */\n      iszero\n      tag_221\n      jumpi\n        /* \"#utility.yul\":2178:2184   */\n      dup4\n        /* \"#utility.yul\":2170:2176   */\n      dup5\n        /* \"#utility.yul\":2163:2185   */\n      revert\n        /* \"#utility.yul\":2143:2145   */\n    tag_221:\n        /* \"#utility.yul\":2221:2227   */\n      dup2\n        /* \"#utility.yul\":2210:2219   */\n      dup8\n        /* \"#utility.yul\":2206:2228   */\n      add\n        /* \"#utility.yul\":2196:2228   */\n      swap2\n      pop\n        /* \"#utility.yul\":2266:2273   */\n      dup8\n        /* \"#utility.yul\":2259:2263   */\n      0x1f\n        /* \"#utility.yul\":2255:2257   */\n      dup4\n        /* \"#utility.yul\":2251:2264   */\n      add\n        /* \"#utility.yul\":2247:2274   */\n      slt\n        /* \"#utility.yul\":2237:2239   */\n      tag_222\n      jumpi\n        /* \"#utility.yul\":2293:2299   */\n      dup4\n        /* \"#utility.yul\":2285:2291   */\n      dup5\n        /* \"#utility.yul\":2278:2300   */\n      revert\n        /* \"#utility.yul\":2237:2239   */\n    tag_222:\n        /* \"#utility.yul\":2338:2340   */\n      dup2\n        /* \"#utility.yul\":2325:2341   */\n      calldataload\n        /* \"#utility.yul\":2364:2366   */\n      dup2\n        /* \"#utility.yul\":2356:2362   */\n      dup2\n        /* \"#utility.yul\":2353:2367   */\n      gt\n        /* \"#utility.yul\":2350:2352   */\n      iszero\n      tag_223\n      jumpi\n        /* \"#utility.yul\":2385:2391   */\n      dup5\n        /* \"#utility.yul\":2377:2383   */\n      dup6\n        /* \"#utility.yul\":2370:2392   */\n      revert\n        /* \"#utility.yul\":2350:2352   */\n    tag_223:\n        /* \"#utility.yul\":2435:2442   */\n      dup9\n        /* \"#utility.yul\":2430:2432   */\n      0x20\n        /* \"#utility.yul\":2421:2427   */\n      dup3\n        /* \"#utility.yul\":2417:2419   */\n      dup6\n        /* \"#utility.yul\":2413:2428   */\n      add\n        /* \"#utility.yul\":2409:2433   */\n      add\n        /* \"#utility.yul\":2406:2443   */\n      gt\n        /* \"#utility.yul\":2403:2405   */\n      iszero\n      tag_224\n      jumpi\n        /* \"#utility.yul\":2461:2467   */\n      dup5\n        /* \"#utility.yul\":2453:2459   */\n      dup6\n        /* \"#utility.yul\":2446:2468   */\n      revert\n        /* \"#utility.yul\":2403:2405   */\n    tag_224:\n        /* \"#utility.yul\":1877:2531   */\n      swap6\n      swap9\n      swap5\n      swap8\n      pop\n      pop\n        /* \"#utility.yul\":2497:2499   */\n      0x20\n        /* \"#utility.yul\":2489:2500   */\n      add\n      swap5\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1877:2531   */\n      jump\t// out\n        /* \"#utility.yul\":2536:3221   */\n    tag_134:\n      0x00\n      dup1\n      0x00\n      dup1\n      0x00\n      dup1\n        /* \"#utility.yul\":2736:2739   */\n      0xc0\n        /* \"#utility.yul\":2724:2733   */\n      dup8\n        /* \"#utility.yul\":2715:2722   */\n      dup10\n        /* \"#utility.yul\":2711:2734   */\n      sub\n        /* \"#utility.yul\":2707:2740   */\n      slt\n        /* \"#utility.yul\":2704:2706   */\n      iszero\n      tag_226\n      jumpi\n        /* \"#utility.yul\":2758:2764   */\n      dup2\n        /* \"#utility.yul\":2750:2756   */\n      dup3\n        /* \"#utility.yul\":2743:2765   */\n      revert\n        /* \"#utility.yul\":2704:2706   */\n    tag_226:\n        /* \"#utility.yul\":2795:2804   */\n      dup7\n        /* \"#utility.yul\":2789:2805   */\n      mload\n        /* \"#utility.yul\":2814:2847   */\n      tag_227\n        /* \"#utility.yul\":2841:2846   */\n      dup2\n        /* \"#utility.yul\":2814:2847   */\n      tag_207\n      jump\t// in\n    tag_227:\n        /* \"#utility.yul\":2866:2871   */\n      swap6\n      pop\n        /* \"#utility.yul\":2890:2939   */\n      tag_228\n        /* \"#utility.yul\":2935:2937   */\n      0x20\n        /* \"#utility.yul\":2920:2938   */\n      dup9\n      add\n        /* \"#utility.yul\":2890:2939   */\n      tag_198\n      jump\t// in\n    tag_228:\n        /* \"#utility.yul\":2880:2939   */\n      swap5\n      pop\n        /* \"#utility.yul\":2958:3008   */\n      tag_229\n        /* \"#utility.yul\":3004:3006   */\n      0x40\n        /* \"#utility.yul\":2993:3002   */\n      dup9\n        /* \"#utility.yul\":2989:3007   */\n      add\n        /* \"#utility.yul\":2958:3008   */\n      tag_201\n      jump\t// in\n    tag_229:\n        /* \"#utility.yul\":2948:3008   */\n      swap4\n      pop\n        /* \"#utility.yul\":3027:3077   */\n      tag_230\n        /* \"#utility.yul\":3073:3075   */\n      0x60\n        /* \"#utility.yul\":3062:3071   */\n      dup9\n        /* \"#utility.yul\":3058:3076   */\n      add\n        /* \"#utility.yul\":3027:3077   */\n      tag_201\n      jump\t// in\n    tag_230:\n        /* \"#utility.yul\":3017:3077   */\n      swap3\n      pop\n        /* \"#utility.yul\":3096:3147   */\n      tag_231\n        /* \"#utility.yul\":3142:3145   */\n      0x80\n        /* \"#utility.yul\":3131:3140   */\n      dup9\n        /* \"#utility.yul\":3127:3146   */\n      add\n        /* \"#utility.yul\":3096:3147   */\n      tag_201\n      jump\t// in\n    tag_231:\n        /* \"#utility.yul\":3086:3147   */\n      swap2\n      pop\n        /* \"#utility.yul\":3166:3215   */\n      tag_232\n        /* \"#utility.yul\":3210:3213   */\n      0xa0\n        /* \"#utility.yul\":3199:3208   */\n      dup9\n        /* \"#utility.yul\":3195:3214   */\n      add\n        /* \"#utility.yul\":3166:3215   */\n      tag_195\n      jump\t// in\n    tag_232:\n        /* \"#utility.yul\":3156:3215   */\n      swap1\n      pop\n        /* \"#utility.yul\":2694:3221   */\n      swap3\n      swap6\n      pop\n      swap3\n      swap6\n      pop\n      swap3\n      swap6\n      jump\t// out\n        /* \"#utility.yul\":3226:3416   */\n    tag_40:\n      0x00\n        /* \"#utility.yul\":3338:3340   */\n      0x20\n        /* \"#utility.yul\":3326:3335   */\n      dup3\n        /* \"#utility.yul\":3317:3324   */\n      dup5\n        /* \"#utility.yul\":3313:3336   */\n      sub\n        /* \"#utility.yul\":3309:3341   */\n      slt\n        /* \"#utility.yul\":3306:3308   */\n      iszero\n      tag_234\n      jumpi\n        /* \"#utility.yul\":3359:3365   */\n      dup1\n        /* \"#utility.yul\":3351:3357   */\n      dup2\n        /* \"#utility.yul\":3344:3366   */\n      revert\n        /* \"#utility.yul\":3306:3308   */\n    tag_234:\n      pop\n        /* \"#utility.yul\":3387:3410   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":3296:3416   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3421:3679   */\n    tag_31:\n      0x00\n      dup1\n        /* \"#utility.yul\":3550:3552   */\n      0x40\n        /* \"#utility.yul\":3538:3547   */\n      dup4\n        /* \"#utility.yul\":3529:3536   */\n      dup6\n        /* \"#utility.yul\":3525:3548   */\n      sub\n        /* \"#utility.yul\":3521:3553   */\n      slt\n        /* \"#utility.yul\":3518:3520   */\n      iszero\n      tag_236\n      jumpi\n        /* \"#utility.yul\":3571:3577   */\n      dup2\n        /* \"#utility.yul\":3563:3569   */\n      dup3\n        /* \"#utility.yul\":3556:3578   */\n      revert\n        /* \"#utility.yul\":3518:3520   */\n    tag_236:\n      pop\n      pop\n        /* \"#utility.yul\":3599:3622   */\n      dup1\n      calldataload\n      swap3\n        /* \"#utility.yul\":3669:3671   */\n      0x20\n        /* \"#utility.yul\":3654:3672   */\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":3641:3673   */\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":3508:3679   */\n      jump\t// out\n        /* \"#utility.yul\":3684:3887   */\n    tag_24:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3848:3880   */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":3830:3881   */\n      dup2\n      mstore\n        /* \"#utility.yul\":3818:3820   */\n      0x20\n        /* \"#utility.yul\":3803:3821   */\n      add\n      swap1\n        /* \"#utility.yul\":3785:3887   */\n      jump\t// out\n        /* \"#utility.yul\":3892:4275   */\n    tag_125:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":4158:4173   */\n      swap4\n      dup5\n      and\n        /* \"#utility.yul\":4140:4174   */\n      dup2\n      mstore\n        /* \"#utility.yul\":4210:4225   */\n      swap2\n      swap1\n      swap3\n      and\n        /* \"#utility.yul\":4205:4207   */\n      0x20\n        /* \"#utility.yul\":4190:4208   */\n      dup3\n      add\n        /* \"#utility.yul\":4183:4226   */\n      mstore\n        /* \"#utility.yul\":4257:4259   */\n      0x40\n        /* \"#utility.yul\":4242:4260   */\n      dup2\n      add\n        /* \"#utility.yul\":4235:4269   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":4090:4092   */\n      0x60\n        /* \"#utility.yul\":4075:4093   */\n      add\n      swap1\n        /* \"#utility.yul\":4057:4275   */\n      jump\t// out\n        /* \"#utility.yul\":4280:5243   */\n    tag_144:\n      0x00\n        /* \"#utility.yul\":4548:4549   */\n      0x01\n        /* \"#utility.yul\":4544:4545   */\n      dup1\n        /* \"#utility.yul\":4539:4542   */\n      0xa0\n        /* \"#utility.yul\":4535:4546   */\n      shl\n        /* \"#utility.yul\":4531:4550   */\n      sub\n        /* \"#utility.yul\":4589:4591   */\n      dup1\n        /* \"#utility.yul\":4581:4587   */\n      dup9\n        /* \"#utility.yul\":4577:4592   */\n      and\n        /* \"#utility.yul\":4566:4575   */\n      dup4\n        /* \"#utility.yul\":4559:4593   */\n      mstore\n        /* \"#utility.yul\":4612:4614   */\n      0x20\n        /* \"#utility.yul\":4664:4670   */\n      dup8\n        /* \"#utility.yul\":4657:4671   */\n      iszero\n        /* \"#utility.yul\":4650:4672   */\n      iszero\n        /* \"#utility.yul\":4645:4647   */\n      dup2\n        /* \"#utility.yul\":4634:4643   */\n      dup6\n        /* \"#utility.yul\":4630:4648   */\n      add\n        /* \"#utility.yul\":4623:4673   */\n      mstore\n        /* \"#utility.yul\":4709:4715   */\n      dup7\n        /* \"#utility.yul\":4704:4706   */\n      0x40\n        /* \"#utility.yul\":4693:4702   */\n      dup6\n        /* \"#utility.yul\":4689:4707   */\n      add\n        /* \"#utility.yul\":4682:4716   */\n      mstore\n        /* \"#utility.yul\":4764:4766   */\n      dup2\n        /* \"#utility.yul\":4756:4762   */\n      dup7\n        /* \"#utility.yul\":4752:4767   */\n      and\n        /* \"#utility.yul\":4747:4749   */\n      0x60\n        /* \"#utility.yul\":4736:4745   */\n      dup6\n        /* \"#utility.yul\":4732:4750   */\n      add\n        /* \"#utility.yul\":4725:4768   */\n      mstore\n        /* \"#utility.yul\":4805:4808   */\n      0xa0\n        /* \"#utility.yul\":4799:4802   */\n      0x80\n        /* \"#utility.yul\":4788:4797   */\n      dup6\n        /* \"#utility.yul\":4784:4803   */\n      add\n        /* \"#utility.yul\":4777:4809   */\n      mstore\n        /* \"#utility.yul\":4838:4844   */\n      dup5\n        /* \"#utility.yul\":4832:4845   */\n      mload\n        /* \"#utility.yul\":4818:4845   */\n      swap2\n      pop\n        /* \"#utility.yul\":4882:4888   */\n      dup2\n        /* \"#utility.yul\":4876:4879   */\n      0xa0\n        /* \"#utility.yul\":4865:4874   */\n      dup6\n        /* \"#utility.yul\":4861:4880   */\n      add\n        /* \"#utility.yul\":4854:4889   */\n      mstore\n        /* \"#utility.yul\":4907:4911   */\n      dup3\n        /* \"#utility.yul\":4920:5061   */\n    tag_240:\n        /* \"#utility.yul\":4934:4940   */\n      dup3\n        /* \"#utility.yul\":4931:4932   */\n      dup2\n        /* \"#utility.yul\":4928:4941   */\n      lt\n        /* \"#utility.yul\":4920:5061   */\n      iszero\n      tag_242\n      jumpi\n        /* \"#utility.yul\":5030:5044   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":5026:5049   */\n      dup3\n      add\n        /* \"#utility.yul\":5020:5050   */\n      mload\n        /* \"#utility.yul\":4995:5012   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":5014:5017   */\n      0xc0\n        /* \"#utility.yul\":4991:5018   */\n      add\n        /* \"#utility.yul\":4984:5051   */\n      mstore\n        /* \"#utility.yul\":4949:4959   */\n      dup2\n      add\n        /* \"#utility.yul\":4920:5061   */\n      jump(tag_240)\n    tag_242:\n        /* \"#utility.yul\":5079:5085   */\n      dup3\n        /* \"#utility.yul\":5076:5077   */\n      dup2\n        /* \"#utility.yul\":5073:5086   */\n      gt\n        /* \"#utility.yul\":5070:5072   */\n      iszero\n      tag_243\n      jumpi\n        /* \"#utility.yul\":5150:5154   */\n      dup4\n        /* \"#utility.yul\":5144:5147   */\n      0xc0\n        /* \"#utility.yul\":5135:5141   */\n      dup5\n        /* \"#utility.yul\":5124:5133   */\n      dup8\n        /* \"#utility.yul\":5120:5142   */\n      add\n        /* \"#utility.yul\":5116:5148   */\n      add\n        /* \"#utility.yul\":5109:5155   */\n      mstore\n        /* \"#utility.yul\":5070:5072   */\n    tag_243:\n      pop\n      pop\n        /* \"#utility.yul\":5226:5228   */\n      0x1f\n        /* \"#utility.yul\":5205:5220   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":5201:5230   */\n      and\n        /* \"#utility.yul\":5186:5231   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":5233:5236   */\n      0xc0\n        /* \"#utility.yul\":5182:5237   */\n      add\n      swap7\n        /* \"#utility.yul\":4511:5243   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5248:5745   */\n    tag_43:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":5535:5550   */\n      swap5\n      dup6\n      and\n        /* \"#utility.yul\":5517:5551   */\n      dup2\n      mstore\n      sub(shl(0x80, 0x01), 0x01)\n        /* \"#utility.yul\":5587:5634   */\n      swap4\n      swap1\n      swap4\n      and\n        /* \"#utility.yul\":5582:5584   */\n      0x20\n        /* \"#utility.yul\":5567:5585   */\n      dup5\n      add\n        /* \"#utility.yul\":5560:5635   */\n      mstore\n        /* \"#utility.yul\":5671:5686   */\n      swap1\n      dup4\n      and\n        /* \"#utility.yul\":5666:5668   */\n      0x40\n        /* \"#utility.yul\":5651:5669   */\n      dup4\n      add\n        /* \"#utility.yul\":5644:5687   */\n      mstore\n        /* \"#utility.yul\":5723:5738   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":5718:5720   */\n      0x60\n        /* \"#utility.yul\":5703:5721   */\n      dup3\n      add\n        /* \"#utility.yul\":5696:5739   */\n      mstore\n        /* \"#utility.yul\":5466:5469   */\n      0x80\n        /* \"#utility.yul\":5451:5470   */\n      add\n      swap1\n        /* \"#utility.yul\":5433:5745   */\n      jump\t// out\n        /* \"#utility.yul\":5750:6024   */\n    tag_87:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":5942:5974   */\n      swap3\n      swap1\n      swap3\n      and\n        /* \"#utility.yul\":5924:5975   */\n      dup3\n      mstore\n        /* \"#utility.yul\":6006:6008   */\n      0x20\n        /* \"#utility.yul\":5991:6009   */\n      dup3\n      add\n        /* \"#utility.yul\":5984:6018   */\n      mstore\n        /* \"#utility.yul\":5912:5914   */\n      0x40\n        /* \"#utility.yul\":5897:5915   */\n      add\n      swap1\n        /* \"#utility.yul\":5879:6024   */\n      jump\t// out\n        /* \"#utility.yul\":6029:6217   */\n    tag_48:\n        /* \"#utility.yul\":6200:6201   */\n      0x02\n        /* \"#utility.yul\":6189:6210   */\n      swap2\n      swap1\n      swap2\n      signextend\n        /* \"#utility.yul\":6171:6211   */\n      dup2\n      mstore\n        /* \"#utility.yul\":6159:6161   */\n      0x20\n        /* \"#utility.yul\":6144:6162   */\n      add\n      swap1\n        /* \"#utility.yul\":6126:6217   */\n      jump\t// out\n        /* \"#utility.yul\":6222:6568   */\n    tag_101:\n        /* \"#utility.yul\":6424:6426   */\n      0x20\n        /* \"#utility.yul\":6406:6427   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":6463:6465   */\n      0x16\n        /* \"#utility.yul\":6443:6461   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":6436:6466   */\n      mstore\n      shl(0x50, 0x4f6e6c79206f776e65722063616e20646f2074686973)\n        /* \"#utility.yul\":6497:6499   */\n      0x40\n        /* \"#utility.yul\":6482:6500   */\n      dup3\n      add\n        /* \"#utility.yul\":6475:6527   */\n      mstore\n        /* \"#utility.yul\":6559:6561   */\n      0x60\n        /* \"#utility.yul\":6544:6562   */\n      add\n      swap1\n        /* \"#utility.yul\":6396:6568   */\n      jump\t// out\n        /* \"#utility.yul\":6573:6917   */\n    tag_123:\n        /* \"#utility.yul\":6775:6777   */\n      0x20\n        /* \"#utility.yul\":6757:6778   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":6814:6816   */\n      0x14\n        /* \"#utility.yul\":6794:6812   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":6787:6817   */\n      mstore\n      shl(0x62, 0x125b9d985b1a59081a5b9c1d5d08185b5bdd5b9d)\n        /* \"#utility.yul\":6848:6850   */\n      0x40\n        /* \"#utility.yul\":6833:6851   */\n      dup3\n      add\n        /* \"#utility.yul\":6826:6876   */\n      mstore\n        /* \"#utility.yul\":6908:6910   */\n      0x60\n        /* \"#utility.yul\":6893:6911   */\n      add\n      swap1\n        /* \"#utility.yul\":6747:6917   */\n      jump\t// out\n        /* \"#utility.yul\":6922:7269   */\n    tag_181:\n        /* \"#utility.yul\":7124:7126   */\n      0x20\n        /* \"#utility.yul\":7106:7127   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":7163:7165   */\n      0x17\n        /* \"#utility.yul\":7143:7161   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":7136:7166   */\n      mstore\n        /* \"#utility.yul\":7202:7227   */\n      0x43616c6c6261636b206f6e6c792066726f6d20706f6f6c000000000000000000\n        /* \"#utility.yul\":7197:7199   */\n      0x40\n        /* \"#utility.yul\":7182:7200   */\n      dup3\n      add\n        /* \"#utility.yul\":7175:7228   */\n      mstore\n        /* \"#utility.yul\":7260:7262   */\n      0x60\n        /* \"#utility.yul\":7245:7263   */\n      add\n      swap1\n        /* \"#utility.yul\":7096:7269   */\n      jump\t// out\n        /* \"#utility.yul\":7274:7407   */\n    tag_207:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":7351:7382   */\n      dup2\n      and\n        /* \"#utility.yul\":7341:7383   */\n      dup2\n      eq\n        /* \"#utility.yul\":7331:7333   */\n      tag_251\n      jumpi\n        /* \"#utility.yul\":7397:7398   */\n      0x00\n        /* \"#utility.yul\":7394:7395   */\n      dup1\n        /* \"#utility.yul\":7387:7399   */\n      revert\n        /* \"#utility.yul\":7331:7333   */\n    tag_251:\n        /* \"#utility.yul\":7321:7407   */\n      pop\n      jump\t// out\n\n    auxdata: 0xa26469706673582212203b6da2c5c478044f5c9d331b24e2836e4daa1aa0d49e90027d1b3adbc8b67c8f64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH20 0xF0F8249CA6493AAEBBF971B3A2FD8A2E6736981E OR SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0x117C DUP1 PUSH2 0x58 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xE8 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xD2ACA8CD GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xEB20AD47 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xEB20AD47 EQ PUSH2 0x226 JUMPI DUP1 PUSH4 0xF851A440 EQ PUSH2 0x239 JUMPI DUP1 PUSH4 0xFA461E33 EQ PUSH2 0x24E JUMPI DUP1 PUSH4 0xFD1C1518 EQ PUSH2 0x26E JUMPI PUSH2 0xE8 JUMP JUMPDEST DUP1 PUSH4 0xD2ACA8CD EQ PUSH2 0x1BE JUMPI DUP1 PUSH4 0xDA802F80 EQ PUSH2 0x1DE JUMPI DUP1 PUSH4 0xDB638298 EQ PUSH2 0x1F3 JUMPI DUP1 PUSH4 0xE6F4D0AA EQ PUSH2 0x206 JUMPI PUSH2 0xE8 JUMP JUMPDEST DUP1 PUSH4 0x7DC0D1D0 GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x7DC0D1D0 EQ PUSH2 0x142 JUMPI DUP1 PUSH4 0xB02C43D0 EQ PUSH2 0x157 JUMPI DUP1 PUSH4 0xD0C93A7C EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0xD21220A7 EQ PUSH2 0x1A9 JUMPI PUSH2 0xE8 JUMP JUMPDEST DUP1 PUSH4 0xDFE1681 EQ PUSH2 0xED JUMPI DUP1 PUSH4 0x16F0115B EQ PUSH2 0x118 JUMPI DUP1 PUSH4 0x1C335703 EQ PUSH2 0x12D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x283 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP2 SWAP1 PUSH2 0xF87 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x124 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x292 JUMP JUMPDEST PUSH2 0x140 PUSH2 0x13B CALLDATASIZE PUSH1 0x4 PUSH2 0xF66 JUMP JUMPDEST PUSH2 0x2A1 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x3B7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x163 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x177 PUSH2 0x172 CALLDATASIZE PUSH1 0x4 PUSH2 0xF4E JUMP JUMPDEST PUSH2 0x3C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x103E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x193 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x19C PUSH2 0x406 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP2 SWAP1 PUSH2 0x108B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x416 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x140 PUSH2 0x1D9 CALLDATASIZE PUSH1 0x4 PUSH2 0xDC8 JUMP JUMPDEST PUSH2 0x425 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x6C3 JUMP JUMPDEST PUSH2 0x140 PUSH2 0x201 CALLDATASIZE PUSH1 0x4 PUSH2 0xF4E JUMP JUMPDEST PUSH2 0x6D2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x140 PUSH2 0x221 CALLDATASIZE PUSH1 0x4 PUSH2 0xDC8 JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH2 0x140 PUSH2 0x234 CALLDATASIZE PUSH1 0x4 PUSH2 0xF4E JUMP JUMPDEST PUSH2 0x9C8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x245 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0xC1A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x140 PUSH2 0x269 CALLDATASIZE PUSH1 0x4 PUSH2 0xE5E JUMP JUMPDEST PUSH2 0xC29 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x19C PUSH2 0xD7F JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0x95EA7B3 SWAP3 PUSH2 0x2D7 SWAP3 SWAP2 AND SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x1072 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x305 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x329 SWAP2 SWAP1 PUSH2 0xE07 JUMP JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0x95EA7B3 SWAP3 PUSH2 0x360 SWAP3 SWAP2 AND SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1072 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x37A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x38E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3B2 SWAP2 SWAP1 PUSH2 0xE07 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 SWAP1 SWAP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP1 SWAP3 AND SWAP3 SWAP2 DUP3 AND SWAP2 AND DUP5 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0x2 SIGNEXTEND DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x458 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x1099 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP2 DUP3 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH4 0xDFE1681 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP1 SWAP2 AND SWAP2 PUSH4 0xDFE1681 SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4C8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4EC SWAP2 SWAP1 PUSH2 0xDEB JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xD21220A7 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0xD21220A7 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x545 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x559 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x57D SWAP2 SWAP1 PUSH2 0xDEB JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x23E66501 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0x47CCCA02 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5EA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x60E SWAP2 SWAP1 PUSH2 0xDEB JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x34324E9F PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0xD0C93A7C SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x667 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x67B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x69F SWAP2 SWAP1 PUSH2 0xE21 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH3 0xFFFFFF MUL NOT AND SWAP1 DUP4 PUSH1 0x2 SIGNEXTEND PUSH3 0xFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x6F2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x10C9 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH2 0x726 SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0xF9B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x740 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x754 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x778 SWAP2 SWAP1 PUSH2 0xE07 JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xC0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7DC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x800 SWAP2 SWAP1 PUSH2 0xED9 JUMP JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x64 DUP3 PUSH1 0x63 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH2 0x81F JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND GT PUSH2 0x83F JUMPI POP PUSH5 0x1000276A4 JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0x95EA7B3 SWAP3 PUSH2 0x875 SWAP3 SWAP2 AND SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x1072 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x88F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x8A3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8C7 SWAP2 SWAP1 PUSH2 0xE07 JUMP JUMPDEST POP PUSH1 0x0 ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8DB SWAP2 SWAP1 PUSH2 0xF87 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH1 0x0 SLOAD PUSH4 0x2515961 PUSH1 0xE3 SHL DUP4 MSTORE SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x128ACB08 SWAP1 PUSH2 0x923 SWAP1 CALLER SWAP1 PUSH1 0x1 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xFBF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x93C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x950 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x974 SWAP2 SWAP1 PUSH2 0xE3B JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x9A6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x1099 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x9E8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x10C9 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH2 0xA1C SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0xF9B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA4A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA6E SWAP2 SWAP1 PUSH2 0xE07 JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xC0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xABE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xAD2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xAF6 SWAP2 SWAP1 PUSH2 0xED9 JUMP JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x64 DUP3 PUSH1 0x65 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH2 0xB15 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND GT PUSH2 0xB35 JUMPI POP PUSH5 0x1000276A2 JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0x95EA7B3 SWAP3 PUSH2 0xB6B SWAP3 SWAP2 AND SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x1072 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB99 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBBD SWAP2 SWAP1 PUSH2 0xE07 JUMP JUMPDEST POP PUSH1 0x0 ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xBD1 SWAP2 SWAP1 PUSH2 0xF87 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH4 0x2515961 PUSH1 0xE3 SHL DUP5 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH4 0x128ACB08 SWAP2 PUSH2 0x923 SWAP2 CALLER SWAP2 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xFBF JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xC53 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x10F7 JUMP JUMPDEST PUSH1 0x0 DUP5 SGT ISZERO PUSH2 0xCE6 JUMPI PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0xA9059CBB SWAP3 PUSH2 0xC92 SWAP3 SWAP2 AND SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1072 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xCC0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCE4 SWAP2 SWAP1 PUSH2 0xE07 JUMP JUMPDEST POP JUMPDEST PUSH1 0x0 DUP4 SGT ISZERO PUSH2 0xD79 JUMPI PUSH1 0x2 SLOAD PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0xA9059CBB SWAP3 PUSH2 0xD25 SWAP3 SWAP2 AND SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x1072 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD53 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD77 SWAP2 SWAP1 PUSH2 0xE07 JUMP JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0xB8 SHL SWAP1 DIV PUSH1 0x2 SIGNEXTEND DUP2 JUMP JUMPDEST DUP1 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xD9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x2 DUP2 SWAP1 SIGNEXTEND DUP2 EQ PUSH2 0xD9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0xD9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDD9 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xDE4 DUP2 PUSH2 0x112E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDFC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xDE4 DUP2 PUSH2 0x112E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE18 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xDE4 DUP3 PUSH2 0xD8F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE32 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xDE4 DUP3 PUSH2 0xDA4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE4D JUMPI DUP1 DUP2 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xE73 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xE98 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xEAB JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xEB9 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xECA JUMPI DUP5 DUP6 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP POP PUSH1 0x20 ADD SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xEF1 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP7 MLOAD PUSH2 0xEFC DUP2 PUSH2 0x112E JUMP JUMPDEST SWAP6 POP PUSH2 0xF0A PUSH1 0x20 DUP9 ADD PUSH2 0xDA4 JUMP JUMPDEST SWAP5 POP PUSH2 0xF18 PUSH1 0x40 DUP9 ADD PUSH2 0xDB6 JUMP JUMPDEST SWAP4 POP PUSH2 0xF26 PUSH1 0x60 DUP9 ADD PUSH2 0xDB6 JUMP JUMPDEST SWAP3 POP PUSH2 0xF34 PUSH1 0x80 DUP9 ADD PUSH2 0xDB6 JUMP JUMPDEST SWAP2 POP PUSH2 0xF42 PUSH1 0xA0 DUP9 ADD PUSH2 0xD8F JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF5F JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF78 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND DUP4 MSTORE PUSH1 0x20 DUP8 ISZERO ISZERO DUP2 DUP6 ADD MSTORE DUP7 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP7 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE DUP5 MLOAD SWAP2 POP DUP2 PUSH1 0xA0 DUP6 ADD MSTORE DUP3 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1013 JUMPI DUP6 DUP2 ADD DUP3 ADD MLOAD DUP6 DUP3 ADD PUSH1 0xC0 ADD MSTORE DUP2 ADD PUSH2 0xFF7 JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1024 JUMPI DUP4 PUSH1 0xC0 DUP5 DUP8 ADD ADD MSTORE JUMPDEST POP POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0xC0 ADD SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP4 SWAP1 SWAP4 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x2 SWAP2 SWAP1 SWAP2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x4F6E6C79206F776E65722063616E20646F2074686973 PUSH1 0x50 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x125B9D985B1A59081A5B9C1D5D08185B5BDD5B9D PUSH1 0x62 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x43616C6C6261636B206F6E6C792066726F6D20706F6F6C000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1143 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODESIZE PUSH14 0xA2C5C478044F5C9D331B24E2836E 0x4D 0xAA BYTE LOG0 0xD4 SWAP15 SWAP1 MUL PUSH30 0x1B3ADBC8B67C8F64736F6C63430007060033000000000000000000000000 ",
							"sourceMap": "1900:4527:2:-:0;;;2220:66;;;-1:-1:-1;;;;;;2220:66:2;2244:42;2220:66;;;2566:51;;;;;;;;;-1:-1:-1;2591:5:2;:18;;-1:-1:-1;;;;;;2591:18:2;2599:10;2591:18;;;1900:4527;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:7409:33",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:33",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "73:107:33",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "83:22:33",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "98:6:33"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "92:5:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "92:13:33"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "83:5:33"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "158:16:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "167:1:33",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "170:1:33",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "160:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "160:12:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "160:12:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "127:5:33"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "148:5:33"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "141:6:33"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "141:13:33"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "134:6:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "134:21:33"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "124:2:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "124:32:33"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "117:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "117:40:33"
															},
															"nodeType": "YulIf",
															"src": "114:2:33"
														}
													]
												},
												"name": "abi_decode_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "52:6:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "63:5:33",
														"type": ""
													}
												],
												"src": "14:166:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "245:106:33",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "255:22:33",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "270:6:33"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "264:5:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "264:13:33"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "255:5:33"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "329:16:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "338:1:33",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "341:1:33",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "331:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "331:12:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "331:12:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "299:5:33"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "317:1:33",
																						"type": "",
																						"value": "2"
																					},
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "320:5:33"
																					}
																				],
																				"functionName": {
																					"name": "signextend",
																					"nodeType": "YulIdentifier",
																					"src": "306:10:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "306:20:33"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "296:2:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "296:31:33"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "289:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "289:39:33"
															},
															"nodeType": "YulIf",
															"src": "286:2:33"
														}
													]
												},
												"name": "abi_decode_t_int24_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "224:6:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "235:5:33",
														"type": ""
													}
												],
												"src": "185:166:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "417:104:33",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "427:22:33",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "442:6:33"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "436:5:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "436:13:33"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "427:5:33"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "499:16:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "508:1:33",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "511:1:33",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "501:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "501:12:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "501:12:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "471:5:33"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "482:5:33"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "489:6:33",
																						"type": "",
																						"value": "0xffff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "478:3:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "478:18:33"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "468:2:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "468:29:33"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "461:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "461:37:33"
															},
															"nodeType": "YulIf",
															"src": "458:2:33"
														}
													]
												},
												"name": "abi_decode_t_uint16_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "396:6:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "407:5:33",
														"type": ""
													}
												],
												"src": "356:165:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "596:189:33",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "642:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "651:6:33"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "659:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "644:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "644:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "644:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "617:7:33"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "626:9:33"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "613:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "613:23:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "638:2:33",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "609:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "609:32:33"
															},
															"nodeType": "YulIf",
															"src": "606:2:33"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "677:36:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "703:9:33"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "690:12:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "690:23:33"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "681:5:33",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "749:5:33"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "722:26:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "722:33:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "722:33:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "764:15:33",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "774:5:33"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "764:6:33"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "562:9:33",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "573:7:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "585:6:33",
														"type": ""
													}
												],
												"src": "526:259:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "871:182:33",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "917:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "926:6:33"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "934:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "919:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "919:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "919:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "892:7:33"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "901:9:33"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "888:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "888:23:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "913:2:33",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "884:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "884:32:33"
															},
															"nodeType": "YulIf",
															"src": "881:2:33"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "952:29:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "971:9:33"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "965:5:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "965:16:33"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "956:5:33",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1017:5:33"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "990:26:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "990:33:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "990:33:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1032:15:33",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1042:5:33"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1032:6:33"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "837:9:33",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "848:7:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "860:6:33",
														"type": ""
													}
												],
												"src": "790:263:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1136:136:33",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1182:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1191:6:33"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1199:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1184:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1184:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1184:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1157:7:33"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1166:9:33"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1153:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1153:23:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1178:2:33",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1149:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "1149:32:33"
															},
															"nodeType": "YulIf",
															"src": "1146:2:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1217:49:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1256:9:33"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_bool_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1227:28:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "1227:39:33"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1217:6:33"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1102:9:33",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1113:7:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1125:6:33",
														"type": ""
													}
												],
												"src": "1058:214:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1356:137:33",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1402:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1411:6:33"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1419:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1404:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1404:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1404:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1377:7:33"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1386:9:33"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1373:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1373:23:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1398:2:33",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1369:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "1369:32:33"
															},
															"nodeType": "YulIf",
															"src": "1366:2:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1437:50:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1477:9:33"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_int24_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1447:29:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "1447:40:33"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1437:6:33"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_int24_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1322:9:33",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1333:7:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1345:6:33",
														"type": ""
													}
												],
												"src": "1277:216:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1594:157:33",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1640:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "1649:6:33"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "1657:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1642:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1642:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1642:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1615:7:33"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1624:9:33"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1611:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1611:23:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1636:2:33",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1607:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "1607:32:33"
															},
															"nodeType": "YulIf",
															"src": "1604:2:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1675:26:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1691:9:33"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1685:5:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "1685:16:33"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1675:6:33"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1710:35:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1730:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1741:2:33",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1726:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1726:18:33"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1720:5:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "1720:25:33"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1710:6:33"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_int256t_int256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1552:9:33",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1563:7:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1575:6:33",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1583:6:33",
														"type": ""
													}
												],
												"src": "1498:253:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1877:654:33",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1923:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "1932:6:33"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "1940:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1925:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1925:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1925:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1898:7:33"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1907:9:33"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1894:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1894:23:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1919:2:33",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1890:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "1890:32:33"
															},
															"nodeType": "YulIf",
															"src": "1887:2:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1958:33:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1981:9:33"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1968:12:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "1968:23:33"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1958:6:33"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2000:42:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2027:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2038:2:33",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2023:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2023:18:33"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2010:12:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "2010:32:33"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2000:6:33"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2051:46:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2082:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2093:2:33",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2078:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2078:18:33"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2065:12:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "2065:32:33"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "2055:6:33",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2106:28:33",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2116:18:33",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "2110:2:33",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2161:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "2170:6:33"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "2178:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2163:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2163:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2163:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2149:6:33"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "2157:2:33"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2146:2:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "2146:14:33"
															},
															"nodeType": "YulIf",
															"src": "2143:2:33"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2196:32:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2210:9:33"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2221:6:33"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2206:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "2206:22:33"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "2200:2:33",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2276:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "2285:6:33"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "2293:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2278:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2278:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2278:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "2255:2:33"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2259:4:33",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2251:3:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2251:13:33"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2266:7:33"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "2247:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2247:27:33"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2240:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "2240:35:33"
															},
															"nodeType": "YulIf",
															"src": "2237:2:33"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2311:30:33",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "2338:2:33"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2325:12:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "2325:16:33"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "2315:6:33",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2368:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "2377:6:33"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "2385:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2370:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2370:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2370:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2356:6:33"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "2364:2:33"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2353:2:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "2353:14:33"
															},
															"nodeType": "YulIf",
															"src": "2350:2:33"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2444:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "2453:6:33"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "2461:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2446:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2446:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2446:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "2417:2:33"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "2421:6:33"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2413:3:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2413:15:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2430:2:33",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2409:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2409:24:33"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "2435:7:33"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2406:2:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "2406:37:33"
															},
															"nodeType": "YulIf",
															"src": "2403:2:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2479:21:33",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "2493:2:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2497:2:33",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2489:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "2489:11:33"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "2479:6:33"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2509:16:33",
															"value": {
																"name": "length",
																"nodeType": "YulIdentifier",
																"src": "2519:6:33"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "2509:6:33"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_int256t_int256t_bytes_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1819:9:33",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1830:7:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1842:6:33",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1850:6:33",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1858:6:33",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "1866:6:33",
														"type": ""
													}
												],
												"src": "1756:775:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2694:527:33",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2741:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "2750:6:33"
																				},
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "2758:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2743:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2743:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2743:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2715:7:33"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2724:9:33"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2711:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2711:23:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2736:3:33",
																		"type": "",
																		"value": "192"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2707:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "2707:33:33"
															},
															"nodeType": "YulIf",
															"src": "2704:2:33"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2776:29:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2795:9:33"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2789:5:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "2789:16:33"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "2780:5:33",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2841:5:33"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "2814:26:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "2814:33:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2814:33:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2856:15:33",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2866:5:33"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2856:6:33"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2880:59:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2924:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2935:2:33",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2920:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2920:18:33"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_int24_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "2890:29:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "2890:49:33"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2880:6:33"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2948:60:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2993:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3004:2:33",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2989:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2989:18:33"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_uint16_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "2958:30:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "2958:50:33"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "2948:6:33"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3017:60:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3062:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3073:2:33",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3058:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3058:18:33"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_uint16_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "3027:30:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "3027:50:33"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "3017:6:33"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3086:61:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3131:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3142:3:33",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3127:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3127:19:33"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_uint16_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "3096:30:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "3096:51:33"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nodeType": "YulIdentifier",
																	"src": "3086:6:33"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3156:59:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3199:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3210:3:33",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3195:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3195:19:33"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_bool_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "3166:28:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "3166:49:33"
															},
															"variableNames": [
																{
																	"name": "value5",
																	"nodeType": "YulIdentifier",
																	"src": "3156:6:33"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint160t_int24t_uint16t_uint16t_uint16t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2620:9:33",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2631:7:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2643:6:33",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2651:6:33",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2659:6:33",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "2667:6:33",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "2675:6:33",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "2683:6:33",
														"type": ""
													}
												],
												"src": "2536:685:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3296:120:33",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3342:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3351:6:33"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3359:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3344:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3344:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3344:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3317:7:33"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3326:9:33"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3313:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3313:23:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3338:2:33",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3309:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "3309:32:33"
															},
															"nodeType": "YulIf",
															"src": "3306:2:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3377:33:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3400:9:33"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3387:12:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "3387:23:33"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3377:6:33"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3262:9:33",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3273:7:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3285:6:33",
														"type": ""
													}
												],
												"src": "3226:190:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3508:171:33",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3554:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3563:6:33"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3571:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3556:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3556:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3556:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3529:7:33"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3538:9:33"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3525:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3525:23:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3550:2:33",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3521:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "3521:32:33"
															},
															"nodeType": "YulIf",
															"src": "3518:2:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3589:33:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3612:9:33"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3599:12:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "3599:23:33"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3589:6:33"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3631:42:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3658:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3669:2:33",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3654:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3654:18:33"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3641:12:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "3641:32:33"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3631:6:33"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3466:9:33",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3477:7:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3489:6:33",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3497:6:33",
														"type": ""
													}
												],
												"src": "3421:258:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3785:102:33",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3795:26:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3807:9:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3818:2:33",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3803:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "3803:18:33"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3795:4:33"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3837:9:33"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3852:6:33"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3868:3:33",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3873:1:33",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "3864:3:33"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3864:11:33"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3877:1:33",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "3860:3:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3860:19:33"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3848:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3848:32:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3830:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "3830:51:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3830:51:33"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3754:9:33",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3765:6:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3776:4:33",
														"type": ""
													}
												],
												"src": "3684:203:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4057:218:33",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4067:26:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4079:9:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4090:2:33",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4075:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "4075:18:33"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4067:4:33"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4102:29:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4120:3:33",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4125:1:33",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "4116:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4116:11:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4129:1:33",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "4112:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "4112:19:33"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "4106:2:33",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4147:9:33"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "4162:6:33"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "4170:2:33"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4158:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4158:15:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4140:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "4140:34:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4140:34:33"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4194:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4205:2:33",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4190:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4190:18:33"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "4214:6:33"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "4222:2:33"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4210:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4210:15:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4183:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "4183:43:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4183:43:33"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4246:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4257:2:33",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4242:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4242:18:33"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "4262:6:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4235:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "4235:34:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4235:34:33"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_payable_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4010:9:33",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "4021:6:33",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4029:6:33",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4037:6:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4048:4:33",
														"type": ""
													}
												],
												"src": "3892:383:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4511:732:33",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4521:29:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4539:3:33",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4544:1:33",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "4535:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4535:11:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4548:1:33",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "4531:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "4531:19:33"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "4525:2:33",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4566:9:33"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "4581:6:33"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "4589:2:33"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4577:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4577:15:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4559:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "4559:34:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4559:34:33"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4602:12:33",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4612:2:33",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "4606:2:33",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4634:9:33"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "4645:2:33"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4630:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4630:18:33"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value1",
																						"nodeType": "YulIdentifier",
																						"src": "4664:6:33"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "4657:6:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4657:14:33"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "4650:6:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4650:22:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4623:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "4623:50:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4623:50:33"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4693:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4704:2:33",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4689:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4689:18:33"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "4709:6:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4682:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "4682:34:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4682:34:33"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4736:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4747:2:33",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4732:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4732:18:33"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value3",
																				"nodeType": "YulIdentifier",
																				"src": "4756:6:33"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "4764:2:33"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4752:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4752:15:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4725:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "4725:43:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4725:43:33"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4788:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4799:3:33",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4784:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4784:19:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4805:3:33",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4777:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "4777:32:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4777:32:33"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4818:27:33",
															"value": {
																"arguments": [
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "4838:6:33"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4832:5:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "4832:13:33"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "4822:6:33",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4865:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4876:3:33",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4861:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4861:19:33"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "4882:6:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4854:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "4854:35:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4854:35:33"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4898:13:33",
															"value": {
																"name": "tail",
																"nodeType": "YulIdentifier",
																"src": "4907:4:33"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "4902:1:33",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4970:91:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "4999:9:33"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "5010:1:33"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "4995:3:33"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "4995:17:33"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5014:3:33",
																							"type": "",
																							"value": "192"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "4991:3:33"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4991:27:33"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value4",
																											"nodeType": "YulIdentifier",
																											"src": "5034:6:33"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "5042:1:33"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "5030:3:33"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "5030:14:33"
																								},
																								{
																									"name": "_2",
																									"nodeType": "YulIdentifier",
																									"src": "5046:2:33"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "5026:3:33"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "5026:23:33"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "5020:5:33"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5020:30:33"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "4984:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4984:67:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4984:67:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "4931:1:33"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "4934:6:33"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "4928:2:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "4928:13:33"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "4942:19:33",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "4944:15:33",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "4953:1:33"
																				},
																				{
																					"name": "_2",
																					"nodeType": "YulIdentifier",
																					"src": "4956:2:33"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "4949:3:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4949:10:33"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "4944:1:33"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "4924:3:33",
																"statements": []
															},
															"src": "4920:141:33"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5095:70:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "5124:9:33"
																								},
																								{
																									"name": "length",
																									"nodeType": "YulIdentifier",
																									"src": "5135:6:33"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "5120:3:33"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "5120:22:33"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5144:3:33",
																							"type": "",
																							"value": "192"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "5116:3:33"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5116:32:33"
																				},
																				{
																					"name": "tail",
																					"nodeType": "YulIdentifier",
																					"src": "5150:4:33"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5109:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5109:46:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5109:46:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "5076:1:33"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5079:6:33"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5073:2:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "5073:13:33"
															},
															"nodeType": "YulIf",
															"src": "5070:2:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5174:63:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5190:9:33"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "5209:6:33"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5217:2:33",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "5205:3:33"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5205:15:33"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5226:2:33",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "5222:3:33"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5222:7:33"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "5201:3:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5201:29:33"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5186:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5186:45:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5233:3:33",
																		"type": "",
																		"value": "192"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5182:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "5182:55:33"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5174:4:33"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_address_payable_t_bool_t_int256_t_uint160_t_bytes_memory_ptr__to_t_address_t_bool_t_int256_t_uint160_t_bytes_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4448:9:33",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "4459:6:33",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "4467:6:33",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "4475:6:33",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4483:6:33",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4491:6:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4502:4:33",
														"type": ""
													}
												],
												"src": "4280:963:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5433:312:33",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5443:27:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5455:9:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5466:3:33",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5451:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "5451:19:33"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5443:4:33"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5479:29:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5497:3:33",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5502:1:33",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "5493:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5493:11:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5506:1:33",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "5489:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "5489:19:33"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "5483:2:33",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5524:9:33"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5539:6:33"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "5547:2:33"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5535:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5535:15:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5517:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "5517:34:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5517:34:33"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5571:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5582:2:33",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5567:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5567:18:33"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "5591:6:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5599:34:33",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5587:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5587:47:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5560:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "5560:75:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5560:75:33"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5655:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5666:2:33",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5651:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5651:18:33"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value2",
																				"nodeType": "YulIdentifier",
																				"src": "5675:6:33"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "5683:2:33"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5671:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5671:15:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5644:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "5644:43:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5644:43:33"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5707:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5718:2:33",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5703:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5703:18:33"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value3",
																				"nodeType": "YulIdentifier",
																				"src": "5727:6:33"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "5735:2:33"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5723:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5723:15:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5696:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "5696:43:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5696:43:33"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint128_t_address_t_address__to_t_address_t_uint128_t_address_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5378:9:33",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "5389:6:33",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "5397:6:33",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5405:6:33",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5413:6:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5424:4:33",
														"type": ""
													}
												],
												"src": "5248:497:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5879:145:33",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5889:26:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5901:9:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5912:2:33",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5897:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "5897:18:33"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5889:4:33"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5931:9:33"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5946:6:33"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5962:3:33",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5967:1:33",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "5958:3:33"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5958:11:33"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5971:1:33",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "5954:3:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5954:19:33"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5942:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5942:32:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5924:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "5924:51:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5924:51:33"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5995:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6006:2:33",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5991:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5991:18:33"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "6011:6:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5984:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "5984:34:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5984:34:33"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5840:9:33",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5851:6:33",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5859:6:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5870:4:33",
														"type": ""
													}
												],
												"src": "5750:274:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6126:91:33",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6136:26:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6148:9:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6159:2:33",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6144:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "6144:18:33"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6136:4:33"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6178:9:33"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6200:1:33",
																				"type": "",
																				"value": "2"
																			},
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "6203:6:33"
																			}
																		],
																		"functionName": {
																			"name": "signextend",
																			"nodeType": "YulIdentifier",
																			"src": "6189:10:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6189:21:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6171:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "6171:40:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6171:40:33"
														}
													]
												},
												"name": "abi_encode_tuple_t_int24__to_t_int24__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6095:9:33",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6106:6:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6117:4:33",
														"type": ""
													}
												],
												"src": "6029:188:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6396:172:33",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6413:9:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6424:2:33",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6406:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "6406:21:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6406:21:33"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6447:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6458:2:33",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6443:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6443:18:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6463:2:33",
																		"type": "",
																		"value": "22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6436:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "6436:30:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6436:30:33"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6486:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6497:2:33",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6482:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6482:18:33"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6502:24:33",
																		"type": "",
																		"value": "Only owner can do this"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6475:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "6475:52:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6475:52:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6536:26:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6548:9:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6559:2:33",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6544:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "6544:18:33"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6536:4:33"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_6fd24def08b0888543800c4127fd6d1aa58919ac12b49d8f20efd315c642cdfa__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6373:9:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6387:4:33",
														"type": ""
													}
												],
												"src": "6222:346:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6747:170:33",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6764:9:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6775:2:33",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6757:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "6757:21:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6757:21:33"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6798:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6809:2:33",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6794:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6794:18:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6814:2:33",
																		"type": "",
																		"value": "20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6787:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "6787:30:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6787:30:33"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6837:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6848:2:33",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6833:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6833:18:33"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6853:22:33",
																		"type": "",
																		"value": "Invalid input amount"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6826:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "6826:50:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6826:50:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6885:26:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6897:9:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6908:2:33",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6893:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "6893:18:33"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6885:4:33"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_71128eeb4fd76da6a8355c9d10e3d97be1d2b0195b0030a1450235b9a3ac80cf__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6724:9:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6738:4:33",
														"type": ""
													}
												],
												"src": "6573:344:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7096:173:33",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7113:9:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7124:2:33",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7106:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "7106:21:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7106:21:33"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7147:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7158:2:33",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7143:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7143:18:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7163:2:33",
																		"type": "",
																		"value": "23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7136:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "7136:30:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7136:30:33"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7186:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7197:2:33",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7182:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7182:18:33"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7202:25:33",
																		"type": "",
																		"value": "Callback only from pool"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7175:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "7175:53:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7175:53:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7237:26:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7249:9:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7260:2:33",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7245:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "7245:18:33"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7237:4:33"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_bff4c104f39e47a163d0cb9a612fb38cc6d016a74062770b58bcdc30c5de72ee__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7073:9:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7087:4:33",
														"type": ""
													}
												],
												"src": "6922:347:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7321:86:33",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7385:16:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7394:1:33",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7397:1:33",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "7387:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7387:12:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7387:12:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "7344:5:33"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "7355:5:33"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "7370:3:33",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "7375:1:33",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "7366:3:33"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "7366:11:33"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "7379:1:33",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "7362:3:33"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7362:19:33"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "7351:3:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7351:31:33"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "7341:2:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7341:42:33"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "7334:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "7334:50:33"
															},
															"nodeType": "YulIf",
															"src": "7331:2:33"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7310:5:33",
														"type": ""
													}
												],
												"src": "7274:133:33"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_t_bool_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_t_int24_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, signextend(2, value))) { revert(0, 0) }\n    }\n    function abi_decode_t_uint16_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, 0xffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_t_bool_fromMemory(headStart)\n    }\n    function abi_decode_tuple_t_int24_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_t_int24_fromMemory(headStart)\n    }\n    function abi_decode_tuple_t_int256t_int256_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_int256t_int256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value2, value2) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value2, value2) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(value2, value2) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(value2, value2) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(value2, value2) }\n        value2 := add(_2, 32)\n        value3 := length\n    }\n    function abi_decode_tuple_t_uint160t_int24t_uint16t_uint16t_uint16t_bool_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(value4, value4) }\n        let value := mload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        value1 := abi_decode_t_int24_fromMemory(add(headStart, 32))\n        value2 := abi_decode_t_uint16_fromMemory(add(headStart, 64))\n        value3 := abi_decode_t_uint16_fromMemory(add(headStart, 96))\n        value4 := abi_decode_t_uint16_fromMemory(add(headStart, 128))\n        value5 := abi_decode_t_bool_fromMemory(add(headStart, 160))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_payable_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_payable_t_bool_t_int256_t_uint160_t_bytes_memory_ptr__to_t_address_t_bool_t_int256_t_uint160_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        let _2 := 32\n        mstore(add(headStart, _2), iszero(iszero(value1)))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), and(value3, _1))\n        mstore(add(headStart, 128), 160)\n        let length := mload(value4)\n        mstore(add(headStart, 160), length)\n        let i := tail\n        for { } lt(i, length) { i := add(i, _2) }\n        {\n            mstore(add(add(headStart, i), 192), mload(add(add(value4, i), _2)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 192), tail)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 192)\n    }\n    function abi_encode_tuple_t_address_t_uint128_t_address_t_address__to_t_address_t_uint128_t_address_t_address__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), and(value3, _1))\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_int24__to_t_int24__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, signextend(2, value0))\n    }\n    function abi_encode_tuple_t_stringliteral_6fd24def08b0888543800c4127fd6d1aa58919ac12b49d8f20efd315c642cdfa__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Only owner can do this\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_71128eeb4fd76da6a8355c9d10e3d97be1d2b0195b0030a1450235b9a3ac80cf__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Invalid input amount\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_bff4c104f39e47a163d0cb9a612fb38cc6d016a74062770b58bcdc30c5de72ee__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Callback only from pool\")\n        tail := add(headStart, 96)\n    }\n    function validator_revert_t_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n}",
									"id": 33,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600436106100e85760003560e01c8063d2aca8cd1161008a578063eb20ad4711610059578063eb20ad4714610226578063f851a44014610239578063fa461e331461024e578063fd1c15181461026e576100e8565b8063d2aca8cd146101be578063da802f80146101de578063db638298146101f3578063e6f4d0aa14610206576100e8565b80637dc0d1d0116100c65780637dc0d1d014610142578063b02c43d014610157578063d0c93a7c14610187578063d21220a7146101a9576100e8565b80630dfe1681146100ed57806316f0115b146101185780631c3357031461012d575b600080fd5b3480156100f957600080fd5b50610102610283565b60405161010f9190610f87565b60405180910390f35b34801561012457600080fd5b50610102610292565b61014061013b366004610f66565b6102a1565b005b34801561014e57600080fd5b506101026103b7565b34801561016357600080fd5b50610177610172366004610f4e565b6103c6565b60405161010f949392919061103e565b34801561019357600080fd5b5061019c610406565b60405161010f919061108b565b3480156101b557600080fd5b50610102610416565b3480156101ca57600080fd5b506101406101d9366004610dc8565b610425565b3480156101ea57600080fd5b506101026106c3565b610140610201366004610f4e565b6106d2565b34801561021257600080fd5b50610140610221366004610dc8565b61097c565b610140610234366004610f4e565b6109c8565b34801561024557600080fd5b50610102610c1a565b34801561025a57600080fd5b50610140610269366004610e5e565b610c29565b34801561027a57600080fd5b5061019c610d7f565b6001546001600160a01b031681565b6000546001600160a01b031681565b60015460035460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926102d7929116908690600401611072565b602060405180830381600087803b1580156102f157600080fd5b505af1158015610305573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103299190610e07565b5060025460035460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392610360929116908590600401611072565b602060405180830381600087803b15801561037a57600080fd5b505af115801561038e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b29190610e07565b505050565b6005546001600160a01b031681565b60066020526000908152604090208054600182015460028301546003909301546001600160a01b03928316936001600160801b0390921692918216911684565b600454600160a01b900460020b81565b6002546001600160a01b031681565b6004546001600160a01b031633146104585760405162461bcd60e51b815260040161044f90611099565b60405180910390fd5b600080546001600160a01b0319166001600160a01b03838116919091179182905560408051630dfe168160e01b815290519290911691630dfe168191600480820192602092909190829003018186803b1580156104b457600080fd5b505afa1580156104c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ec9190610deb565b600180546001600160a01b0319166001600160a01b039283161790556000546040805163d21220a760e01b81529051919092169163d21220a7916004808301926020929190829003018186803b15801561054557600080fd5b505afa158015610559573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057d9190610deb565b600280546001600160a01b0319166001600160a01b03928316179055600054604080516323e6650160e11b8152905191909216916347ccca02916004808301926020929190829003018186803b1580156105d657600080fd5b505afa1580156105ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060e9190610deb565b600380546001600160a01b0319166001600160a01b03928316179055600054604080516334324e9f60e21b81529051919092169163d0c93a7c916004808301926020929190829003018186803b15801561066757600080fd5b505afa15801561067b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069f9190610e21565b600460146101000a81548162ffffff021916908360020b62ffffff16021790555050565b6003546001600160a01b031681565b600081116106f25760405162461bcd60e51b815260040161044f906110c9565b6001546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061072690339030908690600401610f9b565b602060405180830381600087803b15801561074057600080fd5b505af1158015610754573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107789190610e07565b5060008060009054906101000a90046001600160a01b03166001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160c06040518083038186803b1580156107c857600080fd5b505afa1580156107dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108009190610ed9565b5050505050905060006064826063026001600160a01b03168161081f57fe5b0490506401000276a36001600160a01b0382161161083f57506401000276a45b60015460005460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392610875929116908790600401611072565b602060405180830381600087803b15801561088f57600080fd5b505af11580156108a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c79190610e07565b506000306040516020016108db9190610f87565b60408051601f1981840301815290829052600054630251596160e31b83529092506001600160a01b03169063128acb0890610923903390600190899088908890600401610fbf565b6040805180830381600087803b15801561093c57600080fd5b505af1158015610950573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109749190610e3b565b505050505050565b6004546001600160a01b031633146109a65760405162461bcd60e51b815260040161044f90611099565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b600081116109e85760405162461bcd60e51b815260040161044f906110c9565b6002546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610a1c90339030908690600401610f9b565b602060405180830381600087803b158015610a3657600080fd5b505af1158015610a4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6e9190610e07565b5060008060009054906101000a90046001600160a01b03166001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160c06040518083038186803b158015610abe57600080fd5b505afa158015610ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af69190610ed9565b5050505050905060006064826065026001600160a01b031681610b1557fe5b0490506401000276a36001600160a01b03821611610b3557506401000276a25b60025460005460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392610b6b929116908790600401611072565b602060405180830381600087803b158015610b8557600080fd5b505af1158015610b99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbd9190610e07565b50600030604051602001610bd19190610f87565b60408051601f198184030181529082905260008054630251596160e31b84529193506001600160a01b039091169163128acb089161092391339190899088908890600401610fbf565b6004546001600160a01b031681565b6000546001600160a01b03163314610c535760405162461bcd60e51b815260040161044f906110f7565b6000841315610ce65760015460005460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92610c92929116908890600401611072565b602060405180830381600087803b158015610cac57600080fd5b505af1158015610cc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce49190610e07565b505b6000831315610d795760025460005460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92610d25929116908790600401611072565b602060405180830381600087803b158015610d3f57600080fd5b505af1158015610d53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d779190610e07565b505b50505050565b600454600160b81b900460020b81565b80518015158114610d9f57600080fd5b919050565b8051600281900b8114610d9f57600080fd5b805161ffff81168114610d9f57600080fd5b600060208284031215610dd9578081fd5b8135610de48161112e565b9392505050565b600060208284031215610dfc578081fd5b8151610de48161112e565b600060208284031215610e18578081fd5b610de482610d8f565b600060208284031215610e32578081fd5b610de482610da4565b60008060408385031215610e4d578081fd5b505080516020909101519092909150565b60008060008060608587031215610e73578182fd5b8435935060208501359250604085013567ffffffffffffffff80821115610e98578384fd5b818701915087601f830112610eab578384fd5b813581811115610eb9578485fd5b886020828501011115610eca578485fd5b95989497505060200194505050565b60008060008060008060c08789031215610ef1578182fd5b8651610efc8161112e565b9550610f0a60208801610da4565b9450610f1860408801610db6565b9350610f2660608801610db6565b9250610f3460808801610db6565b9150610f4260a08801610d8f565b90509295509295509295565b600060208284031215610f5f578081fd5b5035919050565b60008060408385031215610f78578182fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060018060a01b038088168352602087151581850152866040850152818616606085015260a06080850152845191508160a0850152825b828110156110135785810182015185820160c001528101610ff7565b82811115611024578360c084870101525b5050601f01601f19169190910160c0019695505050505050565b6001600160a01b0394851681526001600160801b039390931660208401529083166040830152909116606082015260800190565b6001600160a01b03929092168252602082015260400190565b60029190910b815260200190565b6020808252601690820152754f6e6c79206f776e65722063616e20646f207468697360501b604082015260600190565b602080825260149082015273125b9d985b1a59081a5b9c1d5d08185b5bdd5b9d60621b604082015260600190565b60208082526017908201527f43616c6c6261636b206f6e6c792066726f6d20706f6f6c000000000000000000604082015260600190565b6001600160a01b038116811461114357600080fd5b5056fea26469706673582212203b6da2c5c478044f5c9d331b24e2836e4daa1aa0d49e90027d1b3adbc8b67c8f64736f6c63430007060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xE8 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xD2ACA8CD GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xEB20AD47 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xEB20AD47 EQ PUSH2 0x226 JUMPI DUP1 PUSH4 0xF851A440 EQ PUSH2 0x239 JUMPI DUP1 PUSH4 0xFA461E33 EQ PUSH2 0x24E JUMPI DUP1 PUSH4 0xFD1C1518 EQ PUSH2 0x26E JUMPI PUSH2 0xE8 JUMP JUMPDEST DUP1 PUSH4 0xD2ACA8CD EQ PUSH2 0x1BE JUMPI DUP1 PUSH4 0xDA802F80 EQ PUSH2 0x1DE JUMPI DUP1 PUSH4 0xDB638298 EQ PUSH2 0x1F3 JUMPI DUP1 PUSH4 0xE6F4D0AA EQ PUSH2 0x206 JUMPI PUSH2 0xE8 JUMP JUMPDEST DUP1 PUSH4 0x7DC0D1D0 GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x7DC0D1D0 EQ PUSH2 0x142 JUMPI DUP1 PUSH4 0xB02C43D0 EQ PUSH2 0x157 JUMPI DUP1 PUSH4 0xD0C93A7C EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0xD21220A7 EQ PUSH2 0x1A9 JUMPI PUSH2 0xE8 JUMP JUMPDEST DUP1 PUSH4 0xDFE1681 EQ PUSH2 0xED JUMPI DUP1 PUSH4 0x16F0115B EQ PUSH2 0x118 JUMPI DUP1 PUSH4 0x1C335703 EQ PUSH2 0x12D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x283 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP2 SWAP1 PUSH2 0xF87 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x124 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x292 JUMP JUMPDEST PUSH2 0x140 PUSH2 0x13B CALLDATASIZE PUSH1 0x4 PUSH2 0xF66 JUMP JUMPDEST PUSH2 0x2A1 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x3B7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x163 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x177 PUSH2 0x172 CALLDATASIZE PUSH1 0x4 PUSH2 0xF4E JUMP JUMPDEST PUSH2 0x3C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x103E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x193 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x19C PUSH2 0x406 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP2 SWAP1 PUSH2 0x108B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x416 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x140 PUSH2 0x1D9 CALLDATASIZE PUSH1 0x4 PUSH2 0xDC8 JUMP JUMPDEST PUSH2 0x425 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x6C3 JUMP JUMPDEST PUSH2 0x140 PUSH2 0x201 CALLDATASIZE PUSH1 0x4 PUSH2 0xF4E JUMP JUMPDEST PUSH2 0x6D2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x140 PUSH2 0x221 CALLDATASIZE PUSH1 0x4 PUSH2 0xDC8 JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH2 0x140 PUSH2 0x234 CALLDATASIZE PUSH1 0x4 PUSH2 0xF4E JUMP JUMPDEST PUSH2 0x9C8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x245 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0xC1A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x140 PUSH2 0x269 CALLDATASIZE PUSH1 0x4 PUSH2 0xE5E JUMP JUMPDEST PUSH2 0xC29 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x19C PUSH2 0xD7F JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0x95EA7B3 SWAP3 PUSH2 0x2D7 SWAP3 SWAP2 AND SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x1072 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x305 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x329 SWAP2 SWAP1 PUSH2 0xE07 JUMP JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0x95EA7B3 SWAP3 PUSH2 0x360 SWAP3 SWAP2 AND SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1072 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x37A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x38E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3B2 SWAP2 SWAP1 PUSH2 0xE07 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 SWAP1 SWAP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP1 SWAP3 AND SWAP3 SWAP2 DUP3 AND SWAP2 AND DUP5 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0x2 SIGNEXTEND DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x458 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x1099 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP2 DUP3 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH4 0xDFE1681 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP1 SWAP2 AND SWAP2 PUSH4 0xDFE1681 SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4C8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4EC SWAP2 SWAP1 PUSH2 0xDEB JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xD21220A7 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0xD21220A7 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x545 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x559 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x57D SWAP2 SWAP1 PUSH2 0xDEB JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x23E66501 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0x47CCCA02 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5EA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x60E SWAP2 SWAP1 PUSH2 0xDEB JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x34324E9F PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0xD0C93A7C SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x667 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x67B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x69F SWAP2 SWAP1 PUSH2 0xE21 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH3 0xFFFFFF MUL NOT AND SWAP1 DUP4 PUSH1 0x2 SIGNEXTEND PUSH3 0xFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x6F2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x10C9 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH2 0x726 SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0xF9B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x740 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x754 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x778 SWAP2 SWAP1 PUSH2 0xE07 JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xC0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7DC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x800 SWAP2 SWAP1 PUSH2 0xED9 JUMP JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x64 DUP3 PUSH1 0x63 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH2 0x81F JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND GT PUSH2 0x83F JUMPI POP PUSH5 0x1000276A4 JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0x95EA7B3 SWAP3 PUSH2 0x875 SWAP3 SWAP2 AND SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x1072 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x88F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x8A3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8C7 SWAP2 SWAP1 PUSH2 0xE07 JUMP JUMPDEST POP PUSH1 0x0 ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8DB SWAP2 SWAP1 PUSH2 0xF87 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH1 0x0 SLOAD PUSH4 0x2515961 PUSH1 0xE3 SHL DUP4 MSTORE SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x128ACB08 SWAP1 PUSH2 0x923 SWAP1 CALLER SWAP1 PUSH1 0x1 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xFBF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x93C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x950 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x974 SWAP2 SWAP1 PUSH2 0xE3B JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x9A6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x1099 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x9E8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x10C9 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH2 0xA1C SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0xF9B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA4A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA6E SWAP2 SWAP1 PUSH2 0xE07 JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xC0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xABE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xAD2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xAF6 SWAP2 SWAP1 PUSH2 0xED9 JUMP JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x64 DUP3 PUSH1 0x65 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH2 0xB15 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND GT PUSH2 0xB35 JUMPI POP PUSH5 0x1000276A2 JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0x95EA7B3 SWAP3 PUSH2 0xB6B SWAP3 SWAP2 AND SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x1072 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB99 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBBD SWAP2 SWAP1 PUSH2 0xE07 JUMP JUMPDEST POP PUSH1 0x0 ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xBD1 SWAP2 SWAP1 PUSH2 0xF87 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH4 0x2515961 PUSH1 0xE3 SHL DUP5 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH4 0x128ACB08 SWAP2 PUSH2 0x923 SWAP2 CALLER SWAP2 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xFBF JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xC53 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP1 PUSH2 0x10F7 JUMP JUMPDEST PUSH1 0x0 DUP5 SGT ISZERO PUSH2 0xCE6 JUMPI PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0xA9059CBB SWAP3 PUSH2 0xC92 SWAP3 SWAP2 AND SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1072 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xCC0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCE4 SWAP2 SWAP1 PUSH2 0xE07 JUMP JUMPDEST POP JUMPDEST PUSH1 0x0 DUP4 SGT ISZERO PUSH2 0xD79 JUMPI PUSH1 0x2 SLOAD PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0xA9059CBB SWAP3 PUSH2 0xD25 SWAP3 SWAP2 AND SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x1072 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD53 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD77 SWAP2 SWAP1 PUSH2 0xE07 JUMP JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0xB8 SHL SWAP1 DIV PUSH1 0x2 SIGNEXTEND DUP2 JUMP JUMPDEST DUP1 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xD9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x2 DUP2 SWAP1 SIGNEXTEND DUP2 EQ PUSH2 0xD9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0xD9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDD9 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xDE4 DUP2 PUSH2 0x112E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDFC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xDE4 DUP2 PUSH2 0x112E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE18 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xDE4 DUP3 PUSH2 0xD8F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE32 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xDE4 DUP3 PUSH2 0xDA4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE4D JUMPI DUP1 DUP2 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xE73 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xE98 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xEAB JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xEB9 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xECA JUMPI DUP5 DUP6 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP POP PUSH1 0x20 ADD SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xEF1 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP7 MLOAD PUSH2 0xEFC DUP2 PUSH2 0x112E JUMP JUMPDEST SWAP6 POP PUSH2 0xF0A PUSH1 0x20 DUP9 ADD PUSH2 0xDA4 JUMP JUMPDEST SWAP5 POP PUSH2 0xF18 PUSH1 0x40 DUP9 ADD PUSH2 0xDB6 JUMP JUMPDEST SWAP4 POP PUSH2 0xF26 PUSH1 0x60 DUP9 ADD PUSH2 0xDB6 JUMP JUMPDEST SWAP3 POP PUSH2 0xF34 PUSH1 0x80 DUP9 ADD PUSH2 0xDB6 JUMP JUMPDEST SWAP2 POP PUSH2 0xF42 PUSH1 0xA0 DUP9 ADD PUSH2 0xD8F JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF5F JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF78 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND DUP4 MSTORE PUSH1 0x20 DUP8 ISZERO ISZERO DUP2 DUP6 ADD MSTORE DUP7 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP7 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE DUP5 MLOAD SWAP2 POP DUP2 PUSH1 0xA0 DUP6 ADD MSTORE DUP3 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1013 JUMPI DUP6 DUP2 ADD DUP3 ADD MLOAD DUP6 DUP3 ADD PUSH1 0xC0 ADD MSTORE DUP2 ADD PUSH2 0xFF7 JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1024 JUMPI DUP4 PUSH1 0xC0 DUP5 DUP8 ADD ADD MSTORE JUMPDEST POP POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0xC0 ADD SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP4 SWAP1 SWAP4 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x2 SWAP2 SWAP1 SWAP2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x4F6E6C79206F776E65722063616E20646F2074686973 PUSH1 0x50 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x125B9D985B1A59081A5B9C1D5D08185B5BDD5B9D PUSH1 0x62 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x43616C6C6261636B206F6E6C792066726F6D20706F6F6C000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1143 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODESIZE PUSH14 0xA2C5C478044F5C9D331B24E2836E 0x4D 0xAA BYTE LOG0 0xD4 SWAP15 SWAP1 MUL PUSH30 0x1B3ADBC8B67C8F64736F6C63430007060033000000000000000000000000 ",
							"sourceMap": "1900:4527:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1998:21;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1942:19;;;;;;;;;;;;;:::i;6226:196::-;;;;;;:::i;:::-;;:::i;:::-;;2220:66;;;;;;;;;;;;;:::i;2428:43::-;;;;;;;;;;-1:-1:-1;2428:43:2;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;2154:24::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;2048:21::-;;;;;;;;;;;;;:::i;2779:354::-;;;;;;;;;;-1:-1:-1;2779:354:2;;;;;:::i;:::-;;:::i;2098:22::-;;;;;;;;;;;;;:::i;3141:1165::-;;;;;;:::i;:::-;;:::i;2625:146::-;;;;;;;;;;-1:-1:-1;2625:146:2;;;;;:::i;:::-;;:::i;4314:1167::-;;;;;;:::i;:::-;;:::i;2127:20::-;;;;;;;;;;;;;:::i;5559:659::-;;;;;;;;;;-1:-1:-1;5559:659:2;;;;;:::i;:::-;;:::i;2185:28::-;;;;;;;;;;;;;:::i;1998:21::-;;;-1:-1:-1;;;;;1998:21:2;;:::o;1942:19::-;;;-1:-1:-1;;;;;1942:19:2;;:::o;6226:196::-;6321:6;;6337:7;;6307:48;;-1:-1:-1;;;6307:48:2;;-1:-1:-1;;;;;6321:6:2;;;;6307:29;;:48;;6337:7;;;6346:8;;6307:48;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;6380:6:2;;6396:7;;6366:48;;-1:-1:-1;;;6366:48:2;;-1:-1:-1;;;;;6380:6:2;;;;6366:29;;:48;;6396:7;;;6405:8;;6366:48;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6226:196;;:::o;2220:66::-;;;-1:-1:-1;;;;;2220:66:2;;:::o;2428:43::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2428:43:2;;;;-1:-1:-1;;;;;2428:43:2;;;;;;;;;;:::o;2154:24::-;;;-1:-1:-1;;;2154:24:2;;;;;:::o;2048:21::-;;;-1:-1:-1;;;;;2048:21:2;;:::o;2779:354::-;2856:5;;-1:-1:-1;;;;;2856:5:2;2842:10;:19;2834:54;;;;-1:-1:-1;;;2834:54:2;;;;;;;:::i;:::-;;;;;;;;;2899:4;:14;;-1:-1:-1;;;;;;2899:14:2;-1:-1:-1;;;;;2899:14:2;;;;;;;;;;;2933:31;;;-1:-1:-1;;;2933:31:2;;;;2950:4;;;;;2933:29;;:31;;;;;;;;;;;;;;;2950:4;2933:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2924:6;:40;;-1:-1:-1;;;;;;2924:40:2;-1:-1:-1;;;;;2924:40:2;;;;;;-1:-1:-1;3001:4:2;2984:31;;;-1:-1:-1;;;2984:31:2;;;;3001:4;;;;;2984:29;;:31;;;;;;;;;;;;;;3001:4;2984:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2975:6;:40;;-1:-1:-1;;;;;;2975:40:2;-1:-1:-1;;;;;2975:40:2;;;;;;-1:-1:-1;3053:4:2;3036:28;;;-1:-1:-1;;;3036:28:2;;;;3053:4;;;;;3036:26;;:28;;;;;;;;;;;;;;3053:4;3036:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3026:7;:38;;-1:-1:-1;;;;;;3026:38:2;-1:-1:-1;;;;;3026:38:2;;;;;;-1:-1:-1;3106:4:2;3089:36;;;-1:-1:-1;;;3089:36:2;;;;3106:4;;;;;3089:34;;:36;;;;;;;;;;;;;;3106:4;3089:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3075:11;;:50;;;;;;;;;;;;;;;;;;;;2779:354;:::o;2098:22::-;;;-1:-1:-1;;;;;2098:22:2;;:::o;3141:1165::-;3223:1;3212:8;:12;3204:45;;;;-1:-1:-1;;;3204:45:2;;;;;;;:::i;:::-;3269:6;;3262:64;;-1:-1:-1;;;3262:64:2;;-1:-1:-1;;;;;3269:6:2;;;;3262:27;;:64;;3290:10;;3310:4;;3317:8;;3262:64;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3391:20;3438:4;;;;;;;;;-1:-1:-1;;;;;3438:4:2;-1:-1:-1;;;;;3425:24:2;;:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3390:61;;;;;;;3462:25;3518:3;3498:12;3513:2;3498:17;-1:-1:-1;;;;;3498:23:2;;;;;;;;-1:-1:-1;824:10:29;-1:-1:-1;;;;;3585:44:2;;;3581:124;;-1:-1:-1;3666:27:2;3581:124;3772:6;;;3788:4;3758:45;;-1:-1:-1;;;3758:45:2;;-1:-1:-1;;;;;3772:6:2;;;;3758:29;;:45;;3788:4;;;3794:8;;3758:45;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3912:17;3951:4;3932:25;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3932:25:2;;;;;;;;;;4027:4;;-1:-1:-1;;;4012:286:2;;3932:25;;-1:-1:-1;;;;;;4027:4:2;;4012:25;;:286;;4052:10;;4027:4;;4165:8;;4205:17;;3932:25;;4012:286;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;3141:1165;;;;:::o;2625:146::-;2704:5;;-1:-1:-1;;;;;2704:5:2;2690:10;:19;2682:54;;;;-1:-1:-1;;;2682:54:2;;;;;;;:::i;:::-;2747:5;:16;;-1:-1:-1;;;;;;2747:16:2;-1:-1:-1;;;;;2747:16:2;;;;;;;;;;2625:146::o;4314:1167::-;4396:1;4385:8;:12;4377:45;;;;-1:-1:-1;;;4377:45:2;;;;;;;:::i;:::-;4442:6;;4435:64;;-1:-1:-1;;;4435:64:2;;-1:-1:-1;;;;;4442:6:2;;;;4435:27;;:64;;4463:10;;4483:4;;4490:8;;4435:64;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4564:20;4611:4;;;;;;;;;-1:-1:-1;;;;;4611:4:2;-1:-1:-1;;;;;4598:24:2;;:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4563:61;;;;;;;4635:25;4692:3;4671:12;4686:3;4671:18;-1:-1:-1;;;;;4671:24:2;;;;;;;;-1:-1:-1;824:10:29;-1:-1:-1;;;;;4759:44:2;;;4755:124;;-1:-1:-1;4840:27:2;4755:124;4946:6;;;4962:4;4932:45;;-1:-1:-1;;;4932:45:2;;-1:-1:-1;;;;;4946:6:2;;;;4932:29;;:45;;4962:4;;;4968:8;;4932:45;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5086:17;5125:4;5106:25;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5106:25:2;;;;;;;;;;5201:4;;;-1:-1:-1;;;5186:287:2;;5106:25;;-1:-1:-1;;;;;;5201:4:2;;;;5186:25;;:287;;5226:10;;5201:4;5340:8;;5380:17;;5106:25;;5186:287;;;:::i;2127:20::-;;;-1:-1:-1;;;;;2127:20:2;;:::o;5559:659::-;5744:4;;-1:-1:-1;;;;;5744:4:2;5730:10;:18;5722:54;;;;-1:-1:-1;;;5722:54:2;;;;;;;:::i;:::-;5887:1;5872:12;:16;5868:108;;;5919:6;;;5936:4;5905:59;;-1:-1:-1;;;5905:59:2;;-1:-1:-1;;;;;5919:6:2;;;;5905:30;;:59;;5936:4;;;5950:12;;5905:59;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5868:108;6122:1;6107:12;:16;6103:108;;;6154:6;;;6171:4;6140:59;;-1:-1:-1;;;6140:59:2;;-1:-1:-1;;;;;6154:6:2;;;;6140:30;;:59;;6171:4;;;6185:12;;6140:59;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6103:108;5559:659;;;;:::o;2185:28::-;;;-1:-1:-1;;;2185:28:2;;;;;:::o;14:166:33:-;92:13;;141;;134:21;124:32;;114:2;;170:1;167;160:12;114:2;73:107;;;:::o;185:166::-;264:13;;317:1;306:20;;;296:31;;286:2;;341:1;338;331:12;356:165;436:13;;489:6;478:18;;468:29;;458:2;;511:1;508;501:12;526:259;;638:2;626:9;617:7;613:23;609:32;606:2;;;659:6;651;644:22;606:2;703:9;690:23;722:33;749:5;722:33;:::i;:::-;774:5;596:189;-1:-1:-1;;;596:189:33:o;790:263::-;;913:2;901:9;892:7;888:23;884:32;881:2;;;934:6;926;919:22;881:2;971:9;965:16;990:33;1017:5;990:33;:::i;1058:214::-;;1178:2;1166:9;1157:7;1153:23;1149:32;1146:2;;;1199:6;1191;1184:22;1146:2;1227:39;1256:9;1227:39;:::i;1277:216::-;;1398:2;1386:9;1377:7;1373:23;1369:32;1366:2;;;1419:6;1411;1404:22;1366:2;1447:40;1477:9;1447:40;:::i;1498:253::-;;;1636:2;1624:9;1615:7;1611:23;1607:32;1604:2;;;1657:6;1649;1642:22;1604:2;-1:-1:-1;;1685:16:33;;1741:2;1726:18;;;1720:25;1685:16;;1720:25;;-1:-1:-1;1594:157:33:o;1756:775::-;;;;;1919:2;1907:9;1898:7;1894:23;1890:32;1887:2;;;1940:6;1932;1925:22;1887:2;1981:9;1968:23;1958:33;;2038:2;2027:9;2023:18;2010:32;2000:42;;2093:2;2082:9;2078:18;2065:32;2116:18;2157:2;2149:6;2146:14;2143:2;;;2178:6;2170;2163:22;2143:2;2221:6;2210:9;2206:22;2196:32;;2266:7;2259:4;2255:2;2251:13;2247:27;2237:2;;2293:6;2285;2278:22;2237:2;2338;2325:16;2364:2;2356:6;2353:14;2350:2;;;2385:6;2377;2370:22;2350:2;2435:7;2430:2;2421:6;2417:2;2413:15;2409:24;2406:37;2403:2;;;2461:6;2453;2446:22;2403:2;1877:654;;;;-1:-1:-1;;2497:2:33;2489:11;;-1:-1:-1;;;1877:654:33:o;2536:685::-;;;;;;;2736:3;2724:9;2715:7;2711:23;2707:33;2704:2;;;2758:6;2750;2743:22;2704:2;2795:9;2789:16;2814:33;2841:5;2814:33;:::i;:::-;2866:5;-1:-1:-1;2890:49:33;2935:2;2920:18;;2890:49;:::i;:::-;2880:59;;2958:50;3004:2;2993:9;2989:18;2958:50;:::i;:::-;2948:60;;3027:50;3073:2;3062:9;3058:18;3027:50;:::i;:::-;3017:60;;3096:51;3142:3;3131:9;3127:19;3096:51;:::i;:::-;3086:61;;3166:49;3210:3;3199:9;3195:19;3166:49;:::i;:::-;3156:59;;2694:527;;;;;;;;:::o;3226:190::-;;3338:2;3326:9;3317:7;3313:23;3309:32;3306:2;;;3359:6;3351;3344:22;3306:2;-1:-1:-1;3387:23:33;;3296:120;-1:-1:-1;3296:120:33:o;3421:258::-;;;3550:2;3538:9;3529:7;3525:23;3521:32;3518:2;;;3571:6;3563;3556:22;3518:2;-1:-1:-1;;3599:23:33;;;3669:2;3654:18;;;3641:32;;-1:-1:-1;3508:171:33:o;3684:203::-;-1:-1:-1;;;;;3848:32:33;;;;3830:51;;3818:2;3803:18;;3785:102::o;3892:383::-;-1:-1:-1;;;;;4158:15:33;;;4140:34;;4210:15;;;;4205:2;4190:18;;4183:43;4257:2;4242:18;;4235:34;;;;4090:2;4075:18;;4057:218::o;4280:963::-;;4548:1;4544;4539:3;4535:11;4531:19;4589:2;4581:6;4577:15;4566:9;4559:34;4612:2;4664:6;4657:14;4650:22;4645:2;4634:9;4630:18;4623:50;4709:6;4704:2;4693:9;4689:18;4682:34;4764:2;4756:6;4752:15;4747:2;4736:9;4732:18;4725:43;4805:3;4799;4788:9;4784:19;4777:32;4838:6;4832:13;4818:27;;4882:6;4876:3;4865:9;4861:19;4854:35;4907:4;4920:141;4934:6;4931:1;4928:13;4920:141;;;5030:14;;;5026:23;;5020:30;4995:17;;;5014:3;4991:27;4984:67;4949:10;;4920:141;;;5079:6;5076:1;5073:13;5070:2;;;5150:4;5144:3;5135:6;5124:9;5120:22;5116:32;5109:46;5070:2;-1:-1:-1;;5226:2:33;5205:15;-1:-1:-1;;5201:29:33;5186:45;;;;5233:3;5182:55;;4511:732;-1:-1:-1;;;;;;4511:732:33:o;5248:497::-;-1:-1:-1;;;;;5535:15:33;;;5517:34;;-1:-1:-1;;;;;5587:47:33;;;;5582:2;5567:18;;5560:75;5671:15;;;5666:2;5651:18;;5644:43;5723:15;;;5718:2;5703:18;;5696:43;5466:3;5451:19;;5433:312::o;5750:274::-;-1:-1:-1;;;;;5942:32:33;;;;5924:51;;6006:2;5991:18;;5984:34;5912:2;5897:18;;5879:145::o;6029:188::-;6200:1;6189:21;;;;6171:40;;6159:2;6144:18;;6126:91::o;6222:346::-;6424:2;6406:21;;;6463:2;6443:18;;;6436:30;-1:-1:-1;;;6497:2:33;6482:18;;6475:52;6559:2;6544:18;;6396:172::o;6573:344::-;6775:2;6757:21;;;6814:2;6794:18;;;6787:30;-1:-1:-1;;;6848:2:33;6833:18;;6826:50;6908:2;6893:18;;6747:170::o;6922:347::-;7124:2;7106:21;;;7163:2;7143:18;;;7136:30;7202:25;7197:2;7182:18;;7175:53;7260:2;7245:18;;7096:173::o;7274:133::-;-1:-1:-1;;;;;7351:31:33;;7341:42;;7331:2;;7397:1;7394;7387:12;7331:2;7321:86;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "895200",
								"executionCost": "42600",
								"totalCost": "937800"
							},
							"external": {
								"Swap0for1(uint256)": "infinite",
								"Swap1for0(uint256)": "infinite",
								"_newAdmin(address)": "22094",
								"_newPool(address)": "infinite",
								"admin()": "1114",
								"approveTokens(uint256,uint256)": "infinite",
								"deposits(uint256)": "3838",
								"farmNFT()": "1115",
								"oracle()": "1093",
								"pool()": "1116",
								"spaceMultiplier()": "1155",
								"tickSpacing()": "1134",
								"token0()": "1094",
								"token1()": "1159",
								"uniswapV3SwapCallback(int256,int256,bytes)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1900,
									"end": 6427,
									"name": "PUSH",
									"source": 2,
									"value": "80"
								},
								{
									"begin": 1900,
									"end": 6427,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1900,
									"end": 6427,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 2220,
									"end": 2286,
									"name": "PUSH",
									"source": 2,
									"value": "5"
								},
								{
									"begin": 2220,
									"end": 2286,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2220,
									"end": 2286,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2220,
									"end": 2286,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 2244,
									"end": 2286,
									"name": "PUSH",
									"source": 2,
									"value": "F0F8249CA6493AAEBBF971B3A2FD8A2E6736981E"
								},
								{
									"begin": 2220,
									"end": 2286,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 2220,
									"end": 2286,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2220,
									"end": 2286,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 2566,
									"end": 2617,
									"name": "CALLVALUE",
									"source": 2
								},
								{
									"begin": 2566,
									"end": 2617,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2566,
									"end": 2617,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 2566,
									"end": 2617,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 2566,
									"end": 2617,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 2566,
									"end": 2617,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 2566,
									"end": 2617,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2566,
									"end": 2617,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 2566,
									"end": 2617,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 2566,
									"end": 2617,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2591,
									"end": 2596,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 2591,
									"end": 2609,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2591,
									"end": 2609,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2591,
									"end": 2609,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 2599,
									"end": 2609,
									"name": "CALLER",
									"source": 2
								},
								{
									"begin": 2591,
									"end": 2609,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 2591,
									"end": 2609,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2591,
									"end": 2609,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1900,
									"end": 6427,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1900,
									"end": 6427,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1900,
									"end": 6427,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1900,
									"end": 6427,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1900,
									"end": 6427,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 1900,
									"end": 6427,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1900,
									"end": 6427,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212203b6da2c5c478044f5c9d331b24e2836e4daa1aa0d49e90027d1b3adbc8b67c8f64736f6c63430007060033",
									".code": [
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "SHR",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH",
											"source": 2,
											"value": "D2ACA8CD"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH",
											"source": 2,
											"value": "EB20AD47"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH",
											"source": 2,
											"value": "EB20AD47"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH",
											"source": 2,
											"value": "F851A440"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH",
											"source": 2,
											"value": "FA461E33"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH",
											"source": 2,
											"value": "FD1C1518"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "tag",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH",
											"source": 2,
											"value": "D2ACA8CD"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH",
											"source": 2,
											"value": "DA802F80"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH",
											"source": 2,
											"value": "DB638298"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH",
											"source": 2,
											"value": "E6F4D0AA"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "tag",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH",
											"source": 2,
											"value": "7DC0D1D0"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH",
											"source": 2,
											"value": "7DC0D1D0"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH",
											"source": 2,
											"value": "B02C43D0"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH",
											"source": 2,
											"value": "D0C93A7C"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH",
											"source": 2,
											"value": "D21220A7"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "tag",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH",
											"source": 2,
											"value": "DFE1681"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH",
											"source": 2,
											"value": "16F0115B"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH",
											"source": 2,
											"value": "1C335703"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "tag",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1900,
											"end": 6427,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "tag",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "tag",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "tag",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "tag",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 1942,
											"end": 1961,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 1942,
											"end": 1961,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1942,
											"end": 1961,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1942,
											"end": 1961,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1942,
											"end": 1961,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1942,
											"end": 1961,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 1942,
											"end": 1961,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1942,
											"end": 1961,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1942,
											"end": 1961,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1942,
											"end": 1961,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1942,
											"end": 1961,
											"name": "tag",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 1942,
											"end": 1961,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1942,
											"end": 1961,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1942,
											"end": 1961,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 1942,
											"end": 1961,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 1942,
											"end": 1961,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6226,
											"end": 6422,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6226,
											"end": 6422,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6226,
											"end": 6422,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 6226,
											"end": 6422,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 6226,
											"end": 6422,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 6226,
											"end": 6422,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6226,
											"end": 6422,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 6226,
											"end": 6422,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6226,
											"end": 6422,
											"name": "tag",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 6226,
											"end": 6422,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6226,
											"end": 6422,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 6226,
											"end": 6422,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6226,
											"end": 6422,
											"name": "tag",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 6226,
											"end": 6422,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6226,
											"end": 6422,
											"name": "STOP",
											"source": 2
										},
										{
											"begin": 2220,
											"end": 2286,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 2220,
											"end": 2286,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2220,
											"end": 2286,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 2220,
											"end": 2286,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2220,
											"end": 2286,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2220,
											"end": 2286,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 2220,
											"end": 2286,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2220,
											"end": 2286,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2220,
											"end": 2286,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2220,
											"end": 2286,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2220,
											"end": 2286,
											"name": "tag",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 2220,
											"end": 2286,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2220,
											"end": 2286,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2220,
											"end": 2286,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 2220,
											"end": 2286,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 2220,
											"end": 2286,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "tag",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "tag",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "tag",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "tag",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "45"
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "tag",
											"source": 2,
											"value": "45"
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2048,
											"end": 2069,
											"name": "tag",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 2048,
											"end": 2069,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2048,
											"end": 2069,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 2048,
											"end": 2069,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2048,
											"end": 2069,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2048,
											"end": 2069,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "49"
										},
										{
											"begin": 2048,
											"end": 2069,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2048,
											"end": 2069,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2048,
											"end": 2069,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2048,
											"end": 2069,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2048,
											"end": 2069,
											"name": "tag",
											"source": 2,
											"value": "49"
										},
										{
											"begin": 2048,
											"end": 2069,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2048,
											"end": 2069,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2048,
											"end": 2069,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 2048,
											"end": 2069,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 2048,
											"end": 2069,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2779,
											"end": 3133,
											"name": "tag",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 2779,
											"end": 3133,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2779,
											"end": 3133,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 2779,
											"end": 3133,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2779,
											"end": 3133,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2779,
											"end": 3133,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "53"
										},
										{
											"begin": 2779,
											"end": 3133,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2779,
											"end": 3133,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2779,
											"end": 3133,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2779,
											"end": 3133,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2779,
											"end": 3133,
											"name": "tag",
											"source": 2,
											"value": "53"
										},
										{
											"begin": 2779,
											"end": 3133,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2779,
											"end": 3133,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 2779,
											"end": 3133,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 2779,
											"end": 3133,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 2779,
											"end": 3133,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2779,
											"end": 3133,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 2779,
											"end": 3133,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2779,
											"end": 3133,
											"name": "tag",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 2779,
											"end": 3133,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2779,
											"end": 3133,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "57"
										},
										{
											"begin": 2779,
											"end": 3133,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2098,
											"end": 2120,
											"name": "tag",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 2098,
											"end": 2120,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2098,
											"end": 2120,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 2098,
											"end": 2120,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2098,
											"end": 2120,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2098,
											"end": 2120,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 2098,
											"end": 2120,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2098,
											"end": 2120,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2098,
											"end": 2120,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2098,
											"end": 2120,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2098,
											"end": 2120,
											"name": "tag",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 2098,
											"end": 2120,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2098,
											"end": 2120,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2098,
											"end": 2120,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 2098,
											"end": 2120,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2098,
											"end": 2120,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3141,
											"end": 4306,
											"name": "tag",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 3141,
											"end": 4306,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3141,
											"end": 4306,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 3141,
											"end": 4306,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 3141,
											"end": 4306,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3141,
											"end": 4306,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3141,
											"end": 4306,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3141,
											"end": 4306,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3141,
											"end": 4306,
											"name": "tag",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 3141,
											"end": 4306,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3141,
											"end": 4306,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 3141,
											"end": 4306,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2625,
											"end": 2771,
											"name": "tag",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 2625,
											"end": 2771,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2625,
											"end": 2771,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 2625,
											"end": 2771,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2625,
											"end": 2771,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2625,
											"end": 2771,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 2625,
											"end": 2771,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2625,
											"end": 2771,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2625,
											"end": 2771,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2625,
											"end": 2771,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2625,
											"end": 2771,
											"name": "tag",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 2625,
											"end": 2771,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2625,
											"end": 2771,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 2625,
											"end": 2771,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 2625,
											"end": 2771,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 2625,
											"end": 2771,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2625,
											"end": 2771,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 2625,
											"end": 2771,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2625,
											"end": 2771,
											"name": "tag",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 2625,
											"end": 2771,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2625,
											"end": 2771,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 2625,
											"end": 2771,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4314,
											"end": 5481,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 4314,
											"end": 5481,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4314,
											"end": 5481,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 4314,
											"end": 5481,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "70"
										},
										{
											"begin": 4314,
											"end": 5481,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4314,
											"end": 5481,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4314,
											"end": 5481,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4314,
											"end": 5481,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4314,
											"end": 5481,
											"name": "tag",
											"source": 2,
											"value": "70"
										},
										{
											"begin": 4314,
											"end": 5481,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4314,
											"end": 5481,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "71"
										},
										{
											"begin": 4314,
											"end": 5481,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2127,
											"end": 2147,
											"name": "tag",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 2127,
											"end": 2147,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2127,
											"end": 2147,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 2127,
											"end": 2147,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2127,
											"end": 2147,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2127,
											"end": 2147,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 2127,
											"end": 2147,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2127,
											"end": 2147,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2127,
											"end": 2147,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2127,
											"end": 2147,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2127,
											"end": 2147,
											"name": "tag",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 2127,
											"end": 2147,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2127,
											"end": 2147,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2127,
											"end": 2147,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 2127,
											"end": 2147,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 2127,
											"end": 2147,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5559,
											"end": 6218,
											"name": "tag",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 5559,
											"end": 6218,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5559,
											"end": 6218,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 5559,
											"end": 6218,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5559,
											"end": 6218,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5559,
											"end": 6218,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 5559,
											"end": 6218,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5559,
											"end": 6218,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5559,
											"end": 6218,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5559,
											"end": 6218,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5559,
											"end": 6218,
											"name": "tag",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 5559,
											"end": 6218,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5559,
											"end": 6218,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 5559,
											"end": 6218,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 5559,
											"end": 6218,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 5559,
											"end": 6218,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5559,
											"end": 6218,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 5559,
											"end": 6218,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5559,
											"end": 6218,
											"name": "tag",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 5559,
											"end": 6218,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5559,
											"end": 6218,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 5559,
											"end": 6218,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2185,
											"end": 2213,
											"name": "tag",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 2185,
											"end": 2213,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2185,
											"end": 2213,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 2185,
											"end": 2213,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2185,
											"end": 2213,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2185,
											"end": 2213,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 2185,
											"end": 2213,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2185,
											"end": 2213,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2185,
											"end": 2213,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2185,
											"end": 2213,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2185,
											"end": 2213,
											"name": "tag",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 2185,
											"end": 2213,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2185,
											"end": 2213,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2185,
											"end": 2213,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "45"
										},
										{
											"begin": 2185,
											"end": 2213,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 2185,
											"end": 2213,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "tag",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1998,
											"end": 2019,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1942,
											"end": 1961,
											"name": "tag",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 1942,
											"end": 1961,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1942,
											"end": 1961,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1942,
											"end": 1961,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1942,
											"end": 1961,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1942,
											"end": 1961,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1942,
											"end": 1961,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 6226,
											"end": 6422,
											"name": "tag",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 6226,
											"end": 6422,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6321,
											"end": 6327,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 6321,
											"end": 6327,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6337,
											"end": 6344,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 6337,
											"end": 6344,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "95EA7B3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6321,
											"end": 6327,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6321,
											"end": 6327,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6321,
											"end": 6327,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6321,
											"end": 6327,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6336,
											"name": "PUSH",
											"source": 2,
											"value": "95EA7B3"
										},
										{
											"begin": 6307,
											"end": 6336,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6337,
											"end": 6344,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6337,
											"end": 6344,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6337,
											"end": 6344,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6346,
											"end": 6354,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 6346,
											"end": 6354,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "tag",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "tag",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "tag",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "tag",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 6307,
											"end": 6355,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6380,
											"end": 6386,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 6380,
											"end": 6386,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6396,
											"end": 6403,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 6396,
											"end": 6403,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "95EA7B3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6380,
											"end": 6386,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6380,
											"end": 6386,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6380,
											"end": 6386,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6380,
											"end": 6386,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6395,
											"name": "PUSH",
											"source": 2,
											"value": "95EA7B3"
										},
										{
											"begin": 6366,
											"end": 6395,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "93"
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6396,
											"end": 6403,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6396,
											"end": 6403,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6396,
											"end": 6403,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6405,
											"end": 6413,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6405,
											"end": 6413,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "tag",
											"source": 2,
											"value": "93"
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "tag",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "96"
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "tag",
											"source": 2,
											"value": "96"
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "tag",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6366,
											"end": 6414,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6226,
											"end": 6422,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6226,
											"end": 6422,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6226,
											"end": 6422,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2220,
											"end": 2286,
											"name": "tag",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 2220,
											"end": 2286,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2220,
											"end": 2286,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 2220,
											"end": 2286,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2220,
											"end": 2286,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2220,
											"end": 2286,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2220,
											"end": 2286,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "tag",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "PUSH",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2428,
											"end": 2471,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "tag",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "SIGNEXTEND",
											"source": 2
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2154,
											"end": 2178,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2048,
											"end": 2069,
											"name": "tag",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 2048,
											"end": 2069,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2048,
											"end": 2069,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2048,
											"end": 2069,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2048,
											"end": 2069,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2048,
											"end": 2069,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2048,
											"end": 2069,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2779,
											"end": 3133,
											"name": "tag",
											"source": 2,
											"value": "57"
										},
										{
											"begin": 2779,
											"end": 3133,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2856,
											"end": 2861,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2856,
											"end": 2861,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2856,
											"end": 2861,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2842,
											"end": 2852,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 2842,
											"end": 2861,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 2834,
											"end": 2888,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 2834,
											"end": 2888,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2834,
											"end": 2888,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2834,
											"end": 2888,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2834,
											"end": 2888,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2834,
											"end": 2888,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2834,
											"end": 2888,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2834,
											"end": 2888,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2834,
											"end": 2888,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2834,
											"end": 2888,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2834,
											"end": 2888,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "101"
										},
										{
											"begin": 2834,
											"end": 2888,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2834,
											"end": 2888,
											"name": "tag",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2834,
											"end": 2888,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2834,
											"end": 2888,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2834,
											"end": 2888,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2834,
											"end": 2888,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2834,
											"end": 2888,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2834,
											"end": 2888,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2834,
											"end": 2888,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2834,
											"end": 2888,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2834,
											"end": 2888,
											"name": "tag",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 2834,
											"end": 2888,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2899,
											"end": 2903,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2899,
											"end": 2913,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2899,
											"end": 2913,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2899,
											"end": 2913,
											"name": "AND",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2899,
											"end": 2913,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2899,
											"end": 2913,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2899,
											"end": 2913,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2899,
											"end": 2913,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2899,
											"end": 2913,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2899,
											"end": 2913,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2899,
											"end": 2913,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 2899,
											"end": 2913,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2899,
											"end": 2913,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2899,
											"end": 2913,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2899,
											"end": 2913,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "DFE1681"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2950,
											"end": 2954,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2950,
											"end": 2954,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2950,
											"end": 2954,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2950,
											"end": 2954,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2950,
											"end": 2954,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2962,
											"name": "PUSH",
											"source": 2,
											"value": "DFE1681"
										},
										{
											"begin": 2933,
											"end": 2962,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2950,
											"end": 2954,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "102"
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "tag",
											"source": 2,
											"value": "102"
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "STATICCALL",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "104"
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "tag",
											"source": 2,
											"value": "104"
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "105"
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "106"
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "tag",
											"source": 2,
											"value": "105"
										},
										{
											"begin": 2933,
											"end": 2964,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2924,
											"end": 2930,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2924,
											"end": 2964,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2924,
											"end": 2964,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2924,
											"end": 2964,
											"name": "AND",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2924,
											"end": 2964,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2924,
											"end": 2964,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2924,
											"end": 2964,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2924,
											"end": 2964,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 2924,
											"end": 2964,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2924,
											"end": 2964,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 3001,
											"end": 3005,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D21220A7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3001,
											"end": 3005,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3001,
											"end": 3005,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3001,
											"end": 3005,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3001,
											"end": 3005,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3001,
											"end": 3005,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3013,
											"name": "PUSH",
											"source": 2,
											"value": "D21220A7"
										},
										{
											"begin": 2984,
											"end": 3013,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3001,
											"end": 3005,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "107"
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "tag",
											"source": 2,
											"value": "107"
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "STATICCALL",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "tag",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "110"
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "106"
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "tag",
											"source": 2,
											"value": "110"
										},
										{
											"begin": 2984,
											"end": 3015,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2975,
											"end": 2981,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2975,
											"end": 3015,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2975,
											"end": 3015,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2975,
											"end": 3015,
											"name": "AND",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2975,
											"end": 3015,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2975,
											"end": 3015,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2975,
											"end": 3015,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2975,
											"end": 3015,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 2975,
											"end": 3015,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2975,
											"end": 3015,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 3053,
											"end": 3057,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23E66501"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3053,
											"end": 3057,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3053,
											"end": 3057,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3053,
											"end": 3057,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3053,
											"end": 3057,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3053,
											"end": 3057,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3062,
											"name": "PUSH",
											"source": 2,
											"value": "47CCCA02"
										},
										{
											"begin": 3036,
											"end": 3062,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3053,
											"end": 3057,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "tag",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "STATICCALL",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "113"
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "tag",
											"source": 2,
											"value": "113"
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "114"
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "106"
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "tag",
											"source": 2,
											"value": "114"
										},
										{
											"begin": 3036,
											"end": 3064,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3026,
											"end": 3033,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 3026,
											"end": 3064,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3026,
											"end": 3064,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3026,
											"end": 3064,
											"name": "AND",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3026,
											"end": 3064,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3026,
											"end": 3064,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3026,
											"end": 3064,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3026,
											"end": 3064,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 3026,
											"end": 3064,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3026,
											"end": 3064,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 3106,
											"end": 3110,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "34324E9F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3106,
											"end": 3110,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3106,
											"end": 3110,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3106,
											"end": 3110,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3106,
											"end": 3110,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3106,
											"end": 3110,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3123,
											"name": "PUSH",
											"source": 2,
											"value": "D0C93A7C"
										},
										{
											"begin": 3089,
											"end": 3123,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3106,
											"end": 3110,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "115"
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "tag",
											"source": 2,
											"value": "115"
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "STATICCALL",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "117"
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "tag",
											"source": 2,
											"value": "117"
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "118"
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "119"
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "tag",
											"source": 2,
											"value": "118"
										},
										{
											"begin": 3089,
											"end": 3125,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3075,
											"end": 3086,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3075,
											"end": 3086,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 3075,
											"end": 3125,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 3075,
											"end": 3125,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 3075,
											"end": 3125,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3075,
											"end": 3125,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3075,
											"end": 3125,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3075,
											"end": 3125,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFF"
										},
										{
											"begin": 3075,
											"end": 3125,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 3075,
											"end": 3125,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 3075,
											"end": 3125,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3075,
											"end": 3125,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3075,
											"end": 3125,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3075,
											"end": 3125,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 3075,
											"end": 3125,
											"name": "SIGNEXTEND",
											"source": 2
										},
										{
											"begin": 3075,
											"end": 3125,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFF"
										},
										{
											"begin": 3075,
											"end": 3125,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3075,
											"end": 3125,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 3075,
											"end": 3125,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 3075,
											"end": 3125,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3075,
											"end": 3125,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 3075,
											"end": 3125,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2779,
											"end": 3133,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2779,
											"end": 3133,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2098,
											"end": 2120,
											"name": "tag",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2098,
											"end": 2120,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2098,
											"end": 2120,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 2098,
											"end": 2120,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2098,
											"end": 2120,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2098,
											"end": 2120,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2098,
											"end": 2120,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3141,
											"end": 4306,
											"name": "tag",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 3141,
											"end": 4306,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3223,
											"end": 3224,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3212,
											"end": 3220,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3212,
											"end": 3224,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 3204,
											"end": 3249,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "121"
										},
										{
											"begin": 3204,
											"end": 3249,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3204,
											"end": 3249,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3204,
											"end": 3249,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3204,
											"end": 3249,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3204,
											"end": 3249,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3204,
											"end": 3249,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3204,
											"end": 3249,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3204,
											"end": 3249,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 3204,
											"end": 3249,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3204,
											"end": 3249,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "123"
										},
										{
											"begin": 3204,
											"end": 3249,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3204,
											"end": 3249,
											"name": "tag",
											"source": 2,
											"value": "121"
										},
										{
											"begin": 3204,
											"end": 3249,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3269,
											"end": 3275,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 3269,
											"end": 3275,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23B872DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3269,
											"end": 3275,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3269,
											"end": 3275,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3269,
											"end": 3275,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3269,
											"end": 3275,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3289,
											"name": "PUSH",
											"source": 2,
											"value": "23B872DD"
										},
										{
											"begin": 3262,
											"end": 3289,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "124"
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3290,
											"end": 3300,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 3290,
											"end": 3300,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3310,
											"end": 3314,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 3310,
											"end": 3314,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3317,
											"end": 3325,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 3317,
											"end": 3325,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "125"
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "tag",
											"source": 2,
											"value": "124"
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "126"
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "tag",
											"source": 2,
											"value": "126"
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "128"
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "tag",
											"source": 2,
											"value": "128"
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "129"
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "tag",
											"source": 2,
											"value": "129"
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3262,
											"end": 3326,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3391,
											"end": 3411,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3438,
											"end": 3442,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3438,
											"end": 3442,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3438,
											"end": 3442,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3438,
											"end": 3442,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3438,
											"end": 3442,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3438,
											"end": 3442,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 3438,
											"end": 3442,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 3438,
											"end": 3442,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3438,
											"end": 3442,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3438,
											"end": 3442,
											"name": "AND",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3425,
											"end": 3449,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3449,
											"name": "PUSH",
											"source": 2,
											"value": "3850C7BD"
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "PUSH",
											"source": 2,
											"value": "C0"
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "130"
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "tag",
											"source": 2,
											"value": "130"
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "STATICCALL",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "132"
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "tag",
											"source": 2,
											"value": "132"
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "133"
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "134"
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "tag",
											"source": 2,
											"value": "133"
										},
										{
											"begin": 3425,
											"end": 3451,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3451,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3451,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3451,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3451,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3451,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3451,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3451,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3462,
											"end": 3487,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3518,
											"end": 3521,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 3498,
											"end": 3510,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3513,
											"end": 3515,
											"name": "PUSH",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 3498,
											"end": 3515,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3498,
											"end": 3521,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3498,
											"end": 3521,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3498,
											"end": 3521,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 3498,
											"end": 3521,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3498,
											"end": 3521,
											"name": "INVALID",
											"source": 2
										},
										{
											"begin": 3498,
											"end": 3521,
											"name": "tag",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 3498,
											"end": 3521,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3498,
											"end": 3521,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 3498,
											"end": 3521,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 824,
											"end": 834,
											"name": "PUSH",
											"source": 29,
											"value": "1000276A3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3585,
											"end": 3629,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3585,
											"end": 3629,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3585,
											"end": 3629,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 3581,
											"end": 3705,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "136"
										},
										{
											"begin": 3581,
											"end": 3705,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3666,
											"end": 3693,
											"name": "PUSH",
											"source": 2,
											"value": "1000276A4"
										},
										{
											"begin": 3581,
											"end": 3705,
											"name": "tag",
											"source": 2,
											"value": "136"
										},
										{
											"begin": 3581,
											"end": 3705,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3772,
											"end": 3778,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 3772,
											"end": 3778,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3772,
											"end": 3778,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3788,
											"end": 3792,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "95EA7B3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3772,
											"end": 3778,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3772,
											"end": 3778,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3772,
											"end": 3778,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3772,
											"end": 3778,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3787,
											"name": "PUSH",
											"source": 2,
											"value": "95EA7B3"
										},
										{
											"begin": 3758,
											"end": 3787,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "137"
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3788,
											"end": 3792,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3788,
											"end": 3792,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3788,
											"end": 3792,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3794,
											"end": 3802,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 3794,
											"end": 3802,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "tag",
											"source": 2,
											"value": "137"
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "138"
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "tag",
											"source": 2,
											"value": "138"
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "140"
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "tag",
											"source": 2,
											"value": "140"
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "141"
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "tag",
											"source": 2,
											"value": "141"
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3803,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3912,
											"end": 3929,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3951,
											"end": 3955,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 3932,
											"end": 3957,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3932,
											"end": 3957,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3932,
											"end": 3957,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3932,
											"end": 3957,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3932,
											"end": 3957,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "142"
										},
										{
											"begin": 3932,
											"end": 3957,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3932,
											"end": 3957,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3932,
											"end": 3957,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 3932,
											"end": 3957,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3932,
											"end": 3957,
											"name": "tag",
											"source": 2,
											"value": "142"
										},
										{
											"begin": 3932,
											"end": 3957,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3932,
											"end": 3957,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3932,
											"end": 3957,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3932,
											"end": 3957,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3932,
											"end": 3957,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3932,
											"end": 3957,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 3932,
											"end": 3957,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3932,
											"end": 3957,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3932,
											"end": 3957,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3932,
											"end": 3957,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3932,
											"end": 3957,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3932,
											"end": 3957,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3932,
											"end": 3957,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3932,
											"end": 3957,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4027,
											"end": 4031,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4027,
											"end": 4031,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2515961"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3932,
											"end": 3957,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3932,
											"end": 3957,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4027,
											"end": 4031,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4027,
											"end": 4031,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4037,
											"name": "PUSH",
											"source": 2,
											"value": "128ACB08"
										},
										{
											"begin": 4012,
											"end": 4037,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "143"
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4052,
											"end": 4062,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 4052,
											"end": 4062,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4027,
											"end": 4031,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 4027,
											"end": 4031,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4165,
											"end": 4173,
											"name": "DUP10",
											"source": 2
										},
										{
											"begin": 4165,
											"end": 4173,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4205,
											"end": 4222,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 4205,
											"end": 4222,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3932,
											"end": 3957,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 3932,
											"end": 3957,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "144"
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "tag",
											"source": 2,
											"value": "143"
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "145"
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "tag",
											"source": 2,
											"value": "145"
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "147"
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "tag",
											"source": 2,
											"value": "147"
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "148"
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "149"
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "tag",
											"source": 2,
											"value": "148"
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4012,
											"end": 4298,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3141,
											"end": 4306,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3141,
											"end": 4306,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3141,
											"end": 4306,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3141,
											"end": 4306,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3141,
											"end": 4306,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2625,
											"end": 2771,
											"name": "tag",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 2625,
											"end": 2771,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2704,
											"end": 2709,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2704,
											"end": 2709,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2704,
											"end": 2709,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2690,
											"end": 2700,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 2690,
											"end": 2709,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 2682,
											"end": 2736,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "151"
										},
										{
											"begin": 2682,
											"end": 2736,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2682,
											"end": 2736,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2682,
											"end": 2736,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2682,
											"end": 2736,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2682,
											"end": 2736,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2682,
											"end": 2736,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2682,
											"end": 2736,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2682,
											"end": 2736,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2682,
											"end": 2736,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2682,
											"end": 2736,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "101"
										},
										{
											"begin": 2682,
											"end": 2736,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2682,
											"end": 2736,
											"name": "tag",
											"source": 2,
											"value": "151"
										},
										{
											"begin": 2682,
											"end": 2736,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2747,
											"end": 2752,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2747,
											"end": 2763,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2747,
											"end": 2763,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2747,
											"end": 2763,
											"name": "AND",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2747,
											"end": 2763,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2747,
											"end": 2763,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2747,
											"end": 2763,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2747,
											"end": 2763,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2747,
											"end": 2763,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2747,
											"end": 2763,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2747,
											"end": 2763,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2747,
											"end": 2763,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 2747,
											"end": 2763,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2747,
											"end": 2763,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 2625,
											"end": 2771,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 4314,
											"end": 5481,
											"name": "tag",
											"source": 2,
											"value": "71"
										},
										{
											"begin": 4314,
											"end": 5481,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4396,
											"end": 4397,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4385,
											"end": 4393,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4385,
											"end": 4397,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 4377,
											"end": 4422,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "154"
										},
										{
											"begin": 4377,
											"end": 4422,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4377,
											"end": 4422,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4377,
											"end": 4422,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4377,
											"end": 4422,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4377,
											"end": 4422,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4377,
											"end": 4422,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4377,
											"end": 4422,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4377,
											"end": 4422,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 4377,
											"end": 4422,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4377,
											"end": 4422,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "123"
										},
										{
											"begin": 4377,
											"end": 4422,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4377,
											"end": 4422,
											"name": "tag",
											"source": 2,
											"value": "154"
										},
										{
											"begin": 4377,
											"end": 4422,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4442,
											"end": 4448,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 4442,
											"end": 4448,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23B872DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4442,
											"end": 4448,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4442,
											"end": 4448,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4442,
											"end": 4448,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4442,
											"end": 4448,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4462,
											"name": "PUSH",
											"source": 2,
											"value": "23B872DD"
										},
										{
											"begin": 4435,
											"end": 4462,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4463,
											"end": 4473,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 4463,
											"end": 4473,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4483,
											"end": 4487,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 4483,
											"end": 4487,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4490,
											"end": 4498,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 4490,
											"end": 4498,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "125"
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "tag",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "157"
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "tag",
											"source": 2,
											"value": "157"
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "159"
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "tag",
											"source": 2,
											"value": "159"
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "160"
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "tag",
											"source": 2,
											"value": "160"
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4435,
											"end": 4499,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4564,
											"end": 4584,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4611,
											"end": 4615,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4611,
											"end": 4615,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4611,
											"end": 4615,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4611,
											"end": 4615,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 4611,
											"end": 4615,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4611,
											"end": 4615,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 4611,
											"end": 4615,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 4611,
											"end": 4615,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4611,
											"end": 4615,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4611,
											"end": 4615,
											"name": "AND",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4598,
											"end": 4622,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4622,
											"name": "PUSH",
											"source": 2,
											"value": "3850C7BD"
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "PUSH",
											"source": 2,
											"value": "C0"
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "161"
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "tag",
											"source": 2,
											"value": "161"
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "STATICCALL",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "163"
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "tag",
											"source": 2,
											"value": "163"
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "164"
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "134"
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "tag",
											"source": 2,
											"value": "164"
										},
										{
											"begin": 4598,
											"end": 4624,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4563,
											"end": 4624,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4563,
											"end": 4624,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4563,
											"end": 4624,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4563,
											"end": 4624,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4563,
											"end": 4624,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4563,
											"end": 4624,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4563,
											"end": 4624,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4635,
											"end": 4660,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4692,
											"end": 4695,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 4671,
											"end": 4683,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4686,
											"end": 4689,
											"name": "PUSH",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 4671,
											"end": 4689,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4671,
											"end": 4695,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4671,
											"end": 4695,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4671,
											"end": 4695,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "165"
										},
										{
											"begin": 4671,
											"end": 4695,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4671,
											"end": 4695,
											"name": "INVALID",
											"source": 2
										},
										{
											"begin": 4671,
											"end": 4695,
											"name": "tag",
											"source": 2,
											"value": "165"
										},
										{
											"begin": 4671,
											"end": 4695,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4671,
											"end": 4695,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 4671,
											"end": 4695,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 824,
											"end": 834,
											"name": "PUSH",
											"source": 29,
											"value": "1000276A3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4759,
											"end": 4803,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4759,
											"end": 4803,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4759,
											"end": 4803,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 4755,
											"end": 4879,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "166"
										},
										{
											"begin": 4755,
											"end": 4879,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4840,
											"end": 4867,
											"name": "PUSH",
											"source": 2,
											"value": "1000276A2"
										},
										{
											"begin": 4755,
											"end": 4879,
											"name": "tag",
											"source": 2,
											"value": "166"
										},
										{
											"begin": 4755,
											"end": 4879,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4946,
											"end": 4952,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 4946,
											"end": 4952,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 4946,
											"end": 4952,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4962,
											"end": 4966,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "95EA7B3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4946,
											"end": 4952,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4946,
											"end": 4952,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 4946,
											"end": 4952,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4946,
											"end": 4952,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4961,
											"name": "PUSH",
											"source": 2,
											"value": "95EA7B3"
										},
										{
											"begin": 4932,
											"end": 4961,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "167"
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4962,
											"end": 4966,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4962,
											"end": 4966,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4962,
											"end": 4966,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4968,
											"end": 4976,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 4968,
											"end": 4976,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "tag",
											"source": 2,
											"value": "167"
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "168"
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "tag",
											"source": 2,
											"value": "168"
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "170"
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "tag",
											"source": 2,
											"value": "170"
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "171"
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "tag",
											"source": 2,
											"value": "171"
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4932,
											"end": 4977,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5086,
											"end": 5103,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5125,
											"end": 5129,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 5106,
											"end": 5131,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5106,
											"end": 5131,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5106,
											"end": 5131,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5106,
											"end": 5131,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5106,
											"end": 5131,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "172"
										},
										{
											"begin": 5106,
											"end": 5131,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5106,
											"end": 5131,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5106,
											"end": 5131,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 5106,
											"end": 5131,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5106,
											"end": 5131,
											"name": "tag",
											"source": 2,
											"value": "172"
										},
										{
											"begin": 5106,
											"end": 5131,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5106,
											"end": 5131,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5106,
											"end": 5131,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5106,
											"end": 5131,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5106,
											"end": 5131,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5106,
											"end": 5131,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5106,
											"end": 5131,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5106,
											"end": 5131,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5106,
											"end": 5131,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5106,
											"end": 5131,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5106,
											"end": 5131,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5106,
											"end": 5131,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5106,
											"end": 5131,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5106,
											"end": 5131,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5201,
											"end": 5205,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5201,
											"end": 5205,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5201,
											"end": 5205,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2515961"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5186,
											"end": 5473,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5186,
											"end": 5473,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5106,
											"end": 5131,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5106,
											"end": 5131,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5201,
											"end": 5205,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5201,
											"end": 5205,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5201,
											"end": 5205,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5201,
											"end": 5205,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5186,
											"end": 5211,
											"name": "PUSH",
											"source": 2,
											"value": "128ACB08"
										},
										{
											"begin": 5186,
											"end": 5211,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5186,
											"end": 5473,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "143"
										},
										{
											"begin": 5186,
											"end": 5473,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5226,
											"end": 5236,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 5226,
											"end": 5236,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5201,
											"end": 5205,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5340,
											"end": 5348,
											"name": "DUP10",
											"source": 2
										},
										{
											"begin": 5340,
											"end": 5348,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5380,
											"end": 5397,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 5380,
											"end": 5397,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5106,
											"end": 5131,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 5106,
											"end": 5131,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5186,
											"end": 5473,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5186,
											"end": 5473,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5186,
											"end": 5473,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "144"
										},
										{
											"begin": 5186,
											"end": 5473,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2127,
											"end": 2147,
											"name": "tag",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 2127,
											"end": 2147,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2127,
											"end": 2147,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2127,
											"end": 2147,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2127,
											"end": 2147,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2127,
											"end": 2147,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2127,
											"end": 2147,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 5559,
											"end": 6218,
											"name": "tag",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 5559,
											"end": 6218,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5744,
											"end": 5748,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5744,
											"end": 5748,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5744,
											"end": 5748,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5730,
											"end": 5740,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 5730,
											"end": 5748,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 5722,
											"end": 5776,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "179"
										},
										{
											"begin": 5722,
											"end": 5776,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5722,
											"end": 5776,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5722,
											"end": 5776,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5722,
											"end": 5776,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5722,
											"end": 5776,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5722,
											"end": 5776,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5722,
											"end": 5776,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5722,
											"end": 5776,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 5722,
											"end": 5776,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5722,
											"end": 5776,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "181"
										},
										{
											"begin": 5722,
											"end": 5776,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5722,
											"end": 5776,
											"name": "tag",
											"source": 2,
											"value": "179"
										},
										{
											"begin": 5722,
											"end": 5776,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5887,
											"end": 5888,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5872,
											"end": 5884,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5872,
											"end": 5888,
											"name": "SGT",
											"source": 2
										},
										{
											"begin": 5868,
											"end": 5976,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5868,
											"end": 5976,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "182"
										},
										{
											"begin": 5868,
											"end": 5976,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5919,
											"end": 5925,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5919,
											"end": 5925,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 5919,
											"end": 5925,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5936,
											"end": 5940,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5919,
											"end": 5925,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5919,
											"end": 5925,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5919,
											"end": 5925,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5919,
											"end": 5925,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5935,
											"name": "PUSH",
											"source": 2,
											"value": "A9059CBB"
										},
										{
											"begin": 5905,
											"end": 5935,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "183"
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5936,
											"end": 5940,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5936,
											"end": 5940,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5936,
											"end": 5940,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5950,
											"end": 5962,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 5950,
											"end": 5962,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "tag",
											"source": 2,
											"value": "183"
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "184"
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "tag",
											"source": 2,
											"value": "184"
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "186"
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "tag",
											"source": 2,
											"value": "186"
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "187"
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "tag",
											"source": 2,
											"value": "187"
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5905,
											"end": 5964,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5868,
											"end": 5976,
											"name": "tag",
											"source": 2,
											"value": "182"
										},
										{
											"begin": 5868,
											"end": 5976,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6122,
											"end": 6123,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6107,
											"end": 6119,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6107,
											"end": 6123,
											"name": "SGT",
											"source": 2
										},
										{
											"begin": 6103,
											"end": 6211,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6103,
											"end": 6211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "188"
										},
										{
											"begin": 6103,
											"end": 6211,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6154,
											"end": 6160,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 6154,
											"end": 6160,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6154,
											"end": 6160,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6171,
											"end": 6175,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6154,
											"end": 6160,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6154,
											"end": 6160,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6154,
											"end": 6160,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6154,
											"end": 6160,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6170,
											"name": "PUSH",
											"source": 2,
											"value": "A9059CBB"
										},
										{
											"begin": 6140,
											"end": 6170,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "189"
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6171,
											"end": 6175,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6171,
											"end": 6175,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6171,
											"end": 6175,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6185,
											"end": 6197,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 6185,
											"end": 6197,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "tag",
											"source": 2,
											"value": "189"
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "190"
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "tag",
											"source": 2,
											"value": "190"
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "192"
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "tag",
											"source": 2,
											"value": "192"
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "193"
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "tag",
											"source": 2,
											"value": "193"
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6140,
											"end": 6199,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6103,
											"end": 6211,
											"name": "tag",
											"source": 2,
											"value": "188"
										},
										{
											"begin": 6103,
											"end": 6211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5559,
											"end": 6218,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5559,
											"end": 6218,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5559,
											"end": 6218,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5559,
											"end": 6218,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5559,
											"end": 6218,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2185,
											"end": 2213,
											"name": "tag",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 2185,
											"end": 2213,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2185,
											"end": 2213,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2185,
											"end": 2213,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2185,
											"end": 2213,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2185,
											"end": 2213,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2185,
											"end": 2213,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2185,
											"end": 2213,
											"name": "SIGNEXTEND",
											"source": 2
										},
										{
											"begin": 2185,
											"end": 2213,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2185,
											"end": 2213,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 14,
											"end": 180,
											"name": "tag",
											"source": 33,
											"value": "195"
										},
										{
											"begin": 14,
											"end": 180,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 92,
											"end": 105,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 92,
											"end": 105,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 141,
											"end": 154,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 141,
											"end": 154,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 134,
											"end": 155,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 124,
											"end": 156,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 124,
											"end": 156,
											"name": "EQ",
											"source": 33
										},
										{
											"begin": 114,
											"end": 116,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "197"
										},
										{
											"begin": 114,
											"end": 116,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 170,
											"end": 171,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 167,
											"end": 168,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 160,
											"end": 172,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 114,
											"end": 116,
											"name": "tag",
											"source": 33,
											"value": "197"
										},
										{
											"begin": 114,
											"end": 116,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 73,
											"end": 180,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 73,
											"end": 180,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 73,
											"end": 180,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 73,
											"end": 180,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 185,
											"end": 351,
											"name": "tag",
											"source": 33,
											"value": "198"
										},
										{
											"begin": 185,
											"end": 351,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 264,
											"end": 277,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 264,
											"end": 277,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 317,
											"end": 318,
											"name": "PUSH",
											"source": 33,
											"value": "2"
										},
										{
											"begin": 306,
											"end": 326,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 306,
											"end": 326,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 306,
											"end": 326,
											"name": "SIGNEXTEND",
											"source": 33
										},
										{
											"begin": 296,
											"end": 327,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 296,
											"end": 327,
											"name": "EQ",
											"source": 33
										},
										{
											"begin": 286,
											"end": 288,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "197"
										},
										{
											"begin": 286,
											"end": 288,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 341,
											"end": 342,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 338,
											"end": 339,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 331,
											"end": 343,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 356,
											"end": 521,
											"name": "tag",
											"source": 33,
											"value": "201"
										},
										{
											"begin": 356,
											"end": 521,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 436,
											"end": 449,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 436,
											"end": 449,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 489,
											"end": 495,
											"name": "PUSH",
											"source": 33,
											"value": "FFFF"
										},
										{
											"begin": 478,
											"end": 496,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 478,
											"end": 496,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 468,
											"end": 497,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 468,
											"end": 497,
											"name": "EQ",
											"source": 33
										},
										{
											"begin": 458,
											"end": 460,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "197"
										},
										{
											"begin": 458,
											"end": 460,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 511,
											"end": 512,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 508,
											"end": 509,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 501,
											"end": 513,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 526,
											"end": 785,
											"name": "tag",
											"source": 33,
											"value": "56"
										},
										{
											"begin": 526,
											"end": 785,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 526,
											"end": 785,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 638,
											"end": 640,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 626,
											"end": 635,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 617,
											"end": 624,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 613,
											"end": 636,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 609,
											"end": 641,
											"name": "SLT",
											"source": 33
										},
										{
											"begin": 606,
											"end": 608,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 606,
											"end": 608,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "205"
										},
										{
											"begin": 606,
											"end": 608,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 659,
											"end": 665,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 651,
											"end": 657,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 644,
											"end": 666,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 606,
											"end": 608,
											"name": "tag",
											"source": 33,
											"value": "205"
										},
										{
											"begin": 606,
											"end": 608,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 703,
											"end": 712,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 690,
											"end": 713,
											"name": "CALLDATALOAD",
											"source": 33
										},
										{
											"begin": 722,
											"end": 755,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "206"
										},
										{
											"begin": 749,
											"end": 754,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 722,
											"end": 755,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "207"
										},
										{
											"begin": 722,
											"end": 755,
											"name": "JUMP",
											"source": 33,
											"value": "[in]"
										},
										{
											"begin": 722,
											"end": 755,
											"name": "tag",
											"source": 33,
											"value": "206"
										},
										{
											"begin": 722,
											"end": 755,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 774,
											"end": 779,
											"name": "SWAP4",
											"source": 33
										},
										{
											"begin": 596,
											"end": 785,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 596,
											"end": 785,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 790,
											"end": 1053,
											"name": "tag",
											"source": 33,
											"value": "106"
										},
										{
											"begin": 790,
											"end": 1053,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 790,
											"end": 1053,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 913,
											"end": 915,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 901,
											"end": 910,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 892,
											"end": 899,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 888,
											"end": 911,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 884,
											"end": 916,
											"name": "SLT",
											"source": 33
										},
										{
											"begin": 881,
											"end": 883,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 881,
											"end": 883,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "209"
										},
										{
											"begin": 881,
											"end": 883,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 934,
											"end": 940,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 926,
											"end": 932,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 919,
											"end": 941,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 881,
											"end": 883,
											"name": "tag",
											"source": 33,
											"value": "209"
										},
										{
											"begin": 881,
											"end": 883,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 971,
											"end": 980,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 965,
											"end": 981,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 990,
											"end": 1023,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "206"
										},
										{
											"begin": 1017,
											"end": 1022,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 990,
											"end": 1023,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "207"
										},
										{
											"begin": 990,
											"end": 1023,
											"name": "JUMP",
											"source": 33,
											"value": "[in]"
										},
										{
											"begin": 1058,
											"end": 1272,
											"name": "tag",
											"source": 33,
											"value": "92"
										},
										{
											"begin": 1058,
											"end": 1272,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 1058,
											"end": 1272,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 1178,
											"end": 1180,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 1166,
											"end": 1175,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 1157,
											"end": 1164,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 1153,
											"end": 1176,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 1149,
											"end": 1181,
											"name": "SLT",
											"source": 33
										},
										{
											"begin": 1146,
											"end": 1148,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 1146,
											"end": 1148,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "212"
										},
										{
											"begin": 1146,
											"end": 1148,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 1199,
											"end": 1205,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 1191,
											"end": 1197,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 1184,
											"end": 1206,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 1146,
											"end": 1148,
											"name": "tag",
											"source": 33,
											"value": "212"
										},
										{
											"begin": 1146,
											"end": 1148,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 1227,
											"end": 1266,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "206"
										},
										{
											"begin": 1256,
											"end": 1265,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 1227,
											"end": 1266,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "195"
										},
										{
											"begin": 1227,
											"end": 1266,
											"name": "JUMP",
											"source": 33,
											"value": "[in]"
										},
										{
											"begin": 1277,
											"end": 1493,
											"name": "tag",
											"source": 33,
											"value": "119"
										},
										{
											"begin": 1277,
											"end": 1493,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 1277,
											"end": 1493,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 1398,
											"end": 1400,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 1386,
											"end": 1395,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 1377,
											"end": 1384,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 1373,
											"end": 1396,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 1369,
											"end": 1401,
											"name": "SLT",
											"source": 33
										},
										{
											"begin": 1366,
											"end": 1368,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 1366,
											"end": 1368,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "215"
										},
										{
											"begin": 1366,
											"end": 1368,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 1419,
											"end": 1425,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 1411,
											"end": 1417,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 1404,
											"end": 1426,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 1366,
											"end": 1368,
											"name": "tag",
											"source": 33,
											"value": "215"
										},
										{
											"begin": 1366,
											"end": 1368,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 1447,
											"end": 1487,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "206"
										},
										{
											"begin": 1477,
											"end": 1486,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 1447,
											"end": 1487,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "198"
										},
										{
											"begin": 1447,
											"end": 1487,
											"name": "JUMP",
											"source": 33,
											"value": "[in]"
										},
										{
											"begin": 1498,
											"end": 1751,
											"name": "tag",
											"source": 33,
											"value": "149"
										},
										{
											"begin": 1498,
											"end": 1751,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 1498,
											"end": 1751,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 1498,
											"end": 1751,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 1636,
											"end": 1638,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 1624,
											"end": 1633,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 1615,
											"end": 1622,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 1611,
											"end": 1634,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 1607,
											"end": 1639,
											"name": "SLT",
											"source": 33
										},
										{
											"begin": 1604,
											"end": 1606,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 1604,
											"end": 1606,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "218"
										},
										{
											"begin": 1604,
											"end": 1606,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 1657,
											"end": 1663,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 1649,
											"end": 1655,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 1642,
											"end": 1664,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 1604,
											"end": 1606,
											"name": "tag",
											"source": 33,
											"value": "218"
										},
										{
											"begin": 1604,
											"end": 1606,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1685,
											"end": 1701,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 1685,
											"end": 1701,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 1741,
											"end": 1743,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 1726,
											"end": 1744,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 1726,
											"end": 1744,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 1726,
											"end": 1744,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 1720,
											"end": 1745,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 1685,
											"end": 1701,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 1685,
											"end": 1701,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 1720,
											"end": 1745,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 1720,
											"end": 1745,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1594,
											"end": 1751,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 1756,
											"end": 2531,
											"name": "tag",
											"source": 33,
											"value": "79"
										},
										{
											"begin": 1756,
											"end": 2531,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 1756,
											"end": 2531,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 1756,
											"end": 2531,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 1756,
											"end": 2531,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 1756,
											"end": 2531,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 1919,
											"end": 1921,
											"name": "PUSH",
											"source": 33,
											"value": "60"
										},
										{
											"begin": 1907,
											"end": 1916,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 1898,
											"end": 1905,
											"name": "DUP8",
											"source": 33
										},
										{
											"begin": 1894,
											"end": 1917,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 1890,
											"end": 1922,
											"name": "SLT",
											"source": 33
										},
										{
											"begin": 1887,
											"end": 1889,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 1887,
											"end": 1889,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "220"
										},
										{
											"begin": 1887,
											"end": 1889,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 1940,
											"end": 1946,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 1932,
											"end": 1938,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 1925,
											"end": 1947,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 1887,
											"end": 1889,
											"name": "tag",
											"source": 33,
											"value": "220"
										},
										{
											"begin": 1887,
											"end": 1889,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 1981,
											"end": 1990,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 1968,
											"end": 1991,
											"name": "CALLDATALOAD",
											"source": 33
										},
										{
											"begin": 1958,
											"end": 1991,
											"name": "SWAP4",
											"source": 33
										},
										{
											"begin": 1958,
											"end": 1991,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 2038,
											"end": 2040,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 2027,
											"end": 2036,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 2023,
											"end": 2041,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 2010,
											"end": 2042,
											"name": "CALLDATALOAD",
											"source": 33
										},
										{
											"begin": 2000,
											"end": 2042,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 2000,
											"end": 2042,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 2093,
											"end": 2095,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 2082,
											"end": 2091,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 2078,
											"end": 2096,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 2065,
											"end": 2097,
											"name": "CALLDATALOAD",
											"source": 33
										},
										{
											"begin": 2116,
											"end": 2134,
											"name": "PUSH",
											"source": 33,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2157,
											"end": 2159,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 2149,
											"end": 2155,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 2146,
											"end": 2160,
											"name": "GT",
											"source": 33
										},
										{
											"begin": 2143,
											"end": 2145,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 2143,
											"end": 2145,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "221"
										},
										{
											"begin": 2143,
											"end": 2145,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 2178,
											"end": 2184,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 2170,
											"end": 2176,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 2163,
											"end": 2185,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 2143,
											"end": 2145,
											"name": "tag",
											"source": 33,
											"value": "221"
										},
										{
											"begin": 2143,
											"end": 2145,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 2221,
											"end": 2227,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 2210,
											"end": 2219,
											"name": "DUP8",
											"source": 33
										},
										{
											"begin": 2206,
											"end": 2228,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 2196,
											"end": 2228,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 2196,
											"end": 2228,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 2266,
											"end": 2273,
											"name": "DUP8",
											"source": 33
										},
										{
											"begin": 2259,
											"end": 2263,
											"name": "PUSH",
											"source": 33,
											"value": "1F"
										},
										{
											"begin": 2255,
											"end": 2257,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 2251,
											"end": 2264,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 2247,
											"end": 2274,
											"name": "SLT",
											"source": 33
										},
										{
											"begin": 2237,
											"end": 2239,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "222"
										},
										{
											"begin": 2237,
											"end": 2239,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 2293,
											"end": 2299,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 2285,
											"end": 2291,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 2278,
											"end": 2300,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 2237,
											"end": 2239,
											"name": "tag",
											"source": 33,
											"value": "222"
										},
										{
											"begin": 2237,
											"end": 2239,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 2338,
											"end": 2340,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 2325,
											"end": 2341,
											"name": "CALLDATALOAD",
											"source": 33
										},
										{
											"begin": 2364,
											"end": 2366,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 2356,
											"end": 2362,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 2353,
											"end": 2367,
											"name": "GT",
											"source": 33
										},
										{
											"begin": 2350,
											"end": 2352,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 2350,
											"end": 2352,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "223"
										},
										{
											"begin": 2350,
											"end": 2352,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 2385,
											"end": 2391,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 2377,
											"end": 2383,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 2370,
											"end": 2392,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 2350,
											"end": 2352,
											"name": "tag",
											"source": 33,
											"value": "223"
										},
										{
											"begin": 2350,
											"end": 2352,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 2435,
											"end": 2442,
											"name": "DUP9",
											"source": 33
										},
										{
											"begin": 2430,
											"end": 2432,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 2421,
											"end": 2427,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 2417,
											"end": 2419,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 2413,
											"end": 2428,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 2409,
											"end": 2433,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 2406,
											"end": 2443,
											"name": "GT",
											"source": 33
										},
										{
											"begin": 2403,
											"end": 2405,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 2403,
											"end": 2405,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "224"
										},
										{
											"begin": 2403,
											"end": 2405,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 2461,
											"end": 2467,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 2453,
											"end": 2459,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 2446,
											"end": 2468,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 2403,
											"end": 2405,
											"name": "tag",
											"source": 33,
											"value": "224"
										},
										{
											"begin": 2403,
											"end": 2405,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 1877,
											"end": 2531,
											"name": "SWAP6",
											"source": 33
										},
										{
											"begin": 1877,
											"end": 2531,
											"name": "SWAP9",
											"source": 33
										},
										{
											"begin": 1877,
											"end": 2531,
											"name": "SWAP5",
											"source": 33
										},
										{
											"begin": 1877,
											"end": 2531,
											"name": "SWAP8",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2497,
											"end": 2499,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 2489,
											"end": 2500,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 2489,
											"end": 2500,
											"name": "SWAP5",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1877,
											"end": 2531,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 2536,
											"end": 3221,
											"name": "tag",
											"source": 33,
											"value": "134"
										},
										{
											"begin": 2536,
											"end": 3221,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 2536,
											"end": 3221,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 2536,
											"end": 3221,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 2536,
											"end": 3221,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 2536,
											"end": 3221,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 2536,
											"end": 3221,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 2536,
											"end": 3221,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 2736,
											"end": 2739,
											"name": "PUSH",
											"source": 33,
											"value": "C0"
										},
										{
											"begin": 2724,
											"end": 2733,
											"name": "DUP8",
											"source": 33
										},
										{
											"begin": 2715,
											"end": 2722,
											"name": "DUP10",
											"source": 33
										},
										{
											"begin": 2711,
											"end": 2734,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 2707,
											"end": 2740,
											"name": "SLT",
											"source": 33
										},
										{
											"begin": 2704,
											"end": 2706,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 2704,
											"end": 2706,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "226"
										},
										{
											"begin": 2704,
											"end": 2706,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 2758,
											"end": 2764,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 2750,
											"end": 2756,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 2743,
											"end": 2765,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 2704,
											"end": 2706,
											"name": "tag",
											"source": 33,
											"value": "226"
										},
										{
											"begin": 2704,
											"end": 2706,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 2795,
											"end": 2804,
											"name": "DUP7",
											"source": 33
										},
										{
											"begin": 2789,
											"end": 2805,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 2814,
											"end": 2847,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "227"
										},
										{
											"begin": 2841,
											"end": 2846,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 2814,
											"end": 2847,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "207"
										},
										{
											"begin": 2814,
											"end": 2847,
											"name": "JUMP",
											"source": 33,
											"value": "[in]"
										},
										{
											"begin": 2814,
											"end": 2847,
											"name": "tag",
											"source": 33,
											"value": "227"
										},
										{
											"begin": 2814,
											"end": 2847,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 2866,
											"end": 2871,
											"name": "SWAP6",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2890,
											"end": 2939,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "228"
										},
										{
											"begin": 2935,
											"end": 2937,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 2920,
											"end": 2938,
											"name": "DUP9",
											"source": 33
										},
										{
											"begin": 2920,
											"end": 2938,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 2890,
											"end": 2939,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "198"
										},
										{
											"begin": 2890,
											"end": 2939,
											"name": "JUMP",
											"source": 33,
											"value": "[in]"
										},
										{
											"begin": 2890,
											"end": 2939,
											"name": "tag",
											"source": 33,
											"value": "228"
										},
										{
											"begin": 2890,
											"end": 2939,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 2880,
											"end": 2939,
											"name": "SWAP5",
											"source": 33
										},
										{
											"begin": 2880,
											"end": 2939,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 2958,
											"end": 3008,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "229"
										},
										{
											"begin": 3004,
											"end": 3006,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 2993,
											"end": 3002,
											"name": "DUP9",
											"source": 33
										},
										{
											"begin": 2989,
											"end": 3007,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 2958,
											"end": 3008,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "201"
										},
										{
											"begin": 2958,
											"end": 3008,
											"name": "JUMP",
											"source": 33,
											"value": "[in]"
										},
										{
											"begin": 2958,
											"end": 3008,
											"name": "tag",
											"source": 33,
											"value": "229"
										},
										{
											"begin": 2958,
											"end": 3008,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 2948,
											"end": 3008,
											"name": "SWAP4",
											"source": 33
										},
										{
											"begin": 2948,
											"end": 3008,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 3027,
											"end": 3077,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "230"
										},
										{
											"begin": 3073,
											"end": 3075,
											"name": "PUSH",
											"source": 33,
											"value": "60"
										},
										{
											"begin": 3062,
											"end": 3071,
											"name": "DUP9",
											"source": 33
										},
										{
											"begin": 3058,
											"end": 3076,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 3027,
											"end": 3077,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "201"
										},
										{
											"begin": 3027,
											"end": 3077,
											"name": "JUMP",
											"source": 33,
											"value": "[in]"
										},
										{
											"begin": 3027,
											"end": 3077,
											"name": "tag",
											"source": 33,
											"value": "230"
										},
										{
											"begin": 3027,
											"end": 3077,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 3017,
											"end": 3077,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 3017,
											"end": 3077,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 3096,
											"end": 3147,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "231"
										},
										{
											"begin": 3142,
											"end": 3145,
											"name": "PUSH",
											"source": 33,
											"value": "80"
										},
										{
											"begin": 3131,
											"end": 3140,
											"name": "DUP9",
											"source": 33
										},
										{
											"begin": 3127,
											"end": 3146,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 3096,
											"end": 3147,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "201"
										},
										{
											"begin": 3096,
											"end": 3147,
											"name": "JUMP",
											"source": 33,
											"value": "[in]"
										},
										{
											"begin": 3096,
											"end": 3147,
											"name": "tag",
											"source": 33,
											"value": "231"
										},
										{
											"begin": 3096,
											"end": 3147,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 3086,
											"end": 3147,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 3086,
											"end": 3147,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 3166,
											"end": 3215,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "232"
										},
										{
											"begin": 3210,
											"end": 3213,
											"name": "PUSH",
											"source": 33,
											"value": "A0"
										},
										{
											"begin": 3199,
											"end": 3208,
											"name": "DUP9",
											"source": 33
										},
										{
											"begin": 3195,
											"end": 3214,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 3166,
											"end": 3215,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "195"
										},
										{
											"begin": 3166,
											"end": 3215,
											"name": "JUMP",
											"source": 33,
											"value": "[in]"
										},
										{
											"begin": 3166,
											"end": 3215,
											"name": "tag",
											"source": 33,
											"value": "232"
										},
										{
											"begin": 3166,
											"end": 3215,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 3156,
											"end": 3215,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 3156,
											"end": 3215,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 2694,
											"end": 3221,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 2694,
											"end": 3221,
											"name": "SWAP6",
											"source": 33
										},
										{
											"begin": 2694,
											"end": 3221,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 2694,
											"end": 3221,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 2694,
											"end": 3221,
											"name": "SWAP6",
											"source": 33
										},
										{
											"begin": 2694,
											"end": 3221,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 2694,
											"end": 3221,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 2694,
											"end": 3221,
											"name": "SWAP6",
											"source": 33
										},
										{
											"begin": 2694,
											"end": 3221,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 3226,
											"end": 3416,
											"name": "tag",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 3226,
											"end": 3416,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 3226,
											"end": 3416,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 3338,
											"end": 3340,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 3326,
											"end": 3335,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 3317,
											"end": 3324,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 3313,
											"end": 3336,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 3309,
											"end": 3341,
											"name": "SLT",
											"source": 33
										},
										{
											"begin": 3306,
											"end": 3308,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 3306,
											"end": 3308,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "234"
										},
										{
											"begin": 3306,
											"end": 3308,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 3359,
											"end": 3365,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 3351,
											"end": 3357,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 3344,
											"end": 3366,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 3306,
											"end": 3308,
											"name": "tag",
											"source": 33,
											"value": "234"
										},
										{
											"begin": 3306,
											"end": 3308,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3387,
											"end": 3410,
											"name": "CALLDATALOAD",
											"source": 33
										},
										{
											"begin": 3387,
											"end": 3410,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 3296,
											"end": 3416,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3296,
											"end": 3416,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 3421,
											"end": 3679,
											"name": "tag",
											"source": 33,
											"value": "31"
										},
										{
											"begin": 3421,
											"end": 3679,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 3421,
											"end": 3679,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 3421,
											"end": 3679,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 3550,
											"end": 3552,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 3538,
											"end": 3547,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 3529,
											"end": 3536,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 3525,
											"end": 3548,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 3521,
											"end": 3553,
											"name": "SLT",
											"source": 33
										},
										{
											"begin": 3518,
											"end": 3520,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 3518,
											"end": 3520,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "236"
										},
										{
											"begin": 3518,
											"end": 3520,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 3571,
											"end": 3577,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 3563,
											"end": 3569,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 3556,
											"end": 3578,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 3518,
											"end": 3520,
											"name": "tag",
											"source": 33,
											"value": "236"
										},
										{
											"begin": 3518,
											"end": 3520,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3599,
											"end": 3622,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 3599,
											"end": 3622,
											"name": "CALLDATALOAD",
											"source": 33
										},
										{
											"begin": 3599,
											"end": 3622,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 3669,
											"end": 3671,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 3654,
											"end": 3672,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 3654,
											"end": 3672,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 3654,
											"end": 3672,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 3641,
											"end": 3673,
											"name": "CALLDATALOAD",
											"source": 33
										},
										{
											"begin": 3641,
											"end": 3673,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3508,
											"end": 3679,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 3684,
											"end": 3887,
											"name": "tag",
											"source": 33,
											"value": "24"
										},
										{
											"begin": 3684,
											"end": 3887,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3848,
											"end": 3880,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 3848,
											"end": 3880,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 3848,
											"end": 3880,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 3848,
											"end": 3880,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 3830,
											"end": 3881,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 3830,
											"end": 3881,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 3818,
											"end": 3820,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 3803,
											"end": 3821,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 3803,
											"end": 3821,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 3785,
											"end": 3887,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 3892,
											"end": 4275,
											"name": "tag",
											"source": 33,
											"value": "125"
										},
										{
											"begin": 3892,
											"end": 4275,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4158,
											"end": 4173,
											"name": "SWAP4",
											"source": 33
										},
										{
											"begin": 4158,
											"end": 4173,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 4158,
											"end": 4173,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 4140,
											"end": 4174,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 4140,
											"end": 4174,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 4210,
											"end": 4225,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 4210,
											"end": 4225,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 4210,
											"end": 4225,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 4210,
											"end": 4225,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 4205,
											"end": 4207,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 4190,
											"end": 4208,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 4190,
											"end": 4208,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 4183,
											"end": 4226,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 4257,
											"end": 4259,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 4242,
											"end": 4260,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 4242,
											"end": 4260,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 4235,
											"end": 4269,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 4235,
											"end": 4269,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 4235,
											"end": 4269,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 4235,
											"end": 4269,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 4090,
											"end": 4092,
											"name": "PUSH",
											"source": 33,
											"value": "60"
										},
										{
											"begin": 4075,
											"end": 4093,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 4075,
											"end": 4093,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 4057,
											"end": 4275,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 4280,
											"end": 5243,
											"name": "tag",
											"source": 33,
											"value": "144"
										},
										{
											"begin": 4280,
											"end": 5243,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 4280,
											"end": 5243,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 4548,
											"end": 4549,
											"name": "PUSH",
											"source": 33,
											"value": "1"
										},
										{
											"begin": 4544,
											"end": 4545,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 4539,
											"end": 4542,
											"name": "PUSH",
											"source": 33,
											"value": "A0"
										},
										{
											"begin": 4535,
											"end": 4546,
											"name": "SHL",
											"source": 33
										},
										{
											"begin": 4531,
											"end": 4550,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 4589,
											"end": 4591,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 4581,
											"end": 4587,
											"name": "DUP9",
											"source": 33
										},
										{
											"begin": 4577,
											"end": 4592,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 4566,
											"end": 4575,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 4559,
											"end": 4593,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 4612,
											"end": 4614,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 4664,
											"end": 4670,
											"name": "DUP8",
											"source": 33
										},
										{
											"begin": 4657,
											"end": 4671,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 4650,
											"end": 4672,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 4645,
											"end": 4647,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 4634,
											"end": 4643,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 4630,
											"end": 4648,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 4623,
											"end": 4673,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 4709,
											"end": 4715,
											"name": "DUP7",
											"source": 33
										},
										{
											"begin": 4704,
											"end": 4706,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 4693,
											"end": 4702,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 4689,
											"end": 4707,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 4682,
											"end": 4716,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 4764,
											"end": 4766,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 4756,
											"end": 4762,
											"name": "DUP7",
											"source": 33
										},
										{
											"begin": 4752,
											"end": 4767,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 4747,
											"end": 4749,
											"name": "PUSH",
											"source": 33,
											"value": "60"
										},
										{
											"begin": 4736,
											"end": 4745,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 4732,
											"end": 4750,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 4725,
											"end": 4768,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 4805,
											"end": 4808,
											"name": "PUSH",
											"source": 33,
											"value": "A0"
										},
										{
											"begin": 4799,
											"end": 4802,
											"name": "PUSH",
											"source": 33,
											"value": "80"
										},
										{
											"begin": 4788,
											"end": 4797,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 4784,
											"end": 4803,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 4777,
											"end": 4809,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 4838,
											"end": 4844,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 4832,
											"end": 4845,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 4818,
											"end": 4845,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 4818,
											"end": 4845,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 4882,
											"end": 4888,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 4876,
											"end": 4879,
											"name": "PUSH",
											"source": 33,
											"value": "A0"
										},
										{
											"begin": 4865,
											"end": 4874,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 4861,
											"end": 4880,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 4854,
											"end": 4889,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 4907,
											"end": 4911,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 4920,
											"end": 5061,
											"name": "tag",
											"source": 33,
											"value": "240"
										},
										{
											"begin": 4920,
											"end": 5061,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 4934,
											"end": 4940,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 4931,
											"end": 4932,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 4928,
											"end": 4941,
											"name": "LT",
											"source": 33
										},
										{
											"begin": 4920,
											"end": 5061,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 4920,
											"end": 5061,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "242"
										},
										{
											"begin": 4920,
											"end": 5061,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 5030,
											"end": 5044,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 5030,
											"end": 5044,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 5030,
											"end": 5044,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 5026,
											"end": 5049,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 5026,
											"end": 5049,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 5020,
											"end": 5050,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 4995,
											"end": 5012,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 4995,
											"end": 5012,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 4995,
											"end": 5012,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 5014,
											"end": 5017,
											"name": "PUSH",
											"source": 33,
											"value": "C0"
										},
										{
											"begin": 4991,
											"end": 5018,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 4984,
											"end": 5051,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 4949,
											"end": 4959,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 4949,
											"end": 4959,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 4920,
											"end": 5061,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "240"
										},
										{
											"begin": 4920,
											"end": 5061,
											"name": "JUMP",
											"source": 33
										},
										{
											"begin": 4920,
											"end": 5061,
											"name": "tag",
											"source": 33,
											"value": "242"
										},
										{
											"begin": 4920,
											"end": 5061,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 5079,
											"end": 5085,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 5076,
											"end": 5077,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 5073,
											"end": 5086,
											"name": "GT",
											"source": 33
										},
										{
											"begin": 5070,
											"end": 5072,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 5070,
											"end": 5072,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "243"
										},
										{
											"begin": 5070,
											"end": 5072,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 5150,
											"end": 5154,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 5144,
											"end": 5147,
											"name": "PUSH",
											"source": 33,
											"value": "C0"
										},
										{
											"begin": 5135,
											"end": 5141,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 5124,
											"end": 5133,
											"name": "DUP8",
											"source": 33
										},
										{
											"begin": 5120,
											"end": 5142,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 5116,
											"end": 5148,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 5109,
											"end": 5155,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 5070,
											"end": 5072,
											"name": "tag",
											"source": 33,
											"value": "243"
										},
										{
											"begin": 5070,
											"end": 5072,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5226,
											"end": 5228,
											"name": "PUSH",
											"source": 33,
											"value": "1F"
										},
										{
											"begin": 5205,
											"end": 5220,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5201,
											"end": 5230,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 5186,
											"end": 5231,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 5186,
											"end": 5231,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 5186,
											"end": 5231,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 5186,
											"end": 5231,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 5233,
											"end": 5236,
											"name": "PUSH",
											"source": 33,
											"value": "C0"
										},
										{
											"begin": 5182,
											"end": 5237,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 5182,
											"end": 5237,
											"name": "SWAP7",
											"source": 33
										},
										{
											"begin": 4511,
											"end": 5243,
											"name": "SWAP6",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4511,
											"end": 5243,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 5248,
											"end": 5745,
											"name": "tag",
											"source": 33,
											"value": "43"
										},
										{
											"begin": 5248,
											"end": 5745,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5535,
											"end": 5550,
											"name": "SWAP5",
											"source": 33
										},
										{
											"begin": 5535,
											"end": 5550,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 5535,
											"end": 5550,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 5517,
											"end": 5551,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 5517,
											"end": 5551,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5587,
											"end": 5634,
											"name": "SWAP4",
											"source": 33
										},
										{
											"begin": 5587,
											"end": 5634,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 5587,
											"end": 5634,
											"name": "SWAP4",
											"source": 33
										},
										{
											"begin": 5587,
											"end": 5634,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 5582,
											"end": 5584,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 5567,
											"end": 5585,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 5567,
											"end": 5585,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 5560,
											"end": 5635,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 5671,
											"end": 5686,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 5671,
											"end": 5686,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 5671,
											"end": 5686,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 5666,
											"end": 5668,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 5651,
											"end": 5669,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 5651,
											"end": 5669,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 5644,
											"end": 5687,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 5723,
											"end": 5738,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 5723,
											"end": 5738,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 5723,
											"end": 5738,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 5718,
											"end": 5720,
											"name": "PUSH",
											"source": 33,
											"value": "60"
										},
										{
											"begin": 5703,
											"end": 5721,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 5703,
											"end": 5721,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 5696,
											"end": 5739,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 5466,
											"end": 5469,
											"name": "PUSH",
											"source": 33,
											"value": "80"
										},
										{
											"begin": 5451,
											"end": 5470,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 5451,
											"end": 5470,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 5433,
											"end": 5745,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 5750,
											"end": 6024,
											"name": "tag",
											"source": 33,
											"value": "87"
										},
										{
											"begin": 5750,
											"end": 6024,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5942,
											"end": 5974,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 5942,
											"end": 5974,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 5942,
											"end": 5974,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 5942,
											"end": 5974,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 5924,
											"end": 5975,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 5924,
											"end": 5975,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 6006,
											"end": 6008,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 5991,
											"end": 6009,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 5991,
											"end": 6009,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 5984,
											"end": 6018,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 5912,
											"end": 5914,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 5897,
											"end": 5915,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 5897,
											"end": 5915,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 5879,
											"end": 6024,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 6029,
											"end": 6217,
											"name": "tag",
											"source": 33,
											"value": "48"
										},
										{
											"begin": 6029,
											"end": 6217,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 6200,
											"end": 6201,
											"name": "PUSH",
											"source": 33,
											"value": "2"
										},
										{
											"begin": 6189,
											"end": 6210,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 6189,
											"end": 6210,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 6189,
											"end": 6210,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 6189,
											"end": 6210,
											"name": "SIGNEXTEND",
											"source": 33
										},
										{
											"begin": 6171,
											"end": 6211,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 6171,
											"end": 6211,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 6159,
											"end": 6161,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 6144,
											"end": 6162,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 6144,
											"end": 6162,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 6126,
											"end": 6217,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 6222,
											"end": 6568,
											"name": "tag",
											"source": 33,
											"value": "101"
										},
										{
											"begin": 6222,
											"end": 6568,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 6424,
											"end": 6426,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 6406,
											"end": 6427,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 6406,
											"end": 6427,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 6406,
											"end": 6427,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 6463,
											"end": 6465,
											"name": "PUSH",
											"source": 33,
											"value": "16"
										},
										{
											"begin": 6443,
											"end": 6461,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 6443,
											"end": 6461,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 6443,
											"end": 6461,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 6436,
											"end": 6466,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4F6E6C79206F776E65722063616E20646F2074686973"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "50"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6497,
											"end": 6499,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 6482,
											"end": 6500,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 6482,
											"end": 6500,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 6475,
											"end": 6527,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 6559,
											"end": 6561,
											"name": "PUSH",
											"source": 33,
											"value": "60"
										},
										{
											"begin": 6544,
											"end": 6562,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 6544,
											"end": 6562,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 6396,
											"end": 6568,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 6573,
											"end": 6917,
											"name": "tag",
											"source": 33,
											"value": "123"
										},
										{
											"begin": 6573,
											"end": 6917,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 6775,
											"end": 6777,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 6757,
											"end": 6778,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 6757,
											"end": 6778,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 6757,
											"end": 6778,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 6814,
											"end": 6816,
											"name": "PUSH",
											"source": 33,
											"value": "14"
										},
										{
											"begin": 6794,
											"end": 6812,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 6794,
											"end": 6812,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 6794,
											"end": 6812,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 6787,
											"end": 6817,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "125B9D985B1A59081A5B9C1D5D08185B5BDD5B9D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "62"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6848,
											"end": 6850,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 6833,
											"end": 6851,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 6833,
											"end": 6851,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 6826,
											"end": 6876,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 6908,
											"end": 6910,
											"name": "PUSH",
											"source": 33,
											"value": "60"
										},
										{
											"begin": 6893,
											"end": 6911,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 6893,
											"end": 6911,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 6747,
											"end": 6917,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 6922,
											"end": 7269,
											"name": "tag",
											"source": 33,
											"value": "181"
										},
										{
											"begin": 6922,
											"end": 7269,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 7124,
											"end": 7126,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 7106,
											"end": 7127,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 7106,
											"end": 7127,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 7106,
											"end": 7127,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 7163,
											"end": 7165,
											"name": "PUSH",
											"source": 33,
											"value": "17"
										},
										{
											"begin": 7143,
											"end": 7161,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 7143,
											"end": 7161,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 7143,
											"end": 7161,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 7136,
											"end": 7166,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 7202,
											"end": 7227,
											"name": "PUSH",
											"source": 33,
											"value": "43616C6C6261636B206F6E6C792066726F6D20706F6F6C000000000000000000"
										},
										{
											"begin": 7197,
											"end": 7199,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 7182,
											"end": 7200,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 7182,
											"end": 7200,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 7175,
											"end": 7228,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 7260,
											"end": 7262,
											"name": "PUSH",
											"source": 33,
											"value": "60"
										},
										{
											"begin": 7245,
											"end": 7263,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 7245,
											"end": 7263,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 7096,
											"end": 7269,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 7274,
											"end": 7407,
											"name": "tag",
											"source": 33,
											"value": "207"
										},
										{
											"begin": 7274,
											"end": 7407,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7351,
											"end": 7382,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 7351,
											"end": 7382,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 7341,
											"end": 7383,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 7341,
											"end": 7383,
											"name": "EQ",
											"source": 33
										},
										{
											"begin": 7331,
											"end": 7333,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "251"
										},
										{
											"begin": 7331,
											"end": 7333,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 7397,
											"end": 7398,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 7394,
											"end": 7395,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 7387,
											"end": 7399,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 7331,
											"end": 7333,
											"name": "tag",
											"source": 33,
											"value": "251"
										},
										{
											"begin": 7331,
											"end": 7333,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 7321,
											"end": 7407,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 7321,
											"end": 7407,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"Swap0for1(uint256)": "db638298",
							"Swap1for0(uint256)": "eb20ad47",
							"_newAdmin(address)": "e6f4d0aa",
							"_newPool(address)": "d2aca8cd",
							"admin()": "f851a440",
							"approveTokens(uint256,uint256)": "1c335703",
							"deposits(uint256)": "b02c43d0",
							"farmNFT()": "da802f80",
							"oracle()": "7dc0d1d0",
							"pool()": "16f0115b",
							"spaceMultiplier()": "fd1c1518",
							"tickSpacing()": "d0c93a7c",
							"token0()": "0dfe1681",
							"token1()": "d21220a7",
							"uniswapV3SwapCallback(int256,int256,bytes)": "fa461e33"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"SwapExecuted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"Swap0for1\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"Swap1for0\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"_newAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"_newPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"approve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"approve1\",\"type\":\"uint256\"}],\"name\":\"approveTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spaceMultiplier\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/VeloSwapV3.sol\":\"V3Swap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/IERC721.sol\":{\"keccak256\":\"0xa5d0054dd7767bd5a6b897102ce1ec058a8d36b0c34f49a394e2b9d302f4700d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://852f1c467f89daa70d729231e543b11c47e2f125202ed123fe9ac9410868fd64\",\"dweb:/ipfs/QmeaFw32FQ9QAXen9EKZkafK4jfXogcEGex4R446DQjJ5i\"]},\"contracts/core/INonfungiblePositionManager.sol\":{\"keccak256\":\"0xfe7d9ee66050cd945f09f5a54bada3d8eb3b024aedc37b9c521703c61e3ac892\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f5d4cc3b9d41b44b2419a72bc3cd27bc0608e0b488196348b4a2e342d2114467\",\"dweb:/ipfs/QmYKKT5uccPQQSBT54wN2yZV5phs4kPYr76WvUerYiKbWp\"]},\"contracts/core/VeloSwapV3.sol\":{\"keccak256\":\"0xf6eabb16a995b2eab7fd41ddc06e791e9acc70585c315ac75512a01934480e8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3f796bc4eda37d6ee6323786b8dc07689589dbe4d172d960a8a168d881448a97\",\"dweb:/ipfs/QmRDKGCqnb42tY85RP2eMR41qDfc5esGSAQuhm8u8GB1Ab\"]},\"contracts/core/interfaces/ICLFactory.sol\":{\"keccak256\":\"0x2b8dda4776bd095c900e408b2cb21324f72694bed75c69972cd0cb3b16b1bff0\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d37ae64eabec6197ef78c9fd1d4c699398937ca5f3e9f852b11b32082ab2e680\",\"dweb:/ipfs/QmWLLA5bV17Q3fS5fDdukXsaquZ5sNoP8KvBAEfYQHfK3Z\"]},\"contracts/core/interfaces/ICLPool.sol\":{\"keccak256\":\"0x0a11e1392c4b5ef4e47a3415a9b1a2118e9370d52a253dbd1c910bbbb615e91f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://0c04e689e0589f3d67961fd5febcdc0f39c0700aeebef2537ccfb29ddba29de1\",\"dweb:/ipfs/QmbuthGhVJsx45dpgF7p71VSuLshREAsaLJu34HQNgRJoz\"]},\"contracts/core/interfaces/IERC20Minimal.sol\":{\"keccak256\":\"0xa7d3b1fd5f9b9d8848a3ed9d1137eb9c79fa1fa4484347e0f75e285a2e51ea40\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://0a3f7e24d48048a87d541cc014fd51ff4cc3c54aeb78b559d17d75884671fb43\",\"dweb:/ipfs/QmWQC2DiaLXaj3QnwUgvZrKP3xvWVxUjxXDfTMmq6aziYc\"]},\"contracts/core/interfaces/IFactoryRegistry.sol\":{\"keccak256\":\"0xa2dbe19a5c9e221ffd8e4612ee8a4aa1233ab0ad059d4b7d91a8dca1153bcea0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://47a01d481d3a1f5172b8601d267439e24662849d7ebb3e1e66ec46d541e57831\",\"dweb:/ipfs/QmYG56TEtS8dwHrNaHxGrTp8r6cDzRkuGKsHBbiToUVEvX\"]},\"contracts/core/interfaces/IVoter.sol\":{\"keccak256\":\"0x029239646ad77a70b26a702b7e286521a03d5b89d148ff7c13d9bf56f6203187\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://eccfb9403ee8f5e7f604eccb0cafcbd047c1f73371537227011e6d557895fa68\",\"dweb:/ipfs/QmTjDHzzKTzkYhTeiWA1po8YL3USKkkMZSxZixVgsSQcXK\"]},\"contracts/core/interfaces/IVotingEscrow.sol\":{\"keccak256\":\"0x17ee815f29f7bc6a1528203976ed5bfdd945354dd72a7d322e8b092e331beb3d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9845c5056470191730c8a8688663bc9808172e57395c1c6053b5145bf9fd5098\",\"dweb:/ipfs/QmXyoRGbDe6KPngPsKXWZCyLLdmRTFKdhVD5Gf1Y15rG7a\"]},\"contracts/core/interfaces/callback/ICLMintCallback.sol\":{\"keccak256\":\"0x22d4ed43f7d7313e676e80f7ae3315f53c3a84fbf256efae5116ef0aba32c1e8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a21d9618b9a9c2fe2cf35d9d6d608dd02a112bd05e6020fbe71e7e09064c2be7\",\"dweb:/ipfs/QmeBQiyVmxVTPT3ftVFDkiDVgZLMar6SQegryLC7A3jmLr\"]},\"contracts/core/interfaces/callback/ICLSwapCallback.sol\":{\"keccak256\":\"0xb93e1ef2be3090a64b3b024f60253aef64b875f61dffaef8b9231351f8054948\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b16ccd544a6a551c977b7a7d6b6b9704c68e86624d66ecb16d945d3b88239458\",\"dweb:/ipfs/QmPBP5K81AFfHazhbbVb9ZXh6hzKeLqZcEUxnrkKNY7z2L\"]},\"contracts/core/interfaces/pool/ICLPoolActions.sol\":{\"keccak256\":\"0x7699f31261ab40982e34febe16128f1edfdad39075969195301352ea66bcac40\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://074f1c470e11f30d0fae8b95b963c9d19dcbd2c5bd17ad4ebba95c5f0f073044\",\"dweb:/ipfs/QmdDWMUspgBXfLhcxqESez9rSwA8JYNRycmhkhuKoDCWqJ\"]},\"contracts/core/interfaces/pool/ICLPoolConstants.sol\":{\"keccak256\":\"0xfad00d4ca1a40ef27d9614a98483ca67c4491b6f19e376901745c57a6949b512\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://2b5ea522565efb803d146673ff9e37aa090a5abff334fea587da62f4fb5d6647\",\"dweb:/ipfs/QmVRPscHFVjYFvRbJf41zVLtA2jVLbEUH66KGtEzspXnWS\"]},\"contracts/core/interfaces/pool/ICLPoolDerivedState.sol\":{\"keccak256\":\"0xc15e4192a1b7b756cababb994341dc8e78627e1341465e47b1dcb66e9ed54af8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ee4b9269244f6b7ac57cba3b8966ac188220596d16cef71d186f0a6446593b4e\",\"dweb:/ipfs/QmQjyc5ggDgoAv4YbL5uKpNxRDoTvVYw6vePFgu4aNigmQ\"]},\"contracts/core/interfaces/pool/ICLPoolEvents.sol\":{\"keccak256\":\"0x32fbcac8952f1c5c44b466b0e1c28634ce71372c0f65242aa0d821cebdddcc2b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://19f22382292967f97640f84a7edfa01cf7deb303bf882344b9985007f1dcbef2\",\"dweb:/ipfs/Qmej7vWwun9fRBCrcvzPHdZP1jtLSCxJtjTSdkVTcgWeAE\"]},\"contracts/core/interfaces/pool/ICLPoolOwnerActions.sol\":{\"keccak256\":\"0xeafd14ae3e15c9f663507e004c599618bfd5d2a90d58b3b450f9372f9e3f54f8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://49472c8cf06dc7084e22fc57ffdce860aa7a9ff77f12e4bef0c13a078bbc5831\",\"dweb:/ipfs/Qmd29vWULezsJJzhw3wZxsU6Hsng5949v2TiVCbdga4Vqe\"]},\"contracts/core/interfaces/pool/ICLPoolState.sol\":{\"keccak256\":\"0xe57d65825a097d6f0ab55d7ae39b528695b3df65320ed524124fbb55949bfcf9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b63b25beebe612acfd564f40b0d95b3844ee71bf969a3357419e7a54f1ece961\",\"dweb:/ipfs/Qmdk3mNLz3cSZscbXFsJp69gjgxFcBv6K5mdc6tjnmtFSR\"]},\"contracts/core/libraries/BitMath.sol\":{\"keccak256\":\"0x82e425066110aac05ed8a9fc90f9ee85142b6f434769447e49d4438a8d9fcd82\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://77a97078bc992c18c59cb61e07fa4632c8a26b6babf00f3b16eabb5dcaa953b4\",\"dweb:/ipfs/QmTj15ufLWk6AxedSVXBcLp5cYf2DCJAeDi94cVemCkm54\"]},\"contracts/core/libraries/FixedPoint128.sol\":{\"keccak256\":\"0x2d1f4f73ae0d8f0a210b8d30084659b57c56ac8f2f96011fca36f00a6d417178\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://2ba88933f16cd2df398e19c6ad227268f83c03081b70d243c97116d2ed9bc241\",\"dweb:/ipfs/QmTUGxdh8snzEM9VrTSS47StCg9VVWvvLJtJeNnMTFY4xb\"]},\"contracts/core/libraries/FixedPoint96.sol\":{\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://186d3b528866065a5856f96d2aeec698efa99f8da913e9adf34f8cc296cc993d\",\"dweb:/ipfs/QmUAiMvtAQp8c9dy57bqJYzG7hkb1uChiPaQmt264skoqP\"]},\"contracts/core/libraries/FullMath.sol\":{\"keccak256\":\"0x5340256039418f5d03512a44173d3dcf1da277a73a461e06fb5668f49cfc46f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75dee99795d1125875233a7f1d356935099cc97b4085c0e451060d77db85d144\",\"dweb:/ipfs/QmTGqyrxVLQd8TBaarqSQDiYvq1QFutCdmTyXk6JpxzKTN\"]},\"contracts/core/libraries/LiquidityAmounts.sol\":{\"keccak256\":\"0xae7f7b0bbbd864bc1761ec5eac62ec761f2ef168d32ef9e914e337b077ebba4a\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b57b2f04997cd6055404801982f57083f8e9242935b3ebf3bbed032f5035f2f1\",\"dweb:/ipfs/QmdxHVMQEA32jnyroWZG2sk4NPtQFWXPfkDDYvRtK2APFA\"]},\"contracts/core/libraries/LiquidityMath.sol\":{\"keccak256\":\"0xd1059ccc904c8752cec175e8d99e31921c6cd7f3a9c2dd315ce34ac486172ac9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f3630a49e62fa056e2cc4e0278b6f17c5f7e1c9ad2190540cf84c152b58cdef8\",\"dweb:/ipfs/QmdGjKRTNY2qLXJtR2rXU8Nxk4pZwXfbzZYNn3F472QEn6\"]},\"contracts/core/libraries/LowGasSafeMath.sol\":{\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bfc1d5d58e59015086b0e65a6c3a2ddad312e2350480510f6c0c8167f3d71a37\",\"dweb:/ipfs/QmQndULYjFsHKHjMAKLMfc12vWbVB5FawtioHtvwcWRJZp\"]},\"contracts/core/libraries/Position.sol\":{\"keccak256\":\"0xcf1e701e3fae35be8b77ff1217cfdd23d33eb16fd3cec70be8ea6888f87af285\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://c8c89746dd30e76cc029d4e090e402b28aae0659cc71800758b99137dfe85f55\",\"dweb:/ipfs/QmY4Ft1YBLqzqwTgNdpCyRd7WrY78zKgg4Ddv2zqZiBEiE\"]},\"contracts/core/libraries/SafeCast.sol\":{\"keccak256\":\"0xd4c1c1b67f946b077d7c52a158113763a89a210fc2927b8491055a962ecd18c0\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://5344400c74320ca8dbe19241db7ff49babbd6c875c1b561c79d6e4315a9fb5f9\",\"dweb:/ipfs/QmRKCNTbkovxK1WvejXZr3iAHhGN97ZT1yWGsWCJFkrT5X\"]},\"contracts/core/libraries/SqrtPriceMath.sol\":{\"keccak256\":\"0xefd51a282ca9fbc89394776e7f5c6f96fa084ca26b71d99727780332c87d1843\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1f09b719eff523f65d0d11fc476b9735e1390018d5ff585991d0fc644e913ecf\",\"dweb:/ipfs/QmNiZxxQhqteYgJdhCQ3cZ4S7bTQf2AQRUJqMVvPY3doot\"]},\"contracts/core/libraries/Tick.sol\":{\"keccak256\":\"0xb5ebd80c667f4501dba65f4e39e51ff36e5334480849e0ed8604222d20b4ed1e\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://246f590513441ac0f307170f5099e4a0c0b1f579406fc30b909b249858dbd099\",\"dweb:/ipfs/QmaA5uC3eck7nMqyJbpSPEhmXmAXaKLNBSS1Lfnzzzjc95\"]},\"contracts/core/libraries/TickBitmap.sol\":{\"keccak256\":\"0xd829fadfca3f8f5870c877c7eeceb4a692603c16b711174526129987e8745f5b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1d2cbf3802f7e611708a45bc390ee9307d947e49b348294591659444b9989c05\",\"dweb:/ipfs/Qmcny7JNyVYCtcZG3b1BL4ThuKREmAkE9ZKaC3i32pnt7X\"]},\"contracts/core/libraries/TickMath.sol\":{\"keccak256\":\"0x2aa3180a8a59b34a513b948d3f2207b5376de7a2c37065853b7c9fbf0cd3d43f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://c4d46ca5384037f14497c6268342b15becf8bbe1a8fecbcd89ca5b80f41fabc2\",\"dweb:/ipfs/QmanLcdh7EppV4yJ1CdWfPB67es3nEjrDiByAYwgkSE58D\"]},\"contracts/core/libraries/TransferHelper.sol\":{\"keccak256\":\"0x3bbe07a0684d98efe73f7012e446873494e74983e1f75a16d42c25b956d61651\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://78ac9659c70ba3253a6e526ba5a144994fb3d32df2e9537787eeb45aae320aec\",\"dweb:/ipfs/QmbaZRbPP2wFZ9coJd2iyPM37hm3kXzPLuRtL6KKr1MCSL\"]},\"contracts/core/libraries/UnsafeMath.sol\":{\"keccak256\":\"0x5f36d7d16348d8c37fe64fda932018d6e5e8acecd054f0f97d32db62d20c6c88\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://4bd4e817ea3d2c26bb2be7e58db3eaa403119562c18d4c09cc92fb31aa231496\",\"dweb:/ipfs/QmbpjgL8Hf1mhmUyf9hpuPk4noGAggCdTqaRBFKqNF3AQw\"]},\"contracts/libraries/VelodromeTimeLibrary.sol\":{\"keccak256\":\"0x53d5f0b1b864a7dc552ef0291526938a36b1936517d17f62515bb6ba51c1260d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bbc80fd3b18f04224a2a813d6c20a305c7e0479d6414a78d482b45635bc97dba\",\"dweb:/ipfs/QmQFbXCkjzeFgY5M8DyeKZjxeuN8xGdmUmjNH7FNMkLi8T\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 443,
								"contract": "contracts/core/VeloSwapV3.sol:V3Swap",
								"label": "pool",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 445,
								"contract": "contracts/core/VeloSwapV3.sol:V3Swap",
								"label": "token0",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 447,
								"contract": "contracts/core/VeloSwapV3.sol:V3Swap",
								"label": "token1",
								"offset": 0,
								"slot": "2",
								"type": "t_address"
							},
							{
								"astId": 449,
								"contract": "contracts/core/VeloSwapV3.sol:V3Swap",
								"label": "farmNFT",
								"offset": 0,
								"slot": "3",
								"type": "t_address"
							},
							{
								"astId": 451,
								"contract": "contracts/core/VeloSwapV3.sol:V3Swap",
								"label": "admin",
								"offset": 0,
								"slot": "4",
								"type": "t_address"
							},
							{
								"astId": 453,
								"contract": "contracts/core/VeloSwapV3.sol:V3Swap",
								"label": "tickSpacing",
								"offset": 20,
								"slot": "4",
								"type": "t_int24"
							},
							{
								"astId": 455,
								"contract": "contracts/core/VeloSwapV3.sol:V3Swap",
								"label": "spaceMultiplier",
								"offset": 23,
								"slot": "4",
								"type": "t_int24"
							},
							{
								"astId": 458,
								"contract": "contracts/core/VeloSwapV3.sol:V3Swap",
								"label": "oracle",
								"offset": 0,
								"slot": "5",
								"type": "t_address"
							},
							{
								"astId": 471,
								"contract": "contracts/core/VeloSwapV3.sol:V3Swap",
								"label": "deposits",
								"offset": 0,
								"slot": "6",
								"type": "t_mapping(t_uint256,t_struct(Deposit)467_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_int24": {
								"encoding": "inplace",
								"label": "int24",
								"numberOfBytes": "3"
							},
							"t_mapping(t_uint256,t_struct(Deposit)467_storage)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => struct V3Swap.Deposit)",
								"numberOfBytes": "32",
								"value": "t_struct(Deposit)467_storage"
							},
							"t_struct(Deposit)467_storage": {
								"encoding": "inplace",
								"label": "struct V3Swap.Deposit",
								"members": [
									{
										"astId": 460,
										"contract": "contracts/core/VeloSwapV3.sol:V3Swap",
										"label": "owner",
										"offset": 0,
										"slot": "0",
										"type": "t_address"
									},
									{
										"astId": 462,
										"contract": "contracts/core/VeloSwapV3.sol:V3Swap",
										"label": "liquidity",
										"offset": 0,
										"slot": "1",
										"type": "t_uint128"
									},
									{
										"astId": 464,
										"contract": "contracts/core/VeloSwapV3.sol:V3Swap",
										"label": "token0",
										"offset": 0,
										"slot": "2",
										"type": "t_address"
									},
									{
										"astId": 466,
										"contract": "contracts/core/VeloSwapV3.sol:V3Swap",
										"label": "token1",
										"offset": 0,
										"slot": "3",
										"type": "t_address"
									}
								],
								"numberOfBytes": "128"
							},
							"t_uint128": {
								"encoding": "inplace",
								"label": "uint128",
								"numberOfBytes": "16"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/core/interfaces/ICLFactory.sol": {
				"ICLFactory": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint24",
									"name": "oldUnstakedFee",
									"type": "uint24"
								},
								{
									"indexed": true,
									"internalType": "uint24",
									"name": "newUnstakedFee",
									"type": "uint24"
								}
							],
							"name": "DefaultUnstakedFeeChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "oldOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnerChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"name": "PoolCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "oldFeeManager",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newFeeManager",
									"type": "address"
								}
							],
							"name": "SwapFeeManagerChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "oldFeeModule",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newFeeModule",
									"type": "address"
								}
							],
							"name": "SwapFeeModuleChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								}
							],
							"name": "TickSpacingEnabled",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "oldFeeManager",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newFeeManager",
									"type": "address"
								}
							],
							"name": "UnstakedFeeManagerChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "oldFeeModule",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newFeeModule",
									"type": "address"
								}
							],
							"name": "UnstakedFeeModuleChanged",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "allPools",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "allPoolsLength",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "createPool",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "defaultUnstakedFee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								}
							],
							"name": "enableTickSpacing",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factoryRegistry",
							"outputs": [
								{
									"internalType": "contract IFactoryRegistry",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								}
							],
							"name": "getPool",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"name": "getSwapFee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"name": "getUnstakedFee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"name": "isPair",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "poolImplementation",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint24",
									"name": "_defaultUnstakedFee",
									"type": "uint24"
								}
							],
							"name": "setDefaultUnstakedFee",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								}
							],
							"name": "setOwner",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_swapFeeManager",
									"type": "address"
								}
							],
							"name": "setSwapFeeManager",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_swapFeeModule",
									"type": "address"
								}
							],
							"name": "setSwapFeeModule",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_unstakedFeeManager",
									"type": "address"
								}
							],
							"name": "setUnstakedFeeManager",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_unstakedFeeModule",
									"type": "address"
								}
							],
							"name": "setUnstakedFeeModule",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "swapFeeManager",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "swapFeeModule",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								}
							],
							"name": "tickSpacingToFee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacings",
							"outputs": [
								{
									"internalType": "int24[]",
									"name": "",
									"type": "int24[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unstakedFeeManager",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unstakedFeeModule",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "voter",
							"outputs": [
								{
									"internalType": "contract IVoter",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"DefaultUnstakedFeeChanged(uint24,uint24)": {
								"params": {
									"newUnstakedFee": "The defaultUnstakedFee after the unstakedFeeModule was changed",
									"oldUnstakedFee": "The defaultUnstakedFee before the defaultUnstakedFee was changed"
								}
							},
							"OwnerChanged(address,address)": {
								"params": {
									"newOwner": "The owner after the owner was changed",
									"oldOwner": "The owner before the owner was changed"
								}
							},
							"PoolCreated(address,address,int24,address)": {
								"params": {
									"pool": "The address of the created pool",
									"tickSpacing": "The minimum number of ticks between initialized ticks",
									"token0": "The first token of the pool by address sort order",
									"token1": "The second token of the pool by address sort order"
								}
							},
							"SwapFeeManagerChanged(address,address)": {
								"params": {
									"newFeeManager": "The swapFeeManager after the swapFeeManager was changed",
									"oldFeeManager": "The swapFeeManager before the swapFeeManager was changed"
								}
							},
							"SwapFeeModuleChanged(address,address)": {
								"params": {
									"newFeeModule": "The swapFeeModule after the swapFeeModule was changed",
									"oldFeeModule": "The swapFeeModule before the swapFeeModule was changed"
								}
							},
							"TickSpacingEnabled(int24,uint24)": {
								"params": {
									"fee": "The default fee for a pool created with a given tickSpacing",
									"tickSpacing": "The minimum number of ticks between initialized ticks for pools"
								}
							},
							"UnstakedFeeManagerChanged(address,address)": {
								"params": {
									"newFeeManager": "The unstakedFeeManager after the unstakedFeeManager was changed",
									"oldFeeManager": "The unstakedFeeManager before the unstakedFeeManager was changed"
								}
							},
							"UnstakedFeeModuleChanged(address,address)": {
								"params": {
									"newFeeModule": "The unstakedFeeModule after the unstakedFeeModule was changed",
									"oldFeeModule": "The unstakedFeeModule before the unstakedFeeModule was changed"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"allPools(uint256)": {
								"params": {
									"index": "Index of the pool"
								},
								"returns": {
									"_0": "The pool address in the given index"
								}
							},
							"allPoolsLength()": {
								"returns": {
									"_0": "Number of pools created from this factory"
								}
							},
							"createPool(address,address,int24,uint160)": {
								"details": "tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. The call will revert if the pool already exists, the tick spacing is invalid, or the token arguments are invalid",
								"params": {
									"sqrtPriceX96": "The initial sqrt price of the pool, as a Q64.96",
									"tickSpacing": "The desired tick spacing for the pool",
									"tokenA": "One of the two tokens in the desired pool",
									"tokenB": "The other of the two tokens in the desired pool"
								},
								"returns": {
									"pool": "The address of the newly created pool"
								}
							},
							"defaultUnstakedFee()": {
								"details": "Can be changed by the current unstaked fee manager via setDefaultUnstakedFee",
								"returns": {
									"_0": "The default Unstaked Fee of the factory"
								}
							},
							"enableTickSpacing(int24,uint24)": {
								"details": "Tick spacings may never be removed once enabled",
								"params": {
									"fee": "The default fee associated with a given tick spacing",
									"tickSpacing": "The spacing between ticks to be enforced in the pool"
								}
							},
							"factoryRegistry()": {
								"returns": {
									"_0": "The address of the factory registry"
								}
							},
							"getPool(address,address,int24)": {
								"details": "tokenA and tokenB may be passed in either token0/token1 or token1/token0 order",
								"params": {
									"tickSpacing": "The tick spacing of the pool",
									"tokenA": "The contract address of either token0 or token1",
									"tokenB": "The contract address of the other token"
								},
								"returns": {
									"pool": "The pool address"
								}
							},
							"getSwapFee(address)": {
								"details": "Swap & flash fee is denominated in pips. i.e. 1e-6",
								"params": {
									"pool": "The pool to get the swap & flash fee for"
								},
								"returns": {
									"_0": "The swap & flash fee for the given pool"
								}
							},
							"getUnstakedFee(address)": {
								"details": "Unstaked fee is denominated in pips. i.e. 1e-6",
								"params": {
									"pool": "The pool to get the unstaked fee for"
								},
								"returns": {
									"_0": "The unstaked fee for the given pool"
								}
							},
							"isPair(address)": {
								"params": {
									"pool": "The address of the pool to check"
								},
								"returns": {
									"_0": "Whether the pool is a valid pool of the factory"
								}
							},
							"owner()": {
								"details": "Can be changed by the current owner via setOwner",
								"returns": {
									"_0": "The address of the factory owner"
								}
							},
							"poolImplementation()": {
								"returns": {
									"_0": "The address of the pool implementation contract"
								}
							},
							"setDefaultUnstakedFee(uint24)": {
								"details": "Must be called by the current unstaked fee manager",
								"params": {
									"_defaultUnstakedFee": "The new defaultUnstakedFee of the factory"
								}
							},
							"setOwner(address)": {
								"details": "Must be called by the current owner",
								"params": {
									"_owner": "The new owner of the factory"
								}
							},
							"setSwapFeeManager(address)": {
								"details": "Must be called by the current swap fee manager",
								"params": {
									"_swapFeeManager": "The new swapFeeManager of the factory"
								}
							},
							"setSwapFeeModule(address)": {
								"details": "Must be called by the current swap fee manager",
								"params": {
									"_swapFeeModule": "The new swapFeeModule of the factory"
								}
							},
							"setUnstakedFeeManager(address)": {
								"details": "Must be called by the current unstaked fee manager",
								"params": {
									"_unstakedFeeManager": "The new unstakedFeeManager of the factory"
								}
							},
							"setUnstakedFeeModule(address)": {
								"details": "Must be called by the current unstaked fee manager",
								"params": {
									"_unstakedFeeModule": "The new unstakedFeeModule of the factory"
								}
							},
							"swapFeeManager()": {
								"details": "Can be changed by the current swap fee manager via setSwapFeeManager",
								"returns": {
									"_0": "The address of the factory swapFeeManager"
								}
							},
							"swapFeeModule()": {
								"details": "Can be changed by the current swap fee manager via setSwapFeeModule",
								"returns": {
									"_0": "The address of the factory swapFeeModule"
								}
							},
							"tickSpacingToFee(int24)": {
								"details": "Use getFee for the most up to date fee for a given pool. A tick spacing can never be removed, so this value should be hard coded or cached in the calling context",
								"params": {
									"tickSpacing": "The enabled tick spacing. Returns 0 if not enabled"
								},
								"returns": {
									"fee": "The default fee for the given tick spacing"
								}
							},
							"tickSpacings()": {
								"details": "Tick spacings cannot be removed. Tick spacings are not ordered",
								"returns": {
									"_0": "List of enabled tick spacings"
								}
							},
							"unstakedFeeManager()": {
								"details": "Can be changed by the current unstaked fee manager via setUnstakedFeeManager",
								"returns": {
									"_0": "The address of the factory unstakedFeeManager"
								}
							},
							"unstakedFeeModule()": {
								"details": "Can be changed by the current unstaked fee manager via setUnstakedFeeModule",
								"returns": {
									"_0": "The address of the factory unstakedFeeModule"
								}
							},
							"voter()": {
								"returns": {
									"_0": "The address of the voter contract"
								}
							}
						},
						"title": "The interface for the CL Factory",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allPools(uint256)": "41d1de97",
							"allPoolsLength()": "efde4e64",
							"createPool(address,address,int24,uint160)": "232aa5ac",
							"defaultUnstakedFee()": "e2824832",
							"enableTickSpacing(int24,uint24)": "eee0fdb4",
							"factoryRegistry()": "3bf0c9fb",
							"getPool(address,address,int24)": "28af8d0b",
							"getSwapFee(address)": "35458dcc",
							"getUnstakedFee(address)": "48cf7a43",
							"isPair(address)": "e5e31b13",
							"owner()": "8da5cb5b",
							"poolImplementation()": "cefa7799",
							"setDefaultUnstakedFee(uint24)": "a2f97f42",
							"setOwner(address)": "13af4035",
							"setSwapFeeManager(address)": "ffb4d9d1",
							"setSwapFeeModule(address)": "61b9c3ec",
							"setUnstakedFeeManager(address)": "93ce8627",
							"setUnstakedFeeModule(address)": "1b31d878",
							"swapFeeManager()": "d574afa9",
							"swapFeeModule()": "23c43a51",
							"tickSpacingToFee(int24)": "380dc1c2",
							"tickSpacings()": "9cbbbe86",
							"unstakedFeeManager()": "82e189e0",
							"unstakedFeeModule()": "7693bc11",
							"voter()": "46c96aac"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"oldUnstakedFee\",\"type\":\"uint24\"},{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"newUnstakedFee\",\"type\":\"uint24\"}],\"name\":\"DefaultUnstakedFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldFeeManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeManager\",\"type\":\"address\"}],\"name\":\"SwapFeeManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldFeeModule\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeModule\",\"type\":\"address\"}],\"name\":\"SwapFeeModuleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"TickSpacingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldFeeManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeManager\",\"type\":\"address\"}],\"name\":\"UnstakedFeeManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldFeeModule\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeModule\",\"type\":\"address\"}],\"name\":\"UnstakedFeeModuleChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"allPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPoolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultUnstakedFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"enableTickSpacing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryRegistry\",\"outputs\":[{\"internalType\":\"contract IFactoryRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getSwapFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getUnstakedFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"_defaultUnstakedFee\",\"type\":\"uint24\"}],\"name\":\"setDefaultUnstakedFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapFeeManager\",\"type\":\"address\"}],\"name\":\"setSwapFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapFeeModule\",\"type\":\"address\"}],\"name\":\"setSwapFeeModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_unstakedFeeManager\",\"type\":\"address\"}],\"name\":\"setUnstakedFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_unstakedFeeModule\",\"type\":\"address\"}],\"name\":\"setUnstakedFeeModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFeeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFeeModule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"}],\"name\":\"tickSpacingToFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacings\",\"outputs\":[{\"internalType\":\"int24[]\",\"name\":\"\",\"type\":\"int24[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakedFeeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakedFeeModule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voter\",\"outputs\":[{\"internalType\":\"contract IVoter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"DefaultUnstakedFeeChanged(uint24,uint24)\":{\"params\":{\"newUnstakedFee\":\"The defaultUnstakedFee after the unstakedFeeModule was changed\",\"oldUnstakedFee\":\"The defaultUnstakedFee before the defaultUnstakedFee was changed\"}},\"OwnerChanged(address,address)\":{\"params\":{\"newOwner\":\"The owner after the owner was changed\",\"oldOwner\":\"The owner before the owner was changed\"}},\"PoolCreated(address,address,int24,address)\":{\"params\":{\"pool\":\"The address of the created pool\",\"tickSpacing\":\"The minimum number of ticks between initialized ticks\",\"token0\":\"The first token of the pool by address sort order\",\"token1\":\"The second token of the pool by address sort order\"}},\"SwapFeeManagerChanged(address,address)\":{\"params\":{\"newFeeManager\":\"The swapFeeManager after the swapFeeManager was changed\",\"oldFeeManager\":\"The swapFeeManager before the swapFeeManager was changed\"}},\"SwapFeeModuleChanged(address,address)\":{\"params\":{\"newFeeModule\":\"The swapFeeModule after the swapFeeModule was changed\",\"oldFeeModule\":\"The swapFeeModule before the swapFeeModule was changed\"}},\"TickSpacingEnabled(int24,uint24)\":{\"params\":{\"fee\":\"The default fee for a pool created with a given tickSpacing\",\"tickSpacing\":\"The minimum number of ticks between initialized ticks for pools\"}},\"UnstakedFeeManagerChanged(address,address)\":{\"params\":{\"newFeeManager\":\"The unstakedFeeManager after the unstakedFeeManager was changed\",\"oldFeeManager\":\"The unstakedFeeManager before the unstakedFeeManager was changed\"}},\"UnstakedFeeModuleChanged(address,address)\":{\"params\":{\"newFeeModule\":\"The unstakedFeeModule after the unstakedFeeModule was changed\",\"oldFeeModule\":\"The unstakedFeeModule before the unstakedFeeModule was changed\"}}},\"kind\":\"dev\",\"methods\":{\"allPools(uint256)\":{\"params\":{\"index\":\"Index of the pool\"},\"returns\":{\"_0\":\"The pool address in the given index\"}},\"allPoolsLength()\":{\"returns\":{\"_0\":\"Number of pools created from this factory\"}},\"createPool(address,address,int24,uint160)\":{\"details\":\"tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. The call will revert if the pool already exists, the tick spacing is invalid, or the token arguments are invalid\",\"params\":{\"sqrtPriceX96\":\"The initial sqrt price of the pool, as a Q64.96\",\"tickSpacing\":\"The desired tick spacing for the pool\",\"tokenA\":\"One of the two tokens in the desired pool\",\"tokenB\":\"The other of the two tokens in the desired pool\"},\"returns\":{\"pool\":\"The address of the newly created pool\"}},\"defaultUnstakedFee()\":{\"details\":\"Can be changed by the current unstaked fee manager via setDefaultUnstakedFee\",\"returns\":{\"_0\":\"The default Unstaked Fee of the factory\"}},\"enableTickSpacing(int24,uint24)\":{\"details\":\"Tick spacings may never be removed once enabled\",\"params\":{\"fee\":\"The default fee associated with a given tick spacing\",\"tickSpacing\":\"The spacing between ticks to be enforced in the pool\"}},\"factoryRegistry()\":{\"returns\":{\"_0\":\"The address of the factory registry\"}},\"getPool(address,address,int24)\":{\"details\":\"tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\",\"params\":{\"tickSpacing\":\"The tick spacing of the pool\",\"tokenA\":\"The contract address of either token0 or token1\",\"tokenB\":\"The contract address of the other token\"},\"returns\":{\"pool\":\"The pool address\"}},\"getSwapFee(address)\":{\"details\":\"Swap & flash fee is denominated in pips. i.e. 1e-6\",\"params\":{\"pool\":\"The pool to get the swap & flash fee for\"},\"returns\":{\"_0\":\"The swap & flash fee for the given pool\"}},\"getUnstakedFee(address)\":{\"details\":\"Unstaked fee is denominated in pips. i.e. 1e-6\",\"params\":{\"pool\":\"The pool to get the unstaked fee for\"},\"returns\":{\"_0\":\"The unstaked fee for the given pool\"}},\"isPair(address)\":{\"params\":{\"pool\":\"The address of the pool to check\"},\"returns\":{\"_0\":\"Whether the pool is a valid pool of the factory\"}},\"owner()\":{\"details\":\"Can be changed by the current owner via setOwner\",\"returns\":{\"_0\":\"The address of the factory owner\"}},\"poolImplementation()\":{\"returns\":{\"_0\":\"The address of the pool implementation contract\"}},\"setDefaultUnstakedFee(uint24)\":{\"details\":\"Must be called by the current unstaked fee manager\",\"params\":{\"_defaultUnstakedFee\":\"The new defaultUnstakedFee of the factory\"}},\"setOwner(address)\":{\"details\":\"Must be called by the current owner\",\"params\":{\"_owner\":\"The new owner of the factory\"}},\"setSwapFeeManager(address)\":{\"details\":\"Must be called by the current swap fee manager\",\"params\":{\"_swapFeeManager\":\"The new swapFeeManager of the factory\"}},\"setSwapFeeModule(address)\":{\"details\":\"Must be called by the current swap fee manager\",\"params\":{\"_swapFeeModule\":\"The new swapFeeModule of the factory\"}},\"setUnstakedFeeManager(address)\":{\"details\":\"Must be called by the current unstaked fee manager\",\"params\":{\"_unstakedFeeManager\":\"The new unstakedFeeManager of the factory\"}},\"setUnstakedFeeModule(address)\":{\"details\":\"Must be called by the current unstaked fee manager\",\"params\":{\"_unstakedFeeModule\":\"The new unstakedFeeModule of the factory\"}},\"swapFeeManager()\":{\"details\":\"Can be changed by the current swap fee manager via setSwapFeeManager\",\"returns\":{\"_0\":\"The address of the factory swapFeeManager\"}},\"swapFeeModule()\":{\"details\":\"Can be changed by the current swap fee manager via setSwapFeeModule\",\"returns\":{\"_0\":\"The address of the factory swapFeeModule\"}},\"tickSpacingToFee(int24)\":{\"details\":\"Use getFee for the most up to date fee for a given pool. A tick spacing can never be removed, so this value should be hard coded or cached in the calling context\",\"params\":{\"tickSpacing\":\"The enabled tick spacing. Returns 0 if not enabled\"},\"returns\":{\"fee\":\"The default fee for the given tick spacing\"}},\"tickSpacings()\":{\"details\":\"Tick spacings cannot be removed. Tick spacings are not ordered\",\"returns\":{\"_0\":\"List of enabled tick spacings\"}},\"unstakedFeeManager()\":{\"details\":\"Can be changed by the current unstaked fee manager via setUnstakedFeeManager\",\"returns\":{\"_0\":\"The address of the factory unstakedFeeManager\"}},\"unstakedFeeModule()\":{\"details\":\"Can be changed by the current unstaked fee manager via setUnstakedFeeModule\",\"returns\":{\"_0\":\"The address of the factory unstakedFeeModule\"}},\"voter()\":{\"returns\":{\"_0\":\"The address of the voter contract\"}}},\"title\":\"The interface for the CL Factory\",\"version\":1},\"userdoc\":{\"events\":{\"DefaultUnstakedFeeChanged(uint24,uint24)\":{\"notice\":\"Emitted when the defaultUnstakedFee of the factory is changed\"},\"OwnerChanged(address,address)\":{\"notice\":\"Emitted when the owner of the factory is changed\"},\"PoolCreated(address,address,int24,address)\":{\"notice\":\"Emitted when a pool is created\"},\"SwapFeeManagerChanged(address,address)\":{\"notice\":\"Emitted when the swapFeeManager of the factory is changed\"},\"SwapFeeModuleChanged(address,address)\":{\"notice\":\"Emitted when the swapFeeModule of the factory is changed\"},\"TickSpacingEnabled(int24,uint24)\":{\"notice\":\"Emitted when a new tick spacing is enabled for pool creation via the factory\"},\"UnstakedFeeManagerChanged(address,address)\":{\"notice\":\"Emitted when the unstakedFeeManager of the factory is changed\"},\"UnstakedFeeModuleChanged(address,address)\":{\"notice\":\"Emitted when the unstakedFeeModule of the factory is changed\"}},\"kind\":\"user\",\"methods\":{\"allPools(uint256)\":{\"notice\":\"Return address of pool created by this factory given its `index`\"},\"allPoolsLength()\":{\"notice\":\"Returns the number of pools created from this factory\"},\"createPool(address,address,int24,uint160)\":{\"notice\":\"Creates a pool for the given two tokens and fee\"},\"defaultUnstakedFee()\":{\"notice\":\"Returns the current defaultUnstakedFee of the factory\"},\"enableTickSpacing(int24,uint24)\":{\"notice\":\"Enables a certain tickSpacing\"},\"factoryRegistry()\":{\"notice\":\"Factory registry for valid pool / gauge / rewards factories\"},\"getPool(address,address,int24)\":{\"notice\":\"Returns the pool address for a given pair of tokens and a tick spacing, or address 0 if it does not exist\"},\"getSwapFee(address)\":{\"notice\":\"Get swap & flash fee for a given pool. Accounts for default and dynamic fees\"},\"getUnstakedFee(address)\":{\"notice\":\"Get unstaked fee for a given pool. Accounts for default and dynamic fees\"},\"isPair(address)\":{\"notice\":\"Used in VotingEscrow to determine if a contract is a valid pool of the factory\"},\"owner()\":{\"notice\":\"Returns the current owner of the factory\"},\"poolImplementation()\":{\"notice\":\"The address of the pool implementation contract used to deploy proxies / clones\"},\"setDefaultUnstakedFee(uint24)\":{\"notice\":\"Updates the defaultUnstakedFee of the factory\"},\"setOwner(address)\":{\"notice\":\"Updates the owner of the factory\"},\"setSwapFeeManager(address)\":{\"notice\":\"Updates the swapFeeManager of the factory\"},\"setSwapFeeModule(address)\":{\"notice\":\"Updates the swapFeeModule of the factory\"},\"setUnstakedFeeManager(address)\":{\"notice\":\"Updates the unstakedFeeManager of the factory\"},\"setUnstakedFeeModule(address)\":{\"notice\":\"Updates the unstakedFeeModule of the factory\"},\"swapFeeManager()\":{\"notice\":\"Returns the current swapFeeManager of the factory\"},\"swapFeeModule()\":{\"notice\":\"Returns the current swapFeeModule of the factory\"},\"tickSpacingToFee(int24)\":{\"notice\":\"Returns a default fee for a tick spacing.\"},\"tickSpacings()\":{\"notice\":\"Returns a list of enabled tick spacings. Used to iterate through pools created by the factory\"},\"unstakedFeeManager()\":{\"notice\":\"Returns the current unstakedFeeManager of the factory\"},\"unstakedFeeModule()\":{\"notice\":\"Returns the current unstakedFeeModule of the factory\"},\"voter()\":{\"notice\":\"The voter contract, used to create gauges\"}},\"notice\":\"The CL Factory facilitates creation of CL pools and control over the protocol fees\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/interfaces/ICLFactory.sol\":\"ICLFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/ICLFactory.sol\":{\"keccak256\":\"0x2b8dda4776bd095c900e408b2cb21324f72694bed75c69972cd0cb3b16b1bff0\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d37ae64eabec6197ef78c9fd1d4c699398937ca5f3e9f852b11b32082ab2e680\",\"dweb:/ipfs/QmWLLA5bV17Q3fS5fDdukXsaquZ5sNoP8KvBAEfYQHfK3Z\"]},\"contracts/core/interfaces/IFactoryRegistry.sol\":{\"keccak256\":\"0xa2dbe19a5c9e221ffd8e4612ee8a4aa1233ab0ad059d4b7d91a8dca1153bcea0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://47a01d481d3a1f5172b8601d267439e24662849d7ebb3e1e66ec46d541e57831\",\"dweb:/ipfs/QmYG56TEtS8dwHrNaHxGrTp8r6cDzRkuGKsHBbiToUVEvX\"]},\"contracts/core/interfaces/IVoter.sol\":{\"keccak256\":\"0x029239646ad77a70b26a702b7e286521a03d5b89d148ff7c13d9bf56f6203187\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://eccfb9403ee8f5e7f604eccb0cafcbd047c1f73371537227011e6d557895fa68\",\"dweb:/ipfs/QmTjDHzzKTzkYhTeiWA1po8YL3USKkkMZSxZixVgsSQcXK\"]},\"contracts/core/interfaces/IVotingEscrow.sol\":{\"keccak256\":\"0x17ee815f29f7bc6a1528203976ed5bfdd945354dd72a7d322e8b092e331beb3d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9845c5056470191730c8a8688663bc9808172e57395c1c6053b5145bf9fd5098\",\"dweb:/ipfs/QmXyoRGbDe6KPngPsKXWZCyLLdmRTFKdhVD5Gf1Y15rG7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"DefaultUnstakedFeeChanged(uint24,uint24)": {
								"notice": "Emitted when the defaultUnstakedFee of the factory is changed"
							},
							"OwnerChanged(address,address)": {
								"notice": "Emitted when the owner of the factory is changed"
							},
							"PoolCreated(address,address,int24,address)": {
								"notice": "Emitted when a pool is created"
							},
							"SwapFeeManagerChanged(address,address)": {
								"notice": "Emitted when the swapFeeManager of the factory is changed"
							},
							"SwapFeeModuleChanged(address,address)": {
								"notice": "Emitted when the swapFeeModule of the factory is changed"
							},
							"TickSpacingEnabled(int24,uint24)": {
								"notice": "Emitted when a new tick spacing is enabled for pool creation via the factory"
							},
							"UnstakedFeeManagerChanged(address,address)": {
								"notice": "Emitted when the unstakedFeeManager of the factory is changed"
							},
							"UnstakedFeeModuleChanged(address,address)": {
								"notice": "Emitted when the unstakedFeeModule of the factory is changed"
							}
						},
						"kind": "user",
						"methods": {
							"allPools(uint256)": {
								"notice": "Return address of pool created by this factory given its `index`"
							},
							"allPoolsLength()": {
								"notice": "Returns the number of pools created from this factory"
							},
							"createPool(address,address,int24,uint160)": {
								"notice": "Creates a pool for the given two tokens and fee"
							},
							"defaultUnstakedFee()": {
								"notice": "Returns the current defaultUnstakedFee of the factory"
							},
							"enableTickSpacing(int24,uint24)": {
								"notice": "Enables a certain tickSpacing"
							},
							"factoryRegistry()": {
								"notice": "Factory registry for valid pool / gauge / rewards factories"
							},
							"getPool(address,address,int24)": {
								"notice": "Returns the pool address for a given pair of tokens and a tick spacing, or address 0 if it does not exist"
							},
							"getSwapFee(address)": {
								"notice": "Get swap & flash fee for a given pool. Accounts for default and dynamic fees"
							},
							"getUnstakedFee(address)": {
								"notice": "Get unstaked fee for a given pool. Accounts for default and dynamic fees"
							},
							"isPair(address)": {
								"notice": "Used in VotingEscrow to determine if a contract is a valid pool of the factory"
							},
							"owner()": {
								"notice": "Returns the current owner of the factory"
							},
							"poolImplementation()": {
								"notice": "The address of the pool implementation contract used to deploy proxies / clones"
							},
							"setDefaultUnstakedFee(uint24)": {
								"notice": "Updates the defaultUnstakedFee of the factory"
							},
							"setOwner(address)": {
								"notice": "Updates the owner of the factory"
							},
							"setSwapFeeManager(address)": {
								"notice": "Updates the swapFeeManager of the factory"
							},
							"setSwapFeeModule(address)": {
								"notice": "Updates the swapFeeModule of the factory"
							},
							"setUnstakedFeeManager(address)": {
								"notice": "Updates the unstakedFeeManager of the factory"
							},
							"setUnstakedFeeModule(address)": {
								"notice": "Updates the unstakedFeeModule of the factory"
							},
							"swapFeeManager()": {
								"notice": "Returns the current swapFeeManager of the factory"
							},
							"swapFeeModule()": {
								"notice": "Returns the current swapFeeModule of the factory"
							},
							"tickSpacingToFee(int24)": {
								"notice": "Returns a default fee for a tick spacing."
							},
							"tickSpacings()": {
								"notice": "Returns a list of enabled tick spacings. Used to iterate through pools created by the factory"
							},
							"unstakedFeeManager()": {
								"notice": "Returns the current unstakedFeeManager of the factory"
							},
							"unstakedFeeModule()": {
								"notice": "Returns the current unstakedFeeModule of the factory"
							},
							"voter()": {
								"notice": "The voter contract, used to create gauges"
							}
						},
						"notice": "The CL Factory facilitates creation of CL pools and control over the protocol fees",
						"version": 1
					}
				}
			},
			"contracts/core/interfaces/ICLPool.sol": {
				"ICLPool": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "CollectFees",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid1",
									"type": "uint256"
								}
							],
							"name": "Flash",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextOld",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextNew",
									"type": "uint16"
								}
							],
							"name": "IncreaseObservationCardinalityNext",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Initialize",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0New",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1New",
									"type": "uint8"
								}
							],
							"name": "SetFeeProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Swap",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "collectFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factoryRegistry",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "fee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal0X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal1X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flash",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "gauge",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "gaugeFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "token0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "token1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint256",
									"name": "_rewardGrowthGlobalX128",
									"type": "uint256"
								}
							],
							"name": "getRewardGrowthInside",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "rewardGrowthInsideX128",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								}
							],
							"name": "increaseObservationCardinalityNext",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_factory",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_token1",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "_tickSpacing",
									"type": "int24"
								},
								{
									"internalType": "address",
									"name": "_factoryRegistry",
									"type": "address"
								},
								{
									"internalType": "uint160",
									"name": "_sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "lastUpdated",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "liquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxLiquidityPerTick",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "nft",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "observations",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "blockTimestamp",
									"type": "uint32"
								},
								{
									"internalType": "int56",
									"name": "tickCumulative",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityCumulativeX128",
									"type": "uint160"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint32[]",
									"name": "secondsAgos",
									"type": "uint32[]"
								}
							],
							"name": "observe",
							"outputs": [
								{
									"internalType": "int56[]",
									"name": "tickCumulatives",
									"type": "int56[]"
								},
								{
									"internalType": "uint160[]",
									"name": "secondsPerLiquidityCumulativeX128s",
									"type": "uint160[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "periodFinish",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "_liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rewardGrowthGlobalX128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rewardRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rewardReserve",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rollover",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_gauge",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_nft",
									"type": "address"
								}
							],
							"name": "setGaugeAndPositionManager",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "slot0",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								},
								{
									"internalType": "uint16",
									"name": "observationIndex",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinality",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								},
								{
									"internalType": "bool",
									"name": "unlocked",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								}
							],
							"name": "snapshotCumulativesInside",
							"outputs": [
								{
									"internalType": "int56",
									"name": "tickCumulativeInside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityInsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsInside",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int128",
									"name": "stakedLiquidityDelta",
									"type": "int128"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "bool",
									"name": "positionUpdate",
									"type": "bool"
								}
							],
							"name": "stake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "stakedLiquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "zeroForOne",
									"type": "bool"
								},
								{
									"internalType": "int256",
									"name": "amountSpecified",
									"type": "int256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "rewardRate",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "rewardReserve",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "periodFinish",
									"type": "uint256"
								}
							],
							"name": "syncReward",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int16",
									"name": "wordPosition",
									"type": "int16"
								}
							],
							"name": "tickBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "ticks",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidityGross",
									"type": "uint128"
								},
								{
									"internalType": "int128",
									"name": "liquidityNet",
									"type": "int128"
								},
								{
									"internalType": "int128",
									"name": "stakedLiquidityNet",
									"type": "int128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside0X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside1X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "rewardGrowthOutsideX128",
									"type": "uint256"
								},
								{
									"internalType": "int56",
									"name": "tickCumulativeOutside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityOutsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsOutside",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unstakedFee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "updateRewardsGrowthGlobal",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "The pool interface is broken up into many smaller pieces",
						"kind": "dev",
						"methods": {
							"burn(int24,int24,uint128)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"burn(int24,int24,uint128,address)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"owner": "Owner of the position in the pool (nft manager or gauge)",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"collect(address,int24,int24,uint128,uint128,address)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"owner": "Owner of the position in the pool (nft manager or gauge)",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"collectFees()": {
								"returns": {
									"amount0": "The gauge fee collected in token0",
									"amount1": "The gauge fee collected in token1"
								}
							},
							"factory()": {
								"returns": {
									"_0": "The contract address"
								}
							},
							"factoryRegistry()": {
								"returns": {
									"_0": "The factory registry contract address"
								}
							},
							"fee()": {
								"details": "Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.",
								"returns": {
									"_0": "The swap & flash fee"
								}
							},
							"feeGrowthGlobal0X128()": {
								"details": "This value can overflow the uint256"
							},
							"feeGrowthGlobal1X128()": {
								"details": "This value can overflow the uint256"
							},
							"flash(address,uint256,uint256,bytes)": {
								"details": "The caller of this method receives a callback in the form of ICLFlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback",
								"params": {
									"amount0": "The amount of token0 to send",
									"amount1": "The amount of token1 to send",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address which will receive the token0 and token1 amounts"
								}
							},
							"gauge()": {
								"returns": {
									"_0": "The gauge contract address"
								}
							},
							"gaugeFees()": {
								"details": "Gauge fees will never exceed uint128 max in either token"
							},
							"getRewardGrowthInside(int24,int24,uint256)": {
								"details": "Used in gauge reward/earned calculations",
								"params": {
									"_rewardGrowthGlobalX128": "a calculated rewardGrowthGlobalX128 or 0 (in case of 0 it means we use the rewardGrowthGlobalX128 from state)",
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"rewardGrowthInsideX128": "The reward growth in the range"
								}
							},
							"increaseObservationCardinalityNext(uint16)": {
								"details": "This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
								"params": {
									"observationCardinalityNext": "The desired minimum number of observations for the pool to store"
								}
							},
							"initialize(address,address,address,int24,address,uint160)": {
								"details": "Can be called once only Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 valuenot locked because it initializes unlocked",
								"params": {
									"_factory": "The CL factory contract address",
									"_factoryRegistry": "The address of the factory registry managing the pool factory",
									"_sqrtPriceX96": "The initial sqrt price of the pool, as a Q64.96",
									"_tickSpacing": "The pool tick spacing",
									"_token0": "The first token of the pool by address sort order",
									"_token1": "The second token of the pool by address sort order"
								}
							},
							"liquidity()": {
								"details": "This value has no relationship to the total liquidity across all ticksThis value includes staked liquidity"
							},
							"maxLiquidityPerTick()": {
								"details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
								"returns": {
									"_0": "The max amount of liquidity per tick"
								}
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"details": "The caller of this method receives a callback in the form of ICLMintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.",
								"params": {
									"amount": "The amount of liquidity to mint",
									"data": "Any data that should be passed through to the callback",
									"recipient": "The address for which the liquidity will be created",
									"tickLower": "The lower tick of the position in which to add liquidity",
									"tickUpper": "The upper tick of the position in which to add liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback",
									"amount1": "The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
								}
							},
							"nft()": {
								"returns": {
									"_0": "The nft manager contract address"
								}
							},
							"observations(uint256)": {
								"details": "You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.",
								"params": {
									"index": "The element of the observations array to fetch"
								},
								"returns": {
									"blockTimestamp": "The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"
								}
							},
							"observe(uint32[])": {
								"details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
								"params": {
									"secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
								},
								"returns": {
									"secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
									"tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
								}
							},
							"positions(bytes32)": {
								"params": {
									"key": "The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"
								},
								"returns": {
									"_liquidity": "The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
								}
							},
							"rewardGrowthGlobalX128()": {
								"details": "This value can overflow the uint256"
							},
							"rollover()": {
								"details": "rollover will always be smaller than the rewards distributed that epoch"
							},
							"setGaugeAndPositionManager(address,address)": {
								"details": "Callable only once, by the gauge factory",
								"params": {
									"_gauge": "The gauge corresponding to this pool",
									"_nft": "The position manager used for position management"
								}
							},
							"slot0()": {
								"returns": {
									"sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. unlocked Whether the pool is currently locked to reentrancy"
								}
							},
							"snapshotCumulativesInside(int24,int24)": {
								"details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
								"params": {
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"secondsInside": "The snapshot of seconds per liquidity for the range",
									"secondsPerLiquidityInsideX128": "The snapshot of seconds per liquidity for the range",
									"tickCumulativeInside": "The snapshot of the tick accumulator for the range"
								}
							},
							"stake(int128,int24,int24,bool)": {
								"params": {
									"positionUpdate": "If the nft and gauge position should be updated",
									"stakedLiquidityDelta": "The amount by which to increase or decrease the staked liquidity",
									"tickLower": "The lower tick of the position for which to stake liquidity",
									"tickUpper": "The upper tick of the position for which to stake liquidity"
								}
							},
							"stakedLiquidity()": {
								"details": "This value has no relationship to the total staked liquidity across all ticks"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"details": "The caller of this method receives a callback in the form of ICLSwapCallback#uniswapV3SwapCallback",
								"params": {
									"amountSpecified": "The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address to receive the output of the swap",
									"sqrtPriceLimitX96": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
									"zeroForOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
								},
								"returns": {
									"amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
									"amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
								}
							},
							"syncReward(uint256,uint256,uint256)": {
								"params": {
									"periodFinish": "the end of the current period of rewards, updated once per epoch",
									"rewardRate": "the rate rewards being distributed during the epoch",
									"rewardReserve": "the available rewards to be distributed during the epoch"
								}
							},
							"tickSpacing()": {
								"details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"ticks(int24)": {
								"params": {
									"tick": "The tick to look up"
								},
								"returns": {
									"liquidityGross": "the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, stakedLiquidityNet how much staked liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, rewardGrowthOutsideX128 the reward growth on the other side of the tick from the current tick in emission token tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."
								}
							},
							"token0()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"token1()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"unstakedFee()": {
								"details": "Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.",
								"returns": {
									"_0": "The unstaked fee"
								}
							}
						},
						"title": "The interface for a CL Pool",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"burn(int24,int24,uint128)": "a34123a7",
							"burn(int24,int24,uint128,address)": "6f89244c",
							"collect(address,int24,int24,uint128,uint128)": "4f1eb3d8",
							"collect(address,int24,int24,uint128,uint128,address)": "31338374",
							"collectFees()": "c8796572",
							"factory()": "c45a0155",
							"factoryRegistry()": "3bf0c9fb",
							"fee()": "ddca3f43",
							"feeGrowthGlobal0X128()": "f3058399",
							"feeGrowthGlobal1X128()": "46141319",
							"flash(address,uint256,uint256,bytes)": "490e6cbc",
							"gauge()": "a6f19c84",
							"gaugeFees()": "293833ba",
							"getRewardGrowthInside(int24,int24,uint256)": "a16368c9",
							"increaseObservationCardinalityNext(uint16)": "32148f67",
							"initialize(address,address,address,int24,address,uint160)": "2071d884",
							"lastUpdated()": "d0b06f5d",
							"liquidity()": "1a686502",
							"maxLiquidityPerTick()": "70cf754a",
							"mint(address,int24,int24,uint128,bytes)": "3c8a7d8d",
							"nft()": "47ccca02",
							"observations(uint256)": "252c09d7",
							"observe(uint32[])": "883bdbfd",
							"periodFinish()": "ebe2b12b",
							"positions(bytes32)": "514ea4bf",
							"rewardGrowthGlobalX128()": "57806ada",
							"rewardRate()": "7b0a47ee",
							"rewardReserve()": "cab64bcd",
							"rollover()": "b056b49a",
							"setGaugeAndPositionManager(address,address)": "1f7c3568",
							"slot0()": "3850c7bd",
							"snapshotCumulativesInside(int24,int24)": "a38807f2",
							"stake(int128,int24,int24,bool)": "4ed6210f",
							"stakedLiquidity()": "3ab04b20",
							"swap(address,bool,int256,uint160,bytes)": "128acb08",
							"syncReward(uint256,uint256,uint256)": "60a73f9b",
							"tickBitmap(int16)": "5339c296",
							"tickSpacing()": "d0c93a7c",
							"ticks(int24)": "f30dba93",
							"token0()": "0dfe1681",
							"token1()": "d21220a7",
							"unstakedFee()": "b64cc67b",
							"updateRewardsGrowthGlobal()": "1b410960"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugeFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"_rewardGrowthGlobalX128\",\"type\":\"uint256\"}],\"name\":\"getRewardGrowthInside\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardGrowthInsideX128\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"_tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"address\",\"name\":\"_factoryRegistry\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"_sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdated\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardGrowthGlobalX128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"setGaugeAndPositionManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"stakedLiquidityDelta\",\"type\":\"int128\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"bool\",\"name\":\"positionUpdate\",\"type\":\"bool\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedLiquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodFinish\",\"type\":\"uint256\"}],\"name\":\"syncReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"stakedLiquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardGrowthOutsideX128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakedFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRewardsGrowthGlobal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The pool interface is broken up into many smaller pieces\",\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"burn(int24,int24,uint128,address)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"owner\":\"Owner of the position in the pool (nft manager or gauge)\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"collect(address,int24,int24,uint128,uint128,address)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"owner\":\"Owner of the position in the pool (nft manager or gauge)\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"collectFees()\":{\"returns\":{\"amount0\":\"The gauge fee collected in token0\",\"amount1\":\"The gauge fee collected in token1\"}},\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"factoryRegistry()\":{\"returns\":{\"_0\":\"The factory registry contract address\"}},\"fee()\":{\"details\":\"Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.\",\"returns\":{\"_0\":\"The swap & flash fee\"}},\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of ICLFlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"gauge()\":{\"returns\":{\"_0\":\"The gauge contract address\"}},\"gaugeFees()\":{\"details\":\"Gauge fees will never exceed uint128 max in either token\"},\"getRewardGrowthInside(int24,int24,uint256)\":{\"details\":\"Used in gauge reward/earned calculations\",\"params\":{\"_rewardGrowthGlobalX128\":\"a calculated rewardGrowthGlobalX128 or 0 (in case of 0 it means we use the rewardGrowthGlobalX128 from state)\",\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"rewardGrowthInsideX128\":\"The reward growth in the range\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(address,address,address,int24,address,uint160)\":{\"details\":\"Can be called once only Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 valuenot locked because it initializes unlocked\",\"params\":{\"_factory\":\"The CL factory contract address\",\"_factoryRegistry\":\"The address of the factory registry managing the pool factory\",\"_sqrtPriceX96\":\"The initial sqrt price of the pool, as a Q64.96\",\"_tickSpacing\":\"The pool tick spacing\",\"_token0\":\"The first token of the pool by address sort order\",\"_token1\":\"The second token of the pool by address sort order\"}},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticksThis value includes staked liquidity\"},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of ICLMintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"nft()\":{\"returns\":{\"_0\":\"The nft manager contract address\"}},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"rewardGrowthGlobalX128()\":{\"details\":\"This value can overflow the uint256\"},\"rollover()\":{\"details\":\"rollover will always be smaller than the rewards distributed that epoch\"},\"setGaugeAndPositionManager(address,address)\":{\"details\":\"Callable only once, by the gauge factory\",\"params\":{\"_gauge\":\"The gauge corresponding to this pool\",\"_nft\":\"The position manager used for position management\"}},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. unlocked Whether the pool is currently locked to reentrancy\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}},\"stake(int128,int24,int24,bool)\":{\"params\":{\"positionUpdate\":\"If the nft and gauge position should be updated\",\"stakedLiquidityDelta\":\"The amount by which to increase or decrease the staked liquidity\",\"tickLower\":\"The lower tick of the position for which to stake liquidity\",\"tickUpper\":\"The upper tick of the position for which to stake liquidity\"}},\"stakedLiquidity()\":{\"details\":\"This value has no relationship to the total staked liquidity across all ticks\"},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of ICLSwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}},\"syncReward(uint256,uint256,uint256)\":{\"params\":{\"periodFinish\":\"the end of the current period of rewards, updated once per epoch\",\"rewardRate\":\"the rate rewards being distributed during the epoch\",\"rewardReserve\":\"the available rewards to be distributed during the epoch\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, stakedLiquidityNet how much staked liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, rewardGrowthOutsideX128 the reward growth on the other side of the tick from the current tick in emission token tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"unstakedFee()\":{\"details\":\"Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.\",\"returns\":{\"_0\":\"The unstaked fee\"}}},\"title\":\"The interface for a CL Pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectFees(address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the gauge\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"burn(int24,int24,uint128,address)\":{\"notice\":\"Burn liquidity from the supplied owner and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"collect(address,int24,int24,uint128,uint128,address)\":{\"notice\":\"Collects tokens owed to a position\"},\"collectFees()\":{\"notice\":\"Collect the gauge fee accrued to the pool\"},\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the ICLFactory interface\"},\"factoryRegistry()\":{\"notice\":\"The factory registry that manages pool <> gauge <> reward factory relationships\"},\"fee()\":{\"notice\":\"The pool's swap & flash fee in pips, i.e. 1e-6\"},\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"gauge()\":{\"notice\":\"The gauge corresponding to this pool\"},\"gaugeFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the gauge\"},\"getRewardGrowthInside(int24,int24,uint256)\":{\"notice\":\"Returns data about reward growth within a tick range. RewardGrowthGlobalX128 can be supplied as a parameter for claimable reward calculations.\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(address,address,address,int24,address,uint160)\":{\"notice\":\"Initialize function used in proxy deployment\"},\"lastUpdated()\":{\"notice\":\"last time the rewardReserve and rewardRate were updated\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"nft()\":{\"notice\":\"The nft manager\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"periodFinish()\":{\"notice\":\"timestamp of the end of the current epoch's rewards\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"rewardGrowthGlobalX128()\":{\"notice\":\"The reward growth as a Q128.128 rewards of emission collected per unit of liquidity for the entire life of the pool\"},\"rewardRate()\":{\"notice\":\"the emission rate of time-based farming\"},\"rewardReserve()\":{\"notice\":\"acts as a virtual reserve that holds information on how many rewards are yet to be distributed\"},\"rollover()\":{\"notice\":\"tracks total rewards distributed when no staked liquidity in active tick for epoch ending at periodFinishthis amount is rolled over on the next call to notifyRewardAmount\"},\"setGaugeAndPositionManager(address,address)\":{\"notice\":\"Initialize gauge and nft manager\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"},\"stake(int128,int24,int24,bool)\":{\"notice\":\"Convert existing liquidity into staked liquidityOnly callable by the gauge associated with this pool\"},\"stakedLiquidity()\":{\"notice\":\"The currently in range staked liquidity available to the pool\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"},\"syncReward(uint256,uint256,uint256)\":{\"notice\":\"Syncs rewards with gauge\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"},\"unstakedFee()\":{\"notice\":\"The pool's unstaked fee in pips, i.e. 1e-6\"},\"updateRewardsGrowthGlobal()\":{\"notice\":\"Updates rewardGrowthGlobalX128 every time when any tick is crossed, or when any position is staked/unstaked from the gauge\"}},\"notice\":\"A CL pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/interfaces/ICLPool.sol\":\"ICLPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/ICLPool.sol\":{\"keccak256\":\"0x0a11e1392c4b5ef4e47a3415a9b1a2118e9370d52a253dbd1c910bbbb615e91f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://0c04e689e0589f3d67961fd5febcdc0f39c0700aeebef2537ccfb29ddba29de1\",\"dweb:/ipfs/QmbuthGhVJsx45dpgF7p71VSuLshREAsaLJu34HQNgRJoz\"]},\"contracts/core/interfaces/pool/ICLPoolActions.sol\":{\"keccak256\":\"0x7699f31261ab40982e34febe16128f1edfdad39075969195301352ea66bcac40\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://074f1c470e11f30d0fae8b95b963c9d19dcbd2c5bd17ad4ebba95c5f0f073044\",\"dweb:/ipfs/QmdDWMUspgBXfLhcxqESez9rSwA8JYNRycmhkhuKoDCWqJ\"]},\"contracts/core/interfaces/pool/ICLPoolConstants.sol\":{\"keccak256\":\"0xfad00d4ca1a40ef27d9614a98483ca67c4491b6f19e376901745c57a6949b512\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://2b5ea522565efb803d146673ff9e37aa090a5abff334fea587da62f4fb5d6647\",\"dweb:/ipfs/QmVRPscHFVjYFvRbJf41zVLtA2jVLbEUH66KGtEzspXnWS\"]},\"contracts/core/interfaces/pool/ICLPoolDerivedState.sol\":{\"keccak256\":\"0xc15e4192a1b7b756cababb994341dc8e78627e1341465e47b1dcb66e9ed54af8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ee4b9269244f6b7ac57cba3b8966ac188220596d16cef71d186f0a6446593b4e\",\"dweb:/ipfs/QmQjyc5ggDgoAv4YbL5uKpNxRDoTvVYw6vePFgu4aNigmQ\"]},\"contracts/core/interfaces/pool/ICLPoolEvents.sol\":{\"keccak256\":\"0x32fbcac8952f1c5c44b466b0e1c28634ce71372c0f65242aa0d821cebdddcc2b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://19f22382292967f97640f84a7edfa01cf7deb303bf882344b9985007f1dcbef2\",\"dweb:/ipfs/Qmej7vWwun9fRBCrcvzPHdZP1jtLSCxJtjTSdkVTcgWeAE\"]},\"contracts/core/interfaces/pool/ICLPoolOwnerActions.sol\":{\"keccak256\":\"0xeafd14ae3e15c9f663507e004c599618bfd5d2a90d58b3b450f9372f9e3f54f8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://49472c8cf06dc7084e22fc57ffdce860aa7a9ff77f12e4bef0c13a078bbc5831\",\"dweb:/ipfs/Qmd29vWULezsJJzhw3wZxsU6Hsng5949v2TiVCbdga4Vqe\"]},\"contracts/core/interfaces/pool/ICLPoolState.sol\":{\"keccak256\":\"0xe57d65825a097d6f0ab55d7ae39b528695b3df65320ed524124fbb55949bfcf9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b63b25beebe612acfd564f40b0d95b3844ee71bf969a3357419e7a54f1ece961\",\"dweb:/ipfs/Qmdk3mNLz3cSZscbXFsJp69gjgxFcBv6K5mdc6tjnmtFSR\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when a position's liquidity is removed"
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"notice": "Emitted when fees are collected by the owner of a position"
							},
							"CollectFees(address,uint128,uint128)": {
								"notice": "Emitted when the collected protocol fees are withdrawn by the gauge"
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"notice": "Emitted by the pool for any flashes of token0/token1"
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"notice": "Emitted by the pool for increases to the number of observations that can be stored"
							},
							"Initialize(uint160,int24)": {
								"notice": "Emitted exactly once by a pool when #initialize is first called on the pool"
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is minted for a given position"
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"notice": "Emitted when the protocol fee is changed by the pool"
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"notice": "Emitted by the pool for any swaps between token0 and token1"
							}
						},
						"kind": "user",
						"methods": {
							"burn(int24,int24,uint128)": {
								"notice": "Burn liquidity from the sender and account tokens owed for the liquidity to the position"
							},
							"burn(int24,int24,uint128,address)": {
								"notice": "Burn liquidity from the supplied owner and account tokens owed for the liquidity to the position"
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"notice": "Collects tokens owed to a position"
							},
							"collect(address,int24,int24,uint128,uint128,address)": {
								"notice": "Collects tokens owed to a position"
							},
							"collectFees()": {
								"notice": "Collect the gauge fee accrued to the pool"
							},
							"factory()": {
								"notice": "The contract that deployed the pool, which must adhere to the ICLFactory interface"
							},
							"factoryRegistry()": {
								"notice": "The factory registry that manages pool <> gauge <> reward factory relationships"
							},
							"fee()": {
								"notice": "The pool's swap & flash fee in pips, i.e. 1e-6"
							},
							"feeGrowthGlobal0X128()": {
								"notice": "The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"
							},
							"feeGrowthGlobal1X128()": {
								"notice": "The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"
							},
							"flash(address,uint256,uint256,bytes)": {
								"notice": "Receive token0 and/or token1 and pay it back, plus a fee, in the callback"
							},
							"gauge()": {
								"notice": "The gauge corresponding to this pool"
							},
							"gaugeFees()": {
								"notice": "The amounts of token0 and token1 that are owed to the gauge"
							},
							"getRewardGrowthInside(int24,int24,uint256)": {
								"notice": "Returns data about reward growth within a tick range. RewardGrowthGlobalX128 can be supplied as a parameter for claimable reward calculations."
							},
							"increaseObservationCardinalityNext(uint16)": {
								"notice": "Increase the maximum number of price and liquidity observations that this pool will store"
							},
							"initialize(address,address,address,int24,address,uint160)": {
								"notice": "Initialize function used in proxy deployment"
							},
							"lastUpdated()": {
								"notice": "last time the rewardReserve and rewardRate were updated"
							},
							"liquidity()": {
								"notice": "The currently in range liquidity available to the pool"
							},
							"maxLiquidityPerTick()": {
								"notice": "The maximum amount of position liquidity that can use any tick in the range"
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"notice": "Adds liquidity for the given recipient/tickLower/tickUpper position"
							},
							"nft()": {
								"notice": "The nft manager"
							},
							"observations(uint256)": {
								"notice": "Returns data about a specific observation index"
							},
							"observe(uint32[])": {
								"notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
							},
							"periodFinish()": {
								"notice": "timestamp of the end of the current epoch's rewards"
							},
							"positions(bytes32)": {
								"notice": "Returns the information about a position by the position's key"
							},
							"rewardGrowthGlobalX128()": {
								"notice": "The reward growth as a Q128.128 rewards of emission collected per unit of liquidity for the entire life of the pool"
							},
							"rewardRate()": {
								"notice": "the emission rate of time-based farming"
							},
							"rewardReserve()": {
								"notice": "acts as a virtual reserve that holds information on how many rewards are yet to be distributed"
							},
							"rollover()": {
								"notice": "tracks total rewards distributed when no staked liquidity in active tick for epoch ending at periodFinishthis amount is rolled over on the next call to notifyRewardAmount"
							},
							"setGaugeAndPositionManager(address,address)": {
								"notice": "Initialize gauge and nft manager"
							},
							"slot0()": {
								"notice": "The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."
							},
							"snapshotCumulativesInside(int24,int24)": {
								"notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
							},
							"stake(int128,int24,int24,bool)": {
								"notice": "Convert existing liquidity into staked liquidityOnly callable by the gauge associated with this pool"
							},
							"stakedLiquidity()": {
								"notice": "The currently in range staked liquidity available to the pool"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"notice": "Swap token0 for token1, or token1 for token0"
							},
							"syncReward(uint256,uint256,uint256)": {
								"notice": "Syncs rewards with gauge"
							},
							"tickBitmap(int16)": {
								"notice": "Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
							},
							"tickSpacing()": {
								"notice": "The pool tick spacing"
							},
							"ticks(int24)": {
								"notice": "Look up information about a specific tick in the pool"
							},
							"token0()": {
								"notice": "The first of the two tokens of the pool, sorted by address"
							},
							"token1()": {
								"notice": "The second of the two tokens of the pool, sorted by address"
							},
							"unstakedFee()": {
								"notice": "The pool's unstaked fee in pips, i.e. 1e-6"
							},
							"updateRewardsGrowthGlobal()": {
								"notice": "Updates rewardGrowthGlobalX128 every time when any tick is crossed, or when any position is staked/unstaked from the gauge"
							}
						},
						"notice": "A CL pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification",
						"version": 1
					}
				}
			},
			"contracts/core/interfaces/IERC20Minimal.sol": {
				"IERC20Minimal": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"params": {
									"owner": "The account that approved spending of its tokens",
									"spender": "The account for which the spending allowance was modified",
									"value": "The new allowance from the owner to the spender"
								}
							},
							"Transfer(address,address,uint256)": {
								"params": {
									"from": "The account from which the tokens were sent, i.e. the balance decreased",
									"to": "The account to which the tokens were sent, i.e. the balance increased",
									"value": "The amount of tokens that were transferred"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"params": {
									"owner": "The account of the token owner",
									"spender": "The account of the token spender"
								},
								"returns": {
									"_0": "The current allowance granted by `owner` to `spender`"
								}
							},
							"approve(address,uint256)": {
								"params": {
									"amount": "The amount of tokens allowed to be used by `spender`",
									"spender": "The account which will be allowed to spend a given amount of the owners tokens"
								},
								"returns": {
									"_0": "Returns true for a successful approval, false for unsuccessful"
								}
							},
							"balanceOf(address)": {
								"params": {
									"account": "The account for which to look up the number of tokens it has, i.e. its balance"
								},
								"returns": {
									"_0": "The number of tokens held by the account"
								}
							},
							"transfer(address,uint256)": {
								"params": {
									"amount": "The number of tokens to send from the sender to the recipient",
									"recipient": "The account that will receive the amount transferred"
								},
								"returns": {
									"_0": "Returns true for a successful transfer, false for an unsuccessful transfer"
								}
							},
							"transferFrom(address,address,uint256)": {
								"params": {
									"amount": "The amount of the transfer",
									"recipient": "The recipient of the transfer",
									"sender": "The account from which the transfer will be initiated"
								},
								"returns": {
									"_0": "Returns true for a successful transfer, false for unsuccessful"
								}
							}
						},
						"title": "Minimal ERC20 interface for CL",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"params\":{\"owner\":\"The account that approved spending of its tokens\",\"spender\":\"The account for which the spending allowance was modified\",\"value\":\"The new allowance from the owner to the spender\"}},\"Transfer(address,address,uint256)\":{\"params\":{\"from\":\"The account from which the tokens were sent, i.e. the balance decreased\",\"to\":\"The account to which the tokens were sent, i.e. the balance increased\",\"value\":\"The amount of tokens that were transferred\"}}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"owner\":\"The account of the token owner\",\"spender\":\"The account of the token spender\"},\"returns\":{\"_0\":\"The current allowance granted by `owner` to `spender`\"}},\"approve(address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens allowed to be used by `spender`\",\"spender\":\"The account which will be allowed to spend a given amount of the owners tokens\"},\"returns\":{\"_0\":\"Returns true for a successful approval, false for unsuccessful\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The account for which to look up the number of tokens it has, i.e. its balance\"},\"returns\":{\"_0\":\"The number of tokens held by the account\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to send from the sender to the recipient\",\"recipient\":\"The account that will receive the amount transferred\"},\"returns\":{\"_0\":\"Returns true for a successful transfer, false for an unsuccessful transfer\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The amount of the transfer\",\"recipient\":\"The recipient of the transfer\",\"sender\":\"The account from which the transfer will be initiated\"},\"returns\":{\"_0\":\"Returns true for a successful transfer, false for unsuccessful\"}}},\"title\":\"Minimal ERC20 interface for CL\",\"version\":1},\"userdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"Event emitted when the approval amount for the spender of a given owner's tokens changes.\"},\"Transfer(address,address,uint256)\":{\"notice\":\"Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\"}},\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"Returns the current allowance given to a spender by an owner\"},\"approve(address,uint256)\":{\"notice\":\"Sets the allowance of a spender from the `msg.sender` to the value `amount`\"},\"balanceOf(address)\":{\"notice\":\"Returns the balance of a token\"},\"transfer(address,uint256)\":{\"notice\":\"Transfers the amount of token from the `msg.sender` to the recipient\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\"}},\"notice\":\"Contains a subset of the full ERC20 interface that is used in CL\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/interfaces/IERC20Minimal.sol\":\"IERC20Minimal\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/IERC20Minimal.sol\":{\"keccak256\":\"0xa7d3b1fd5f9b9d8848a3ed9d1137eb9c79fa1fa4484347e0f75e285a2e51ea40\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://0a3f7e24d48048a87d541cc014fd51ff4cc3c54aeb78b559d17d75884671fb43\",\"dweb:/ipfs/QmWQC2DiaLXaj3QnwUgvZrKP3xvWVxUjxXDfTMmq6aziYc\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"notice": "Event emitted when the approval amount for the spender of a given owner's tokens changes."
							},
							"Transfer(address,address,uint256)": {
								"notice": "Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`."
							}
						},
						"kind": "user",
						"methods": {
							"allowance(address,address)": {
								"notice": "Returns the current allowance given to a spender by an owner"
							},
							"approve(address,uint256)": {
								"notice": "Sets the allowance of a spender from the `msg.sender` to the value `amount`"
							},
							"balanceOf(address)": {
								"notice": "Returns the balance of a token"
							},
							"transfer(address,uint256)": {
								"notice": "Transfers the amount of token from the `msg.sender` to the recipient"
							},
							"transferFrom(address,address,uint256)": {
								"notice": "Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`"
							}
						},
						"notice": "Contains a subset of the full ERC20 interface that is used in CL",
						"version": 1
					}
				}
			},
			"contracts/core/interfaces/IFactoryRegistry.sol": {
				"IFactoryRegistry": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "poolFactory",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "votingRewardsFactory",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "gaugeFactory",
									"type": "address"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "poolFactory",
									"type": "address"
								}
							],
							"name": "factoriesToPoolFactory",
							"outputs": [
								{
									"internalType": "address",
									"name": "votingRewardsFactory",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "gaugeFactory",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "poolFactory",
									"type": "address"
								}
							],
							"name": "isPoolFactoryApproved",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,address,address)": "9b140a85",
							"factoriesToPoolFactory(address)": "1217afdb",
							"isPoolFactoryApproved(address)": "d1ea0a1d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"votingRewardsFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gaugeFactory\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolFactory\",\"type\":\"address\"}],\"name\":\"factoriesToPoolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"votingRewardsFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gaugeFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolFactory\",\"type\":\"address\"}],\"name\":\"isPoolFactoryApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/interfaces/IFactoryRegistry.sol\":\"IFactoryRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/IFactoryRegistry.sol\":{\"keccak256\":\"0xa2dbe19a5c9e221ffd8e4612ee8a4aa1233ab0ad059d4b7d91a8dca1153bcea0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://47a01d481d3a1f5172b8601d267439e24662849d7ebb3e1e66ec46d541e57831\",\"dweb:/ipfs/QmYG56TEtS8dwHrNaHxGrTp8r6cDzRkuGKsHBbiToUVEvX\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/core/interfaces/IVoter.sol": {
				"IVoter": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_fees",
									"type": "address[]"
								},
								{
									"internalType": "address[][]",
									"name": "_tokens",
									"type": "address[][]"
								},
								{
									"internalType": "uint256",
									"name": "_tokenId",
									"type": "uint256"
								}
							],
							"name": "claimFees",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_gauges",
									"type": "address[]"
								}
							],
							"name": "claimRewards",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_poolFactory",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_pool",
									"type": "address"
								}
							],
							"name": "createGauge",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_gauges",
									"type": "address[]"
								}
							],
							"name": "distribute",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "gauge",
									"type": "address"
								}
							],
							"name": "distribute",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "emergencyCouncil",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factoryRegistry",
							"outputs": [
								{
									"internalType": "contract IFactoryRegistry",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_gauge",
									"type": "address"
								}
							],
							"name": "gaugeToBribes",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_gauge",
									"type": "address"
								}
							],
							"name": "gaugeToFees",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_pool",
									"type": "address"
								}
							],
							"name": "gauges",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_gauge",
									"type": "address"
								}
							],
							"name": "isAlive",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_gauge",
									"type": "address"
								}
							],
							"name": "killGauge",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "ve",
							"outputs": [
								{
									"internalType": "contract IVotingEscrow",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address[]",
									"name": "_poolVote",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "_weights",
									"type": "uint256[]"
								}
							],
							"name": "vote",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"claimFees(address[],address[][],uint256)": {
								"details": "Utility to help batch fee claims.",
								"params": {
									"_fees": "Array of FeesVotingReward contracts to collect from.",
									"_tokenId": "Id of veNFT that you wish to claim fees for.",
									"_tokens": "Array of tokens that are used as fees."
								}
							},
							"claimRewards(address[])": {
								"params": {
									"_gauges": "Array of gauges to collect emissions from."
								}
							},
							"distribute(address[])": {
								"details": "Utility to distribute to gauges of pools in array.",
								"params": {
									"_gauges": "Array of gauges to distribute to."
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"claimFees(address[],address[][],uint256)": "666256aa",
							"claimRewards(address[])": "f9f031df",
							"createGauge(address,address)": "794cea3c",
							"distribute(address)": "63453ae1",
							"distribute(address[])": "6138889b",
							"emergencyCouncil()": "7778960e",
							"factoryRegistry()": "3bf0c9fb",
							"gaugeToBribes(address)": "294a6aeb",
							"gaugeToFees(address)": "c4f08165",
							"gauges(address)": "b9a09fd5",
							"isAlive(address)": "1703e5f9",
							"killGauge(address)": "992a7933",
							"ve()": "1f850716",
							"vote(uint256,address[],uint256[])": "7ac09bf7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_fees\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_tokens\",\"type\":\"address[][]\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"createGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyCouncil\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryRegistry\",\"outputs\":[{\"internalType\":\"contract IFactoryRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"gaugeToBribes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"gaugeToFees\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"gauges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"isAlive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"killGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ve\",\"outputs\":[{\"internalType\":\"contract IVotingEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_poolVote\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimFees(address[],address[][],uint256)\":{\"details\":\"Utility to help batch fee claims.\",\"params\":{\"_fees\":\"Array of FeesVotingReward contracts to collect from.\",\"_tokenId\":\"Id of veNFT that you wish to claim fees for.\",\"_tokens\":\"Array of tokens that are used as fees.\"}},\"claimRewards(address[])\":{\"params\":{\"_gauges\":\"Array of gauges to collect emissions from.\"}},\"distribute(address[])\":{\"details\":\"Utility to distribute to gauges of pools in array.\",\"params\":{\"_gauges\":\"Array of gauges to distribute to.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimFees(address[],address[][],uint256)\":{\"notice\":\"Claim fees for a given NFT.\"},\"claimRewards(address[])\":{\"notice\":\"Claim emissions from gauges.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/interfaces/IVoter.sol\":\"IVoter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/IFactoryRegistry.sol\":{\"keccak256\":\"0xa2dbe19a5c9e221ffd8e4612ee8a4aa1233ab0ad059d4b7d91a8dca1153bcea0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://47a01d481d3a1f5172b8601d267439e24662849d7ebb3e1e66ec46d541e57831\",\"dweb:/ipfs/QmYG56TEtS8dwHrNaHxGrTp8r6cDzRkuGKsHBbiToUVEvX\"]},\"contracts/core/interfaces/IVoter.sol\":{\"keccak256\":\"0x029239646ad77a70b26a702b7e286521a03d5b89d148ff7c13d9bf56f6203187\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://eccfb9403ee8f5e7f604eccb0cafcbd047c1f73371537227011e6d557895fa68\",\"dweb:/ipfs/QmTjDHzzKTzkYhTeiWA1po8YL3USKkkMZSxZixVgsSQcXK\"]},\"contracts/core/interfaces/IVotingEscrow.sol\":{\"keccak256\":\"0x17ee815f29f7bc6a1528203976ed5bfdd945354dd72a7d322e8b092e331beb3d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9845c5056470191730c8a8688663bc9808172e57395c1c6053b5145bf9fd5098\",\"dweb:/ipfs/QmXyoRGbDe6KPngPsKXWZCyLLdmRTFKdhVD5Gf1Y15rG7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"claimFees(address[],address[][],uint256)": {
								"notice": "Claim fees for a given NFT."
							},
							"claimRewards(address[])": {
								"notice": "Claim emissions from gauges."
							}
						},
						"version": 1
					}
				}
			},
			"contracts/core/interfaces/IVotingEscrow.sol": {
				"IVotingEscrow": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_lockDuration",
									"type": "uint256"
								}
							],
							"name": "createLock",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "team",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"createLock(uint256,uint256)": {
								"params": {
									"_lockDuration": "Number of seconds to lock tokens for (rounded down to nearest week)",
									"_value": "Amount to deposit"
								},
								"returns": {
									"_0": "TokenId of created veNFT"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"createLock(uint256,uint256)": "b52c05fe",
							"team()": "85f2aef2"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"}],\"name\":\"createLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createLock(uint256,uint256)\":{\"params\":{\"_lockDuration\":\"Number of seconds to lock tokens for (rounded down to nearest week)\",\"_value\":\"Amount to deposit\"},\"returns\":{\"_0\":\"TokenId of created veNFT\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createLock(uint256,uint256)\":{\"notice\":\"Deposit `_value` tokens for `msg.sender` and lock for `_lockDuration`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/interfaces/IVotingEscrow.sol\":\"IVotingEscrow\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/IVotingEscrow.sol\":{\"keccak256\":\"0x17ee815f29f7bc6a1528203976ed5bfdd945354dd72a7d322e8b092e331beb3d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9845c5056470191730c8a8688663bc9808172e57395c1c6053b5145bf9fd5098\",\"dweb:/ipfs/QmXyoRGbDe6KPngPsKXWZCyLLdmRTFKdhVD5Gf1Y15rG7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"createLock(uint256,uint256)": {
								"notice": "Deposit `_value` tokens for `msg.sender` and lock for `_lockDuration`"
							}
						},
						"version": 1
					}
				}
			},
			"contracts/core/interfaces/callback/ICLMintCallback.sol": {
				"ICLMintCallback": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount0Owed",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1Owed",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "uniswapV3MintCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"uniswapV3MintCallback(uint256,uint256,bytes)": {
								"details": "In the implementation you must pay the pool tokens owed for the minted liquidity. The caller of this method must be checked to be a CLPool deployed by the canonical CLFactory.",
								"params": {
									"amount0Owed": "The amount of token0 due to the pool for the minted liquidity",
									"amount1Owed": "The amount of token1 due to the pool for the minted liquidity",
									"data": "Any data passed through by the caller via the ICLPoolActions#mint call"
								}
							}
						},
						"title": "Callback for ICLPoolActions#mint",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"uniswapV3MintCallback(uint256,uint256,bytes)": "d3487997"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Owed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Owed\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3MintCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"uniswapV3MintCallback(uint256,uint256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the minted liquidity. The caller of this method must be checked to be a CLPool deployed by the canonical CLFactory.\",\"params\":{\"amount0Owed\":\"The amount of token0 due to the pool for the minted liquidity\",\"amount1Owed\":\"The amount of token1 due to the pool for the minted liquidity\",\"data\":\"Any data passed through by the caller via the ICLPoolActions#mint call\"}}},\"title\":\"Callback for ICLPoolActions#mint\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"uniswapV3MintCallback(uint256,uint256,bytes)\":{\"notice\":\"Called to `msg.sender` after minting liquidity to a position from ICLPool#mint.\"}},\"notice\":\"Any contract that calls ICLPoolActions#mint must implement this interface\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/interfaces/callback/ICLMintCallback.sol\":\"ICLMintCallback\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/callback/ICLMintCallback.sol\":{\"keccak256\":\"0x22d4ed43f7d7313e676e80f7ae3315f53c3a84fbf256efae5116ef0aba32c1e8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a21d9618b9a9c2fe2cf35d9d6d608dd02a112bd05e6020fbe71e7e09064c2be7\",\"dweb:/ipfs/QmeBQiyVmxVTPT3ftVFDkiDVgZLMar6SQegryLC7A3jmLr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"uniswapV3MintCallback(uint256,uint256,bytes)": {
								"notice": "Called to `msg.sender` after minting liquidity to a position from ICLPool#mint."
							}
						},
						"notice": "Any contract that calls ICLPoolActions#mint must implement this interface",
						"version": 1
					}
				}
			},
			"contracts/core/interfaces/callback/ICLSwapCallback.sol": {
				"ICLSwapCallback": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"details": "In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a CLPool deployed by the canonical CLFactory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",
								"params": {
									"amount0Delta": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
									"amount1Delta": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
									"data": "Any data passed through by the caller via the ICLPoolActions#swap call"
								}
							}
						},
						"title": "Callback for ICLPoolActions#swap",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"uniswapV3SwapCallback(int256,int256,bytes)": "fa461e33"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a CLPool deployed by the canonical CLFactory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the ICLPoolActions#swap call\"}}},\"title\":\"Callback for ICLPoolActions#swap\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via ICLPool#swap.\"}},\"notice\":\"Any contract that calls ICLPoolActions#swap must implement this interface\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/interfaces/callback/ICLSwapCallback.sol\":\"ICLSwapCallback\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/callback/ICLSwapCallback.sol\":{\"keccak256\":\"0xb93e1ef2be3090a64b3b024f60253aef64b875f61dffaef8b9231351f8054948\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b16ccd544a6a551c977b7a7d6b6b9704c68e86624d66ecb16d945d3b88239458\",\"dweb:/ipfs/QmPBP5K81AFfHazhbbVb9ZXh6hzKeLqZcEUxnrkKNY7z2L\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"notice": "Called to `msg.sender` after executing a swap via ICLPool#swap."
							}
						},
						"notice": "Any contract that calls ICLPoolActions#swap must implement this interface",
						"version": 1
					}
				}
			},
			"contracts/core/interfaces/pool/ICLPoolActions.sol": {
				"ICLPoolActions": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flash",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								}
							],
							"name": "increaseObservationCardinalityNext",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_factory",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_token1",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "_tickSpacing",
									"type": "int24"
								},
								{
									"internalType": "address",
									"name": "_factoryRegistry",
									"type": "address"
								},
								{
									"internalType": "uint160",
									"name": "_sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_gauge",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_nft",
									"type": "address"
								}
							],
							"name": "setGaugeAndPositionManager",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int128",
									"name": "stakedLiquidityDelta",
									"type": "int128"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "bool",
									"name": "positionUpdate",
									"type": "bool"
								}
							],
							"name": "stake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "zeroForOne",
									"type": "bool"
								},
								{
									"internalType": "int256",
									"name": "amountSpecified",
									"type": "int256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "rewardRate",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "rewardReserve",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "periodFinish",
									"type": "uint256"
								}
							],
							"name": "syncReward",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "updateRewardsGrowthGlobal",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"burn(int24,int24,uint128)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"burn(int24,int24,uint128,address)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"owner": "Owner of the position in the pool (nft manager or gauge)",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"collect(address,int24,int24,uint128,uint128,address)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"owner": "Owner of the position in the pool (nft manager or gauge)",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"flash(address,uint256,uint256,bytes)": {
								"details": "The caller of this method receives a callback in the form of ICLFlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback",
								"params": {
									"amount0": "The amount of token0 to send",
									"amount1": "The amount of token1 to send",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address which will receive the token0 and token1 amounts"
								}
							},
							"increaseObservationCardinalityNext(uint16)": {
								"details": "This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
								"params": {
									"observationCardinalityNext": "The desired minimum number of observations for the pool to store"
								}
							},
							"initialize(address,address,address,int24,address,uint160)": {
								"details": "Can be called once only Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 valuenot locked because it initializes unlocked",
								"params": {
									"_factory": "The CL factory contract address",
									"_factoryRegistry": "The address of the factory registry managing the pool factory",
									"_sqrtPriceX96": "The initial sqrt price of the pool, as a Q64.96",
									"_tickSpacing": "The pool tick spacing",
									"_token0": "The first token of the pool by address sort order",
									"_token1": "The second token of the pool by address sort order"
								}
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"details": "The caller of this method receives a callback in the form of ICLMintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.",
								"params": {
									"amount": "The amount of liquidity to mint",
									"data": "Any data that should be passed through to the callback",
									"recipient": "The address for which the liquidity will be created",
									"tickLower": "The lower tick of the position in which to add liquidity",
									"tickUpper": "The upper tick of the position in which to add liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback",
									"amount1": "The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
								}
							},
							"setGaugeAndPositionManager(address,address)": {
								"details": "Callable only once, by the gauge factory",
								"params": {
									"_gauge": "The gauge corresponding to this pool",
									"_nft": "The position manager used for position management"
								}
							},
							"stake(int128,int24,int24,bool)": {
								"params": {
									"positionUpdate": "If the nft and gauge position should be updated",
									"stakedLiquidityDelta": "The amount by which to increase or decrease the staked liquidity",
									"tickLower": "The lower tick of the position for which to stake liquidity",
									"tickUpper": "The upper tick of the position for which to stake liquidity"
								}
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"details": "The caller of this method receives a callback in the form of ICLSwapCallback#uniswapV3SwapCallback",
								"params": {
									"amountSpecified": "The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address to receive the output of the swap",
									"sqrtPriceLimitX96": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
									"zeroForOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
								},
								"returns": {
									"amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
									"amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
								}
							},
							"syncReward(uint256,uint256,uint256)": {
								"params": {
									"periodFinish": "the end of the current period of rewards, updated once per epoch",
									"rewardRate": "the rate rewards being distributed during the epoch",
									"rewardReserve": "the available rewards to be distributed during the epoch"
								}
							}
						},
						"title": "Permissionless pool actions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"burn(int24,int24,uint128)": "a34123a7",
							"burn(int24,int24,uint128,address)": "6f89244c",
							"collect(address,int24,int24,uint128,uint128)": "4f1eb3d8",
							"collect(address,int24,int24,uint128,uint128,address)": "31338374",
							"flash(address,uint256,uint256,bytes)": "490e6cbc",
							"increaseObservationCardinalityNext(uint16)": "32148f67",
							"initialize(address,address,address,int24,address,uint160)": "2071d884",
							"mint(address,int24,int24,uint128,bytes)": "3c8a7d8d",
							"setGaugeAndPositionManager(address,address)": "1f7c3568",
							"stake(int128,int24,int24,bool)": "4ed6210f",
							"swap(address,bool,int256,uint160,bytes)": "128acb08",
							"syncReward(uint256,uint256,uint256)": "60a73f9b",
							"updateRewardsGrowthGlobal()": "1b410960"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"_tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"address\",\"name\":\"_factoryRegistry\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"_sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"setGaugeAndPositionManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"stakedLiquidityDelta\",\"type\":\"int128\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"bool\",\"name\":\"positionUpdate\",\"type\":\"bool\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodFinish\",\"type\":\"uint256\"}],\"name\":\"syncReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRewardsGrowthGlobal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"burn(int24,int24,uint128,address)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"owner\":\"Owner of the position in the pool (nft manager or gauge)\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"collect(address,int24,int24,uint128,uint128,address)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"owner\":\"Owner of the position in the pool (nft manager or gauge)\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of ICLFlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(address,address,address,int24,address,uint160)\":{\"details\":\"Can be called once only Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 valuenot locked because it initializes unlocked\",\"params\":{\"_factory\":\"The CL factory contract address\",\"_factoryRegistry\":\"The address of the factory registry managing the pool factory\",\"_sqrtPriceX96\":\"The initial sqrt price of the pool, as a Q64.96\",\"_tickSpacing\":\"The pool tick spacing\",\"_token0\":\"The first token of the pool by address sort order\",\"_token1\":\"The second token of the pool by address sort order\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of ICLMintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"setGaugeAndPositionManager(address,address)\":{\"details\":\"Callable only once, by the gauge factory\",\"params\":{\"_gauge\":\"The gauge corresponding to this pool\",\"_nft\":\"The position manager used for position management\"}},\"stake(int128,int24,int24,bool)\":{\"params\":{\"positionUpdate\":\"If the nft and gauge position should be updated\",\"stakedLiquidityDelta\":\"The amount by which to increase or decrease the staked liquidity\",\"tickLower\":\"The lower tick of the position for which to stake liquidity\",\"tickUpper\":\"The upper tick of the position for which to stake liquidity\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of ICLSwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}},\"syncReward(uint256,uint256,uint256)\":{\"params\":{\"periodFinish\":\"the end of the current period of rewards, updated once per epoch\",\"rewardRate\":\"the rate rewards being distributed during the epoch\",\"rewardReserve\":\"the available rewards to be distributed during the epoch\"}}},\"title\":\"Permissionless pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"burn(int24,int24,uint128,address)\":{\"notice\":\"Burn liquidity from the supplied owner and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"collect(address,int24,int24,uint128,uint128,address)\":{\"notice\":\"Collects tokens owed to a position\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(address,address,address,int24,address,uint160)\":{\"notice\":\"Initialize function used in proxy deployment\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"setGaugeAndPositionManager(address,address)\":{\"notice\":\"Initialize gauge and nft manager\"},\"stake(int128,int24,int24,bool)\":{\"notice\":\"Convert existing liquidity into staked liquidityOnly callable by the gauge associated with this pool\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"},\"syncReward(uint256,uint256,uint256)\":{\"notice\":\"Syncs rewards with gauge\"},\"updateRewardsGrowthGlobal()\":{\"notice\":\"Updates rewardGrowthGlobalX128 every time when any tick is crossed, or when any position is staked/unstaked from the gauge\"}},\"notice\":\"Contains pool methods that can be called by anyone\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/interfaces/pool/ICLPoolActions.sol\":\"ICLPoolActions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/pool/ICLPoolActions.sol\":{\"keccak256\":\"0x7699f31261ab40982e34febe16128f1edfdad39075969195301352ea66bcac40\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://074f1c470e11f30d0fae8b95b963c9d19dcbd2c5bd17ad4ebba95c5f0f073044\",\"dweb:/ipfs/QmdDWMUspgBXfLhcxqESez9rSwA8JYNRycmhkhuKoDCWqJ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"burn(int24,int24,uint128)": {
								"notice": "Burn liquidity from the sender and account tokens owed for the liquidity to the position"
							},
							"burn(int24,int24,uint128,address)": {
								"notice": "Burn liquidity from the supplied owner and account tokens owed for the liquidity to the position"
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"notice": "Collects tokens owed to a position"
							},
							"collect(address,int24,int24,uint128,uint128,address)": {
								"notice": "Collects tokens owed to a position"
							},
							"flash(address,uint256,uint256,bytes)": {
								"notice": "Receive token0 and/or token1 and pay it back, plus a fee, in the callback"
							},
							"increaseObservationCardinalityNext(uint16)": {
								"notice": "Increase the maximum number of price and liquidity observations that this pool will store"
							},
							"initialize(address,address,address,int24,address,uint160)": {
								"notice": "Initialize function used in proxy deployment"
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"notice": "Adds liquidity for the given recipient/tickLower/tickUpper position"
							},
							"setGaugeAndPositionManager(address,address)": {
								"notice": "Initialize gauge and nft manager"
							},
							"stake(int128,int24,int24,bool)": {
								"notice": "Convert existing liquidity into staked liquidityOnly callable by the gauge associated with this pool"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"notice": "Swap token0 for token1, or token1 for token0"
							},
							"syncReward(uint256,uint256,uint256)": {
								"notice": "Syncs rewards with gauge"
							},
							"updateRewardsGrowthGlobal()": {
								"notice": "Updates rewardGrowthGlobalX128 every time when any tick is crossed, or when any position is staked/unstaked from the gauge"
							}
						},
						"notice": "Contains pool methods that can be called by anyone",
						"version": 1
					}
				}
			},
			"contracts/core/interfaces/pool/ICLPoolConstants.sol": {
				"ICLPoolConstants": {
					"abi": [
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factoryRegistry",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "gauge",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxLiquidityPerTick",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "nft",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"factory()": {
								"returns": {
									"_0": "The contract address"
								}
							},
							"factoryRegistry()": {
								"returns": {
									"_0": "The factory registry contract address"
								}
							},
							"gauge()": {
								"returns": {
									"_0": "The gauge contract address"
								}
							},
							"maxLiquidityPerTick()": {
								"details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
								"returns": {
									"_0": "The max amount of liquidity per tick"
								}
							},
							"nft()": {
								"returns": {
									"_0": "The nft manager contract address"
								}
							},
							"tickSpacing()": {
								"details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"token0()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"token1()": {
								"returns": {
									"_0": "The token contract address"
								}
							}
						},
						"title": "Pool state that never changes",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"factory()": "c45a0155",
							"factoryRegistry()": "3bf0c9fb",
							"gauge()": "a6f19c84",
							"maxLiquidityPerTick()": "70cf754a",
							"nft()": "47ccca02",
							"tickSpacing()": "d0c93a7c",
							"token0()": "0dfe1681",
							"token1()": "d21220a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"factoryRegistry()\":{\"returns\":{\"_0\":\"The factory registry contract address\"}},\"gauge()\":{\"returns\":{\"_0\":\"The gauge contract address\"}},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"nft()\":{\"returns\":{\"_0\":\"The nft manager contract address\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"Pool state that never changes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the ICLFactory interface\"},\"factoryRegistry()\":{\"notice\":\"The factory registry that manages pool <> gauge <> reward factory relationships\"},\"gauge()\":{\"notice\":\"The gauge corresponding to this pool\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"nft()\":{\"notice\":\"The nft manager\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"These parameters are not defined as immutable (due to proxy pattern) but are effectively immutable.i.e., the methods will always return the same values\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/interfaces/pool/ICLPoolConstants.sol\":\"ICLPoolConstants\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/pool/ICLPoolConstants.sol\":{\"keccak256\":\"0xfad00d4ca1a40ef27d9614a98483ca67c4491b6f19e376901745c57a6949b512\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://2b5ea522565efb803d146673ff9e37aa090a5abff334fea587da62f4fb5d6647\",\"dweb:/ipfs/QmVRPscHFVjYFvRbJf41zVLtA2jVLbEUH66KGtEzspXnWS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"factory()": {
								"notice": "The contract that deployed the pool, which must adhere to the ICLFactory interface"
							},
							"factoryRegistry()": {
								"notice": "The factory registry that manages pool <> gauge <> reward factory relationships"
							},
							"gauge()": {
								"notice": "The gauge corresponding to this pool"
							},
							"maxLiquidityPerTick()": {
								"notice": "The maximum amount of position liquidity that can use any tick in the range"
							},
							"nft()": {
								"notice": "The nft manager"
							},
							"tickSpacing()": {
								"notice": "The pool tick spacing"
							},
							"token0()": {
								"notice": "The first of the two tokens of the pool, sorted by address"
							},
							"token1()": {
								"notice": "The second of the two tokens of the pool, sorted by address"
							}
						},
						"notice": "These parameters are not defined as immutable (due to proxy pattern) but are effectively immutable.i.e., the methods will always return the same values",
						"version": 1
					}
				}
			},
			"contracts/core/interfaces/pool/ICLPoolDerivedState.sol": {
				"ICLPoolDerivedState": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint32[]",
									"name": "secondsAgos",
									"type": "uint32[]"
								}
							],
							"name": "observe",
							"outputs": [
								{
									"internalType": "int56[]",
									"name": "tickCumulatives",
									"type": "int56[]"
								},
								{
									"internalType": "uint160[]",
									"name": "secondsPerLiquidityCumulativeX128s",
									"type": "uint160[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								}
							],
							"name": "snapshotCumulativesInside",
							"outputs": [
								{
									"internalType": "int56",
									"name": "tickCumulativeInside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityInsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsInside",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"observe(uint32[])": {
								"details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
								"params": {
									"secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
								},
								"returns": {
									"secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
									"tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
								}
							},
							"snapshotCumulativesInside(int24,int24)": {
								"details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
								"params": {
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"secondsInside": "The snapshot of seconds per liquidity for the range",
									"secondsPerLiquidityInsideX128": "The snapshot of seconds per liquidity for the range",
									"tickCumulativeInside": "The snapshot of the tick accumulator for the range"
								}
							}
						},
						"title": "Pool state that is not stored",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"observe(uint32[])": "883bdbfd",
							"snapshotCumulativesInside(int24,int24)": "a38807f2"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}}},\"title\":\"Pool state that is not stored\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"}},\"notice\":\"Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/interfaces/pool/ICLPoolDerivedState.sol\":\"ICLPoolDerivedState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/pool/ICLPoolDerivedState.sol\":{\"keccak256\":\"0xc15e4192a1b7b756cababb994341dc8e78627e1341465e47b1dcb66e9ed54af8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ee4b9269244f6b7ac57cba3b8966ac188220596d16cef71d186f0a6446593b4e\",\"dweb:/ipfs/QmQjyc5ggDgoAv4YbL5uKpNxRDoTvVYw6vePFgu4aNigmQ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"observe(uint32[])": {
								"notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
							},
							"snapshotCumulativesInside(int24,int24)": {
								"notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
							}
						},
						"notice": "Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.",
						"version": 1
					}
				}
			},
			"contracts/core/interfaces/pool/ICLPoolEvents.sol": {
				"ICLPoolEvents": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "CollectFees",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid1",
									"type": "uint256"
								}
							],
							"name": "Flash",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextOld",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextNew",
									"type": "uint16"
								}
							],
							"name": "IncreaseObservationCardinalityNext",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Initialize",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0New",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1New",
									"type": "uint8"
								}
							],
							"name": "SetFeeProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Swap",
							"type": "event"
						}
					],
					"devdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"details": "Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect",
								"params": {
									"amount": "The amount of liquidity to remove",
									"amount0": "The amount of token0 withdrawn",
									"amount1": "The amount of token1 withdrawn",
									"owner": "The owner of the position for which liquidity is removed",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"details": "Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees",
								"params": {
									"amount0": "The amount of token0 fees collected",
									"amount1": "The amount of token1 fees collected",
									"owner": "The owner of the position for which fees are collected",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"CollectFees(address,uint128,uint128)": {
								"params": {
									"amount0": "The amount of token1 protocol fees that is withdrawn",
									"recipient": "The address that receives the collected protocol fees"
								}
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"params": {
									"amount0": "The amount of token0 that was flashed",
									"amount1": "The amount of token1 that was flashed",
									"paid0": "The amount of token0 paid for the flash, which can exceed the amount0 plus the fee",
									"paid1": "The amount of token1 paid for the flash, which can exceed the amount1 plus the fee",
									"recipient": "The address that received the tokens from flash",
									"sender": "The address that initiated the swap call, and that received the callback"
								}
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"details": "observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.",
								"params": {
									"observationCardinalityNextNew": "The updated value of the next observation cardinality",
									"observationCardinalityNextOld": "The previous value of the next observation cardinality"
								}
							},
							"Initialize(uint160,int24)": {
								"details": "Mint/Burn/Swap cannot be emitted by the pool before Initialize",
								"params": {
									"sqrtPriceX96": "The initial sqrt price of the pool, as a Q64.96",
									"tick": "The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
								}
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"params": {
									"amount": "The amount of liquidity minted to the position range",
									"amount0": "How much token0 was required for the minted liquidity",
									"amount1": "How much token1 was required for the minted liquidity",
									"owner": "The owner of the position and recipient of any minted liquidity",
									"sender": "The address that minted the liquidity",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"params": {
									"feeProtocol0New": "The updated value of the token0 protocol fee",
									"feeProtocol0Old": "The previous value of the token0 protocol fee",
									"feeProtocol1New": "The updated value of the token1 protocol fee",
									"feeProtocol1Old": "The previous value of the token1 protocol fee"
								}
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"params": {
									"amount0": "The delta of the token0 balance of the pool",
									"amount1": "The delta of the token1 balance of the pool",
									"liquidity": "The liquidity of the pool after the swap",
									"recipient": "The address that received the output of the swap",
									"sender": "The address that initiated the swap call, and that received the callback",
									"sqrtPriceX96": "The sqrt(price) of the pool after the swap, as a Q64.96",
									"tick": "The log base 1.0001 of price of the pool after the swap"
								}
							}
						},
						"kind": "dev",
						"methods": {},
						"title": "Events emitted by a pool",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"details\":\"Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\",\"params\":{\"amount\":\"The amount of liquidity to remove\",\"amount0\":\"The amount of token0 withdrawn\",\"amount1\":\"The amount of token1 withdrawn\",\"owner\":\"The owner of the position for which liquidity is removed\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"details\":\"Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\",\"params\":{\"amount0\":\"The amount of token0 fees collected\",\"amount1\":\"The amount of token1 fees collected\",\"owner\":\"The owner of the position for which fees are collected\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"CollectFees(address,uint128,uint128)\":{\"params\":{\"amount0\":\"The amount of token1 protocol fees that is withdrawn\",\"recipient\":\"The address that receives the collected protocol fees\"}},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was flashed\",\"amount1\":\"The amount of token1 that was flashed\",\"paid0\":\"The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\",\"paid1\":\"The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\",\"recipient\":\"The address that received the tokens from flash\",\"sender\":\"The address that initiated the swap call, and that received the callback\"}},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"details\":\"observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.\",\"params\":{\"observationCardinalityNextNew\":\"The updated value of the next observation cardinality\",\"observationCardinalityNextOld\":\"The previous value of the next observation cardinality\"}},\"Initialize(uint160,int24)\":{\"details\":\"Mint/Burn/Swap cannot be emitted by the pool before Initialize\",\"params\":{\"sqrtPriceX96\":\"The initial sqrt price of the pool, as a Q64.96\",\"tick\":\"The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\"}},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of liquidity minted to the position range\",\"amount0\":\"How much token0 was required for the minted liquidity\",\"amount1\":\"How much token1 was required for the minted liquidity\",\"owner\":\"The owner of the position and recipient of any minted liquidity\",\"sender\":\"The address that minted the liquidity\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"params\":{\"feeProtocol0New\":\"The updated value of the token0 protocol fee\",\"feeProtocol0Old\":\"The previous value of the token0 protocol fee\",\"feeProtocol1New\":\"The updated value of the token1 protocol fee\",\"feeProtocol1Old\":\"The previous value of the token1 protocol fee\"}},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"params\":{\"amount0\":\"The delta of the token0 balance of the pool\",\"amount1\":\"The delta of the token1 balance of the pool\",\"liquidity\":\"The liquidity of the pool after the swap\",\"recipient\":\"The address that received the output of the swap\",\"sender\":\"The address that initiated the swap call, and that received the callback\",\"sqrtPriceX96\":\"The sqrt(price) of the pool after the swap, as a Q64.96\",\"tick\":\"The log base 1.0001 of price of the pool after the swap\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"Events emitted by a pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectFees(address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the gauge\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains all events emitted by the pool\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/interfaces/pool/ICLPoolEvents.sol\":\"ICLPoolEvents\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/pool/ICLPoolEvents.sol\":{\"keccak256\":\"0x32fbcac8952f1c5c44b466b0e1c28634ce71372c0f65242aa0d821cebdddcc2b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://19f22382292967f97640f84a7edfa01cf7deb303bf882344b9985007f1dcbef2\",\"dweb:/ipfs/Qmej7vWwun9fRBCrcvzPHdZP1jtLSCxJtjTSdkVTcgWeAE\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when a position's liquidity is removed"
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"notice": "Emitted when fees are collected by the owner of a position"
							},
							"CollectFees(address,uint128,uint128)": {
								"notice": "Emitted when the collected protocol fees are withdrawn by the gauge"
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"notice": "Emitted by the pool for any flashes of token0/token1"
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"notice": "Emitted by the pool for increases to the number of observations that can be stored"
							},
							"Initialize(uint160,int24)": {
								"notice": "Emitted exactly once by a pool when #initialize is first called on the pool"
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is minted for a given position"
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"notice": "Emitted when the protocol fee is changed by the pool"
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"notice": "Emitted by the pool for any swaps between token0 and token1"
							}
						},
						"kind": "user",
						"methods": {},
						"notice": "Contains all events emitted by the pool",
						"version": 1
					}
				}
			},
			"contracts/core/interfaces/pool/ICLPoolOwnerActions.sol": {
				"ICLPoolOwnerActions": {
					"abi": [
						{
							"inputs": [],
							"name": "collectFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"collectFees()": {
								"returns": {
									"amount0": "The gauge fee collected in token0",
									"amount1": "The gauge fee collected in token1"
								}
							}
						},
						"title": "Permissioned pool actions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"collectFees()": "c8796572"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"collectFees()\":{\"returns\":{\"amount0\":\"The gauge fee collected in token0\",\"amount1\":\"The gauge fee collected in token1\"}}},\"title\":\"Permissioned pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collectFees()\":{\"notice\":\"Collect the gauge fee accrued to the pool\"}},\"notice\":\"Contains pool methods that may only be called by the factory owner\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/interfaces/pool/ICLPoolOwnerActions.sol\":\"ICLPoolOwnerActions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/pool/ICLPoolOwnerActions.sol\":{\"keccak256\":\"0xeafd14ae3e15c9f663507e004c599618bfd5d2a90d58b3b450f9372f9e3f54f8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://49472c8cf06dc7084e22fc57ffdce860aa7a9ff77f12e4bef0c13a078bbc5831\",\"dweb:/ipfs/Qmd29vWULezsJJzhw3wZxsU6Hsng5949v2TiVCbdga4Vqe\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"collectFees()": {
								"notice": "Collect the gauge fee accrued to the pool"
							}
						},
						"notice": "Contains pool methods that may only be called by the factory owner",
						"version": 1
					}
				}
			},
			"contracts/core/interfaces/pool/ICLPoolState.sol": {
				"ICLPoolState": {
					"abi": [
						{
							"inputs": [],
							"name": "fee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal0X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal1X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "gaugeFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "token0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "token1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint256",
									"name": "_rewardGrowthGlobalX128",
									"type": "uint256"
								}
							],
							"name": "getRewardGrowthInside",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "rewardGrowthInsideX128",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "lastUpdated",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "liquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "observations",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "blockTimestamp",
									"type": "uint32"
								},
								{
									"internalType": "int56",
									"name": "tickCumulative",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityCumulativeX128",
									"type": "uint160"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "periodFinish",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "_liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rewardGrowthGlobalX128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rewardRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rewardReserve",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rollover",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "slot0",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								},
								{
									"internalType": "uint16",
									"name": "observationIndex",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinality",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								},
								{
									"internalType": "bool",
									"name": "unlocked",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "stakedLiquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int16",
									"name": "wordPosition",
									"type": "int16"
								}
							],
							"name": "tickBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "ticks",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidityGross",
									"type": "uint128"
								},
								{
									"internalType": "int128",
									"name": "liquidityNet",
									"type": "int128"
								},
								{
									"internalType": "int128",
									"name": "stakedLiquidityNet",
									"type": "int128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside0X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside1X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "rewardGrowthOutsideX128",
									"type": "uint256"
								},
								{
									"internalType": "int56",
									"name": "tickCumulativeOutside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityOutsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsOutside",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unstakedFee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"fee()": {
								"details": "Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.",
								"returns": {
									"_0": "The swap & flash fee"
								}
							},
							"feeGrowthGlobal0X128()": {
								"details": "This value can overflow the uint256"
							},
							"feeGrowthGlobal1X128()": {
								"details": "This value can overflow the uint256"
							},
							"gaugeFees()": {
								"details": "Gauge fees will never exceed uint128 max in either token"
							},
							"getRewardGrowthInside(int24,int24,uint256)": {
								"details": "Used in gauge reward/earned calculations",
								"params": {
									"_rewardGrowthGlobalX128": "a calculated rewardGrowthGlobalX128 or 0 (in case of 0 it means we use the rewardGrowthGlobalX128 from state)",
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"rewardGrowthInsideX128": "The reward growth in the range"
								}
							},
							"liquidity()": {
								"details": "This value has no relationship to the total liquidity across all ticksThis value includes staked liquidity"
							},
							"observations(uint256)": {
								"details": "You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.",
								"params": {
									"index": "The element of the observations array to fetch"
								},
								"returns": {
									"blockTimestamp": "The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"
								}
							},
							"positions(bytes32)": {
								"params": {
									"key": "The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"
								},
								"returns": {
									"_liquidity": "The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
								}
							},
							"rewardGrowthGlobalX128()": {
								"details": "This value can overflow the uint256"
							},
							"rollover()": {
								"details": "rollover will always be smaller than the rewards distributed that epoch"
							},
							"slot0()": {
								"returns": {
									"sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. unlocked Whether the pool is currently locked to reentrancy"
								}
							},
							"stakedLiquidity()": {
								"details": "This value has no relationship to the total staked liquidity across all ticks"
							},
							"ticks(int24)": {
								"params": {
									"tick": "The tick to look up"
								},
								"returns": {
									"liquidityGross": "the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, stakedLiquidityNet how much staked liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, rewardGrowthOutsideX128 the reward growth on the other side of the tick from the current tick in emission token tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."
								}
							},
							"unstakedFee()": {
								"details": "Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.",
								"returns": {
									"_0": "The unstaked fee"
								}
							}
						},
						"title": "Pool state that can change",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"fee()": "ddca3f43",
							"feeGrowthGlobal0X128()": "f3058399",
							"feeGrowthGlobal1X128()": "46141319",
							"gaugeFees()": "293833ba",
							"getRewardGrowthInside(int24,int24,uint256)": "a16368c9",
							"lastUpdated()": "d0b06f5d",
							"liquidity()": "1a686502",
							"observations(uint256)": "252c09d7",
							"periodFinish()": "ebe2b12b",
							"positions(bytes32)": "514ea4bf",
							"rewardGrowthGlobalX128()": "57806ada",
							"rewardRate()": "7b0a47ee",
							"rewardReserve()": "cab64bcd",
							"rollover()": "b056b49a",
							"slot0()": "3850c7bd",
							"stakedLiquidity()": "3ab04b20",
							"tickBitmap(int16)": "5339c296",
							"ticks(int24)": "f30dba93",
							"unstakedFee()": "b64cc67b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugeFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"_rewardGrowthGlobalX128\",\"type\":\"uint256\"}],\"name\":\"getRewardGrowthInside\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardGrowthInsideX128\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdated\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardGrowthGlobalX128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedLiquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"stakedLiquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardGrowthOutsideX128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakedFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"fee()\":{\"details\":\"Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.\",\"returns\":{\"_0\":\"The swap & flash fee\"}},\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"gaugeFees()\":{\"details\":\"Gauge fees will never exceed uint128 max in either token\"},\"getRewardGrowthInside(int24,int24,uint256)\":{\"details\":\"Used in gauge reward/earned calculations\",\"params\":{\"_rewardGrowthGlobalX128\":\"a calculated rewardGrowthGlobalX128 or 0 (in case of 0 it means we use the rewardGrowthGlobalX128 from state)\",\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"rewardGrowthInsideX128\":\"The reward growth in the range\"}},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticksThis value includes staked liquidity\"},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"rewardGrowthGlobalX128()\":{\"details\":\"This value can overflow the uint256\"},\"rollover()\":{\"details\":\"rollover will always be smaller than the rewards distributed that epoch\"},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. unlocked Whether the pool is currently locked to reentrancy\"}},\"stakedLiquidity()\":{\"details\":\"This value has no relationship to the total staked liquidity across all ticks\"},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, stakedLiquidityNet how much staked liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, rewardGrowthOutsideX128 the reward growth on the other side of the tick from the current tick in emission token tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}},\"unstakedFee()\":{\"details\":\"Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.\",\"returns\":{\"_0\":\"The unstaked fee\"}}},\"title\":\"Pool state that can change\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fee()\":{\"notice\":\"The pool's swap & flash fee in pips, i.e. 1e-6\"},\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"gaugeFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the gauge\"},\"getRewardGrowthInside(int24,int24,uint256)\":{\"notice\":\"Returns data about reward growth within a tick range. RewardGrowthGlobalX128 can be supplied as a parameter for claimable reward calculations.\"},\"lastUpdated()\":{\"notice\":\"last time the rewardReserve and rewardRate were updated\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"periodFinish()\":{\"notice\":\"timestamp of the end of the current epoch's rewards\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"rewardGrowthGlobalX128()\":{\"notice\":\"The reward growth as a Q128.128 rewards of emission collected per unit of liquidity for the entire life of the pool\"},\"rewardRate()\":{\"notice\":\"the emission rate of time-based farming\"},\"rewardReserve()\":{\"notice\":\"acts as a virtual reserve that holds information on how many rewards are yet to be distributed\"},\"rollover()\":{\"notice\":\"tracks total rewards distributed when no staked liquidity in active tick for epoch ending at periodFinishthis amount is rolled over on the next call to notifyRewardAmount\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"stakedLiquidity()\":{\"notice\":\"The currently in range staked liquidity available to the pool\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"},\"unstakedFee()\":{\"notice\":\"The pool's unstaked fee in pips, i.e. 1e-6\"}},\"notice\":\"These methods compose the pool's state, and can change with any frequency including multiple times per transaction\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/interfaces/pool/ICLPoolState.sol\":\"ICLPoolState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/pool/ICLPoolState.sol\":{\"keccak256\":\"0xe57d65825a097d6f0ab55d7ae39b528695b3df65320ed524124fbb55949bfcf9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b63b25beebe612acfd564f40b0d95b3844ee71bf969a3357419e7a54f1ece961\",\"dweb:/ipfs/Qmdk3mNLz3cSZscbXFsJp69gjgxFcBv6K5mdc6tjnmtFSR\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"fee()": {
								"notice": "The pool's swap & flash fee in pips, i.e. 1e-6"
							},
							"feeGrowthGlobal0X128()": {
								"notice": "The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"
							},
							"feeGrowthGlobal1X128()": {
								"notice": "The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"
							},
							"gaugeFees()": {
								"notice": "The amounts of token0 and token1 that are owed to the gauge"
							},
							"getRewardGrowthInside(int24,int24,uint256)": {
								"notice": "Returns data about reward growth within a tick range. RewardGrowthGlobalX128 can be supplied as a parameter for claimable reward calculations."
							},
							"lastUpdated()": {
								"notice": "last time the rewardReserve and rewardRate were updated"
							},
							"liquidity()": {
								"notice": "The currently in range liquidity available to the pool"
							},
							"observations(uint256)": {
								"notice": "Returns data about a specific observation index"
							},
							"periodFinish()": {
								"notice": "timestamp of the end of the current epoch's rewards"
							},
							"positions(bytes32)": {
								"notice": "Returns the information about a position by the position's key"
							},
							"rewardGrowthGlobalX128()": {
								"notice": "The reward growth as a Q128.128 rewards of emission collected per unit of liquidity for the entire life of the pool"
							},
							"rewardRate()": {
								"notice": "the emission rate of time-based farming"
							},
							"rewardReserve()": {
								"notice": "acts as a virtual reserve that holds information on how many rewards are yet to be distributed"
							},
							"rollover()": {
								"notice": "tracks total rewards distributed when no staked liquidity in active tick for epoch ending at periodFinishthis amount is rolled over on the next call to notifyRewardAmount"
							},
							"slot0()": {
								"notice": "The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."
							},
							"stakedLiquidity()": {
								"notice": "The currently in range staked liquidity available to the pool"
							},
							"tickBitmap(int16)": {
								"notice": "Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
							},
							"ticks(int24)": {
								"notice": "Look up information about a specific tick in the pool"
							},
							"unstakedFee()": {
								"notice": "The pool's unstaked fee in pips, i.e. 1e-6"
							}
						},
						"notice": "These methods compose the pool's state, and can change with any frequency including multiple times per transaction",
						"version": 1
					}
				}
			},
			"contracts/core/libraries/BitMath.sol": {
				"BitMath": {
					"abi": [],
					"devdoc": {
						"details": "This library provides functionality for computing bit properties of an unsigned integer",
						"kind": "dev",
						"methods": {},
						"title": "BitMath",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/core/libraries/BitMath.sol\":187:2789  library BitMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/core/libraries/BitMath.sol\":187:2789  library BitMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220e9e957cb50153001d070b46e0a59e386f39dc0fba94434812b9aef01112e58ef64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e9e957cb50153001d070b46e0a59e386f39dc0fba94434812b9aef01112e58ef64736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE9 0xE9 JUMPI 0xCB POP ISZERO ADDRESS ADD 0xD0 PUSH17 0xB46E0A59E386F39DC0FBA94434812B9AEF ADD GT 0x2E PC 0xEF PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "187:2602:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e9e957cb50153001d070b46e0a59e386f39dc0fba94434812b9aef01112e58ef64736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE9 0xE9 JUMPI 0xCB POP ISZERO ADDRESS ADD 0xD0 PUSH17 0xB46E0A59E386F39DC0FBA94434812B9AEF ADD GT 0x2E PC 0xEF PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "187:2602:17:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"leastSignificantBit(uint256)": "infinite",
								"mostSignificantBit(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 187,
									"end": 2789,
									"name": "PUSH #[$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "PUSH [$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "PUSH",
									"source": 17,
									"value": "B"
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "CODECOPY",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "BYTE",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "PUSH",
									"source": 17,
									"value": "73"
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "EQ",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "INVALID",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "tag",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "ADDRESS",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "PUSH",
									"source": 17,
									"value": "73"
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "MSTORE8",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "RETURN",
									"source": 17
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e9e957cb50153001d070b46e0a59e386f39dc0fba94434812b9aef01112e58ef64736f6c63430007060033",
									".code": [
										{
											"begin": 187,
											"end": 2789,
											"name": "PUSHDEPLOYADDRESS",
											"source": 17
										},
										{
											"begin": 187,
											"end": 2789,
											"name": "ADDRESS",
											"source": 17
										},
										{
											"begin": 187,
											"end": 2789,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 187,
											"end": 2789,
											"name": "PUSH",
											"source": 17,
											"value": "80"
										},
										{
											"begin": 187,
											"end": 2789,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 187,
											"end": 2789,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 187,
											"end": 2789,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 187,
											"end": 2789,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 187,
											"end": 2789,
											"name": "REVERT",
											"source": 17
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This library provides functionality for computing bit properties of an unsigned integer\",\"kind\":\"dev\",\"methods\":{},\"title\":\"BitMath\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/libraries/BitMath.sol\":\"BitMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/libraries/BitMath.sol\":{\"keccak256\":\"0x82e425066110aac05ed8a9fc90f9ee85142b6f434769447e49d4438a8d9fcd82\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://77a97078bc992c18c59cb61e07fa4632c8a26b6babf00f3b16eabb5dcaa953b4\",\"dweb:/ipfs/QmTj15ufLWk6AxedSVXBcLp5cYf2DCJAeDi94cVemCkm54\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/core/libraries/FixedPoint128.sol": {
				"FixedPoint128": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "FixedPoint128",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/core/libraries/FixedPoint128.sol\":211:310  library FixedPoint128 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/core/libraries/FixedPoint128.sol\":211:310  library FixedPoint128 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220af2e45a8ae608292f3ff954bcf0aec028d297ff58410fb4dec9e8abf8b7302b264736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220af2e45a8ae608292f3ff954bcf0aec028d297ff58410fb4dec9e8abf8b7302b264736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAF 0x2E GASLIMIT 0xA8 0xAE PUSH1 0x82 SWAP3 RETURN SELFDESTRUCT SWAP6 0x4B 0xCF EXP 0xEC MUL DUP14 0x29 PUSH32 0xF58410FB4DEC9E8ABF8B7302B264736F6C634300070600330000000000000000 ",
							"sourceMap": "211:99:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220af2e45a8ae608292f3ff954bcf0aec028d297ff58410fb4dec9e8abf8b7302b264736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAF 0x2E GASLIMIT 0xA8 0xAE PUSH1 0x82 SWAP3 RETURN SELFDESTRUCT SWAP6 0x4B 0xCF EXP 0xEC MUL DUP14 0x29 PUSH32 0xF58410FB4DEC9E8ABF8B7302B264736F6C634300070600330000000000000000 ",
							"sourceMap": "211:99:18:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 211,
									"end": 310,
									"name": "PUSH #[$]",
									"source": 18,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 211,
									"end": 310,
									"name": "PUSH [$]",
									"source": 18,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 211,
									"end": 310,
									"name": "PUSH",
									"source": 18,
									"value": "B"
								},
								{
									"begin": 211,
									"end": 310,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "CODECOPY",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 211,
									"end": 310,
									"name": "BYTE",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "PUSH",
									"source": 18,
									"value": "73"
								},
								{
									"begin": 211,
									"end": 310,
									"name": "EQ",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 211,
									"end": 310,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "INVALID",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "tag",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 211,
									"end": 310,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "ADDRESS",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 211,
									"end": 310,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "PUSH",
									"source": 18,
									"value": "73"
								},
								{
									"begin": 211,
									"end": 310,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "MSTORE8",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "RETURN",
									"source": 18
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220af2e45a8ae608292f3ff954bcf0aec028d297ff58410fb4dec9e8abf8b7302b264736f6c63430007060033",
									".code": [
										{
											"begin": 211,
											"end": 310,
											"name": "PUSHDEPLOYADDRESS",
											"source": 18
										},
										{
											"begin": 211,
											"end": 310,
											"name": "ADDRESS",
											"source": 18
										},
										{
											"begin": 211,
											"end": 310,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 211,
											"end": 310,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 211,
											"end": 310,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 211,
											"end": 310,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 211,
											"end": 310,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 211,
											"end": 310,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 211,
											"end": 310,
											"name": "REVERT",
											"source": 18
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"FixedPoint128\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/libraries/FixedPoint128.sol\":\"FixedPoint128\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/libraries/FixedPoint128.sol\":{\"keccak256\":\"0x2d1f4f73ae0d8f0a210b8d30084659b57c56ac8f2f96011fca36f00a6d417178\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://2ba88933f16cd2df398e19c6ad227268f83c03081b70d243c97116d2ed9bc241\",\"dweb:/ipfs/QmTUGxdh8snzEM9VrTSS47StCg9VVWvvLJtJeNnMTFY4xb\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)",
						"version": 1
					}
				}
			},
			"contracts/core/libraries/FixedPoint96.sol": {
				"FixedPoint96": {
					"abi": [],
					"devdoc": {
						"details": "Used in SqrtPriceMath.sol",
						"kind": "dev",
						"methods": {},
						"title": "FixedPoint96",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/core/libraries/FixedPoint96.sol\":245:379  library FixedPoint96 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/core/libraries/FixedPoint96.sol\":245:379  library FixedPoint96 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122091b00088012a888ead7d274b38fdf84d1fa38587dd76dc2c7e4d4cf58cb9987464736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122091b00088012a888ead7d274b38fdf84d1fa38587dd76dc2c7e4d4cf58cb9987464736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP2 0xB0 STOP DUP9 ADD 0x2A DUP9 DUP15 0xAD PUSH30 0x274B38FDF84D1FA38587DD76DC2C7E4D4CF58CB9987464736F6C63430007 MOD STOP CALLER ",
							"sourceMap": "245:134:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122091b00088012a888ead7d274b38fdf84d1fa38587dd76dc2c7e4d4cf58cb9987464736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP2 0xB0 STOP DUP9 ADD 0x2A DUP9 DUP15 0xAD PUSH30 0x274B38FDF84D1FA38587DD76DC2C7E4D4CF58CB9987464736F6C63430007 MOD STOP CALLER ",
							"sourceMap": "245:134:19:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 245,
									"end": 379,
									"name": "PUSH #[$]",
									"source": 19,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 245,
									"end": 379,
									"name": "PUSH [$]",
									"source": 19,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 245,
									"end": 379,
									"name": "PUSH",
									"source": 19,
									"value": "B"
								},
								{
									"begin": 245,
									"end": 379,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "CODECOPY",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 245,
									"end": 379,
									"name": "BYTE",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "PUSH",
									"source": 19,
									"value": "73"
								},
								{
									"begin": 245,
									"end": 379,
									"name": "EQ",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "1"
								},
								{
									"begin": 245,
									"end": 379,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "INVALID",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "tag",
									"source": 19,
									"value": "1"
								},
								{
									"begin": 245,
									"end": 379,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "ADDRESS",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 245,
									"end": 379,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "PUSH",
									"source": 19,
									"value": "73"
								},
								{
									"begin": 245,
									"end": 379,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "MSTORE8",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "RETURN",
									"source": 19
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122091b00088012a888ead7d274b38fdf84d1fa38587dd76dc2c7e4d4cf58cb9987464736f6c63430007060033",
									".code": [
										{
											"begin": 245,
											"end": 379,
											"name": "PUSHDEPLOYADDRESS",
											"source": 19
										},
										{
											"begin": 245,
											"end": 379,
											"name": "ADDRESS",
											"source": 19
										},
										{
											"begin": 245,
											"end": 379,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 245,
											"end": 379,
											"name": "PUSH",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 245,
											"end": 379,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 245,
											"end": 379,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 245,
											"end": 379,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 245,
											"end": 379,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 245,
											"end": 379,
											"name": "REVERT",
											"source": 19
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Used in SqrtPriceMath.sol\",\"kind\":\"dev\",\"methods\":{},\"title\":\"FixedPoint96\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/libraries/FixedPoint96.sol\":\"FixedPoint96\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/libraries/FixedPoint96.sol\":{\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://186d3b528866065a5856f96d2aeec698efa99f8da913e9adf34f8cc296cc993d\",\"dweb:/ipfs/QmUAiMvtAQp8c9dy57bqJYzG7hkb1uChiPaQmt264skoqP\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)",
						"version": 1
					}
				}
			},
			"contracts/core/libraries/FullMath.sol": {
				"FullMath": {
					"abi": [],
					"devdoc": {
						"details": "Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits",
						"kind": "dev",
						"methods": {},
						"title": "Contains 512-bit math functions",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/core/libraries/FullMath.sol\":362:5064  library FullMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/core/libraries/FullMath.sol\":362:5064  library FullMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220f95828329d9d950e6117728e0b3a0e7e1ae406599a5c4028c24a61931920daab64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f95828329d9d950e6117728e0b3a0e7e1ae406599a5c4028c24a61931920daab64736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF9 PC 0x28 ORIGIN SWAP14 SWAP14 SWAP6 0xE PUSH2 0x1772 DUP15 SIGNEXTEND GASPRICE 0xE PUSH31 0x1AE406599A5C4028C24A61931920DAAB64736F6C6343000706003300000000 ",
							"sourceMap": "362:4702:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f95828329d9d950e6117728e0b3a0e7e1ae406599a5c4028c24a61931920daab64736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF9 PC 0x28 ORIGIN SWAP14 SWAP14 SWAP6 0xE PUSH2 0x1772 DUP15 SIGNEXTEND GASPRICE 0xE PUSH31 0x1AE406599A5C4028C24A61931920DAAB64736F6C6343000706003300000000 ",
							"sourceMap": "362:4702:20:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDivRoundingUp(uint256,uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 362,
									"end": 5064,
									"name": "PUSH #[$]",
									"source": 20,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "PUSH [$]",
									"source": 20,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "PUSH",
									"source": 20,
									"value": "B"
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "CODECOPY",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "BYTE",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "PUSH",
									"source": 20,
									"value": "73"
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "EQ",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "INVALID",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "tag",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "ADDRESS",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "PUSH",
									"source": 20,
									"value": "73"
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "MSTORE8",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "RETURN",
									"source": 20
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220f95828329d9d950e6117728e0b3a0e7e1ae406599a5c4028c24a61931920daab64736f6c63430007060033",
									".code": [
										{
											"begin": 362,
											"end": 5064,
											"name": "PUSHDEPLOYADDRESS",
											"source": 20
										},
										{
											"begin": 362,
											"end": 5064,
											"name": "ADDRESS",
											"source": 20
										},
										{
											"begin": 362,
											"end": 5064,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 362,
											"end": 5064,
											"name": "PUSH",
											"source": 20,
											"value": "80"
										},
										{
											"begin": 362,
											"end": 5064,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 362,
											"end": 5064,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 362,
											"end": 5064,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 362,
											"end": 5064,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 362,
											"end": 5064,
											"name": "REVERT",
											"source": 20
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Contains 512-bit math functions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/libraries/FullMath.sol\":\"FullMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/libraries/FullMath.sol\":{\"keccak256\":\"0x5340256039418f5d03512a44173d3dcf1da277a73a461e06fb5668f49cfc46f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75dee99795d1125875233a7f1d356935099cc97b4085c0e451060d77db85d144\",\"dweb:/ipfs/QmTGqyrxVLQd8TBaarqSQDiYvq1QFutCdmTyXk6JpxzKTN\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision",
						"version": 1
					}
				}
			},
			"contracts/core/libraries/LiquidityAmounts.sol": {
				"LiquidityAmounts": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Liquidity amount functions",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/core/libraries/LiquidityAmounts.sol\":311:6863  library LiquidityAmounts {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/core/libraries/LiquidityAmounts.sol\":311:6863  library LiquidityAmounts {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212200e146c6ace013edd8c13b150995a4f666233180dbdbbf8d1de5e35e859c900d364736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200e146c6ace013edd8c13b150995a4f666233180dbdbbf8d1de5e35e859c900d364736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE EQ PUSH13 0x6ACE013EDD8C13B150995A4F66 PUSH3 0x33180D 0xBD 0xBB 0xF8 0xD1 0xDE 0x5E CALLDATALOAD 0xE8 MSIZE 0xC9 STOP 0xD3 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "311:6552:21:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200e146c6ace013edd8c13b150995a4f666233180dbdbbf8d1de5e35e859c900d364736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE EQ PUSH13 0x6ACE013EDD8C13B150995A4F66 PUSH3 0x33180D 0xBD 0xBB 0xF8 0xD1 0xDE 0x5E CALLDATALOAD 0xE8 MSIZE 0xC9 STOP 0xD3 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "311:6552:21:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"getAmount0ForLiquidity(uint160,uint160,uint128)": "infinite",
								"getAmount1ForLiquidity(uint160,uint160,uint128)": "infinite",
								"getAmountsForLiquidity(uint160,uint160,uint160,uint128)": "infinite",
								"getLiquidityForAmount0(uint160,uint160,uint256)": "infinite",
								"getLiquidityForAmount1(uint160,uint160,uint256)": "infinite",
								"getLiquidityForAmounts(uint160,uint160,uint160,uint256,uint256)": "infinite",
								"toUint128(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 311,
									"end": 6863,
									"name": "PUSH #[$]",
									"source": 21,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 311,
									"end": 6863,
									"name": "PUSH [$]",
									"source": 21,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 311,
									"end": 6863,
									"name": "PUSH",
									"source": 21,
									"value": "B"
								},
								{
									"begin": 311,
									"end": 6863,
									"name": "DUP3",
									"source": 21
								},
								{
									"begin": 311,
									"end": 6863,
									"name": "DUP3",
									"source": 21
								},
								{
									"begin": 311,
									"end": 6863,
									"name": "DUP3",
									"source": 21
								},
								{
									"begin": 311,
									"end": 6863,
									"name": "CODECOPY",
									"source": 21
								},
								{
									"begin": 311,
									"end": 6863,
									"name": "DUP1",
									"source": 21
								},
								{
									"begin": 311,
									"end": 6863,
									"name": "MLOAD",
									"source": 21
								},
								{
									"begin": 311,
									"end": 6863,
									"name": "PUSH",
									"source": 21,
									"value": "0"
								},
								{
									"begin": 311,
									"end": 6863,
									"name": "BYTE",
									"source": 21
								},
								{
									"begin": 311,
									"end": 6863,
									"name": "PUSH",
									"source": 21,
									"value": "73"
								},
								{
									"begin": 311,
									"end": 6863,
									"name": "EQ",
									"source": 21
								},
								{
									"begin": 311,
									"end": 6863,
									"name": "PUSH [tag]",
									"source": 21,
									"value": "1"
								},
								{
									"begin": 311,
									"end": 6863,
									"name": "JUMPI",
									"source": 21
								},
								{
									"begin": 311,
									"end": 6863,
									"name": "INVALID",
									"source": 21
								},
								{
									"begin": 311,
									"end": 6863,
									"name": "tag",
									"source": 21,
									"value": "1"
								},
								{
									"begin": 311,
									"end": 6863,
									"name": "JUMPDEST",
									"source": 21
								},
								{
									"begin": 311,
									"end": 6863,
									"name": "ADDRESS",
									"source": 21
								},
								{
									"begin": 311,
									"end": 6863,
									"name": "PUSH",
									"source": 21,
									"value": "0"
								},
								{
									"begin": 311,
									"end": 6863,
									"name": "MSTORE",
									"source": 21
								},
								{
									"begin": 311,
									"end": 6863,
									"name": "PUSH",
									"source": 21,
									"value": "73"
								},
								{
									"begin": 311,
									"end": 6863,
									"name": "DUP2",
									"source": 21
								},
								{
									"begin": 311,
									"end": 6863,
									"name": "MSTORE8",
									"source": 21
								},
								{
									"begin": 311,
									"end": 6863,
									"name": "DUP3",
									"source": 21
								},
								{
									"begin": 311,
									"end": 6863,
									"name": "DUP2",
									"source": 21
								},
								{
									"begin": 311,
									"end": 6863,
									"name": "RETURN",
									"source": 21
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212200e146c6ace013edd8c13b150995a4f666233180dbdbbf8d1de5e35e859c900d364736f6c63430007060033",
									".code": [
										{
											"begin": 311,
											"end": 6863,
											"name": "PUSHDEPLOYADDRESS",
											"source": 21
										},
										{
											"begin": 311,
											"end": 6863,
											"name": "ADDRESS",
											"source": 21
										},
										{
											"begin": 311,
											"end": 6863,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 311,
											"end": 6863,
											"name": "PUSH",
											"source": 21,
											"value": "80"
										},
										{
											"begin": 311,
											"end": 6863,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 311,
											"end": 6863,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 311,
											"end": 6863,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 311,
											"end": 6863,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 311,
											"end": 6863,
											"name": "REVERT",
											"source": 21
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Liquidity amount functions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Provides functions for computing liquidity amounts from token amounts and prices\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/libraries/LiquidityAmounts.sol\":\"LiquidityAmounts\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/libraries/FixedPoint96.sol\":{\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://186d3b528866065a5856f96d2aeec698efa99f8da913e9adf34f8cc296cc993d\",\"dweb:/ipfs/QmUAiMvtAQp8c9dy57bqJYzG7hkb1uChiPaQmt264skoqP\"]},\"contracts/core/libraries/FullMath.sol\":{\"keccak256\":\"0x5340256039418f5d03512a44173d3dcf1da277a73a461e06fb5668f49cfc46f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75dee99795d1125875233a7f1d356935099cc97b4085c0e451060d77db85d144\",\"dweb:/ipfs/QmTGqyrxVLQd8TBaarqSQDiYvq1QFutCdmTyXk6JpxzKTN\"]},\"contracts/core/libraries/LiquidityAmounts.sol\":{\"keccak256\":\"0xae7f7b0bbbd864bc1761ec5eac62ec761f2ef168d32ef9e914e337b077ebba4a\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b57b2f04997cd6055404801982f57083f8e9242935b3ebf3bbed032f5035f2f1\",\"dweb:/ipfs/QmdxHVMQEA32jnyroWZG2sk4NPtQFWXPfkDDYvRtK2APFA\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Provides functions for computing liquidity amounts from token amounts and prices",
						"version": 1
					}
				}
			},
			"contracts/core/libraries/LiquidityMath.sol": {
				"LiquidityMath": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Math library for liquidity",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/core/libraries/LiquidityMath.sol\":109:621  library LiquidityMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/core/libraries/LiquidityMath.sol\":109:621  library LiquidityMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220f9a07e4c3f39b008473af8ec96bec1a5d2f59c60cff67bb1ea3c3fa6199ac08b64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f9a07e4c3f39b008473af8ec96bec1a5d2f59c60cff67bb1ea3c3fa6199ac08b64736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF9 LOG0 PUSH31 0x4C3F39B008473AF8EC96BEC1A5D2F59C60CFF67BB1EA3C3FA6199AC08B6473 PUSH16 0x6C634300070600330000000000000000 ",
							"sourceMap": "109:512:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f9a07e4c3f39b008473af8ec96bec1a5d2f59c60cff67bb1ea3c3fa6199ac08b64736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF9 LOG0 PUSH31 0x4C3F39B008473AF8EC96BEC1A5D2F59C60CFF67BB1EA3C3FA6199AC08B6473 PUSH16 0x6C634300070600330000000000000000 ",
							"sourceMap": "109:512:22:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"addDelta(uint128,int128)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 109,
									"end": 621,
									"name": "PUSH #[$]",
									"source": 22,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "PUSH [$]",
									"source": 22,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "PUSH",
									"source": 22,
									"value": "B"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 109,
									"end": 621,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 109,
									"end": 621,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 109,
									"end": 621,
									"name": "CODECOPY",
									"source": 22
								},
								{
									"begin": 109,
									"end": 621,
									"name": "DUP1",
									"source": 22
								},
								{
									"begin": 109,
									"end": 621,
									"name": "MLOAD",
									"source": 22
								},
								{
									"begin": 109,
									"end": 621,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "BYTE",
									"source": 22
								},
								{
									"begin": 109,
									"end": 621,
									"name": "PUSH",
									"source": 22,
									"value": "73"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "EQ",
									"source": 22
								},
								{
									"begin": 109,
									"end": 621,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "1"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "JUMPI",
									"source": 22
								},
								{
									"begin": 109,
									"end": 621,
									"name": "INVALID",
									"source": 22
								},
								{
									"begin": 109,
									"end": 621,
									"name": "tag",
									"source": 22,
									"value": "1"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 109,
									"end": 621,
									"name": "ADDRESS",
									"source": 22
								},
								{
									"begin": 109,
									"end": 621,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "MSTORE",
									"source": 22
								},
								{
									"begin": 109,
									"end": 621,
									"name": "PUSH",
									"source": 22,
									"value": "73"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 109,
									"end": 621,
									"name": "MSTORE8",
									"source": 22
								},
								{
									"begin": 109,
									"end": 621,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 109,
									"end": 621,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 109,
									"end": 621,
									"name": "RETURN",
									"source": 22
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220f9a07e4c3f39b008473af8ec96bec1a5d2f59c60cff67bb1ea3c3fa6199ac08b64736f6c63430007060033",
									".code": [
										{
											"begin": 109,
											"end": 621,
											"name": "PUSHDEPLOYADDRESS",
											"source": 22
										},
										{
											"begin": 109,
											"end": 621,
											"name": "ADDRESS",
											"source": 22
										},
										{
											"begin": 109,
											"end": 621,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 109,
											"end": 621,
											"name": "PUSH",
											"source": 22,
											"value": "80"
										},
										{
											"begin": 109,
											"end": 621,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 109,
											"end": 621,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 109,
											"end": 621,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 109,
											"end": 621,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 109,
											"end": 621,
											"name": "REVERT",
											"source": 22
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Math library for liquidity\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/libraries/LiquidityMath.sol\":\"LiquidityMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/libraries/LiquidityMath.sol\":{\"keccak256\":\"0xd1059ccc904c8752cec175e8d99e31921c6cd7f3a9c2dd315ce34ac486172ac9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f3630a49e62fa056e2cc4e0278b6f17c5f7e1c9ad2190540cf84c152b58cdef8\",\"dweb:/ipfs/QmdGjKRTNY2qLXJtR2rXU8Nxk4pZwXfbzZYNn3F472QEn6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/core/libraries/LowGasSafeMath.sol": {
				"LowGasSafeMath": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Optimized overflow and underflow safe math operations",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/core/libraries/LowGasSafeMath.sol\":249:1695  library LowGasSafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/core/libraries/LowGasSafeMath.sol\":249:1695  library LowGasSafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212206f6d69b70b687c61cc4bf2e0895902ef99930a5d7a77f108f53303d03b38f21664736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206f6d69b70b687c61cc4bf2e0895902ef99930a5d7a77f108f53303d03b38f21664736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH16 0x6D69B70B687C61CC4BF2E0895902EF99 SWAP4 EXP 0x5D PUSH27 0x77F108F53303D03B38F21664736F6C634300070600330000000000 ",
							"sourceMap": "249:1446:23:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206f6d69b70b687c61cc4bf2e0895902ef99930a5d7a77f108f53303d03b38f21664736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH16 0x6D69B70B687C61CC4BF2E0895902EF99 SWAP4 EXP 0x5D PUSH27 0x77F108F53303D03B38F21664736F6C634300070600330000000000 ",
							"sourceMap": "249:1446:23:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"add(int256,int256)": "infinite",
								"add(uint256,uint256)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(int256,int256)": "infinite",
								"sub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 249,
									"end": 1695,
									"name": "PUSH #[$]",
									"source": 23,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "PUSH [$]",
									"source": 23,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "PUSH",
									"source": 23,
									"value": "B"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "CODECOPY",
									"source": 23
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "DUP1",
									"source": 23
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "MLOAD",
									"source": 23
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "BYTE",
									"source": 23
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "PUSH",
									"source": 23,
									"value": "73"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "EQ",
									"source": 23
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "1"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "INVALID",
									"source": 23
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "tag",
									"source": 23,
									"value": "1"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "ADDRESS",
									"source": 23
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "PUSH",
									"source": 23,
									"value": "73"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "MSTORE8",
									"source": 23
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "RETURN",
									"source": 23
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212206f6d69b70b687c61cc4bf2e0895902ef99930a5d7a77f108f53303d03b38f21664736f6c63430007060033",
									".code": [
										{
											"begin": 249,
											"end": 1695,
											"name": "PUSHDEPLOYADDRESS",
											"source": 23
										},
										{
											"begin": 249,
											"end": 1695,
											"name": "ADDRESS",
											"source": 23
										},
										{
											"begin": 249,
											"end": 1695,
											"name": "EQ",
											"source": 23
										},
										{
											"begin": 249,
											"end": 1695,
											"name": "PUSH",
											"source": 23,
											"value": "80"
										},
										{
											"begin": 249,
											"end": 1695,
											"name": "PUSH",
											"source": 23,
											"value": "40"
										},
										{
											"begin": 249,
											"end": 1695,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 249,
											"end": 1695,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 249,
											"end": 1695,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 249,
											"end": 1695,
											"name": "REVERT",
											"source": 23
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Optimized overflow and underflow safe math operations\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/libraries/LowGasSafeMath.sol\":\"LowGasSafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/libraries/LowGasSafeMath.sol\":{\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bfc1d5d58e59015086b0e65a6c3a2ddad312e2350480510f6c0c8167f3d71a37\",\"dweb:/ipfs/QmQndULYjFsHKHjMAKLMfc12vWbVB5FawtioHtvwcWRJZp\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost",
						"version": 1
					}
				}
			},
			"contracts/core/libraries/Position.sol": {
				"Position": {
					"abi": [],
					"devdoc": {
						"details": "Positions store additional state for tracking fees owed to the position",
						"kind": "dev",
						"methods": {},
						"title": "Position",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/core/libraries/Position.sol\":365:3661  library Position {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/core/libraries/Position.sol\":365:3661  library Position {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212209ffdbfba7c2b3c708191ea46264fbd18f6bf78c7372ab908fd46612996e3450064736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209ffdbfba7c2b3c708191ea46264fbd18f6bf78c7372ab908fd46612996e3450064736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP16 REVERT 0xBF 0xBA PUSH29 0x2B3C708191EA46264FBD18F6BF78C7372AB908FD46612996E345006473 PUSH16 0x6C634300070600330000000000000000 ",
							"sourceMap": "365:3296:24:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209ffdbfba7c2b3c708191ea46264fbd18f6bf78c7372ab908fd46612996e3450064736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP16 REVERT 0xBF 0xBA PUSH29 0x2B3C708191EA46264FBD18F6BF78C7372AB908FD46612996E345006473 PUSH16 0x6C634300070600330000000000000000 ",
							"sourceMap": "365:3296:24:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"get(mapping(bytes32 => struct Position.Info storage ref),address,int24,int24)": "infinite",
								"update(struct Position.Info storage pointer,int128,uint256,uint256,bool)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 365,
									"end": 3661,
									"name": "PUSH #[$]",
									"source": 24,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "PUSH [$]",
									"source": 24,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "PUSH",
									"source": 24,
									"value": "B"
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "DUP3",
									"source": 24
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "DUP3",
									"source": 24
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "DUP3",
									"source": 24
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "CODECOPY",
									"source": 24
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "DUP1",
									"source": 24
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "MLOAD",
									"source": 24
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "PUSH",
									"source": 24,
									"value": "0"
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "BYTE",
									"source": 24
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "PUSH",
									"source": 24,
									"value": "73"
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "EQ",
									"source": 24
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "PUSH [tag]",
									"source": 24,
									"value": "1"
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "JUMPI",
									"source": 24
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "INVALID",
									"source": 24
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "tag",
									"source": 24,
									"value": "1"
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "JUMPDEST",
									"source": 24
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "ADDRESS",
									"source": 24
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "PUSH",
									"source": 24,
									"value": "0"
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "MSTORE",
									"source": 24
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "PUSH",
									"source": 24,
									"value": "73"
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "DUP2",
									"source": 24
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "MSTORE8",
									"source": 24
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "DUP3",
									"source": 24
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "DUP2",
									"source": 24
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "RETURN",
									"source": 24
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212209ffdbfba7c2b3c708191ea46264fbd18f6bf78c7372ab908fd46612996e3450064736f6c63430007060033",
									".code": [
										{
											"begin": 365,
											"end": 3661,
											"name": "PUSHDEPLOYADDRESS",
											"source": 24
										},
										{
											"begin": 365,
											"end": 3661,
											"name": "ADDRESS",
											"source": 24
										},
										{
											"begin": 365,
											"end": 3661,
											"name": "EQ",
											"source": 24
										},
										{
											"begin": 365,
											"end": 3661,
											"name": "PUSH",
											"source": 24,
											"value": "80"
										},
										{
											"begin": 365,
											"end": 3661,
											"name": "PUSH",
											"source": 24,
											"value": "40"
										},
										{
											"begin": 365,
											"end": 3661,
											"name": "MSTORE",
											"source": 24
										},
										{
											"begin": 365,
											"end": 3661,
											"name": "PUSH",
											"source": 24,
											"value": "0"
										},
										{
											"begin": 365,
											"end": 3661,
											"name": "DUP1",
											"source": 24
										},
										{
											"begin": 365,
											"end": 3661,
											"name": "REVERT",
											"source": 24
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Positions store additional state for tracking fees owed to the position\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Position\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Positions represent an owner address' liquidity between a lower and upper tick boundary\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/libraries/Position.sol\":\"Position\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/libraries/FixedPoint128.sol\":{\"keccak256\":\"0x2d1f4f73ae0d8f0a210b8d30084659b57c56ac8f2f96011fca36f00a6d417178\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://2ba88933f16cd2df398e19c6ad227268f83c03081b70d243c97116d2ed9bc241\",\"dweb:/ipfs/QmTUGxdh8snzEM9VrTSS47StCg9VVWvvLJtJeNnMTFY4xb\"]},\"contracts/core/libraries/FullMath.sol\":{\"keccak256\":\"0x5340256039418f5d03512a44173d3dcf1da277a73a461e06fb5668f49cfc46f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75dee99795d1125875233a7f1d356935099cc97b4085c0e451060d77db85d144\",\"dweb:/ipfs/QmTGqyrxVLQd8TBaarqSQDiYvq1QFutCdmTyXk6JpxzKTN\"]},\"contracts/core/libraries/LiquidityMath.sol\":{\"keccak256\":\"0xd1059ccc904c8752cec175e8d99e31921c6cd7f3a9c2dd315ce34ac486172ac9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f3630a49e62fa056e2cc4e0278b6f17c5f7e1c9ad2190540cf84c152b58cdef8\",\"dweb:/ipfs/QmdGjKRTNY2qLXJtR2rXU8Nxk4pZwXfbzZYNn3F472QEn6\"]},\"contracts/core/libraries/Position.sol\":{\"keccak256\":\"0xcf1e701e3fae35be8b77ff1217cfdd23d33eb16fd3cec70be8ea6888f87af285\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://c8c89746dd30e76cc029d4e090e402b28aae0659cc71800758b99137dfe85f55\",\"dweb:/ipfs/QmY4Ft1YBLqzqwTgNdpCyRd7WrY78zKgg4Ddv2zqZiBEiE\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Positions represent an owner address' liquidity between a lower and upper tick boundary",
						"version": 1
					}
				}
			},
			"contracts/core/libraries/SafeCast.sol": {
				"SafeCast": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Safe casting methods",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/core/libraries/SafeCast.sol\":165:1049  library SafeCast {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/core/libraries/SafeCast.sol\":165:1049  library SafeCast {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212208bc1d5498e8868630b52635c31abd8a241527d05d09b96891d03ac75c956531664736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208bc1d5498e8868630b52635c31abd8a241527d05d09b96891d03ac75c956531664736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP12 0xC1 0xD5 0x49 DUP15 DUP9 PUSH9 0x630B52635C31ABD8A2 COINBASE MSTORE PUSH30 0x5D09B96891D03AC75C956531664736F6C63430007060033000000000000 ",
							"sourceMap": "165:884:25:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208bc1d5498e8868630b52635c31abd8a241527d05d09b96891d03ac75c956531664736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP12 0xC1 0xD5 0x49 DUP15 DUP9 PUSH9 0x630B52635C31ABD8A2 COINBASE MSTORE PUSH30 0x5D09B96891D03AC75C956531664736F6C63430007060033000000000000 ",
							"sourceMap": "165:884:25:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"toInt128(int256)": "infinite",
								"toInt256(uint256)": "infinite",
								"toUint160(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 165,
									"end": 1049,
									"name": "PUSH #[$]",
									"source": 25,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "PUSH [$]",
									"source": 25,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "PUSH",
									"source": 25,
									"value": "B"
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "DUP3",
									"source": 25
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "DUP3",
									"source": 25
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "DUP3",
									"source": 25
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "CODECOPY",
									"source": 25
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "DUP1",
									"source": 25
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "MLOAD",
									"source": 25
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "PUSH",
									"source": 25,
									"value": "0"
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "BYTE",
									"source": 25
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "PUSH",
									"source": 25,
									"value": "73"
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "EQ",
									"source": 25
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "PUSH [tag]",
									"source": 25,
									"value": "1"
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "JUMPI",
									"source": 25
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "INVALID",
									"source": 25
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "tag",
									"source": 25,
									"value": "1"
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "JUMPDEST",
									"source": 25
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "ADDRESS",
									"source": 25
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "PUSH",
									"source": 25,
									"value": "0"
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "MSTORE",
									"source": 25
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "PUSH",
									"source": 25,
									"value": "73"
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "DUP2",
									"source": 25
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "MSTORE8",
									"source": 25
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "DUP3",
									"source": 25
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "DUP2",
									"source": 25
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "RETURN",
									"source": 25
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212208bc1d5498e8868630b52635c31abd8a241527d05d09b96891d03ac75c956531664736f6c63430007060033",
									".code": [
										{
											"begin": 165,
											"end": 1049,
											"name": "PUSHDEPLOYADDRESS",
											"source": 25
										},
										{
											"begin": 165,
											"end": 1049,
											"name": "ADDRESS",
											"source": 25
										},
										{
											"begin": 165,
											"end": 1049,
											"name": "EQ",
											"source": 25
										},
										{
											"begin": 165,
											"end": 1049,
											"name": "PUSH",
											"source": 25,
											"value": "80"
										},
										{
											"begin": 165,
											"end": 1049,
											"name": "PUSH",
											"source": 25,
											"value": "40"
										},
										{
											"begin": 165,
											"end": 1049,
											"name": "MSTORE",
											"source": 25
										},
										{
											"begin": 165,
											"end": 1049,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 165,
											"end": 1049,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 165,
											"end": 1049,
											"name": "REVERT",
											"source": 25
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Safe casting methods\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains methods for safely casting between types\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/libraries/SafeCast.sol\":\"SafeCast\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/libraries/SafeCast.sol\":{\"keccak256\":\"0xd4c1c1b67f946b077d7c52a158113763a89a210fc2927b8491055a962ecd18c0\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://5344400c74320ca8dbe19241db7ff49babbd6c875c1b561c79d6e4315a9fb5f9\",\"dweb:/ipfs/QmRKCNTbkovxK1WvejXZr3iAHhGN97ZT1yWGsWCJFkrT5X\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Contains methods for safely casting between types",
						"version": 1
					}
				}
			},
			"contracts/core/libraries/SqrtPriceMath.sol": {
				"SqrtPriceMath": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Functions based on Q64.96 sqrt price and liquidity",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/core/libraries/SqrtPriceMath.sol\":377:10495  library SqrtPriceMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/core/libraries/SqrtPriceMath.sol\":377:10495  library SqrtPriceMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220bdfb710106889611c8be3fde13915b318a902850e4157772fe840e0b9d0212f264736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bdfb710106889611c8be3fde13915b318a902850e4157772fe840e0b9d0212f264736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBD 0xFB PUSH18 0x106889611C8BE3FDE13915B318A902850E4 ISZERO PUSH24 0x72FE840E0B9D0212F264736F6C6343000706003300000000 ",
							"sourceMap": "377:10118:26:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bdfb710106889611c8be3fde13915b318a902850e4157772fe840e0b9d0212f264736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBD 0xFB PUSH18 0x106889611C8BE3FDE13915B318A902850E4 ISZERO PUSH24 0x72FE840E0B9D0212F264736F6C6343000706003300000000 ",
							"sourceMap": "377:10118:26:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"getAmount0Delta(uint160,uint160,int128)": "infinite",
								"getAmount0Delta(uint160,uint160,uint128,bool)": "infinite",
								"getAmount1Delta(uint160,uint160,int128)": "infinite",
								"getAmount1Delta(uint160,uint160,uint128,bool)": "infinite",
								"getNextSqrtPriceFromAmount0RoundingUp(uint160,uint128,uint256,bool)": "infinite",
								"getNextSqrtPriceFromAmount1RoundingDown(uint160,uint128,uint256,bool)": "infinite",
								"getNextSqrtPriceFromInput(uint160,uint128,uint256,bool)": "infinite",
								"getNextSqrtPriceFromOutput(uint160,uint128,uint256,bool)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 377,
									"end": 10495,
									"name": "PUSH #[$]",
									"source": 26,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "PUSH [$]",
									"source": 26,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "PUSH",
									"source": 26,
									"value": "B"
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "CODECOPY",
									"source": 26
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "DUP1",
									"source": 26
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "MLOAD",
									"source": 26
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "PUSH",
									"source": 26,
									"value": "0"
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "BYTE",
									"source": 26
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "PUSH",
									"source": 26,
									"value": "73"
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "EQ",
									"source": 26
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "1"
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "JUMPI",
									"source": 26
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "INVALID",
									"source": 26
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "tag",
									"source": 26,
									"value": "1"
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "ADDRESS",
									"source": 26
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "PUSH",
									"source": 26,
									"value": "0"
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "MSTORE",
									"source": 26
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "PUSH",
									"source": 26,
									"value": "73"
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "DUP2",
									"source": 26
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "MSTORE8",
									"source": 26
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "DUP2",
									"source": 26
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "RETURN",
									"source": 26
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220bdfb710106889611c8be3fde13915b318a902850e4157772fe840e0b9d0212f264736f6c63430007060033",
									".code": [
										{
											"begin": 377,
											"end": 10495,
											"name": "PUSHDEPLOYADDRESS",
											"source": 26
										},
										{
											"begin": 377,
											"end": 10495,
											"name": "ADDRESS",
											"source": 26
										},
										{
											"begin": 377,
											"end": 10495,
											"name": "EQ",
											"source": 26
										},
										{
											"begin": 377,
											"end": 10495,
											"name": "PUSH",
											"source": 26,
											"value": "80"
										},
										{
											"begin": 377,
											"end": 10495,
											"name": "PUSH",
											"source": 26,
											"value": "40"
										},
										{
											"begin": 377,
											"end": 10495,
											"name": "MSTORE",
											"source": 26
										},
										{
											"begin": 377,
											"end": 10495,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 377,
											"end": 10495,
											"name": "DUP1",
											"source": 26
										},
										{
											"begin": 377,
											"end": 10495,
											"name": "REVERT",
											"source": 26
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Functions based on Q64.96 sqrt price and liquidity\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/libraries/SqrtPriceMath.sol\":\"SqrtPriceMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/libraries/FixedPoint96.sol\":{\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://186d3b528866065a5856f96d2aeec698efa99f8da913e9adf34f8cc296cc993d\",\"dweb:/ipfs/QmUAiMvtAQp8c9dy57bqJYzG7hkb1uChiPaQmt264skoqP\"]},\"contracts/core/libraries/FullMath.sol\":{\"keccak256\":\"0x5340256039418f5d03512a44173d3dcf1da277a73a461e06fb5668f49cfc46f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75dee99795d1125875233a7f1d356935099cc97b4085c0e451060d77db85d144\",\"dweb:/ipfs/QmTGqyrxVLQd8TBaarqSQDiYvq1QFutCdmTyXk6JpxzKTN\"]},\"contracts/core/libraries/LowGasSafeMath.sol\":{\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bfc1d5d58e59015086b0e65a6c3a2ddad312e2350480510f6c0c8167f3d71a37\",\"dweb:/ipfs/QmQndULYjFsHKHjMAKLMfc12vWbVB5FawtioHtvwcWRJZp\"]},\"contracts/core/libraries/SafeCast.sol\":{\"keccak256\":\"0xd4c1c1b67f946b077d7c52a158113763a89a210fc2927b8491055a962ecd18c0\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://5344400c74320ca8dbe19241db7ff49babbd6c875c1b561c79d6e4315a9fb5f9\",\"dweb:/ipfs/QmRKCNTbkovxK1WvejXZr3iAHhGN97ZT1yWGsWCJFkrT5X\"]},\"contracts/core/libraries/SqrtPriceMath.sol\":{\"keccak256\":\"0xefd51a282ca9fbc89394776e7f5c6f96fa084ca26b71d99727780332c87d1843\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1f09b719eff523f65d0d11fc476b9735e1390018d5ff585991d0fc644e913ecf\",\"dweb:/ipfs/QmNiZxxQhqteYgJdhCQ3cZ4S7bTQf2AQRUJqMVvPY3doot\"]},\"contracts/core/libraries/UnsafeMath.sol\":{\"keccak256\":\"0x5f36d7d16348d8c37fe64fda932018d6e5e8acecd054f0f97d32db62d20c6c88\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://4bd4e817ea3d2c26bb2be7e58db3eaa403119562c18d4c09cc92fb31aa231496\",\"dweb:/ipfs/QmbpjgL8Hf1mhmUyf9hpuPk4noGAggCdTqaRBFKqNF3AQw\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas",
						"version": 1
					}
				}
			},
			"contracts/core/libraries/Tick.sol": {
				"Tick": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Tick",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/core/libraries/Tick.sol\":292:13071  library Tick {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/core/libraries/Tick.sol\":292:13071  library Tick {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220067ba41cd20fa2a5d0af1679ff37714980de111a7d56f8368279ecb2df8100cb64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220067ba41cd20fa2a5d0af1679ff37714980de111a7d56f8368279ecb2df8100cb64736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD PUSH28 0xA41CD20FA2A5D0AF1679FF37714980DE111A7D56F8368279ECB2DF81 STOP 0xCB PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "292:12779:27:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220067ba41cd20fa2a5d0af1679ff37714980de111a7d56f8368279ecb2df8100cb64736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD PUSH28 0xA41CD20FA2A5D0AF1679FF37714980DE111A7D56F8368279ECB2DF81 STOP 0xCB PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "292:12779:27:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"clear(mapping(int24 => struct Tick.Info storage ref),int24)": "infinite",
								"cross(mapping(int24 => struct Tick.Info storage ref),int24,uint256,uint256,uint160,int56,uint32,uint256)": "infinite",
								"getFeeGrowthInside(mapping(int24 => struct Tick.Info storage ref),int24,int24,int24,uint256,uint256)": "infinite",
								"getRewardGrowthInside(mapping(int24 => struct Tick.Info storage ref),int24,int24,int24,uint256)": "infinite",
								"tickSpacingToMaxLiquidityPerTick(int24)": "infinite",
								"update(mapping(int24 => struct Tick.Info storage ref),int24,int24,int128,uint256,uint256,uint256,uint160,int56,uint32,bool,uint128)": "infinite",
								"updateStake(mapping(int24 => struct Tick.Info storage ref),int24,int128,bool)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 292,
									"end": 13071,
									"name": "PUSH #[$]",
									"source": 27,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "PUSH [$]",
									"source": 27,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "PUSH",
									"source": 27,
									"value": "B"
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "DUP3",
									"source": 27
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "DUP3",
									"source": 27
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "DUP3",
									"source": 27
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "CODECOPY",
									"source": 27
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "DUP1",
									"source": 27
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "MLOAD",
									"source": 27
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "PUSH",
									"source": 27,
									"value": "0"
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "BYTE",
									"source": 27
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "PUSH",
									"source": 27,
									"value": "73"
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "EQ",
									"source": 27
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "PUSH [tag]",
									"source": 27,
									"value": "1"
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "JUMPI",
									"source": 27
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "INVALID",
									"source": 27
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "tag",
									"source": 27,
									"value": "1"
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "JUMPDEST",
									"source": 27
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "ADDRESS",
									"source": 27
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "PUSH",
									"source": 27,
									"value": "0"
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "MSTORE",
									"source": 27
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "PUSH",
									"source": 27,
									"value": "73"
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "DUP2",
									"source": 27
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "MSTORE8",
									"source": 27
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "DUP3",
									"source": 27
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "DUP2",
									"source": 27
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "RETURN",
									"source": 27
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220067ba41cd20fa2a5d0af1679ff37714980de111a7d56f8368279ecb2df8100cb64736f6c63430007060033",
									".code": [
										{
											"begin": 292,
											"end": 13071,
											"name": "PUSHDEPLOYADDRESS",
											"source": 27
										},
										{
											"begin": 292,
											"end": 13071,
											"name": "ADDRESS",
											"source": 27
										},
										{
											"begin": 292,
											"end": 13071,
											"name": "EQ",
											"source": 27
										},
										{
											"begin": 292,
											"end": 13071,
											"name": "PUSH",
											"source": 27,
											"value": "80"
										},
										{
											"begin": 292,
											"end": 13071,
											"name": "PUSH",
											"source": 27,
											"value": "40"
										},
										{
											"begin": 292,
											"end": 13071,
											"name": "MSTORE",
											"source": 27
										},
										{
											"begin": 292,
											"end": 13071,
											"name": "PUSH",
											"source": 27,
											"value": "0"
										},
										{
											"begin": 292,
											"end": 13071,
											"name": "DUP1",
											"source": 27
										},
										{
											"begin": 292,
											"end": 13071,
											"name": "REVERT",
											"source": 27
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Tick\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains functions for managing tick processes and relevant calculations\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/libraries/Tick.sol\":\"Tick\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/libraries/LiquidityMath.sol\":{\"keccak256\":\"0xd1059ccc904c8752cec175e8d99e31921c6cd7f3a9c2dd315ce34ac486172ac9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f3630a49e62fa056e2cc4e0278b6f17c5f7e1c9ad2190540cf84c152b58cdef8\",\"dweb:/ipfs/QmdGjKRTNY2qLXJtR2rXU8Nxk4pZwXfbzZYNn3F472QEn6\"]},\"contracts/core/libraries/LowGasSafeMath.sol\":{\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bfc1d5d58e59015086b0e65a6c3a2ddad312e2350480510f6c0c8167f3d71a37\",\"dweb:/ipfs/QmQndULYjFsHKHjMAKLMfc12vWbVB5FawtioHtvwcWRJZp\"]},\"contracts/core/libraries/SafeCast.sol\":{\"keccak256\":\"0xd4c1c1b67f946b077d7c52a158113763a89a210fc2927b8491055a962ecd18c0\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://5344400c74320ca8dbe19241db7ff49babbd6c875c1b561c79d6e4315a9fb5f9\",\"dweb:/ipfs/QmRKCNTbkovxK1WvejXZr3iAHhGN97ZT1yWGsWCJFkrT5X\"]},\"contracts/core/libraries/Tick.sol\":{\"keccak256\":\"0xb5ebd80c667f4501dba65f4e39e51ff36e5334480849e0ed8604222d20b4ed1e\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://246f590513441ac0f307170f5099e4a0c0b1f579406fc30b909b249858dbd099\",\"dweb:/ipfs/QmaA5uC3eck7nMqyJbpSPEhmXmAXaKLNBSS1Lfnzzzjc95\"]},\"contracts/core/libraries/TickMath.sol\":{\"keccak256\":\"0x2aa3180a8a59b34a513b948d3f2207b5376de7a2c37065853b7c9fbf0cd3d43f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://c4d46ca5384037f14497c6268342b15becf8bbe1a8fecbcd89ca5b80f41fabc2\",\"dweb:/ipfs/QmanLcdh7EppV4yJ1CdWfPB67es3nEjrDiByAYwgkSE58D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Contains functions for managing tick processes and relevant calculations",
						"version": 1
					}
				}
			},
			"contracts/core/libraries/TickBitmap.sol": {
				"TickBitmap": {
					"abi": [],
					"devdoc": {
						"details": "The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.",
						"kind": "dev",
						"methods": {},
						"title": "Packed tick initialized state library",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/core/libraries/TickBitmap.sol\":339:4089  library TickBitmap {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/core/libraries/TickBitmap.sol\":339:4089  library TickBitmap {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220775625b5e662e54e19faf8e3afd2d16ad4a04e28de958a2dba6cd2d3e1e02d9464736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220775625b5e662e54e19faf8e3afd2d16ad4a04e28de958a2dba6cd2d3e1e02d9464736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0x5625B5E662E54E19FAF8E3AFD2D16AD4A04E28DE958A2DBA PUSH13 0xD2D3E1E02D9464736F6C634300 SMOD MOD STOP CALLER ",
							"sourceMap": "339:3750:28:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220775625b5e662e54e19faf8e3afd2d16ad4a04e28de958a2dba6cd2d3e1e02d9464736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0x5625B5E662E54E19FAF8E3AFD2D16AD4A04E28DE958A2DBA PUSH13 0xD2D3E1E02D9464736F6C634300 SMOD MOD STOP CALLER ",
							"sourceMap": "339:3750:28:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"flipTick(mapping(int16 => uint256),int24,int24)": "infinite",
								"nextInitializedTickWithinOneWord(mapping(int16 => uint256),int24,int24,bool)": "infinite",
								"position(int24)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 339,
									"end": 4089,
									"name": "PUSH #[$]",
									"source": 28,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "PUSH [$]",
									"source": 28,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "PUSH",
									"source": 28,
									"value": "B"
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "DUP3",
									"source": 28
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "DUP3",
									"source": 28
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "DUP3",
									"source": 28
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "CODECOPY",
									"source": 28
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "DUP1",
									"source": 28
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "MLOAD",
									"source": 28
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "PUSH",
									"source": 28,
									"value": "0"
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "BYTE",
									"source": 28
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "PUSH",
									"source": 28,
									"value": "73"
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "EQ",
									"source": 28
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "PUSH [tag]",
									"source": 28,
									"value": "1"
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "JUMPI",
									"source": 28
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "INVALID",
									"source": 28
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "tag",
									"source": 28,
									"value": "1"
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "JUMPDEST",
									"source": 28
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "ADDRESS",
									"source": 28
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "PUSH",
									"source": 28,
									"value": "0"
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "MSTORE",
									"source": 28
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "PUSH",
									"source": 28,
									"value": "73"
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "DUP2",
									"source": 28
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "MSTORE8",
									"source": 28
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "DUP3",
									"source": 28
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "DUP2",
									"source": 28
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "RETURN",
									"source": 28
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220775625b5e662e54e19faf8e3afd2d16ad4a04e28de958a2dba6cd2d3e1e02d9464736f6c63430007060033",
									".code": [
										{
											"begin": 339,
											"end": 4089,
											"name": "PUSHDEPLOYADDRESS",
											"source": 28
										},
										{
											"begin": 339,
											"end": 4089,
											"name": "ADDRESS",
											"source": 28
										},
										{
											"begin": 339,
											"end": 4089,
											"name": "EQ",
											"source": 28
										},
										{
											"begin": 339,
											"end": 4089,
											"name": "PUSH",
											"source": 28,
											"value": "80"
										},
										{
											"begin": 339,
											"end": 4089,
											"name": "PUSH",
											"source": 28,
											"value": "40"
										},
										{
											"begin": 339,
											"end": 4089,
											"name": "MSTORE",
											"source": 28
										},
										{
											"begin": 339,
											"end": 4089,
											"name": "PUSH",
											"source": 28,
											"value": "0"
										},
										{
											"begin": 339,
											"end": 4089,
											"name": "DUP1",
											"source": 28
										},
										{
											"begin": 339,
											"end": 4089,
											"name": "REVERT",
											"source": 28
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Packed tick initialized state library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Stores a packed mapping of tick index to its initialized state\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/libraries/TickBitmap.sol\":\"TickBitmap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/libraries/BitMath.sol\":{\"keccak256\":\"0x82e425066110aac05ed8a9fc90f9ee85142b6f434769447e49d4438a8d9fcd82\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://77a97078bc992c18c59cb61e07fa4632c8a26b6babf00f3b16eabb5dcaa953b4\",\"dweb:/ipfs/QmTj15ufLWk6AxedSVXBcLp5cYf2DCJAeDi94cVemCkm54\"]},\"contracts/core/libraries/TickBitmap.sol\":{\"keccak256\":\"0xd829fadfca3f8f5870c877c7eeceb4a692603c16b711174526129987e8745f5b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1d2cbf3802f7e611708a45bc390ee9307d947e49b348294591659444b9989c05\",\"dweb:/ipfs/Qmcny7JNyVYCtcZG3b1BL4ThuKREmAkE9ZKaC3i32pnt7X\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Stores a packed mapping of tick index to its initialized state",
						"version": 1
					}
				}
			},
			"contracts/core/libraries/TickMath.sol": {
				"TickMath": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"MAX_SQRT_RATIO": {
								"details": "The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"
							},
							"MAX_TICK": {
								"details": "The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"
							},
							"MIN_SQRT_RATIO": {
								"details": "The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"
							},
							"MIN_TICK": {
								"details": "The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"
							}
						},
						"title": "Math library for computing sqrt prices from ticks and vice versa",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/core/libraries/TickMath.sol\":313:8644  library TickMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/core/libraries/TickMath.sol\":313:8644  library TickMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220e4369cc3d85a47546a752711b91428efe87c932f9ab54fa9d49354beb95ea76864736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e4369cc3d85a47546a752711b91428efe87c932f9ab54fa9d49354beb95ea76864736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE4 CALLDATASIZE SWAP13 0xC3 0xD8 GAS SELFBALANCE SLOAD PUSH11 0x752711B91428EFE87C932F SWAP11 0xB5 0x4F 0xA9 0xD4 SWAP4 SLOAD 0xBE 0xB9 0x5E 0xA7 PUSH9 0x64736F6C6343000706 STOP CALLER ",
							"sourceMap": "313:8331:29:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e4369cc3d85a47546a752711b91428efe87c932f9ab54fa9d49354beb95ea76864736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE4 CALLDATASIZE SWAP13 0xC3 0xD8 GAS SELFBALANCE SLOAD PUSH11 0x752711B91428EFE87C932F SWAP11 0xB5 0x4F 0xA9 0xD4 SWAP4 SLOAD 0xBE 0xB9 0x5E 0xA7 PUSH9 0x64736F6C6343000706 STOP CALLER ",
							"sourceMap": "313:8331:29:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"getSqrtRatioAtTick(int24)": "infinite",
								"getTickAtSqrtRatio(uint160)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH #[$]",
									"source": 29,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH [$]",
									"source": 29,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 29,
									"value": "B"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP3",
									"source": 29
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP3",
									"source": 29
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP3",
									"source": 29
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "CODECOPY",
									"source": 29
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP1",
									"source": 29
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "MLOAD",
									"source": 29
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 29,
									"value": "0"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "BYTE",
									"source": 29
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 29,
									"value": "73"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "EQ",
									"source": 29
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH [tag]",
									"source": 29,
									"value": "1"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "JUMPI",
									"source": 29
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "INVALID",
									"source": 29
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "tag",
									"source": 29,
									"value": "1"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "JUMPDEST",
									"source": 29
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "ADDRESS",
									"source": 29
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 29,
									"value": "0"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "MSTORE",
									"source": 29
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 29,
									"value": "73"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP2",
									"source": 29
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "MSTORE8",
									"source": 29
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP3",
									"source": 29
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP2",
									"source": 29
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "RETURN",
									"source": 29
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e4369cc3d85a47546a752711b91428efe87c932f9ab54fa9d49354beb95ea76864736f6c63430007060033",
									".code": [
										{
											"begin": 313,
											"end": 8644,
											"name": "PUSHDEPLOYADDRESS",
											"source": 29
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "ADDRESS",
											"source": 29
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "EQ",
											"source": 29
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "PUSH",
											"source": 29,
											"value": "80"
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "PUSH",
											"source": 29,
											"value": "40"
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "PUSH",
											"source": 29,
											"value": "0"
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "DUP1",
											"source": 29
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "REVERT",
											"source": 29
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"MAX_SQRT_RATIO\":{\"details\":\"The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\"},\"MAX_TICK\":{\"details\":\"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\"},\"MIN_SQRT_RATIO\":{\"details\":\"The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\"},\"MIN_TICK\":{\"details\":\"The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\"}},\"title\":\"Math library for computing sqrt prices from ticks and vice versa\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/libraries/TickMath.sol\":\"TickMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/libraries/TickMath.sol\":{\"keccak256\":\"0x2aa3180a8a59b34a513b948d3f2207b5376de7a2c37065853b7c9fbf0cd3d43f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://c4d46ca5384037f14497c6268342b15becf8bbe1a8fecbcd89ca5b80f41fabc2\",\"dweb:/ipfs/QmanLcdh7EppV4yJ1CdWfPB67es3nEjrDiByAYwgkSE58D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128",
						"version": 1
					}
				}
			},
			"contracts/core/libraries/TransferHelper.sol": {
				"TransferHelper": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "TransferHelper",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/core/libraries/TransferHelper.sol\":253:902  library TransferHelper {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/core/libraries/TransferHelper.sol\":253:902  library TransferHelper {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212205f14c657273f9d0b538e050f2b1afc06e9d6f3c540c64cfa5bc92ab0b346b6ea64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205f14c657273f9d0b538e050f2b1afc06e9d6f3c540c64cfa5bc92ab0b346b6ea64736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5F EQ 0xC6 JUMPI 0x27 EXTCODEHASH SWAP14 SIGNEXTEND MSTORE8 DUP15 SDIV 0xF 0x2B BYTE 0xFC MOD 0xE9 0xD6 RETURN 0xC5 BLOCKHASH 0xC6 0x4C STATICCALL JUMPDEST 0xC9 0x2A 0xB0 0xB3 CHAINID 0xB6 0xEA PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "253:649:30:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205f14c657273f9d0b538e050f2b1afc06e9d6f3c540c64cfa5bc92ab0b346b6ea64736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5F EQ 0xC6 JUMPI 0x27 EXTCODEHASH SWAP14 SIGNEXTEND MSTORE8 DUP15 SDIV 0xF 0x2B BYTE 0xFC MOD 0xE9 0xD6 RETURN 0xC5 BLOCKHASH 0xC6 0x4C STATICCALL JUMPDEST 0xC9 0x2A 0xB0 0xB3 CHAINID 0xB6 0xEA PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "253:649:30:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"safeTransfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 253,
									"end": 902,
									"name": "PUSH #[$]",
									"source": 30,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 253,
									"end": 902,
									"name": "PUSH [$]",
									"source": 30,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 253,
									"end": 902,
									"name": "PUSH",
									"source": 30,
									"value": "B"
								},
								{
									"begin": 253,
									"end": 902,
									"name": "DUP3",
									"source": 30
								},
								{
									"begin": 253,
									"end": 902,
									"name": "DUP3",
									"source": 30
								},
								{
									"begin": 253,
									"end": 902,
									"name": "DUP3",
									"source": 30
								},
								{
									"begin": 253,
									"end": 902,
									"name": "CODECOPY",
									"source": 30
								},
								{
									"begin": 253,
									"end": 902,
									"name": "DUP1",
									"source": 30
								},
								{
									"begin": 253,
									"end": 902,
									"name": "MLOAD",
									"source": 30
								},
								{
									"begin": 253,
									"end": 902,
									"name": "PUSH",
									"source": 30,
									"value": "0"
								},
								{
									"begin": 253,
									"end": 902,
									"name": "BYTE",
									"source": 30
								},
								{
									"begin": 253,
									"end": 902,
									"name": "PUSH",
									"source": 30,
									"value": "73"
								},
								{
									"begin": 253,
									"end": 902,
									"name": "EQ",
									"source": 30
								},
								{
									"begin": 253,
									"end": 902,
									"name": "PUSH [tag]",
									"source": 30,
									"value": "1"
								},
								{
									"begin": 253,
									"end": 902,
									"name": "JUMPI",
									"source": 30
								},
								{
									"begin": 253,
									"end": 902,
									"name": "INVALID",
									"source": 30
								},
								{
									"begin": 253,
									"end": 902,
									"name": "tag",
									"source": 30,
									"value": "1"
								},
								{
									"begin": 253,
									"end": 902,
									"name": "JUMPDEST",
									"source": 30
								},
								{
									"begin": 253,
									"end": 902,
									"name": "ADDRESS",
									"source": 30
								},
								{
									"begin": 253,
									"end": 902,
									"name": "PUSH",
									"source": 30,
									"value": "0"
								},
								{
									"begin": 253,
									"end": 902,
									"name": "MSTORE",
									"source": 30
								},
								{
									"begin": 253,
									"end": 902,
									"name": "PUSH",
									"source": 30,
									"value": "73"
								},
								{
									"begin": 253,
									"end": 902,
									"name": "DUP2",
									"source": 30
								},
								{
									"begin": 253,
									"end": 902,
									"name": "MSTORE8",
									"source": 30
								},
								{
									"begin": 253,
									"end": 902,
									"name": "DUP3",
									"source": 30
								},
								{
									"begin": 253,
									"end": 902,
									"name": "DUP2",
									"source": 30
								},
								{
									"begin": 253,
									"end": 902,
									"name": "RETURN",
									"source": 30
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205f14c657273f9d0b538e050f2b1afc06e9d6f3c540c64cfa5bc92ab0b346b6ea64736f6c63430007060033",
									".code": [
										{
											"begin": 253,
											"end": 902,
											"name": "PUSHDEPLOYADDRESS",
											"source": 30
										},
										{
											"begin": 253,
											"end": 902,
											"name": "ADDRESS",
											"source": 30
										},
										{
											"begin": 253,
											"end": 902,
											"name": "EQ",
											"source": 30
										},
										{
											"begin": 253,
											"end": 902,
											"name": "PUSH",
											"source": 30,
											"value": "80"
										},
										{
											"begin": 253,
											"end": 902,
											"name": "PUSH",
											"source": 30,
											"value": "40"
										},
										{
											"begin": 253,
											"end": 902,
											"name": "MSTORE",
											"source": 30
										},
										{
											"begin": 253,
											"end": 902,
											"name": "PUSH",
											"source": 30,
											"value": "0"
										},
										{
											"begin": 253,
											"end": 902,
											"name": "DUP1",
											"source": 30
										},
										{
											"begin": 253,
											"end": 902,
											"name": "REVERT",
											"source": 30
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"TransferHelper\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains helper methods for interacting with ERC20 tokens that do not consistently return true/false\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/libraries/TransferHelper.sol\":\"TransferHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/IERC20Minimal.sol\":{\"keccak256\":\"0xa7d3b1fd5f9b9d8848a3ed9d1137eb9c79fa1fa4484347e0f75e285a2e51ea40\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://0a3f7e24d48048a87d541cc014fd51ff4cc3c54aeb78b559d17d75884671fb43\",\"dweb:/ipfs/QmWQC2DiaLXaj3QnwUgvZrKP3xvWVxUjxXDfTMmq6aziYc\"]},\"contracts/core/libraries/TransferHelper.sol\":{\"keccak256\":\"0x3bbe07a0684d98efe73f7012e446873494e74983e1f75a16d42c25b956d61651\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://78ac9659c70ba3253a6e526ba5a144994fb3d32df2e9537787eeb45aae320aec\",\"dweb:/ipfs/QmbaZRbPP2wFZ9coJd2iyPM37hm3kXzPLuRtL6KKr1MCSL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Contains helper methods for interacting with ERC20 tokens that do not consistently return true/false",
						"version": 1
					}
				}
			},
			"contracts/core/libraries/UnsafeMath.sol": {
				"UnsafeMath": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Math functions that do not check inputs or outputs",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/core/libraries/UnsafeMath.sol\":244:659  library UnsafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/core/libraries/UnsafeMath.sol\":244:659  library UnsafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122020037c21a6c9a8c96c3d6041914e3aaa6b0e7a297b3bd4bd3226d03c52f318a264736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122020037c21a6c9a8c96c3d6041914e3aaa6b0e7a297b3bd4bd3226d03c52f318a264736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 KECCAK256 SUB PUSH29 0x21A6C9A8C96C3D6041914E3AAA6B0E7A297B3BD4BD3226D03C52F318A2 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "244:415:31:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122020037c21a6c9a8c96c3d6041914e3aaa6b0e7a297b3bd4bd3226d03c52f318a264736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 KECCAK256 SUB PUSH29 0x21A6C9A8C96C3D6041914E3AAA6B0E7A297B3BD4BD3226D03C52F318A2 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "244:415:31:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"divRoundingUp(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 244,
									"end": 659,
									"name": "PUSH #[$]",
									"source": 31,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 244,
									"end": 659,
									"name": "PUSH [$]",
									"source": 31,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 244,
									"end": 659,
									"name": "PUSH",
									"source": 31,
									"value": "B"
								},
								{
									"begin": 244,
									"end": 659,
									"name": "DUP3",
									"source": 31
								},
								{
									"begin": 244,
									"end": 659,
									"name": "DUP3",
									"source": 31
								},
								{
									"begin": 244,
									"end": 659,
									"name": "DUP3",
									"source": 31
								},
								{
									"begin": 244,
									"end": 659,
									"name": "CODECOPY",
									"source": 31
								},
								{
									"begin": 244,
									"end": 659,
									"name": "DUP1",
									"source": 31
								},
								{
									"begin": 244,
									"end": 659,
									"name": "MLOAD",
									"source": 31
								},
								{
									"begin": 244,
									"end": 659,
									"name": "PUSH",
									"source": 31,
									"value": "0"
								},
								{
									"begin": 244,
									"end": 659,
									"name": "BYTE",
									"source": 31
								},
								{
									"begin": 244,
									"end": 659,
									"name": "PUSH",
									"source": 31,
									"value": "73"
								},
								{
									"begin": 244,
									"end": 659,
									"name": "EQ",
									"source": 31
								},
								{
									"begin": 244,
									"end": 659,
									"name": "PUSH [tag]",
									"source": 31,
									"value": "1"
								},
								{
									"begin": 244,
									"end": 659,
									"name": "JUMPI",
									"source": 31
								},
								{
									"begin": 244,
									"end": 659,
									"name": "INVALID",
									"source": 31
								},
								{
									"begin": 244,
									"end": 659,
									"name": "tag",
									"source": 31,
									"value": "1"
								},
								{
									"begin": 244,
									"end": 659,
									"name": "JUMPDEST",
									"source": 31
								},
								{
									"begin": 244,
									"end": 659,
									"name": "ADDRESS",
									"source": 31
								},
								{
									"begin": 244,
									"end": 659,
									"name": "PUSH",
									"source": 31,
									"value": "0"
								},
								{
									"begin": 244,
									"end": 659,
									"name": "MSTORE",
									"source": 31
								},
								{
									"begin": 244,
									"end": 659,
									"name": "PUSH",
									"source": 31,
									"value": "73"
								},
								{
									"begin": 244,
									"end": 659,
									"name": "DUP2",
									"source": 31
								},
								{
									"begin": 244,
									"end": 659,
									"name": "MSTORE8",
									"source": 31
								},
								{
									"begin": 244,
									"end": 659,
									"name": "DUP3",
									"source": 31
								},
								{
									"begin": 244,
									"end": 659,
									"name": "DUP2",
									"source": 31
								},
								{
									"begin": 244,
									"end": 659,
									"name": "RETURN",
									"source": 31
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122020037c21a6c9a8c96c3d6041914e3aaa6b0e7a297b3bd4bd3226d03c52f318a264736f6c63430007060033",
									".code": [
										{
											"begin": 244,
											"end": 659,
											"name": "PUSHDEPLOYADDRESS",
											"source": 31
										},
										{
											"begin": 244,
											"end": 659,
											"name": "ADDRESS",
											"source": 31
										},
										{
											"begin": 244,
											"end": 659,
											"name": "EQ",
											"source": 31
										},
										{
											"begin": 244,
											"end": 659,
											"name": "PUSH",
											"source": 31,
											"value": "80"
										},
										{
											"begin": 244,
											"end": 659,
											"name": "PUSH",
											"source": 31,
											"value": "40"
										},
										{
											"begin": 244,
											"end": 659,
											"name": "MSTORE",
											"source": 31
										},
										{
											"begin": 244,
											"end": 659,
											"name": "PUSH",
											"source": 31,
											"value": "0"
										},
										{
											"begin": 244,
											"end": 659,
											"name": "DUP1",
											"source": 31
										},
										{
											"begin": 244,
											"end": 659,
											"name": "REVERT",
											"source": 31
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Math functions that do not check inputs or outputs\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains methods that perform common math functions but do not do any overflow or underflow checks\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/libraries/UnsafeMath.sol\":\"UnsafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/libraries/UnsafeMath.sol\":{\"keccak256\":\"0x5f36d7d16348d8c37fe64fda932018d6e5e8acecd054f0f97d32db62d20c6c88\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://4bd4e817ea3d2c26bb2be7e58db3eaa403119562c18d4c09cc92fb31aa231496\",\"dweb:/ipfs/QmbpjgL8Hf1mhmUyf9hpuPk4noGAggCdTqaRBFKqNF3AQw\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Contains methods that perform common math functions but do not do any overflow or underflow checks",
						"version": 1
					}
				}
			},
			"contracts/libraries/VelodromeTimeLibrary.sol": {
				"VelodromeTimeLibrary": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/libraries/VelodromeTimeLibrary.sol\":57:952  library VelodromeTimeLibrary {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/libraries/VelodromeTimeLibrary.sol\":57:952  library VelodromeTimeLibrary {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220fa463d3310217fbd385a8f6a0760bddd7e8b8c18944c3764348f3ec20fbd2e8864736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fa463d3310217fbd385a8f6a0760bddd7e8b8c18944c3764348f3ec20fbd2e8864736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STATICCALL CHAINID RETURNDATASIZE CALLER LT 0x21 PUSH32 0xBD385A8F6A0760BDDD7E8B8C18944C3764348F3EC20FBD2E8864736F6C634300 SMOD MOD STOP CALLER ",
							"sourceMap": "57:895:32:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fa463d3310217fbd385a8f6a0760bddd7e8b8c18944c3764348f3ec20fbd2e8864736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STATICCALL CHAINID RETURNDATASIZE CALLER LT 0x21 PUSH32 0xBD385A8F6A0760BDDD7E8B8C18944C3764348F3EC20FBD2E8864736F6C634300 SMOD MOD STOP CALLER ",
							"sourceMap": "57:895:32:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"epochNext(uint256)": "infinite",
								"epochStart(uint256)": "infinite",
								"epochVoteEnd(uint256)": "infinite",
								"epochVoteStart(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 57,
									"end": 952,
									"name": "PUSH #[$]",
									"source": 32,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 57,
									"end": 952,
									"name": "PUSH [$]",
									"source": 32,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 57,
									"end": 952,
									"name": "PUSH",
									"source": 32,
									"value": "B"
								},
								{
									"begin": 57,
									"end": 952,
									"name": "DUP3",
									"source": 32
								},
								{
									"begin": 57,
									"end": 952,
									"name": "DUP3",
									"source": 32
								},
								{
									"begin": 57,
									"end": 952,
									"name": "DUP3",
									"source": 32
								},
								{
									"begin": 57,
									"end": 952,
									"name": "CODECOPY",
									"source": 32
								},
								{
									"begin": 57,
									"end": 952,
									"name": "DUP1",
									"source": 32
								},
								{
									"begin": 57,
									"end": 952,
									"name": "MLOAD",
									"source": 32
								},
								{
									"begin": 57,
									"end": 952,
									"name": "PUSH",
									"source": 32,
									"value": "0"
								},
								{
									"begin": 57,
									"end": 952,
									"name": "BYTE",
									"source": 32
								},
								{
									"begin": 57,
									"end": 952,
									"name": "PUSH",
									"source": 32,
									"value": "73"
								},
								{
									"begin": 57,
									"end": 952,
									"name": "EQ",
									"source": 32
								},
								{
									"begin": 57,
									"end": 952,
									"name": "PUSH [tag]",
									"source": 32,
									"value": "1"
								},
								{
									"begin": 57,
									"end": 952,
									"name": "JUMPI",
									"source": 32
								},
								{
									"begin": 57,
									"end": 952,
									"name": "INVALID",
									"source": 32
								},
								{
									"begin": 57,
									"end": 952,
									"name": "tag",
									"source": 32,
									"value": "1"
								},
								{
									"begin": 57,
									"end": 952,
									"name": "JUMPDEST",
									"source": 32
								},
								{
									"begin": 57,
									"end": 952,
									"name": "ADDRESS",
									"source": 32
								},
								{
									"begin": 57,
									"end": 952,
									"name": "PUSH",
									"source": 32,
									"value": "0"
								},
								{
									"begin": 57,
									"end": 952,
									"name": "MSTORE",
									"source": 32
								},
								{
									"begin": 57,
									"end": 952,
									"name": "PUSH",
									"source": 32,
									"value": "73"
								},
								{
									"begin": 57,
									"end": 952,
									"name": "DUP2",
									"source": 32
								},
								{
									"begin": 57,
									"end": 952,
									"name": "MSTORE8",
									"source": 32
								},
								{
									"begin": 57,
									"end": 952,
									"name": "DUP3",
									"source": 32
								},
								{
									"begin": 57,
									"end": 952,
									"name": "DUP2",
									"source": 32
								},
								{
									"begin": 57,
									"end": 952,
									"name": "RETURN",
									"source": 32
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220fa463d3310217fbd385a8f6a0760bddd7e8b8c18944c3764348f3ec20fbd2e8864736f6c63430007060033",
									".code": [
										{
											"begin": 57,
											"end": 952,
											"name": "PUSHDEPLOYADDRESS",
											"source": 32
										},
										{
											"begin": 57,
											"end": 952,
											"name": "ADDRESS",
											"source": 32
										},
										{
											"begin": 57,
											"end": 952,
											"name": "EQ",
											"source": 32
										},
										{
											"begin": 57,
											"end": 952,
											"name": "PUSH",
											"source": 32,
											"value": "80"
										},
										{
											"begin": 57,
											"end": 952,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 57,
											"end": 952,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 57,
											"end": 952,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 57,
											"end": 952,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 57,
											"end": 952,
											"name": "REVERT",
											"source": 32
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/VelodromeTimeLibrary.sol\":\"VelodromeTimeLibrary\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/VelodromeTimeLibrary.sol\":{\"keccak256\":\"0x53d5f0b1b864a7dc552ef0291526938a36b1936517d17f62515bb6ba51c1260d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bbc80fd3b18f04224a2a813d6c20a305c7e0479d6414a78d482b45635bc97dba\",\"dweb:/ipfs/QmQFbXCkjzeFgY5M8DyeKZjxeuN8xGdmUmjNH7FNMkLi8T\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/core/IERC721.sol": {
				"ast": {
					"absolutePath": "contracts/core/IERC721.sol",
					"exportedSymbols": {
						"IERC721": [
							112
						]
					},
					"id": 113,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:0"
						},
						{
							"id": 2,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "58:19:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 112,
							"linearizedBaseContracts": [
								112
							],
							"name": "IERC721",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "106:90:0",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"id": 11,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "217:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "217:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "239:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 6,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "239:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "259:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 8,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "259:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "216:67:0"
									},
									"src": "202:82:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 12,
										"nodeType": "StructuredDocumentation",
										"src": "292:96:0",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"id": 20,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "409:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "409:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 16,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "432:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "432:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 18,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "458:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 17,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "458:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "408:74:0"
									},
									"src": "394:89:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 21,
										"nodeType": "StructuredDocumentation",
										"src": "491:119:0",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"id": 29,
									"name": "ApprovalForAll",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 23,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 29,
												"src": "637:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 22,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "637:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 25,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 29,
												"src": "660:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 24,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "660:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 27,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nodeType": "VariableDeclaration",
												"scope": 29,
												"src": "686:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 26,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "686:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "636:64:0"
									},
									"src": "616:85:0"
								},
								{
									"documentation": {
										"id": 30,
										"nodeType": "StructuredDocumentation",
										"src": "709:78:0",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 37,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 32,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 37,
												"src": "812:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 31,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "812:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "811:15:0"
									},
									"returnParameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "balance",
												"nodeType": "VariableDeclaration",
												"scope": 37,
												"src": "850:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 34,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "850:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "849:17:0"
									},
									"scope": 112,
									"src": "793:74:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 38,
										"nodeType": "StructuredDocumentation",
										"src": "875:137:0",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 45,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 41,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 40,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 45,
												"src": "1035:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 39,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1035:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1034:17:0"
									},
									"returnParameters": {
										"id": 44,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 43,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 45,
												"src": "1075:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 42,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1075:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1074:15:0"
									},
									"scope": 112,
									"src": "1018:72:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 46,
										"nodeType": "StructuredDocumentation",
										"src": "1098:578:0",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 57,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 55,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 48,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 57,
												"src": "1708:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 47,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1708:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 50,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 57,
												"src": "1722:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 49,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1722:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 52,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 57,
												"src": "1734:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 51,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1734:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 54,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 57,
												"src": "1751:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 53,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1751:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1707:64:0"
									},
									"returnParameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1780:0:0"
									},
									"scope": 112,
									"src": "1682:99:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 58,
										"nodeType": "StructuredDocumentation",
										"src": "1789:721:0",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC-721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n   {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 67,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 65,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 60,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "2542:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 59,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2542:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "2556:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 61,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2556:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 64,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "2568:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 63,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2568:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2541:43:0"
									},
									"returnParameters": {
										"id": 66,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2593:0:0"
									},
									"scope": 112,
									"src": "2516:78:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 68,
										"nodeType": "StructuredDocumentation",
										"src": "2602:748:0",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 77,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 70,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 77,
												"src": "3378:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 69,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3378:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 72,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 77,
												"src": "3392:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 71,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3392:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 77,
												"src": "3404:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 73,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3404:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3377:43:0"
									},
									"returnParameters": {
										"id": 76,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3429:0:0"
									},
									"scope": 112,
									"src": "3356:74:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 78,
										"nodeType": "StructuredDocumentation",
										"src": "3438:464:0",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 85,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 83,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 80,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 85,
												"src": "3925:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 79,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3925:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 82,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 85,
												"src": "3937:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 81,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3937:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3924:29:0"
									},
									"returnParameters": {
										"id": 84,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3962:0:0"
									},
									"scope": 112,
									"src": "3908:55:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 86,
										"nodeType": "StructuredDocumentation",
										"src": "3971:324:0",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the address zero.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 93,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 91,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 88,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 93,
												"src": "4328:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 87,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4328:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 90,
												"mutability": "mutable",
												"name": "approved",
												"nodeType": "VariableDeclaration",
												"scope": 93,
												"src": "4346:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 89,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4346:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4327:33:0"
									},
									"returnParameters": {
										"id": 92,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4369:0:0"
									},
									"scope": 112,
									"src": "4301:69:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 94,
										"nodeType": "StructuredDocumentation",
										"src": "4378:145:0",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 101,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 97,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 96,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "4550:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 95,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4550:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4549:17:0"
									},
									"returnParameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 99,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "4590:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 98,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4590:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4589:18:0"
									},
									"scope": 112,
									"src": "4529:79:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 102,
										"nodeType": "StructuredDocumentation",
										"src": "4616:142:0",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 111,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 107,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 104,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "4790:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 103,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4790:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 106,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "4805:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 105,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4805:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4789:33:0"
									},
									"returnParameters": {
										"id": 110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 109,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "4846:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 108,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4846:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4845:6:0"
									},
									"scope": 112,
									"src": "4764:88:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 113,
							"src": "81:4774:0"
						}
					],
					"src": "33:4824:0"
				},
				"id": 0
			},
			"contracts/core/INonfungiblePositionManager.sol": {
				"ast": {
					"absolutePath": "contracts/core/INonfungiblePositionManager.sol",
					"exportedSymbols": {
						"INonfungiblePositionManager": [
							324
						]
					},
					"id": 325,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 114,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "46:24:1"
						},
						{
							"id": 115,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "72:19:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 116,
								"nodeType": "StructuredDocumentation",
								"src": "97:172:1",
								"text": "@title Non-fungible token for positions\n @notice Wraps CL positions in a non-fungible token interface which allows for them to be transferred\n and authorized."
							},
							"fullyImplemented": false,
							"id": 324,
							"linearizedBaseContracts": [
								324
							],
							"name": "INonfungiblePositionManager",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 117,
										"nodeType": "StructuredDocumentation",
										"src": "315:463:1",
										"text": "@notice Emitted when liquidity is increased for a position NFT\n @dev Also emitted when a token is minted\n @param tokenId The ID of the token for which liquidity was increased\n @param liquidity The amount by which liquidity for the NFT position was increased\n @param amount0 The amount of token0 that was paid for the increase in liquidity\n @param amount1 The amount of token1 that was paid for the increase in liquidity"
									},
									"id": 127,
									"name": "IncreaseLiquidity",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 126,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 119,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 127,
												"src": "808:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 118,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "808:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 121,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 127,
												"src": "833:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 120,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "833:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 123,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 127,
												"src": "852:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 122,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "852:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 125,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 127,
												"src": "869:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 124,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "869:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "807:78:1"
									},
									"src": "784:102:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 128,
										"nodeType": "StructuredDocumentation",
										"src": "892:423:1",
										"text": "@notice Emitted when liquidity is decreased for a position NFT\n @param tokenId The ID of the token for which liquidity was decreased\n @param liquidity The amount by which liquidity for the NFT position was decreased\n @param amount0 The amount of token0 that was accounted for the decrease in liquidity\n @param amount1 The amount of token1 that was accounted for the decrease in liquidity"
									},
									"id": 138,
									"name": "DecreaseLiquidity",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 137,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 130,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "1345:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 129,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1345:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 132,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "1370:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 131,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1370:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 134,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "1389:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 133,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1389:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 136,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "1406:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 135,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1406:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1344:78:1"
									},
									"src": "1321:102:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 139,
										"nodeType": "StructuredDocumentation",
										"src": "1429:527:1",
										"text": "@notice Emitted when tokens are collected for a position NFT\n @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\n @param tokenId The ID of the token for which underlying tokens were collected\n @param recipient The address of the account that received the collected tokens\n @param amount0 The amount of token0 owed to the position that was collected\n @param amount1 The amount of token1 owed to the position that was collected"
									},
									"id": 149,
									"name": "Collect",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 148,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 141,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "1976:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 140,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1976:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 143,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2001:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 142,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2001:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 145,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2020:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 144,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2020:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 147,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2037:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 146,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2037:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1975:78:1"
									},
									"src": "1962:92:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 150,
										"nodeType": "StructuredDocumentation",
										"src": "2060:122:1",
										"text": "@notice Emitted when a new Token Descriptor is set\n @param tokenDescriptor Address of the new Token Descriptor"
									},
									"id": 154,
									"name": "TokenDescriptorChanged",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 152,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenDescriptor",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "2217:31:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 151,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2217:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2216:33:1"
									},
									"src": "2188:62:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 155,
										"nodeType": "StructuredDocumentation",
										"src": "2256:90:1",
										"text": "@notice Emitted when a new Owner is set\n @param owner Address of the new Owner"
									},
									"id": 159,
									"name": "TransferOwnership",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 158,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 157,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "2376:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 156,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2376:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2375:23:1"
									},
									"src": "2352:47:1"
								},
								{
									"documentation": {
										"id": 160,
										"nodeType": "StructuredDocumentation",
										"src": "2407:1188:1",
										"text": "@notice Returns the position information associated with a given token ID.\n @dev Throws if the token ID is not valid.\n @param tokenId The ID of the token that represents the position\n @return nonce The nonce for permits\n @return operator The address that is approved for spending\n @return token0 The address of the token0 for a specific pool\n @return token1 The address of the token1 for a specific pool\n @return tickSpacing The tick spacing associated with the pool\n @return tickLower The lower end of the tick range for the position\n @return tickUpper The higher end of the tick range for the position\n @return liquidity The liquidity of the position\n @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation"
									},
									"functionSelector": "99fbab88",
									"id": 189,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "positions",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "3620:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 161,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3620:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3619:17:1"
									},
									"returnParameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 165,
												"mutability": "mutable",
												"name": "nonce",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "3701:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint96",
													"typeString": "uint96"
												},
												"typeName": {
													"id": 164,
													"name": "uint96",
													"nodeType": "ElementaryTypeName",
													"src": "3701:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint96",
														"typeString": "uint96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 167,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "3728:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 166,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3728:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "token0",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "3759:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 168,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3759:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 171,
												"mutability": "mutable",
												"name": "token1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "3788:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 170,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3788:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 173,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "3817:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 172,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3817:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "3849:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 174,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3849:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 177,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "3879:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 176,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3879:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 179,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "3909:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 178,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3909:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 181,
												"mutability": "mutable",
												"name": "feeGrowthInside0LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "3941:32:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 180,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3941:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 183,
												"mutability": "mutable",
												"name": "feeGrowthInside1LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "3988:32:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 182,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3988:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 185,
												"mutability": "mutable",
												"name": "tokensOwed0",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "4035:19:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 184,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4035:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "tokensOwed1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "4069:19:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 186,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4069:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3686:413:1"
									},
									"scope": 324,
									"src": "3601:499:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 190,
										"nodeType": "StructuredDocumentation",
										"src": "4108:105:1",
										"text": "@notice Returns the address of the Token Descriptor, that handles generating token URIs for Positions"
									},
									"functionSelector": "5a9d7a68",
									"id": 195,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenDescriptor",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 191,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4243:2:1"
									},
									"returnParameters": {
										"id": 194,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 193,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 195,
												"src": "4269:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 192,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4269:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4268:9:1"
									},
									"scope": 324,
									"src": "4219:59:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 196,
										"nodeType": "StructuredDocumentation",
										"src": "4286:90:1",
										"text": "@notice Returns the address of the Owner, that is allowed to set a new TokenDescriptor"
									},
									"functionSelector": "8da5cb5b",
									"id": 201,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 197,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4396:2:1"
									},
									"returnParameters": {
										"id": 200,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 199,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 201,
												"src": "4422:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 198,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4422:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4421:9:1"
									},
									"scope": 324,
									"src": "4382:49:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.MintParams",
									"id": 226,
									"members": [
										{
											"constant": false,
											"id": 203,
											"mutability": "mutable",
											"name": "token0",
											"nodeType": "VariableDeclaration",
											"scope": 226,
											"src": "4468:14:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 202,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4468:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 205,
											"mutability": "mutable",
											"name": "token1",
											"nodeType": "VariableDeclaration",
											"scope": 226,
											"src": "4493:14:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 204,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4493:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 207,
											"mutability": "mutable",
											"name": "tickSpacing",
											"nodeType": "VariableDeclaration",
											"scope": 226,
											"src": "4518:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 206,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "4518:5:1",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 209,
											"mutability": "mutable",
											"name": "tickLower",
											"nodeType": "VariableDeclaration",
											"scope": 226,
											"src": "4546:15:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 208,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "4546:5:1",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 211,
											"mutability": "mutable",
											"name": "tickUpper",
											"nodeType": "VariableDeclaration",
											"scope": 226,
											"src": "4572:15:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 210,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "4572:5:1",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 213,
											"mutability": "mutable",
											"name": "amount0Desired",
											"nodeType": "VariableDeclaration",
											"scope": 226,
											"src": "4598:22:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 212,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4598:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 215,
											"mutability": "mutable",
											"name": "amount1Desired",
											"nodeType": "VariableDeclaration",
											"scope": 226,
											"src": "4631:22:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 214,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4631:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 217,
											"mutability": "mutable",
											"name": "amount0Min",
											"nodeType": "VariableDeclaration",
											"scope": 226,
											"src": "4664:18:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 216,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4664:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 219,
											"mutability": "mutable",
											"name": "amount1Min",
											"nodeType": "VariableDeclaration",
											"scope": 226,
											"src": "4693:18:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 218,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4693:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 221,
											"mutability": "mutable",
											"name": "recipient",
											"nodeType": "VariableDeclaration",
											"scope": 226,
											"src": "4722:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 220,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4722:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 223,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 226,
											"src": "4750:16:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 222,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4750:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 225,
											"mutability": "mutable",
											"name": "sqrtPriceX96",
											"nodeType": "VariableDeclaration",
											"scope": 226,
											"src": "4777:20:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint160",
												"typeString": "uint160"
											},
											"typeName": {
												"id": 224,
												"name": "uint160",
												"nodeType": "ElementaryTypeName",
												"src": "4777:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "MintParams",
									"nodeType": "StructDefinition",
									"scope": 324,
									"src": "4439:366:1",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 227,
										"nodeType": "StructuredDocumentation",
										"src": "4813:593:1",
										"text": "@notice Creates a new position wrapped in a NFT\n @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n a method does not exist, i.e. the pool is assumed to be initialized.\n @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n @return tokenId The ID of the token that represents the minted position\n @return liquidity The amount of liquidity for this position\n @return amount0 The amount of token0\n @return amount1 The amount of token1"
									},
									"functionSelector": "b5007d1f",
									"id": 240,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 230,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 229,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 240,
												"src": "5426:26:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_MintParams_$226_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.MintParams"
												},
												"typeName": {
													"id": 228,
													"name": "MintParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 226,
													"src": "5426:10:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_MintParams_$226_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.MintParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5425:28:1"
									},
									"returnParameters": {
										"id": 239,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 232,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 240,
												"src": "5507:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 231,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5507:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 234,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 240,
												"src": "5524:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 233,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5524:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 236,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 240,
												"src": "5543:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 235,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5543:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 238,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 240,
												"src": "5560:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 237,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5560:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5506:70:1"
									},
									"scope": 324,
									"src": "5412:165:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.IncreaseLiquidityParams",
									"id": 253,
									"members": [
										{
											"constant": false,
											"id": 242,
											"mutability": "mutable",
											"name": "tokenId",
											"nodeType": "VariableDeclaration",
											"scope": 253,
											"src": "5627:15:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 241,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5627:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 244,
											"mutability": "mutable",
											"name": "amount0Desired",
											"nodeType": "VariableDeclaration",
											"scope": 253,
											"src": "5653:22:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 243,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5653:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 246,
											"mutability": "mutable",
											"name": "amount1Desired",
											"nodeType": "VariableDeclaration",
											"scope": 253,
											"src": "5686:22:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 245,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5686:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 248,
											"mutability": "mutable",
											"name": "amount0Min",
											"nodeType": "VariableDeclaration",
											"scope": 253,
											"src": "5719:18:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 247,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5719:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 250,
											"mutability": "mutable",
											"name": "amount1Min",
											"nodeType": "VariableDeclaration",
											"scope": 253,
											"src": "5748:18:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 249,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5748:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 252,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 253,
											"src": "5777:16:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 251,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5777:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "IncreaseLiquidityParams",
									"nodeType": "StructDefinition",
									"scope": 324,
									"src": "5585:216:1",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 254,
										"nodeType": "StructuredDocumentation",
										"src": "5809:830:1",
										"text": "@notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n @param params tokenId The ID of the token for which liquidity is being increased,\n amount0Desired The desired amount of token0 to be spent,\n amount1Desired The desired amount of token1 to be spent,\n amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n deadline The time by which the transaction must be included to effect the change\n @return liquidity The new liquidity amount as a result of the increase\n @return amount0 The amount of token0 to acheive resulting liquidity\n @return amount1 The amount of token1 to acheive resulting liquidity"
									},
									"functionSelector": "219f5d17",
									"id": 265,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseLiquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 257,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "6672:39:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_IncreaseLiquidityParams_$253_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.IncreaseLiquidityParams"
												},
												"typeName": {
													"id": 255,
													"name": "IncreaseLiquidityParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 253,
													"src": "6672:23:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_IncreaseLiquidityParams_$253_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.IncreaseLiquidityParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6671:41:1"
									},
									"returnParameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 259,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "6766:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 258,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "6766:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 261,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "6785:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 260,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6785:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "6802:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 262,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6802:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6765:53:1"
									},
									"scope": 324,
									"src": "6645:174:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.DecreaseLiquidityParams",
									"id": 276,
									"members": [
										{
											"constant": false,
											"id": 267,
											"mutability": "mutable",
											"name": "tokenId",
											"nodeType": "VariableDeclaration",
											"scope": 276,
											"src": "6869:15:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 266,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6869:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 269,
											"mutability": "mutable",
											"name": "liquidity",
											"nodeType": "VariableDeclaration",
											"scope": 276,
											"src": "6895:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 268,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "6895:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 271,
											"mutability": "mutable",
											"name": "amount0Min",
											"nodeType": "VariableDeclaration",
											"scope": 276,
											"src": "6923:18:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 270,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6923:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 273,
											"mutability": "mutable",
											"name": "amount1Min",
											"nodeType": "VariableDeclaration",
											"scope": 276,
											"src": "6952:18:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 272,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6952:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 275,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 276,
											"src": "6981:16:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 274,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6981:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "DecreaseLiquidityParams",
									"nodeType": "StructDefinition",
									"scope": 324,
									"src": "6827:178:1",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 277,
										"nodeType": "StructuredDocumentation",
										"src": "7013:1005:1",
										"text": "@notice Decreases the amount of liquidity in a position and accounts it to the position\n @param params tokenId The ID of the token for which liquidity is being decreased,\n amount The amount by which liquidity will be decreased,\n amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n deadline The time by which the transaction must be included to effect the change\n @return amount0 The amount of token0 accounted to the position's tokens owed\n @return amount1 The amount of token1 accounted to the position's tokens owed\n @dev The use of this function can cause a loss to users of the NonfungiblePositionManager\n @dev for tokens that have very high decimals.\n @dev The amount of tokens necessary for the loss is: 3.4028237e+38.\n @dev This is equivalent to 1e20 value with 18 decimals."
									},
									"functionSelector": "0c49ccbe",
									"id": 286,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseLiquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 279,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 286,
												"src": "8051:39:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_DecreaseLiquidityParams_$276_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.DecreaseLiquidityParams"
												},
												"typeName": {
													"id": 278,
													"name": "DecreaseLiquidityParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 276,
													"src": "8051:23:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_DecreaseLiquidityParams_$276_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.DecreaseLiquidityParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8050:41:1"
									},
									"returnParameters": {
										"id": 285,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 282,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 286,
												"src": "8145:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 281,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8145:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 284,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 286,
												"src": "8162:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 283,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8162:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8144:34:1"
									},
									"scope": 324,
									"src": "8024:155:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.CollectParams",
									"id": 295,
									"members": [
										{
											"constant": false,
											"id": 288,
											"mutability": "mutable",
											"name": "tokenId",
											"nodeType": "VariableDeclaration",
											"scope": 295,
											"src": "8219:15:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 287,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "8219:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 290,
											"mutability": "mutable",
											"name": "recipient",
											"nodeType": "VariableDeclaration",
											"scope": 295,
											"src": "8245:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 289,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "8245:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 292,
											"mutability": "mutable",
											"name": "amount0Max",
											"nodeType": "VariableDeclaration",
											"scope": 295,
											"src": "8273:18:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 291,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "8273:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 294,
											"mutability": "mutable",
											"name": "amount1Max",
											"nodeType": "VariableDeclaration",
											"scope": 295,
											"src": "8302:18:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 293,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "8302:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "CollectParams",
									"nodeType": "StructDefinition",
									"scope": 324,
									"src": "8187:141:1",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 296,
										"nodeType": "StructuredDocumentation",
										"src": "8336:572:1",
										"text": "@notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n @notice Used to update staked positions before deposit and withdraw\n @param params tokenId The ID of the NFT for which tokens are being collected,\n recipient The account that should receive the tokens,\n amount0Max The maximum amount of token0 to collect,\n amount1Max The maximum amount of token1 to collect\n @return amount0 The amount of fees collected in token0\n @return amount1 The amount of fees collected in token1"
									},
									"functionSelector": "fc6f7865",
									"id": 305,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collect",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 299,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 298,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "8931:29:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CollectParams_$295_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.CollectParams"
												},
												"typeName": {
													"id": 297,
													"name": "CollectParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 295,
													"src": "8931:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CollectParams_$295_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.CollectParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8930:31:1"
									},
									"returnParameters": {
										"id": 304,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 301,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "8988:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 300,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8988:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 303,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "9005:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 302,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9005:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8987:34:1"
									},
									"scope": 324,
									"src": "8914:108:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 306,
										"nodeType": "StructuredDocumentation",
										"src": "9030:215:1",
										"text": "@notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n must be collected first.\n @param tokenId The ID of the token that is being burned"
									},
									"functionSelector": "42966c68",
									"id": 311,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 309,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 308,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 311,
												"src": "9265:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 307,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9265:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9264:17:1"
									},
									"returnParameters": {
										"id": 310,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9298:0:1"
									},
									"scope": 324,
									"src": "9251:48:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 312,
										"nodeType": "StructuredDocumentation",
										"src": "9307:121:1",
										"text": "@notice Sets a new Token Descriptor\n @param _tokenDescriptor Address of the new Token Descriptor to be chosen"
									},
									"functionSelector": "b6dc7ea3",
									"id": 317,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setTokenDescriptor",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 315,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 314,
												"mutability": "mutable",
												"name": "_tokenDescriptor",
												"nodeType": "VariableDeclaration",
												"scope": 317,
												"src": "9462:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 313,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9462:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9461:26:1"
									},
									"returnParameters": {
										"id": 316,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9496:0:1"
									},
									"scope": 324,
									"src": "9434:63:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 318,
										"nodeType": "StructuredDocumentation",
										"src": "9505:97:1",
										"text": "@notice Sets a new Owner address\n @param _owner Address of the new Owner to be chosen"
									},
									"functionSelector": "13af4035",
									"id": 323,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setOwner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 321,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 320,
												"mutability": "mutable",
												"name": "_owner",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "9626:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 319,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9626:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9625:16:1"
									},
									"returnParameters": {
										"id": 322,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9650:0:1"
									},
									"scope": 324,
									"src": "9608:43:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 325,
							"src": "269:9385:1"
						}
					],
					"src": "46:9610:1"
				},
				"id": 1
			},
			"contracts/core/VeloSwapV3.sol": {
				"ast": {
					"absolutePath": "contracts/core/VeloSwapV3.sol",
					"exportedSymbols": {
						"BitMath": [
							2178
						],
						"FixedPoint128": [
							2185
						],
						"FixedPoint96": [
							2195
						],
						"FullMath": [
							2368
						],
						"ICLFactory": [
							1059
						],
						"ICLMintCallback": [
							1321
						],
						"ICLPool": [
							1081
						],
						"ICLPoolActions": [
							1511
						],
						"ICLPoolConstants": [
							1563
						],
						"ICLPoolDerivedState": [
							1594
						],
						"ICLPoolEvents": [
							1711
						],
						"ICLPoolOwnerActions": [
							1723
						],
						"ICLPoolState": [
							1899
						],
						"ICLSwapCallback": [
							1335
						],
						"IERC20": [
							439
						],
						"IERC20Minimal": [
							1153
						],
						"IERC721": [
							112
						],
						"IFactoryRegistry": [
							1181
						],
						"INonfungiblePositionManager": [
							324
						],
						"IVoter": [
							1289
						],
						"LiquidityAmounts": [
							2708
						],
						"LiquidityMath": [
							2760
						],
						"LowGasSafeMath": [
							2890
						],
						"Oracle": [
							367
						],
						"Position": [
							3075
						],
						"SafeCast": [
							3145
						],
						"SqrtPriceMath": [
							3662
						],
						"Tick": [
							4281
						],
						"TickBitmap": [
							4537
						],
						"TickMath": [
							5072
						],
						"TransferHelper": [
							5123
						],
						"UnsafeMath": [
							5139
						],
						"V3Swap": [
							814
						],
						"VelodromeTimeLibrary": [
							5217
						]
					},
					"id": 815,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 326,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:2"
						},
						{
							"id": 327,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "58:19:2"
						},
						{
							"absolutePath": "contracts/core/interfaces/ICLPool.sol",
							"file": "./interfaces/ICLPool.sol",
							"id": 328,
							"nodeType": "ImportDirective",
							"scope": 815,
							"sourceUnit": 1082,
							"src": "81:34:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/LowGasSafeMath.sol",
							"file": "./libraries/LowGasSafeMath.sol",
							"id": 329,
							"nodeType": "ImportDirective",
							"scope": 815,
							"sourceUnit": 2891,
							"src": "119:40:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/SafeCast.sol",
							"file": "./libraries/SafeCast.sol",
							"id": 330,
							"nodeType": "ImportDirective",
							"scope": 815,
							"sourceUnit": 3146,
							"src": "161:34:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/Tick.sol",
							"file": "./libraries/Tick.sol",
							"id": 331,
							"nodeType": "ImportDirective",
							"scope": 815,
							"sourceUnit": 4282,
							"src": "197:30:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/TickBitmap.sol",
							"file": "./libraries/TickBitmap.sol",
							"id": 332,
							"nodeType": "ImportDirective",
							"scope": 815,
							"sourceUnit": 4538,
							"src": "229:36:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/Position.sol",
							"file": "./libraries/Position.sol",
							"id": 333,
							"nodeType": "ImportDirective",
							"scope": 815,
							"sourceUnit": 3076,
							"src": "267:34:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/FullMath.sol",
							"file": "./libraries/FullMath.sol",
							"id": 334,
							"nodeType": "ImportDirective",
							"scope": 815,
							"sourceUnit": 2369,
							"src": "305:34:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/FixedPoint128.sol",
							"file": "./libraries/FixedPoint128.sol",
							"id": 335,
							"nodeType": "ImportDirective",
							"scope": 815,
							"sourceUnit": 2186,
							"src": "341:39:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/TransferHelper.sol",
							"file": "./libraries/TransferHelper.sol",
							"id": 336,
							"nodeType": "ImportDirective",
							"scope": 815,
							"sourceUnit": 5124,
							"src": "382:40:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/TickMath.sol",
							"file": "./libraries/TickMath.sol",
							"id": 337,
							"nodeType": "ImportDirective",
							"scope": 815,
							"sourceUnit": 5073,
							"src": "424:34:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/LiquidityMath.sol",
							"file": "./libraries/LiquidityMath.sol",
							"id": 338,
							"nodeType": "ImportDirective",
							"scope": 815,
							"sourceUnit": 2761,
							"src": "460:39:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/LiquidityAmounts.sol",
							"file": "./libraries/LiquidityAmounts.sol",
							"id": 339,
							"nodeType": "ImportDirective",
							"scope": 815,
							"sourceUnit": 2709,
							"src": "501:42:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/SqrtPriceMath.sol",
							"file": "./libraries/SqrtPriceMath.sol",
							"id": 340,
							"nodeType": "ImportDirective",
							"scope": 815,
							"sourceUnit": 3663,
							"src": "545:39:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/interfaces/ICLFactory.sol",
							"file": "./interfaces/ICLFactory.sol",
							"id": 341,
							"nodeType": "ImportDirective",
							"scope": 815,
							"sourceUnit": 1060,
							"src": "588:37:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/interfaces/IFactoryRegistry.sol",
							"file": "./interfaces/IFactoryRegistry.sol",
							"id": 342,
							"nodeType": "ImportDirective",
							"scope": 815,
							"sourceUnit": 1182,
							"src": "627:43:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/interfaces/IERC20Minimal.sol",
							"file": "./interfaces/IERC20Minimal.sol",
							"id": 343,
							"nodeType": "ImportDirective",
							"scope": 815,
							"sourceUnit": 1154,
							"src": "672:40:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/interfaces/callback/ICLMintCallback.sol",
							"file": "./interfaces/callback/ICLMintCallback.sol",
							"id": 344,
							"nodeType": "ImportDirective",
							"scope": 815,
							"sourceUnit": 1322,
							"src": "714:51:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/interfaces/callback/ICLSwapCallback.sol",
							"file": "./interfaces/callback/ICLSwapCallback.sol",
							"id": 345,
							"nodeType": "ImportDirective",
							"scope": 815,
							"sourceUnit": 1336,
							"src": "767:51:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/libraries/VelodromeTimeLibrary.sol",
							"file": "contracts/libraries/VelodromeTimeLibrary.sol",
							"id": 346,
							"nodeType": "ImportDirective",
							"scope": 815,
							"sourceUnit": 5218,
							"src": "820:54:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/IERC721.sol",
							"file": "./IERC721.sol",
							"id": 347,
							"nodeType": "ImportDirective",
							"scope": 815,
							"sourceUnit": 113,
							"src": "876:23:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/INonfungiblePositionManager.sol",
							"file": "./INonfungiblePositionManager.sol",
							"id": 348,
							"nodeType": "ImportDirective",
							"scope": 815,
							"sourceUnit": 325,
							"src": "901:43:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 367,
							"linearizedBaseContracts": [
								367
							],
							"name": "Oracle",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "f29d0040",
									"id": 355,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "GetPrice",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 351,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 350,
												"mutability": "mutable",
												"name": "pooladdress",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "990:19:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 349,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "990:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "989:21:2"
									},
									"returnParameters": {
										"id": 354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 353,
												"mutability": "mutable",
												"name": "price",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "1034:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 352,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1034:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1033:15:2"
									},
									"scope": 367,
									"src": "972:77:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "941e0eb8",
									"id": 366,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAmountsforLiquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 360,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 357,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 366,
												"src": "1087:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 356,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1087:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 359,
												"mutability": "mutable",
												"name": "usdAmount",
												"nodeType": "VariableDeclaration",
												"scope": 366,
												"src": "1101:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 358,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1101:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1086:33:2"
									},
									"returnParameters": {
										"id": 365,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 362,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 366,
												"src": "1143:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 361,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1143:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 364,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 366,
												"src": "1157:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 363,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1157:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1142:28:2"
									},
									"scope": 367,
									"src": "1055:116:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 815,
							"src": "948:226:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 439,
							"linearizedBaseContracts": [
								439
							],
							"name": "IERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"id": 375,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 374,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 369,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 375,
												"src": "1223:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 368,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 371,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 375,
												"src": "1245:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 370,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1245:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 373,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 375,
												"src": "1265:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 372,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1265:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1222:57:2"
									},
									"src": "1208:72:2"
								},
								{
									"anonymous": false,
									"id": 383,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 382,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 377,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 383,
												"src": "1301:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 376,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1301:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 379,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 383,
												"src": "1324:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 378,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1324:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 381,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 383,
												"src": "1349:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 380,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1349:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1300:63:2"
									},
									"src": "1286:78:2"
								},
								{
									"functionSelector": "18160ddd",
									"id": 388,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 384,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1390:2:2"
									},
									"returnParameters": {
										"id": 387,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 386,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 388,
												"src": "1416:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 385,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1416:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1415:9:2"
									},
									"scope": 439,
									"src": "1370:55:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "70a08231",
									"id": 395,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 391,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 390,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 395,
												"src": "1450:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 389,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1450:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1449:17:2"
									},
									"returnParameters": {
										"id": 394,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 393,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 395,
												"src": "1490:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 392,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1490:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1489:9:2"
									},
									"scope": 439,
									"src": "1431:68:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "a9059cbb",
									"id": 404,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 400,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 397,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 404,
												"src": "1523:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 396,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1523:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 399,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 404,
												"src": "1535:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 398,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1535:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1522:27:2"
									},
									"returnParameters": {
										"id": 403,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 402,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 404,
												"src": "1568:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 401,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1568:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1567:6:2"
									},
									"scope": 439,
									"src": "1505:69:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "dd62ed3e",
									"id": 413,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 409,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 406,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 413,
												"src": "1599:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 405,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1599:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 408,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 413,
												"src": "1614:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 407,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1614:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1598:32:2"
									},
									"returnParameters": {
										"id": 412,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 411,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 413,
												"src": "1654:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 410,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1654:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1653:9:2"
									},
									"scope": 439,
									"src": "1580:83:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "095ea7b3",
									"id": 422,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 418,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 415,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 422,
												"src": "1686:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 414,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1686:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 417,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 422,
												"src": "1703:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 416,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1703:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1685:32:2"
									},
									"returnParameters": {
										"id": 421,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 420,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 422,
												"src": "1736:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 419,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1736:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1735:6:2"
									},
									"scope": 439,
									"src": "1669:73:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "23b872dd",
									"id": 433,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 429,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 424,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 433,
												"src": "1770:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 423,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1770:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 426,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 433,
												"src": "1784:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 425,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1784:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 428,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 433,
												"src": "1796:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 427,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1796:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1769:41:2"
									},
									"returnParameters": {
										"id": 432,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 431,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 433,
												"src": "1829:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 430,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1829:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1828:6:2"
									},
									"scope": 439,
									"src": "1748:87:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "313ce567",
									"id": 438,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 434,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1858:2:2"
									},
									"returnParameters": {
										"id": 437,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 436,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 438,
												"src": "1884:5:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 435,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1884:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1883:7:2"
									},
									"scope": 439,
									"src": "1841:50:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 815,
							"src": "1184:710:2"
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 440,
										"name": "ICLSwapCallback",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1335,
										"src": "1919:15:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ICLSwapCallback_$1335",
											"typeString": "contract ICLSwapCallback"
										}
									},
									"id": 441,
									"nodeType": "InheritanceSpecifier",
									"src": "1919:15:2"
								}
							],
							"contractDependencies": [
								1335
							],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 814,
							"linearizedBaseContracts": [
								814,
								1335
							],
							"name": "V3Swap",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "16f0115b",
									"id": 443,
									"mutability": "mutable",
									"name": "pool",
									"nodeType": "VariableDeclaration",
									"scope": 814,
									"src": "1942:19:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 442,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1942:7:2",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "0dfe1681",
									"id": 445,
									"mutability": "mutable",
									"name": "token0",
									"nodeType": "VariableDeclaration",
									"scope": 814,
									"src": "1998:21:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 444,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1998:7:2",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "d21220a7",
									"id": 447,
									"mutability": "mutable",
									"name": "token1",
									"nodeType": "VariableDeclaration",
									"scope": 814,
									"src": "2048:21:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 446,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "2048:7:2",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "da802f80",
									"id": 449,
									"mutability": "mutable",
									"name": "farmNFT",
									"nodeType": "VariableDeclaration",
									"scope": 814,
									"src": "2098:22:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 448,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "2098:7:2",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "f851a440",
									"id": 451,
									"mutability": "mutable",
									"name": "admin",
									"nodeType": "VariableDeclaration",
									"scope": 814,
									"src": "2127:20:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 450,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "2127:7:2",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "d0c93a7c",
									"id": 453,
									"mutability": "mutable",
									"name": "tickSpacing",
									"nodeType": "VariableDeclaration",
									"scope": 814,
									"src": "2154:24:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_int24",
										"typeString": "int24"
									},
									"typeName": {
										"id": 452,
										"name": "int24",
										"nodeType": "ElementaryTypeName",
										"src": "2154:5:2",
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "fd1c1518",
									"id": 455,
									"mutability": "mutable",
									"name": "spaceMultiplier",
									"nodeType": "VariableDeclaration",
									"scope": 814,
									"src": "2185:28:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_int24",
										"typeString": "int24"
									},
									"typeName": {
										"id": 454,
										"name": "int24",
										"nodeType": "ElementaryTypeName",
										"src": "2185:5:2",
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "7dc0d1d0",
									"id": 458,
									"mutability": "mutable",
									"name": "oracle",
									"nodeType": "VariableDeclaration",
									"scope": 814,
									"src": "2220:66:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 456,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "2220:7:2",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307866304638323439634136343933416145624246393731423361324644384132653637333639383145",
										"id": 457,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2244:42:2",
										"typeDescriptions": {
											"typeIdentifier": "t_address_payable",
											"typeString": "address payable"
										},
										"value": "0xf0F8249cA6493AaEbBF971B3a2FD8A2e6736981E"
									},
									"visibility": "public"
								},
								{
									"canonicalName": "V3Swap.Deposit",
									"id": 467,
									"members": [
										{
											"constant": false,
											"id": 460,
											"mutability": "mutable",
											"name": "owner",
											"nodeType": "VariableDeclaration",
											"scope": 467,
											"src": "2321:13:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 459,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "2321:7:2",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 462,
											"mutability": "mutable",
											"name": "liquidity",
											"nodeType": "VariableDeclaration",
											"scope": 467,
											"src": "2345:17:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 461,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "2345:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 464,
											"mutability": "mutable",
											"name": "token0",
											"nodeType": "VariableDeclaration",
											"scope": 467,
											"src": "2373:14:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 463,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "2373:7:2",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 466,
											"mutability": "mutable",
											"name": "token1",
											"nodeType": "VariableDeclaration",
											"scope": 467,
											"src": "2398:14:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 465,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "2398:7:2",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Deposit",
									"nodeType": "StructDefinition",
									"scope": 814,
									"src": "2295:125:2",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "b02c43d0",
									"id": 471,
									"mutability": "mutable",
									"name": "deposits",
									"nodeType": "VariableDeclaration",
									"scope": 814,
									"src": "2428:43:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Deposit_$467_storage_$",
										"typeString": "mapping(uint256 => struct V3Swap.Deposit)"
									},
									"typeName": {
										"id": 470,
										"keyType": {
											"id": 468,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "2436:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "2428:27:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Deposit_$467_storage_$",
											"typeString": "mapping(uint256 => struct V3Swap.Deposit)"
										},
										"valueType": {
											"id": 469,
											"name": "Deposit",
											"nodeType": "UserDefinedTypeName",
											"referencedDeclaration": 467,
											"src": "2447:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Deposit_$467_storage_ptr",
												"typeString": "struct V3Swap.Deposit"
											}
										}
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"id": 479,
									"name": "SwapExecuted",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 478,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 473,
												"indexed": true,
												"mutability": "mutable",
												"name": "user",
												"nodeType": "VariableDeclaration",
												"scope": 479,
												"src": "2499:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 472,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2499:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 475,
												"indexed": false,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 479,
												"src": "2521:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 474,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2521:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 477,
												"indexed": false,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 479,
												"src": "2539:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 476,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2539:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2498:59:2"
									},
									"src": "2480:78:2"
								},
								{
									"body": {
										"id": 487,
										"nodeType": "Block",
										"src": "2580:37:2",
										"statements": [
											{
												"expression": {
													"id": 485,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 482,
														"name": "admin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 451,
														"src": "2591:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 483,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "2599:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 484,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "2599:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "2591:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 486,
												"nodeType": "ExpressionStatement",
												"src": "2591:18:2"
											}
										]
									},
									"id": 488,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 480,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2577:2:2"
									},
									"returnParameters": {
										"id": 481,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2580:0:2"
									},
									"scope": 814,
									"src": "2566:51:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 505,
										"nodeType": "Block",
										"src": "2671:100:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 497,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 494,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2690:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 495,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2690:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 496,
																"name": "admin",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 451,
																"src": "2704:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2690:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f6e6c79206f776e65722063616e20646f2074686973",
															"id": 498,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2711:24:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6fd24def08b0888543800c4127fd6d1aa58919ac12b49d8f20efd315c642cdfa",
																"typeString": "literal_string \"Only owner can do this\""
															},
															"value": "Only owner can do this"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6fd24def08b0888543800c4127fd6d1aa58919ac12b49d8f20efd315c642cdfa",
																"typeString": "literal_string \"Only owner can do this\""
															}
														],
														"id": 493,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2682:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 499,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2682:54:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 500,
												"nodeType": "ExpressionStatement",
												"src": "2682:54:2"
											},
											{
												"expression": {
													"id": 503,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 501,
														"name": "admin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 451,
														"src": "2747:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 502,
														"name": "newAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 490,
														"src": "2755:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2747:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 504,
												"nodeType": "ExpressionStatement",
												"src": "2747:16:2"
											}
										]
									},
									"functionSelector": "e6f4d0aa",
									"id": 506,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_newAdmin",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 491,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 490,
												"mutability": "mutable",
												"name": "newAdmin",
												"nodeType": "VariableDeclaration",
												"scope": 506,
												"src": "2644:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 489,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2644:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2643:18:2"
									},
									"returnParameters": {
										"id": 492,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2671:0:2"
									},
									"scope": 814,
									"src": "2625:146:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 555,
										"nodeType": "Block",
										"src": "2823:310:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 515,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 512,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2842:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 513,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2842:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 514,
																"name": "admin",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 451,
																"src": "2856:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2842:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f6e6c79206f776e65722063616e20646f2074686973",
															"id": 516,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2863:24:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6fd24def08b0888543800c4127fd6d1aa58919ac12b49d8f20efd315c642cdfa",
																"typeString": "literal_string \"Only owner can do this\""
															},
															"value": "Only owner can do this"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6fd24def08b0888543800c4127fd6d1aa58919ac12b49d8f20efd315c642cdfa",
																"typeString": "literal_string \"Only owner can do this\""
															}
														],
														"id": 511,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2834:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 517,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2834:54:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 518,
												"nodeType": "ExpressionStatement",
												"src": "2834:54:2"
											},
											{
												"expression": {
													"id": 521,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 519,
														"name": "pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 443,
														"src": "2899:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 520,
														"name": "newPool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 508,
														"src": "2906:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2899:14:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 522,
												"nodeType": "ExpressionStatement",
												"src": "2899:14:2"
											},
											{
												"expression": {
													"id": 529,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 523,
														"name": "token0",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 445,
														"src": "2924:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"arguments": [
																	{
																		"id": 525,
																		"name": "pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 443,
																		"src": "2950:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 524,
																	"name": "ICLPoolConstants",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1563,
																	"src": "2933:16:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_ICLPoolConstants_$1563_$",
																		"typeString": "type(contract ICLPoolConstants)"
																	}
																},
																"id": 526,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2933:22:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_ICLPoolConstants_$1563",
																	"typeString": "contract ICLPoolConstants"
																}
															},
															"id": 527,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "token0",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1526,
															"src": "2933:29:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
																"typeString": "function () view external returns (address)"
															}
														},
														"id": 528,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2933:31:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2924:40:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 530,
												"nodeType": "ExpressionStatement",
												"src": "2924:40:2"
											},
											{
												"expression": {
													"id": 537,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 531,
														"name": "token1",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 447,
														"src": "2975:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"arguments": [
																	{
																		"id": 533,
																		"name": "pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 443,
																		"src": "3001:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 532,
																	"name": "ICLPoolConstants",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1563,
																	"src": "2984:16:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_ICLPoolConstants_$1563_$",
																		"typeString": "type(contract ICLPoolConstants)"
																	}
																},
																"id": 534,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2984:22:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_ICLPoolConstants_$1563",
																	"typeString": "contract ICLPoolConstants"
																}
															},
															"id": 535,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "token1",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1532,
															"src": "2984:29:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
																"typeString": "function () view external returns (address)"
															}
														},
														"id": 536,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2984:31:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2975:40:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 538,
												"nodeType": "ExpressionStatement",
												"src": "2975:40:2"
											},
											{
												"expression": {
													"id": 545,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 539,
														"name": "farmNFT",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 449,
														"src": "3026:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"arguments": [
																	{
																		"id": 541,
																		"name": "pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 443,
																		"src": "3053:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 540,
																	"name": "ICLPoolConstants",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1563,
																	"src": "3036:16:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_ICLPoolConstants_$1563_$",
																		"typeString": "type(contract ICLPoolConstants)"
																	}
																},
																"id": 542,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3036:22:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_ICLPoolConstants_$1563",
																	"typeString": "contract ICLPoolConstants"
																}
															},
															"id": 543,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "nft",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1544,
															"src": "3036:26:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
																"typeString": "function () view external returns (address)"
															}
														},
														"id": 544,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3036:28:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3026:38:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 546,
												"nodeType": "ExpressionStatement",
												"src": "3026:38:2"
											},
											{
												"expression": {
													"id": 553,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 547,
														"name": "tickSpacing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 453,
														"src": "3075:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"arguments": [
																	{
																		"id": 549,
																		"name": "pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 443,
																		"src": "3106:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 548,
																	"name": "ICLPoolConstants",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1563,
																	"src": "3089:16:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_ICLPoolConstants_$1563_$",
																		"typeString": "type(contract ICLPoolConstants)"
																	}
																},
																"id": 550,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3089:22:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_ICLPoolConstants_$1563",
																	"typeString": "contract ICLPoolConstants"
																}
															},
															"id": 551,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "tickSpacing",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1556,
															"src": "3089:34:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$__$returns$_t_int24_$",
																"typeString": "function () view external returns (int24)"
															}
														},
														"id": 552,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3089:36:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "3075:50:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"id": 554,
												"nodeType": "ExpressionStatement",
												"src": "3075:50:2"
											}
										]
									},
									"functionSelector": "d2aca8cd",
									"id": 556,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_newPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 509,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 508,
												"mutability": "mutable",
												"name": "newPool",
												"nodeType": "VariableDeclaration",
												"scope": 556,
												"src": "2797:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 507,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2797:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2796:17:2"
									},
									"returnParameters": {
										"id": 510,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2823:0:2"
									},
									"scope": 814,
									"src": "2779:354:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 646,
										"nodeType": "Block",
										"src": "3193:1113:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 564,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 562,
																"name": "amountIn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 558,
																"src": "3212:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 563,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3223:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3212:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c696420696e70757420616d6f756e74",
															"id": 565,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3226:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_71128eeb4fd76da6a8355c9d10e3d97be1d2b0195b0030a1450235b9a3ac80cf",
																"typeString": "literal_string \"Invalid input amount\""
															},
															"value": "Invalid input amount"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_71128eeb4fd76da6a8355c9d10e3d97be1d2b0195b0030a1450235b9a3ac80cf",
																"typeString": "literal_string \"Invalid input amount\""
															}
														],
														"id": 561,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3204:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 566,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3204:45:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 567,
												"nodeType": "ExpressionStatement",
												"src": "3204:45:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 572,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3290:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 573,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3290:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"arguments": [
																{
																	"id": 576,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3310:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_V3Swap_$814",
																		"typeString": "contract V3Swap"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_V3Swap_$814",
																		"typeString": "contract V3Swap"
																	}
																],
																"id": 575,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3302:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 574,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3302:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 577,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3302:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 578,
															"name": "amountIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 558,
															"src": "3317:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 569,
																	"name": "token0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 445,
																	"src": "3269:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 568,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 439,
																"src": "3262:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$439_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 570,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3262:14:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$439",
																"typeString": "contract IERC20"
															}
														},
														"id": 571,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 433,
														"src": "3262:27:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,address,uint256) external returns (bool)"
														}
													},
													"id": 579,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3262:64:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 580,
												"nodeType": "ExpressionStatement",
												"src": "3262:64:2"
											},
											{
												"assignments": [
													582,
													null,
													null,
													null,
													null,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 582,
														"mutability": "mutable",
														"name": "sqrtPriceX96",
														"nodeType": "VariableDeclaration",
														"scope": 646,
														"src": "3391:20:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"typeName": {
															"id": 581,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "3391:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"visibility": "internal"
													},
													null,
													null,
													null,
													null,
													null
												],
												"id": 588,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"arguments": [
																{
																	"id": 584,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 443,
																	"src": "3438:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 583,
																"name": "ICLPoolState",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1899,
																"src": "3425:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ICLPoolState_$1899_$",
																	"typeString": "type(contract ICLPoolState)"
																}
															},
															"id": 585,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3425:18:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ICLPoolState_$1899",
																"typeString": "contract ICLPoolState"
															}
														},
														"id": 586,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "slot0",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1742,
														"src": "3425:24:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$__$returns$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_bool_$",
															"typeString": "function () view external returns (uint160,int24,uint16,uint16,uint16,bool)"
														}
													},
													"id": 587,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3425:26:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_bool_$",
														"typeString": "tuple(uint160,int24,uint16,uint16,uint16,bool)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3390:61:2"
											},
											{
												"assignments": [
													590
												],
												"declarations": [
													{
														"constant": false,
														"id": 590,
														"mutability": "mutable",
														"name": "sqrtPriceLimitX96",
														"nodeType": "VariableDeclaration",
														"scope": 646,
														"src": "3462:25:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"typeName": {
															"id": 589,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "3462:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 599,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															"id": 597,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 595,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 593,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 582,
																	"src": "3498:12:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"hexValue": "3939",
																	"id": 594,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3513:2:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_99_by_1",
																		"typeString": "int_const 99"
																	},
																	"value": "99"
																},
																"src": "3498:17:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"hexValue": "313030",
																"id": 596,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3518:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"value": "100"
															},
															"src": "3498:23:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														],
														"id": 592,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "3490:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint160_$",
															"typeString": "type(uint160)"
														},
														"typeName": {
															"id": 591,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "3490:7:2",
															"typeDescriptions": {}
														}
													},
													"id": 598,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3490:32:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3462:60:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 603,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 600,
														"name": "sqrtPriceLimitX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 590,
														"src": "3585:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<=",
													"rightExpression": {
														"expression": {
															"id": 601,
															"name": "TickMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 5072,
															"src": "3606:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_TickMath_$5072_$",
																"typeString": "type(library TickMath)"
															}
														},
														"id": 602,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "MIN_SQRT_RATIO",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 4554,
														"src": "3606:23:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "3585:44:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 612,
												"nodeType": "IfStatement",
												"src": "3581:124:2",
												"trueBody": {
													"id": 611,
													"nodeType": "Block",
													"src": "3631:74:2",
													"statements": [
														{
															"expression": {
																"id": 609,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 604,
																	"name": "sqrtPriceLimitX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 590,
																	"src": "3646:17:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	},
																	"id": 608,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 605,
																			"name": "TickMath",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 5072,
																			"src": "3666:8:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_TickMath_$5072_$",
																				"typeString": "type(library TickMath)"
																			}
																		},
																		"id": 606,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "MIN_SQRT_RATIO",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 4554,
																		"src": "3666:23:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 607,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3692:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "3666:27:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "3646:47:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"id": 610,
															"nodeType": "ExpressionStatement",
															"src": "3646:47:2"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 617,
															"name": "pool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 443,
															"src": "3788:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 618,
															"name": "amountIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 558,
															"src": "3794:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 614,
																	"name": "token0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 445,
																	"src": "3772:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 613,
																"name": "IERC20Minimal",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1153,
																"src": "3758:13:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20Minimal_$1153_$",
																	"typeString": "type(contract IERC20Minimal)"
																}
															},
															"id": 615,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3758:21:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Minimal_$1153",
																"typeString": "contract IERC20Minimal"
															}
														},
														"id": 616,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "approve",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1122,
														"src": "3758:29:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 619,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3758:45:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 620,
												"nodeType": "ExpressionStatement",
												"src": "3758:45:2"
											},
											{
												"assignments": [
													622
												],
												"declarations": [
													{
														"constant": false,
														"id": 622,
														"mutability": "mutable",
														"name": "data",
														"nodeType": "VariableDeclaration",
														"scope": 646,
														"src": "3912:17:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 621,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3912:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 630,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 627,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3951:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_V3Swap_$814",
																		"typeString": "contract V3Swap"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_V3Swap_$814",
																		"typeString": "contract V3Swap"
																	}
																],
																"id": 626,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3943:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 625,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3943:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 628,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3943:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 623,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "3932:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 624,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "encode",
														"nodeType": "MemberAccess",
														"src": "3932:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 629,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3932:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3912:45:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 635,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4052:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 636,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4052:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"hexValue": "74727565",
															"id": 637,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4094:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"arguments": [
																{
																	"id": 640,
																	"name": "amountIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 558,
																	"src": "4165:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 639,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4158:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_int256_$",
																	"typeString": "type(int256)"
																},
																"typeName": {
																	"id": 638,
																	"name": "int256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4158:6:2",
																	"typeDescriptions": {}
																}
															},
															"id": 641,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4158:16:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														{
															"id": 642,
															"name": "sqrtPriceLimitX96",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 590,
															"src": "4205:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														{
															"id": 643,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 622,
															"src": "4252:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 632,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 443,
																	"src": "4027:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 631,
																"name": "ICLPoolActions",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1511,
																"src": "4012:14:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ICLPoolActions_$1511_$",
																	"typeString": "type(contract ICLPoolActions)"
																}
															},
															"id": 633,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4012:20:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ICLPoolActions_$1511",
																"typeString": "contract ICLPoolActions"
															}
														},
														"id": 634,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "swap",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1478,
														"src": "4012:25:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_bool_$_t_int256_$_t_uint160_$_t_bytes_memory_ptr_$returns$_t_int256_$_t_int256_$",
															"typeString": "function (address,bool,int256,uint160,bytes memory) external returns (int256,int256)"
														}
													},
													"id": 644,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4012:286:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$",
														"typeString": "tuple(int256,int256)"
													}
												},
												"id": 645,
												"nodeType": "ExpressionStatement",
												"src": "4012:286:2"
											}
										]
									},
									"functionSelector": "db638298",
									"id": 647,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "Swap0for1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 559,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 558,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 647,
												"src": "3160:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 557,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3160:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3159:18:2"
									},
									"returnParameters": {
										"id": 560,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3193:0:2"
									},
									"scope": 814,
									"src": "3141:1165:2",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 737,
										"nodeType": "Block",
										"src": "4366:1115:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 655,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 653,
																"name": "amountIn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 649,
																"src": "4385:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 654,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4396:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4385:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c696420696e70757420616d6f756e74",
															"id": 656,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4399:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_71128eeb4fd76da6a8355c9d10e3d97be1d2b0195b0030a1450235b9a3ac80cf",
																"typeString": "literal_string \"Invalid input amount\""
															},
															"value": "Invalid input amount"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_71128eeb4fd76da6a8355c9d10e3d97be1d2b0195b0030a1450235b9a3ac80cf",
																"typeString": "literal_string \"Invalid input amount\""
															}
														],
														"id": 652,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4377:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 657,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4377:45:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 658,
												"nodeType": "ExpressionStatement",
												"src": "4377:45:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 663,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4463:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 664,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4463:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"arguments": [
																{
																	"id": 667,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "4483:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_V3Swap_$814",
																		"typeString": "contract V3Swap"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_V3Swap_$814",
																		"typeString": "contract V3Swap"
																	}
																],
																"id": 666,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4475:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 665,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4475:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 668,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4475:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 669,
															"name": "amountIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 649,
															"src": "4490:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 660,
																	"name": "token1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 447,
																	"src": "4442:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 659,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 439,
																"src": "4435:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$439_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 661,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4435:14:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$439",
																"typeString": "contract IERC20"
															}
														},
														"id": 662,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 433,
														"src": "4435:27:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,address,uint256) external returns (bool)"
														}
													},
													"id": 670,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4435:64:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 671,
												"nodeType": "ExpressionStatement",
												"src": "4435:64:2"
											},
											{
												"assignments": [
													673,
													null,
													null,
													null,
													null,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 673,
														"mutability": "mutable",
														"name": "sqrtPriceX96",
														"nodeType": "VariableDeclaration",
														"scope": 737,
														"src": "4564:20:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"typeName": {
															"id": 672,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "4564:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"visibility": "internal"
													},
													null,
													null,
													null,
													null,
													null
												],
												"id": 679,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"arguments": [
																{
																	"id": 675,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 443,
																	"src": "4611:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 674,
																"name": "ICLPoolState",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1899,
																"src": "4598:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ICLPoolState_$1899_$",
																	"typeString": "type(contract ICLPoolState)"
																}
															},
															"id": 676,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4598:18:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ICLPoolState_$1899",
																"typeString": "contract ICLPoolState"
															}
														},
														"id": 677,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "slot0",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1742,
														"src": "4598:24:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$__$returns$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_bool_$",
															"typeString": "function () view external returns (uint160,int24,uint16,uint16,uint16,bool)"
														}
													},
													"id": 678,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4598:26:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_bool_$",
														"typeString": "tuple(uint160,int24,uint16,uint16,uint16,bool)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4563:61:2"
											},
											{
												"assignments": [
													681
												],
												"declarations": [
													{
														"constant": false,
														"id": 681,
														"mutability": "mutable",
														"name": "sqrtPriceLimitX96",
														"nodeType": "VariableDeclaration",
														"scope": 737,
														"src": "4635:25:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"typeName": {
															"id": 680,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "4635:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 690,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															"id": 688,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 686,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 684,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 673,
																	"src": "4671:12:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"hexValue": "313031",
																	"id": 685,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4686:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_101_by_1",
																		"typeString": "int_const 101"
																	},
																	"value": "101"
																},
																"src": "4671:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"hexValue": "313030",
																"id": 687,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4692:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"value": "100"
															},
															"src": "4671:24:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														],
														"id": 683,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "4663:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint160_$",
															"typeString": "type(uint160)"
														},
														"typeName": {
															"id": 682,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "4663:7:2",
															"typeDescriptions": {}
														}
													},
													"id": 689,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4663:33:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4635:61:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 694,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 691,
														"name": "sqrtPriceLimitX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 681,
														"src": "4759:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<=",
													"rightExpression": {
														"expression": {
															"id": 692,
															"name": "TickMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 5072,
															"src": "4780:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_TickMath_$5072_$",
																"typeString": "type(library TickMath)"
															}
														},
														"id": 693,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "MIN_SQRT_RATIO",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 4554,
														"src": "4780:23:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "4759:44:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 703,
												"nodeType": "IfStatement",
												"src": "4755:124:2",
												"trueBody": {
													"id": 702,
													"nodeType": "Block",
													"src": "4805:74:2",
													"statements": [
														{
															"expression": {
																"id": 700,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 695,
																	"name": "sqrtPriceLimitX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 681,
																	"src": "4820:17:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	},
																	"id": 699,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 696,
																			"name": "TickMath",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 5072,
																			"src": "4840:8:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_TickMath_$5072_$",
																				"typeString": "type(library TickMath)"
																			}
																		},
																		"id": 697,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "MIN_SQRT_RATIO",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 4554,
																		"src": "4840:23:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 698,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4866:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "4840:27:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "4820:47:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"id": 701,
															"nodeType": "ExpressionStatement",
															"src": "4820:47:2"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 708,
															"name": "pool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 443,
															"src": "4962:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 709,
															"name": "amountIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 649,
															"src": "4968:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 705,
																	"name": "token1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 447,
																	"src": "4946:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 704,
																"name": "IERC20Minimal",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1153,
																"src": "4932:13:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20Minimal_$1153_$",
																	"typeString": "type(contract IERC20Minimal)"
																}
															},
															"id": 706,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4932:21:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Minimal_$1153",
																"typeString": "contract IERC20Minimal"
															}
														},
														"id": 707,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "approve",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1122,
														"src": "4932:29:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 710,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4932:45:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 711,
												"nodeType": "ExpressionStatement",
												"src": "4932:45:2"
											},
											{
												"assignments": [
													713
												],
												"declarations": [
													{
														"constant": false,
														"id": 713,
														"mutability": "mutable",
														"name": "data",
														"nodeType": "VariableDeclaration",
														"scope": 737,
														"src": "5086:17:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 712,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5086:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 721,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 718,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "5125:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_V3Swap_$814",
																		"typeString": "contract V3Swap"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_V3Swap_$814",
																		"typeString": "contract V3Swap"
																	}
																],
																"id": 717,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5117:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 716,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5117:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 719,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5117:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 714,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "5106:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 715,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "encode",
														"nodeType": "MemberAccess",
														"src": "5106:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 720,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5106:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5086:45:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 726,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5226:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 727,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5226:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"hexValue": "66616c7365",
															"id": 728,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5268:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "false"
														},
														{
															"arguments": [
																{
																	"id": 731,
																	"name": "amountIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 649,
																	"src": "5340:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 730,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5333:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_int256_$",
																	"typeString": "type(int256)"
																},
																"typeName": {
																	"id": 729,
																	"name": "int256",
																	"nodeType": "ElementaryTypeName",
																	"src": "5333:6:2",
																	"typeDescriptions": {}
																}
															},
															"id": 732,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5333:16:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														{
															"id": 733,
															"name": "sqrtPriceLimitX96",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 681,
															"src": "5380:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														{
															"id": 734,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 713,
															"src": "5427:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 723,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 443,
																	"src": "5201:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 722,
																"name": "ICLPoolActions",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1511,
																"src": "5186:14:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ICLPoolActions_$1511_$",
																	"typeString": "type(contract ICLPoolActions)"
																}
															},
															"id": 724,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5186:20:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ICLPoolActions_$1511",
																"typeString": "contract ICLPoolActions"
															}
														},
														"id": 725,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "swap",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1478,
														"src": "5186:25:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_bool_$_t_int256_$_t_uint160_$_t_bytes_memory_ptr_$returns$_t_int256_$_t_int256_$",
															"typeString": "function (address,bool,int256,uint160,bytes memory) external returns (int256,int256)"
														}
													},
													"id": 735,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5186:287:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$",
														"typeString": "tuple(int256,int256)"
													}
												},
												"id": 736,
												"nodeType": "ExpressionStatement",
												"src": "5186:287:2"
											}
										]
									},
									"functionSelector": "eb20ad47",
									"id": 738,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "Swap1for0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 650,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 649,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 738,
												"src": "4333:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 648,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4333:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4332:18:2"
									},
									"returnParameters": {
										"id": 651,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4366:0:2"
									},
									"scope": 814,
									"src": "4314:1167:2",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1334
									],
									"body": {
										"id": 788,
										"nodeType": "Block",
										"src": "5711:507:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 752,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 749,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "5730:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 750,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "5730:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 751,
																"name": "pool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 443,
																"src": "5744:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "5730:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43616c6c6261636b206f6e6c792066726f6d20706f6f6c",
															"id": 753,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5750:25:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_bff4c104f39e47a163d0cb9a612fb38cc6d016a74062770b58bcdc30c5de72ee",
																"typeString": "literal_string \"Callback only from pool\""
															},
															"value": "Callback only from pool"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_bff4c104f39e47a163d0cb9a612fb38cc6d016a74062770b58bcdc30c5de72ee",
																"typeString": "literal_string \"Callback only from pool\""
															}
														],
														"id": 748,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5722:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 754,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5722:54:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 755,
												"nodeType": "ExpressionStatement",
												"src": "5722:54:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 758,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 756,
														"name": "amount0Delta",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 740,
														"src": "5872:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 757,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5887:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5872:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 771,
												"nodeType": "IfStatement",
												"src": "5868:108:2",
												"trueBody": {
													"id": 770,
													"nodeType": "Block",
													"src": "5890:86:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 763,
																		"name": "pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 443,
																		"src": "5936:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"id": 766,
																				"name": "amount0Delta",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 740,
																				"src": "5950:12:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			],
																			"id": 765,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5942:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 764,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "5942:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 767,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5942:21:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 760,
																				"name": "token0",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 445,
																				"src": "5919:6:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 759,
																			"name": "IERC20Minimal",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1153,
																			"src": "5905:13:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20Minimal_$1153_$",
																				"typeString": "type(contract IERC20Minimal)"
																			}
																		},
																		"id": 761,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5905:21:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20Minimal_$1153",
																			"typeString": "contract IERC20Minimal"
																		}
																	},
																	"id": 762,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1102,
																	"src": "5905:30:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																"id": 768,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5905:59:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 769,
															"nodeType": "ExpressionStatement",
															"src": "5905:59:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 774,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 772,
														"name": "amount1Delta",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 742,
														"src": "6107:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 773,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6122:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6107:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 787,
												"nodeType": "IfStatement",
												"src": "6103:108:2",
												"trueBody": {
													"id": 786,
													"nodeType": "Block",
													"src": "6125:86:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 779,
																		"name": "pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 443,
																		"src": "6171:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"id": 782,
																				"name": "amount1Delta",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 742,
																				"src": "6185:12:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			],
																			"id": 781,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6177:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 780,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "6177:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 783,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6177:21:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 776,
																				"name": "token1",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 447,
																				"src": "6154:6:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 775,
																			"name": "IERC20Minimal",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1153,
																			"src": "6140:13:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20Minimal_$1153_$",
																				"typeString": "type(contract IERC20Minimal)"
																			}
																		},
																		"id": 777,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6140:21:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20Minimal_$1153",
																			"typeString": "contract IERC20Minimal"
																		}
																	},
																	"id": 778,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1102,
																	"src": "6140:30:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																"id": 784,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6140:59:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 785,
															"nodeType": "ExpressionStatement",
															"src": "6140:59:2"
														}
													]
												}
											}
										]
									},
									"functionSelector": "fa461e33",
									"id": 789,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "uniswapV3SwapCallback",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 746,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5702:8:2"
									},
									"parameters": {
										"id": 745,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 740,
												"mutability": "mutable",
												"name": "amount0Delta",
												"nodeType": "VariableDeclaration",
												"scope": 789,
												"src": "5600:19:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 739,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "5600:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 742,
												"mutability": "mutable",
												"name": "amount1Delta",
												"nodeType": "VariableDeclaration",
												"scope": 789,
												"src": "5630:19:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 741,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "5630:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 744,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 789,
												"src": "5660:14:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 743,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5660:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5589:103:2"
									},
									"returnParameters": {
										"id": 747,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5711:0:2"
									},
									"scope": 814,
									"src": "5559:659:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 812,
										"nodeType": "Block",
										"src": "6296:126:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 800,
															"name": "farmNFT",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 449,
															"src": "6337:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 801,
															"name": "approve0",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 791,
															"src": "6346:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 797,
																	"name": "token0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 445,
																	"src": "6321:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 796,
																"name": "IERC20Minimal",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1153,
																"src": "6307:13:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20Minimal_$1153_$",
																	"typeString": "type(contract IERC20Minimal)"
																}
															},
															"id": 798,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6307:21:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Minimal_$1153",
																"typeString": "contract IERC20Minimal"
															}
														},
														"id": 799,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "approve",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1122,
														"src": "6307:29:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 802,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6307:48:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 803,
												"nodeType": "ExpressionStatement",
												"src": "6307:48:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 808,
															"name": "farmNFT",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 449,
															"src": "6396:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 809,
															"name": "approve1",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 793,
															"src": "6405:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 805,
																	"name": "token1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 447,
																	"src": "6380:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 804,
																"name": "IERC20Minimal",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1153,
																"src": "6366:13:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20Minimal_$1153_$",
																	"typeString": "type(contract IERC20Minimal)"
																}
															},
															"id": 806,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6366:21:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Minimal_$1153",
																"typeString": "contract IERC20Minimal"
															}
														},
														"id": 807,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "approve",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1122,
														"src": "6366:29:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 810,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6366:48:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 811,
												"nodeType": "ExpressionStatement",
												"src": "6366:48:2"
											}
										]
									},
									"functionSelector": "1c335703",
									"id": 813,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approveTokens",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 794,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 791,
												"mutability": "mutable",
												"name": "approve0",
												"nodeType": "VariableDeclaration",
												"scope": 813,
												"src": "6249:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 790,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "6249:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 793,
												"mutability": "mutable",
												"name": "approve1",
												"nodeType": "VariableDeclaration",
												"scope": 813,
												"src": "6264:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 792,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "6264:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6248:30:2"
									},
									"returnParameters": {
										"id": 795,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6296:0:2"
									},
									"scope": 814,
									"src": "6226:196:2",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 815,
							"src": "1900:4527:2"
						}
					],
					"src": "33:6394:2"
				},
				"id": 2
			},
			"contracts/core/interfaces/ICLFactory.sol": {
				"ast": {
					"absolutePath": "contracts/core/interfaces/ICLFactory.sol",
					"exportedSymbols": {
						"ICLFactory": [
							1059
						],
						"IFactoryRegistry": [
							1181
						],
						"IVoter": [
							1289
						]
					},
					"id": 1060,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 816,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:3"
						},
						{
							"absolutePath": "contracts/core/interfaces/IVoter.sol",
							"file": "contracts/core/interfaces/IVoter.sol",
							"id": 818,
							"nodeType": "ImportDirective",
							"scope": 1060,
							"sourceUnit": 1290,
							"src": "71:60:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 817,
										"name": "IVoter",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "79:6:3",
										"typeDescriptions": {}
									}
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/interfaces/IFactoryRegistry.sol",
							"file": "contracts/core/interfaces/IFactoryRegistry.sol",
							"id": 820,
							"nodeType": "ImportDirective",
							"scope": 1060,
							"sourceUnit": 1182,
							"src": "132:80:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 819,
										"name": "IFactoryRegistry",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "140:16:3",
										"typeDescriptions": {}
									}
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 821,
								"nodeType": "StructuredDocumentation",
								"src": "214:139:3",
								"text": "@title The interface for the CL Factory\n @notice The CL Factory facilitates creation of CL pools and control over the protocol fees"
							},
							"fullyImplemented": false,
							"id": 1059,
							"linearizedBaseContracts": [
								1059
							],
							"name": "ICLFactory",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 822,
										"nodeType": "StructuredDocumentation",
										"src": "380:185:3",
										"text": "@notice Emitted when the owner of the factory is changed\n @param oldOwner The owner before the owner was changed\n @param newOwner The owner after the owner was changed"
									},
									"id": 828,
									"name": "OwnerChanged",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 827,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 824,
												"indexed": true,
												"mutability": "mutable",
												"name": "oldOwner",
												"nodeType": "VariableDeclaration",
												"scope": 828,
												"src": "589:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 823,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "589:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 826,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 828,
												"src": "615:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 825,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "615:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "588:52:3"
									},
									"src": "570:71:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 829,
										"nodeType": "StructuredDocumentation",
										"src": "647:240:3",
										"text": "@notice Emitted when the swapFeeManager of the factory is changed\n @param oldFeeManager The swapFeeManager before the swapFeeManager was changed\n @param newFeeManager The swapFeeManager after the swapFeeManager was changed"
									},
									"id": 835,
									"name": "SwapFeeManagerChanged",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 834,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 831,
												"indexed": true,
												"mutability": "mutable",
												"name": "oldFeeManager",
												"nodeType": "VariableDeclaration",
												"scope": 835,
												"src": "920:29:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 830,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "920:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 833,
												"indexed": true,
												"mutability": "mutable",
												"name": "newFeeManager",
												"nodeType": "VariableDeclaration",
												"scope": 835,
												"src": "951:29:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 832,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "951:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "919:62:3"
									},
									"src": "892:90:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 836,
										"nodeType": "StructuredDocumentation",
										"src": "988:233:3",
										"text": "@notice Emitted when the swapFeeModule of the factory is changed\n @param oldFeeModule The swapFeeModule before the swapFeeModule was changed\n @param newFeeModule The swapFeeModule after the swapFeeModule was changed"
									},
									"id": 842,
									"name": "SwapFeeModuleChanged",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 841,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 838,
												"indexed": true,
												"mutability": "mutable",
												"name": "oldFeeModule",
												"nodeType": "VariableDeclaration",
												"scope": 842,
												"src": "1253:28:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 837,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1253:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 840,
												"indexed": true,
												"mutability": "mutable",
												"name": "newFeeModule",
												"nodeType": "VariableDeclaration",
												"scope": 842,
												"src": "1283:28:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 839,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1283:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1252:60:3"
									},
									"src": "1226:87:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 843,
										"nodeType": "StructuredDocumentation",
										"src": "1319:260:3",
										"text": "@notice Emitted when the unstakedFeeManager of the factory is changed\n @param oldFeeManager The unstakedFeeManager before the unstakedFeeManager was changed\n @param newFeeManager The unstakedFeeManager after the unstakedFeeManager was changed"
									},
									"id": 849,
									"name": "UnstakedFeeManagerChanged",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 848,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 845,
												"indexed": true,
												"mutability": "mutable",
												"name": "oldFeeManager",
												"nodeType": "VariableDeclaration",
												"scope": 849,
												"src": "1616:29:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 844,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1616:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 847,
												"indexed": true,
												"mutability": "mutable",
												"name": "newFeeManager",
												"nodeType": "VariableDeclaration",
												"scope": 849,
												"src": "1647:29:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 846,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1647:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1615:62:3"
									},
									"src": "1584:94:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 850,
										"nodeType": "StructuredDocumentation",
										"src": "1684:253:3",
										"text": "@notice Emitted when the unstakedFeeModule of the factory is changed\n @param oldFeeModule The unstakedFeeModule before the unstakedFeeModule was changed\n @param newFeeModule The unstakedFeeModule after the unstakedFeeModule was changed"
									},
									"id": 856,
									"name": "UnstakedFeeModuleChanged",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 855,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 852,
												"indexed": true,
												"mutability": "mutable",
												"name": "oldFeeModule",
												"nodeType": "VariableDeclaration",
												"scope": 856,
												"src": "1973:28:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 851,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1973:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 854,
												"indexed": true,
												"mutability": "mutable",
												"name": "newFeeModule",
												"nodeType": "VariableDeclaration",
												"scope": 856,
												"src": "2003:28:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 853,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2003:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1972:60:3"
									},
									"src": "1942:91:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 857,
										"nodeType": "StructuredDocumentation",
										"src": "2039:261:3",
										"text": "@notice Emitted when the defaultUnstakedFee of the factory is changed\n @param oldUnstakedFee The defaultUnstakedFee before the defaultUnstakedFee was changed\n @param newUnstakedFee The defaultUnstakedFee after the unstakedFeeModule was changed"
									},
									"id": 863,
									"name": "DefaultUnstakedFeeChanged",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 862,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 859,
												"indexed": true,
												"mutability": "mutable",
												"name": "oldUnstakedFee",
												"nodeType": "VariableDeclaration",
												"scope": 863,
												"src": "2337:29:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 858,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "2337:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 861,
												"indexed": true,
												"mutability": "mutable",
												"name": "newUnstakedFee",
												"nodeType": "VariableDeclaration",
												"scope": 863,
												"src": "2368:29:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 860,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "2368:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2336:62:3"
									},
									"src": "2305:94:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 864,
										"nodeType": "StructuredDocumentation",
										"src": "2405:320:3",
										"text": "@notice Emitted when a pool is created\n @param token0 The first token of the pool by address sort order\n @param token1 The second token of the pool by address sort order\n @param tickSpacing The minimum number of ticks between initialized ticks\n @param pool The address of the created pool"
									},
									"id": 874,
									"name": "PoolCreated",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 873,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 866,
												"indexed": true,
												"mutability": "mutable",
												"name": "token0",
												"nodeType": "VariableDeclaration",
												"scope": 874,
												"src": "2748:22:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 865,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2748:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 868,
												"indexed": true,
												"mutability": "mutable",
												"name": "token1",
												"nodeType": "VariableDeclaration",
												"scope": 874,
												"src": "2772:22:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 867,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2772:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 870,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 874,
												"src": "2796:25:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 869,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2796:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 872,
												"indexed": false,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 874,
												"src": "2823:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 871,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2823:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2747:89:3"
									},
									"src": "2730:107:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 875,
										"nodeType": "StructuredDocumentation",
										"src": "2843:258:3",
										"text": "@notice Emitted when a new tick spacing is enabled for pool creation via the factory\n @param tickSpacing The minimum number of ticks between initialized ticks for pools\n @param fee The default fee for a pool created with a given tickSpacing"
									},
									"id": 881,
									"name": "TickSpacingEnabled",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 880,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 877,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 881,
												"src": "3131:25:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 876,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3131:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 879,
												"indexed": true,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 881,
												"src": "3158:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 878,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "3158:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3130:47:3"
									},
									"src": "3106:72:3"
								},
								{
									"documentation": {
										"id": 882,
										"nodeType": "StructuredDocumentation",
										"src": "3184:103:3",
										"text": "@notice The voter contract, used to create gauges\n @return The address of the voter contract"
									},
									"functionSelector": "46c96aac",
									"id": 887,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "voter",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 883,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3306:2:3"
									},
									"returnParameters": {
										"id": 886,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 885,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 887,
												"src": "3332:6:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IVoter_$1289",
													"typeString": "contract IVoter"
												},
												"typeName": {
													"id": 884,
													"name": "IVoter",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1289,
													"src": "3332:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IVoter_$1289",
														"typeString": "contract IVoter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3331:8:3"
									},
									"scope": 1059,
									"src": "3292:48:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 888,
										"nodeType": "StructuredDocumentation",
										"src": "3346:155:3",
										"text": "@notice The address of the pool implementation contract used to deploy proxies / clones\n @return The address of the pool implementation contract"
									},
									"functionSelector": "cefa7799",
									"id": 893,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "poolImplementation",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 889,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3533:2:3"
									},
									"returnParameters": {
										"id": 892,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 891,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 893,
												"src": "3559:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 890,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3559:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3558:9:3"
									},
									"scope": 1059,
									"src": "3506:62:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 894,
										"nodeType": "StructuredDocumentation",
										"src": "3574:123:3",
										"text": "@notice Factory registry for valid pool / gauge / rewards factories\n @return The address of the factory registry"
									},
									"functionSelector": "3bf0c9fb",
									"id": 899,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factoryRegistry",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 895,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3726:2:3"
									},
									"returnParameters": {
										"id": 898,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 897,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 899,
												"src": "3752:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IFactoryRegistry_$1181",
													"typeString": "contract IFactoryRegistry"
												},
												"typeName": {
													"id": 896,
													"name": "IFactoryRegistry",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1181,
													"src": "3752:16:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IFactoryRegistry_$1181",
														"typeString": "contract IFactoryRegistry"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3751:18:3"
									},
									"scope": 1059,
									"src": "3702:68:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 900,
										"nodeType": "StructuredDocumentation",
										"src": "3776:163:3",
										"text": "@notice Returns the current owner of the factory\n @dev Can be changed by the current owner via setOwner\n @return The address of the factory owner"
									},
									"functionSelector": "8da5cb5b",
									"id": 905,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 901,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3958:2:3"
									},
									"returnParameters": {
										"id": 904,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 903,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 905,
												"src": "3984:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 902,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3984:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3983:9:3"
									},
									"scope": 1059,
									"src": "3944:49:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 906,
										"nodeType": "StructuredDocumentation",
										"src": "3999:201:3",
										"text": "@notice Returns the current swapFeeManager of the factory\n @dev Can be changed by the current swap fee manager via setSwapFeeManager\n @return The address of the factory swapFeeManager"
									},
									"functionSelector": "d574afa9",
									"id": 911,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "swapFeeManager",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 907,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4228:2:3"
									},
									"returnParameters": {
										"id": 910,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 909,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 911,
												"src": "4254:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 908,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4254:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4253:9:3"
									},
									"scope": 1059,
									"src": "4205:58:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 912,
										"nodeType": "StructuredDocumentation",
										"src": "4269:198:3",
										"text": "@notice Returns the current swapFeeModule of the factory\n @dev Can be changed by the current swap fee manager via setSwapFeeModule\n @return The address of the factory swapFeeModule"
									},
									"functionSelector": "23c43a51",
									"id": 917,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "swapFeeModule",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 913,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4494:2:3"
									},
									"returnParameters": {
										"id": 916,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 915,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 917,
												"src": "4520:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 914,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4520:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4519:9:3"
									},
									"scope": 1059,
									"src": "4472:57:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 918,
										"nodeType": "StructuredDocumentation",
										"src": "4535:217:3",
										"text": "@notice Returns the current unstakedFeeManager of the factory\n @dev Can be changed by the current unstaked fee manager via setUnstakedFeeManager\n @return The address of the factory unstakedFeeManager"
									},
									"functionSelector": "82e189e0",
									"id": 923,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unstakedFeeManager",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 919,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4784:2:3"
									},
									"returnParameters": {
										"id": 922,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 921,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 923,
												"src": "4810:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 920,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4810:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4809:9:3"
									},
									"scope": 1059,
									"src": "4757:62:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 924,
										"nodeType": "StructuredDocumentation",
										"src": "4825:214:3",
										"text": "@notice Returns the current unstakedFeeModule of the factory\n @dev Can be changed by the current unstaked fee manager via setUnstakedFeeModule\n @return The address of the factory unstakedFeeModule"
									},
									"functionSelector": "7693bc11",
									"id": 929,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unstakedFeeModule",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 925,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5070:2:3"
									},
									"returnParameters": {
										"id": 928,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 927,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 929,
												"src": "5096:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 926,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5096:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5095:9:3"
									},
									"scope": 1059,
									"src": "5044:61:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 930,
										"nodeType": "StructuredDocumentation",
										"src": "5111:211:3",
										"text": "@notice Returns the current defaultUnstakedFee of the factory\n @dev Can be changed by the current unstaked fee manager via setDefaultUnstakedFee\n @return The default Unstaked Fee of the factory"
									},
									"functionSelector": "e2824832",
									"id": 935,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "defaultUnstakedFee",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 931,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5354:2:3"
									},
									"returnParameters": {
										"id": 934,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 933,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 935,
												"src": "5380:6:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 932,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "5380:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5379:8:3"
									},
									"scope": 1059,
									"src": "5327:61:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 936,
										"nodeType": "StructuredDocumentation",
										"src": "5394:377:3",
										"text": "@notice Returns a default fee for a tick spacing.\n @dev Use getFee for the most up to date fee for a given pool.\n A tick spacing can never be removed, so this value should be hard coded or cached in the calling context\n @param tickSpacing The enabled tick spacing. Returns 0 if not enabled\n @return fee The default fee for the given tick spacing"
									},
									"functionSelector": "380dc1c2",
									"id": 943,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tickSpacingToFee",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 939,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 938,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 943,
												"src": "5802:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 937,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "5802:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5801:19:3"
									},
									"returnParameters": {
										"id": 942,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 941,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 943,
												"src": "5844:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 940,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "5844:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5843:12:3"
									},
									"scope": 1059,
									"src": "5776:80:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 944,
										"nodeType": "StructuredDocumentation",
										"src": "5862:227:3",
										"text": "@notice Returns a list of enabled tick spacings. Used to iterate through pools created by the factory\n @dev Tick spacings cannot be removed. Tick spacings are not ordered\n @return List of enabled tick spacings"
									},
									"functionSelector": "9cbbbe86",
									"id": 950,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tickSpacings",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 945,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6115:2:3"
									},
									"returnParameters": {
										"id": 949,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 948,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 950,
												"src": "6141:14:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_int24_$dyn_memory_ptr",
													"typeString": "int24[]"
												},
												"typeName": {
													"baseType": {
														"id": 946,
														"name": "int24",
														"nodeType": "ElementaryTypeName",
														"src": "6141:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"id": 947,
													"nodeType": "ArrayTypeName",
													"src": "6141:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_int24_$dyn_storage_ptr",
														"typeString": "int24[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6140:16:3"
									},
									"scope": 1059,
									"src": "6094:63:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 951,
										"nodeType": "StructuredDocumentation",
										"src": "6163:435:3",
										"text": "@notice Returns the pool address for a given pair of tokens and a tick spacing, or address 0 if it does not exist\n @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n @param tokenA The contract address of either token0 or token1\n @param tokenB The contract address of the other token\n @param tickSpacing The tick spacing of the pool\n @return pool The pool address"
									},
									"functionSelector": "28af8d0b",
									"id": 962,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 958,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 953,
												"mutability": "mutable",
												"name": "tokenA",
												"nodeType": "VariableDeclaration",
												"scope": 962,
												"src": "6620:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 952,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6620:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 955,
												"mutability": "mutable",
												"name": "tokenB",
												"nodeType": "VariableDeclaration",
												"scope": 962,
												"src": "6636:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 954,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6636:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 957,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 962,
												"src": "6652:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 956,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "6652:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6619:51:3"
									},
									"returnParameters": {
										"id": 961,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 960,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 962,
												"src": "6694:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 959,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6694:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6693:14:3"
									},
									"scope": 1059,
									"src": "6603:105:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 963,
										"nodeType": "StructuredDocumentation",
										"src": "6714:167:3",
										"text": "@notice Return address of pool created by this factory given its `index`\n @param index Index of the pool\n @return The pool address in the given index"
									},
									"functionSelector": "41d1de97",
									"id": 970,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allPools",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 966,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 965,
												"mutability": "mutable",
												"name": "index",
												"nodeType": "VariableDeclaration",
												"scope": 970,
												"src": "6904:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 964,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6904:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6903:15:3"
									},
									"returnParameters": {
										"id": 969,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 968,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 970,
												"src": "6942:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 967,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6942:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6941:9:3"
									},
									"scope": 1059,
									"src": "6886:65:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 971,
										"nodeType": "StructuredDocumentation",
										"src": "6957:123:3",
										"text": "@notice Returns the number of pools created from this factory\n @return Number of pools created from this factory"
									},
									"functionSelector": "efde4e64",
									"id": 976,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allPoolsLength",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 972,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7108:2:3"
									},
									"returnParameters": {
										"id": 975,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 974,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 976,
												"src": "7134:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 973,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7134:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7133:9:3"
									},
									"scope": 1059,
									"src": "7085:58:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 977,
										"nodeType": "StructuredDocumentation",
										"src": "7149:207:3",
										"text": "@notice Used in VotingEscrow to determine if a contract is a valid pool of the factory\n @param pool The address of the pool to check\n @return Whether the pool is a valid pool of the factory"
									},
									"functionSelector": "e5e31b13",
									"id": 984,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isPair",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 980,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 979,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 984,
												"src": "7377:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 978,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7377:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7376:14:3"
									},
									"returnParameters": {
										"id": 983,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 982,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 984,
												"src": "7414:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 981,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7414:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7413:6:3"
									},
									"scope": 1059,
									"src": "7361:59:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 985,
										"nodeType": "StructuredDocumentation",
										"src": "7426:269:3",
										"text": "@notice Get swap & flash fee for a given pool. Accounts for default and dynamic fees\n @dev Swap & flash fee is denominated in pips. i.e. 1e-6\n @param pool The pool to get the swap & flash fee for\n @return The swap & flash fee for the given pool"
									},
									"functionSelector": "35458dcc",
									"id": 992,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getSwapFee",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 988,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 987,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 992,
												"src": "7720:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 986,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7720:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7719:14:3"
									},
									"returnParameters": {
										"id": 991,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 990,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 992,
												"src": "7757:6:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 989,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "7757:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7756:8:3"
									},
									"scope": 1059,
									"src": "7700:65:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 993,
										"nodeType": "StructuredDocumentation",
										"src": "7771:253:3",
										"text": "@notice Get unstaked fee for a given pool. Accounts for default and dynamic fees\n @dev Unstaked fee is denominated in pips. i.e. 1e-6\n @param pool The pool to get the unstaked fee for\n @return The unstaked fee for the given pool"
									},
									"functionSelector": "48cf7a43",
									"id": 1000,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getUnstakedFee",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 996,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 995,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 1000,
												"src": "8053:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 994,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8053:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8052:14:3"
									},
									"returnParameters": {
										"id": 999,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 998,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1000,
												"src": "8090:6:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 997,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "8090:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8089:8:3"
									},
									"scope": 1059,
									"src": "8029:69:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1001,
										"nodeType": "StructuredDocumentation",
										"src": "8104:608:3",
										"text": "@notice Creates a pool for the given two tokens and fee\n @param tokenA One of the two tokens in the desired pool\n @param tokenB The other of the two tokens in the desired pool\n @param tickSpacing The desired tick spacing for the pool\n @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. The call will\n revert if the pool already exists, the tick spacing is invalid, or the token arguments are invalid\n @return pool The address of the newly created pool"
									},
									"functionSelector": "232aa5ac",
									"id": 1014,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1010,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1003,
												"mutability": "mutable",
												"name": "tokenA",
												"nodeType": "VariableDeclaration",
												"scope": 1014,
												"src": "8737:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1002,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8737:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1005,
												"mutability": "mutable",
												"name": "tokenB",
												"nodeType": "VariableDeclaration",
												"scope": 1014,
												"src": "8753:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1004,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8753:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1007,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 1014,
												"src": "8769:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1006,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "8769:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1009,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 1014,
												"src": "8788:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1008,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "8788:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8736:73:3"
									},
									"returnParameters": {
										"id": 1013,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1012,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 1014,
												"src": "8844:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1011,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8844:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8843:14:3"
									},
									"scope": 1059,
									"src": "8717:141:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1015,
										"nodeType": "StructuredDocumentation",
										"src": "8864:144:3",
										"text": "@notice Updates the owner of the factory\n @dev Must be called by the current owner\n @param _owner The new owner of the factory"
									},
									"functionSelector": "13af4035",
									"id": 1020,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setOwner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1018,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1017,
												"mutability": "mutable",
												"name": "_owner",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "9031:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1016,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9031:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9030:16:3"
									},
									"returnParameters": {
										"id": 1019,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9055:0:3"
									},
									"scope": 1059,
									"src": "9013:43:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1021,
										"nodeType": "StructuredDocumentation",
										"src": "9062:182:3",
										"text": "@notice Updates the swapFeeManager of the factory\n @dev Must be called by the current swap fee manager\n @param _swapFeeManager The new swapFeeManager of the factory"
									},
									"functionSelector": "ffb4d9d1",
									"id": 1026,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setSwapFeeManager",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1024,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1023,
												"mutability": "mutable",
												"name": "_swapFeeManager",
												"nodeType": "VariableDeclaration",
												"scope": 1026,
												"src": "9276:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1022,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9276:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9275:25:3"
									},
									"returnParameters": {
										"id": 1025,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9309:0:3"
									},
									"scope": 1059,
									"src": "9249:61:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1027,
										"nodeType": "StructuredDocumentation",
										"src": "9316:179:3",
										"text": "@notice Updates the swapFeeModule of the factory\n @dev Must be called by the current swap fee manager\n @param _swapFeeModule The new swapFeeModule of the factory"
									},
									"functionSelector": "61b9c3ec",
									"id": 1032,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setSwapFeeModule",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1030,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1029,
												"mutability": "mutable",
												"name": "_swapFeeModule",
												"nodeType": "VariableDeclaration",
												"scope": 1032,
												"src": "9526:22:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1028,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9526:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9525:24:3"
									},
									"returnParameters": {
										"id": 1031,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9558:0:3"
									},
									"scope": 1059,
									"src": "9500:59:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1033,
										"nodeType": "StructuredDocumentation",
										"src": "9565:198:3",
										"text": "@notice Updates the unstakedFeeManager of the factory\n @dev Must be called by the current unstaked fee manager\n @param _unstakedFeeManager The new unstakedFeeManager of the factory"
									},
									"functionSelector": "93ce8627",
									"id": 1038,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setUnstakedFeeManager",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1036,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1035,
												"mutability": "mutable",
												"name": "_unstakedFeeManager",
												"nodeType": "VariableDeclaration",
												"scope": 1038,
												"src": "9799:27:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1034,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9799:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9798:29:3"
									},
									"returnParameters": {
										"id": 1037,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9836:0:3"
									},
									"scope": 1059,
									"src": "9768:69:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1039,
										"nodeType": "StructuredDocumentation",
										"src": "9843:195:3",
										"text": "@notice Updates the unstakedFeeModule of the factory\n @dev Must be called by the current unstaked fee manager\n @param _unstakedFeeModule The new unstakedFeeModule of the factory"
									},
									"functionSelector": "1b31d878",
									"id": 1044,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setUnstakedFeeModule",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1042,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1041,
												"mutability": "mutable",
												"name": "_unstakedFeeModule",
												"nodeType": "VariableDeclaration",
												"scope": 1044,
												"src": "10073:26:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1040,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10073:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10072:28:3"
									},
									"returnParameters": {
										"id": 1043,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10109:0:3"
									},
									"scope": 1059,
									"src": "10043:67:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1045,
										"nodeType": "StructuredDocumentation",
										"src": "10116:198:3",
										"text": "@notice Updates the defaultUnstakedFee of the factory\n @dev Must be called by the current unstaked fee manager\n @param _defaultUnstakedFee The new defaultUnstakedFee of the factory"
									},
									"functionSelector": "a2f97f42",
									"id": 1050,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setDefaultUnstakedFee",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1048,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1047,
												"mutability": "mutable",
												"name": "_defaultUnstakedFee",
												"nodeType": "VariableDeclaration",
												"scope": 1050,
												"src": "10350:26:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1046,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "10350:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10349:28:3"
									},
									"returnParameters": {
										"id": 1049,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10386:0:3"
									},
									"scope": 1059,
									"src": "10319:68:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1051,
										"nodeType": "StructuredDocumentation",
										"src": "10393:254:3",
										"text": "@notice Enables a certain tickSpacing\n @dev Tick spacings may never be removed once enabled\n @param tickSpacing The spacing between ticks to be enforced in the pool\n @param fee The default fee associated with a given tick spacing"
									},
									"functionSelector": "eee0fdb4",
									"id": 1058,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "enableTickSpacing",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1056,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1053,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 1058,
												"src": "10679:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1052,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "10679:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1055,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 1058,
												"src": "10698:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1054,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "10698:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10678:31:3"
									},
									"returnParameters": {
										"id": 1057,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10718:0:3"
									},
									"scope": 1059,
									"src": "10652:67:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1060,
							"src": "353:10368:3"
						}
					],
					"src": "45:10677:3"
				},
				"id": 3
			},
			"contracts/core/interfaces/ICLPool.sol": {
				"ast": {
					"absolutePath": "contracts/core/interfaces/ICLPool.sol",
					"exportedSymbols": {
						"ICLPool": [
							1081
						],
						"ICLPoolActions": [
							1511
						],
						"ICLPoolConstants": [
							1563
						],
						"ICLPoolDerivedState": [
							1594
						],
						"ICLPoolEvents": [
							1711
						],
						"ICLPoolOwnerActions": [
							1723
						],
						"ICLPoolState": [
							1899
						]
					},
					"id": 1082,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1061,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:4"
						},
						{
							"absolutePath": "contracts/core/interfaces/pool/ICLPoolConstants.sol",
							"file": "./pool/ICLPoolConstants.sol",
							"id": 1062,
							"nodeType": "ImportDirective",
							"scope": 1082,
							"sourceUnit": 1564,
							"src": "71:37:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/interfaces/pool/ICLPoolState.sol",
							"file": "./pool/ICLPoolState.sol",
							"id": 1063,
							"nodeType": "ImportDirective",
							"scope": 1082,
							"sourceUnit": 1900,
							"src": "109:33:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/interfaces/pool/ICLPoolDerivedState.sol",
							"file": "./pool/ICLPoolDerivedState.sol",
							"id": 1064,
							"nodeType": "ImportDirective",
							"scope": 1082,
							"sourceUnit": 1595,
							"src": "143:40:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/interfaces/pool/ICLPoolActions.sol",
							"file": "./pool/ICLPoolActions.sol",
							"id": 1065,
							"nodeType": "ImportDirective",
							"scope": 1082,
							"sourceUnit": 1512,
							"src": "184:35:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/interfaces/pool/ICLPoolOwnerActions.sol",
							"file": "./pool/ICLPoolOwnerActions.sol",
							"id": 1066,
							"nodeType": "ImportDirective",
							"scope": 1082,
							"sourceUnit": 1724,
							"src": "220:40:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/interfaces/pool/ICLPoolEvents.sol",
							"file": "./pool/ICLPoolEvents.sol",
							"id": 1067,
							"nodeType": "ImportDirective",
							"scope": 1082,
							"sourceUnit": 1712,
							"src": "261:34:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1069,
										"name": "ICLPoolConstants",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1563,
										"src": "574:16:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ICLPoolConstants_$1563",
											"typeString": "contract ICLPoolConstants"
										}
									},
									"id": 1070,
									"nodeType": "InheritanceSpecifier",
									"src": "574:16:4"
								},
								{
									"baseName": {
										"id": 1071,
										"name": "ICLPoolState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1899,
										"src": "596:12:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ICLPoolState_$1899",
											"typeString": "contract ICLPoolState"
										}
									},
									"id": 1072,
									"nodeType": "InheritanceSpecifier",
									"src": "596:12:4"
								},
								{
									"baseName": {
										"id": 1073,
										"name": "ICLPoolDerivedState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1594,
										"src": "614:19:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ICLPoolDerivedState_$1594",
											"typeString": "contract ICLPoolDerivedState"
										}
									},
									"id": 1074,
									"nodeType": "InheritanceSpecifier",
									"src": "614:19:4"
								},
								{
									"baseName": {
										"id": 1075,
										"name": "ICLPoolActions",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1511,
										"src": "639:14:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ICLPoolActions_$1511",
											"typeString": "contract ICLPoolActions"
										}
									},
									"id": 1076,
									"nodeType": "InheritanceSpecifier",
									"src": "639:14:4"
								},
								{
									"baseName": {
										"id": 1077,
										"name": "ICLPoolEvents",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1711,
										"src": "659:13:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ICLPoolEvents_$1711",
											"typeString": "contract ICLPoolEvents"
										}
									},
									"id": 1078,
									"nodeType": "InheritanceSpecifier",
									"src": "659:13:4"
								},
								{
									"baseName": {
										"id": 1079,
										"name": "ICLPoolOwnerActions",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1723,
										"src": "678:19:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ICLPoolOwnerActions_$1723",
											"typeString": "contract ICLPoolOwnerActions"
										}
									},
									"id": 1080,
									"nodeType": "InheritanceSpecifier",
									"src": "678:19:4"
								}
							],
							"contractDependencies": [
								1511,
								1563,
								1594,
								1711,
								1723,
								1899
							],
							"contractKind": "interface",
							"documentation": {
								"id": 1068,
								"nodeType": "StructuredDocumentation",
								"src": "297:252:4",
								"text": "@title The interface for a CL Pool\n @notice A CL pool facilitates swapping and automated market making between any two assets that strictly conform\n to the ERC20 specification\n @dev The pool interface is broken up into many smaller pieces"
							},
							"fullyImplemented": false,
							"id": 1081,
							"linearizedBaseContracts": [
								1081,
								1723,
								1711,
								1511,
								1594,
								1899,
								1563
							],
							"name": "ICLPool",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 1082,
							"src": "549:151:4"
						}
					],
					"src": "45:656:4"
				},
				"id": 4
			},
			"contracts/core/interfaces/IERC20Minimal.sol": {
				"ast": {
					"absolutePath": "contracts/core/interfaces/IERC20Minimal.sol",
					"exportedSymbols": {
						"IERC20Minimal": [
							1153
						]
					},
					"id": 1154,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1083,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1084,
								"nodeType": "StructuredDocumentation",
								"src": "71:119:5",
								"text": "@title Minimal ERC20 interface for CL\n @notice Contains a subset of the full ERC20 interface that is used in CL"
							},
							"fullyImplemented": false,
							"id": 1153,
							"linearizedBaseContracts": [
								1153
							],
							"name": "IERC20Minimal",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1085,
										"nodeType": "StructuredDocumentation",
										"src": "220:201:5",
										"text": "@notice Returns the balance of a token\n @param account The account for which to look up the number of tokens it has, i.e. its balance\n @return The number of tokens held by the account"
									},
									"functionSelector": "70a08231",
									"id": 1092,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1088,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1087,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 1092,
												"src": "445:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1086,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "444:17:5"
									},
									"returnParameters": {
										"id": 1091,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1090,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1092,
												"src": "485:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1089,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "485:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "484:9:5"
									},
									"scope": 1153,
									"src": "426:68:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1093,
										"nodeType": "StructuredDocumentation",
										"src": "500:333:5",
										"text": "@notice Transfers the amount of token from the `msg.sender` to the recipient\n @param recipient The account that will receive the amount transferred\n @param amount The number of tokens to send from the sender to the recipient\n @return Returns true for a successful transfer, false for an unsuccessful transfer"
									},
									"functionSelector": "a9059cbb",
									"id": 1102,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1098,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1095,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1102,
												"src": "856:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1094,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "856:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1097,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1102,
												"src": "875:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1096,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "875:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "855:35:5"
									},
									"returnParameters": {
										"id": 1101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1100,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1102,
												"src": "909:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1099,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "909:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "908:6:5"
									},
									"scope": 1153,
									"src": "838:77:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1103,
										"nodeType": "StructuredDocumentation",
										"src": "921:250:5",
										"text": "@notice Returns the current allowance given to a spender by an owner\n @param owner The account of the token owner\n @param spender The account of the token spender\n @return The current allowance granted by `owner` to `spender`"
									},
									"functionSelector": "dd62ed3e",
									"id": 1112,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1108,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1105,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 1112,
												"src": "1195:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1104,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1195:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1107,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 1112,
												"src": "1210:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1106,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1210:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:32:5"
									},
									"returnParameters": {
										"id": 1111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1110,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1112,
												"src": "1250:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1109,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1250:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1249:9:5"
									},
									"scope": 1153,
									"src": "1176:83:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1113,
										"nodeType": "StructuredDocumentation",
										"src": "1265:343:5",
										"text": "@notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\n @param spender The account which will be allowed to spend a given amount of the owners tokens\n @param amount The amount of tokens allowed to be used by `spender`\n @return Returns true for a successful approval, false for unsuccessful"
									},
									"functionSelector": "095ea7b3",
									"id": 1122,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1118,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1115,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 1122,
												"src": "1630:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1114,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1630:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1117,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1122,
												"src": "1647:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1116,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1647:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1629:33:5"
									},
									"returnParameters": {
										"id": 1121,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1120,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1122,
												"src": "1681:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1119,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1681:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1680:6:5"
									},
									"scope": 1153,
									"src": "1613:74:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1123,
										"nodeType": "StructuredDocumentation",
										"src": "1693:371:5",
										"text": "@notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\n @param sender The account from which the transfer will be initiated\n @param recipient The recipient of the transfer\n @param amount The amount of the transfer\n @return Returns true for a successful transfer, false for unsuccessful"
									},
									"functionSelector": "23b872dd",
									"id": 1134,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1125,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 1134,
												"src": "2091:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1124,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2091:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1127,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1134,
												"src": "2107:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1126,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2107:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1129,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1134,
												"src": "2126:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1128,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2126:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2090:51:5"
									},
									"returnParameters": {
										"id": 1133,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1132,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1134,
												"src": "2160:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1131,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2160:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2159:6:5"
									},
									"scope": 1153,
									"src": "2069:97:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1135,
										"nodeType": "StructuredDocumentation",
										"src": "2172:369:5",
										"text": "@notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\n @param from The account from which the tokens were sent, i.e. the balance decreased\n @param to The account to which the tokens were sent, i.e. the balance increased\n @param value The amount of tokens that were transferred"
									},
									"id": 1143,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1142,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1137,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 1143,
												"src": "2561:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1136,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2561:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1139,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 1143,
												"src": "2583:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1138,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2583:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1141,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 1143,
												"src": "2603:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1140,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2603:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2560:57:5"
									},
									"src": "2546:72:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1144,
										"nodeType": "StructuredDocumentation",
										"src": "2624:321:5",
										"text": "@notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\n @param owner The account that approved spending of its tokens\n @param spender The account for which the spending allowance was modified\n @param value The new allowance from the owner to the spender"
									},
									"id": 1152,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1146,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 1152,
												"src": "2965:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1145,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2965:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1148,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 1152,
												"src": "2988:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1147,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2988:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1150,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 1152,
												"src": "3013:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1149,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3013:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2964:63:5"
									},
									"src": "2950:78:5"
								}
							],
							"scope": 1154,
							"src": "190:2840:5"
						}
					],
					"src": "45:2986:5"
				},
				"id": 5
			},
			"contracts/core/interfaces/IFactoryRegistry.sol": {
				"ast": {
					"absolutePath": "contracts/core/interfaces/IFactoryRegistry.sol",
					"exportedSymbols": {
						"IFactoryRegistry": [
							1181
						]
					},
					"id": 1182,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1155,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1181,
							"linearizedBaseContracts": [
								1181
							],
							"name": "IFactoryRegistry",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "9b140a85",
									"id": 1164,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1157,
												"mutability": "mutable",
												"name": "poolFactory",
												"nodeType": "VariableDeclaration",
												"scope": 1164,
												"src": "107:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1156,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "107:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1159,
												"mutability": "mutable",
												"name": "votingRewardsFactory",
												"nodeType": "VariableDeclaration",
												"scope": 1164,
												"src": "128:28:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1158,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "128:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1161,
												"mutability": "mutable",
												"name": "gaugeFactory",
												"nodeType": "VariableDeclaration",
												"scope": 1164,
												"src": "158:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1160,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "158:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "106:73:6"
									},
									"returnParameters": {
										"id": 1163,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "188:0:6"
									},
									"scope": 1181,
									"src": "90:99:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "d1ea0a1d",
									"id": 1171,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isPoolFactoryApproved",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1166,
												"mutability": "mutable",
												"name": "poolFactory",
												"nodeType": "VariableDeclaration",
												"scope": 1171,
												"src": "226:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1165,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "226:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "225:21:6"
									},
									"returnParameters": {
										"id": 1170,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1169,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1171,
												"src": "265:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1168,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "265:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "264:6:6"
									},
									"scope": 1181,
									"src": "195:76:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "1217afdb",
									"id": 1180,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factoriesToPoolFactory",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1174,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1173,
												"mutability": "mutable",
												"name": "poolFactory",
												"nodeType": "VariableDeclaration",
												"scope": 1180,
												"src": "309:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1172,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "309:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "308:21:6"
									},
									"returnParameters": {
										"id": 1179,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1176,
												"mutability": "mutable",
												"name": "votingRewardsFactory",
												"nodeType": "VariableDeclaration",
												"scope": 1180,
												"src": "364:28:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1175,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "364:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1178,
												"mutability": "mutable",
												"name": "gaugeFactory",
												"nodeType": "VariableDeclaration",
												"scope": 1180,
												"src": "394:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1177,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "394:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "363:52:6"
									},
									"scope": 1181,
									"src": "277:139:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1182,
							"src": "57:361:6"
						}
					],
					"src": "32:387:6"
				},
				"id": 6
			},
			"contracts/core/interfaces/IVoter.sol": {
				"ast": {
					"absolutePath": "contracts/core/interfaces/IVoter.sol",
					"exportedSymbols": {
						"IFactoryRegistry": [
							1181
						],
						"IVoter": [
							1289
						],
						"IVotingEscrow": [
							1307
						]
					},
					"id": 1290,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1183,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:7"
						},
						{
							"id": 1184,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "56:19:7"
						},
						{
							"absolutePath": "contracts/core/interfaces/IVotingEscrow.sol",
							"file": "contracts/core/interfaces/IVotingEscrow.sol",
							"id": 1186,
							"nodeType": "ImportDirective",
							"scope": 1290,
							"sourceUnit": 1308,
							"src": "77:74:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1185,
										"name": "IVotingEscrow",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "85:13:7",
										"typeDescriptions": {}
									}
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/interfaces/IFactoryRegistry.sol",
							"file": "contracts/core/interfaces/IFactoryRegistry.sol",
							"id": 1188,
							"nodeType": "ImportDirective",
							"scope": 1290,
							"sourceUnit": 1182,
							"src": "152:80:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1187,
										"name": "IFactoryRegistry",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "160:16:7",
										"typeDescriptions": {}
									}
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1289,
							"linearizedBaseContracts": [
								1289
							],
							"name": "IVoter",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "1f850716",
									"id": 1193,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1189,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "268:2:7"
									},
									"returnParameters": {
										"id": 1192,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1191,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1193,
												"src": "294:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IVotingEscrow_$1307",
													"typeString": "contract IVotingEscrow"
												},
												"typeName": {
													"id": 1190,
													"name": "IVotingEscrow",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1307,
													"src": "294:13:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IVotingEscrow_$1307",
														"typeString": "contract IVotingEscrow"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "293:15:7"
									},
									"scope": 1289,
									"src": "257:52:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "7ac09bf7",
									"id": 1204,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "vote",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1195,
												"mutability": "mutable",
												"name": "_tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1204,
												"src": "329:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1194,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "329:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1198,
												"mutability": "mutable",
												"name": "_poolVote",
												"nodeType": "VariableDeclaration",
												"scope": 1204,
												"src": "347:28:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1196,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "347:7:7",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1197,
													"nodeType": "ArrayTypeName",
													"src": "347:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1201,
												"mutability": "mutable",
												"name": "_weights",
												"nodeType": "VariableDeclaration",
												"scope": 1204,
												"src": "377:27:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1199,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "377:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1200,
													"nodeType": "ArrayTypeName",
													"src": "377:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "328:77:7"
									},
									"returnParameters": {
										"id": 1203,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "414:0:7"
									},
									"scope": 1289,
									"src": "315:100:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "b9a09fd5",
									"id": 1211,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "gauges",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1207,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1206,
												"mutability": "mutable",
												"name": "_pool",
												"nodeType": "VariableDeclaration",
												"scope": 1211,
												"src": "437:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1205,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "437:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "436:15:7"
									},
									"returnParameters": {
										"id": 1210,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1209,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1211,
												"src": "475:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1208,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "475:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "474:9:7"
									},
									"scope": 1289,
									"src": "421:63:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "c4f08165",
									"id": 1218,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "gaugeToFees",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1214,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1213,
												"mutability": "mutable",
												"name": "_gauge",
												"nodeType": "VariableDeclaration",
												"scope": 1218,
												"src": "511:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1212,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "511:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "510:16:7"
									},
									"returnParameters": {
										"id": 1217,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1216,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1218,
												"src": "550:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1215,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "550:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "549:9:7"
									},
									"scope": 1289,
									"src": "490:69:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "294a6aeb",
									"id": 1225,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "gaugeToBribes",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1221,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1220,
												"mutability": "mutable",
												"name": "_gauge",
												"nodeType": "VariableDeclaration",
												"scope": 1225,
												"src": "588:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1219,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "588:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "587:16:7"
									},
									"returnParameters": {
										"id": 1224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1223,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1225,
												"src": "627:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1222,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "627:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "626:9:7"
									},
									"scope": 1289,
									"src": "565:71:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "794cea3c",
									"id": 1234,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createGauge",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1230,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1227,
												"mutability": "mutable",
												"name": "_poolFactory",
												"nodeType": "VariableDeclaration",
												"scope": 1234,
												"src": "663:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1226,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "663:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1229,
												"mutability": "mutable",
												"name": "_pool",
												"nodeType": "VariableDeclaration",
												"scope": 1234,
												"src": "685:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1228,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "685:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "662:37:7"
									},
									"returnParameters": {
										"id": 1233,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1232,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1234,
												"src": "718:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1231,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "718:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "717:9:7"
									},
									"scope": 1289,
									"src": "642:85:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "63453ae1",
									"id": 1239,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "distribute",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1237,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1236,
												"mutability": "mutable",
												"name": "gauge",
												"nodeType": "VariableDeclaration",
												"scope": 1239,
												"src": "753:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1235,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "753:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "752:15:7"
									},
									"returnParameters": {
										"id": 1238,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "776:0:7"
									},
									"scope": 1289,
									"src": "733:44:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "3bf0c9fb",
									"id": 1244,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factoryRegistry",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1240,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "807:2:7"
									},
									"returnParameters": {
										"id": 1243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1242,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1244,
												"src": "833:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IFactoryRegistry_$1181",
													"typeString": "contract IFactoryRegistry"
												},
												"typeName": {
													"id": 1241,
													"name": "IFactoryRegistry",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1181,
													"src": "833:16:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IFactoryRegistry_$1181",
														"typeString": "contract IFactoryRegistry"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "832:18:7"
									},
									"scope": 1289,
									"src": "783:68:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1245,
										"nodeType": "StructuredDocumentation",
										"src": "857:116:7",
										"text": "@dev Utility to distribute to gauges of pools in array.\n @param _gauges Array of gauges to distribute to."
									},
									"functionSelector": "6138889b",
									"id": 1251,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "distribute",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1249,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1248,
												"mutability": "mutable",
												"name": "_gauges",
												"nodeType": "VariableDeclaration",
												"scope": 1251,
												"src": "998:24:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1246,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "998:7:7",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1247,
													"nodeType": "ArrayTypeName",
													"src": "998:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "997:26:7"
									},
									"returnParameters": {
										"id": 1250,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1032:0:7"
									},
									"scope": 1289,
									"src": "978:55:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "1703e5f9",
									"id": 1258,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isAlive",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1254,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1253,
												"mutability": "mutable",
												"name": "_gauge",
												"nodeType": "VariableDeclaration",
												"scope": 1258,
												"src": "1056:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1252,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1056:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1055:16:7"
									},
									"returnParameters": {
										"id": 1257,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1256,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1258,
												"src": "1095:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1255,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1095:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1094:6:7"
									},
									"scope": 1289,
									"src": "1039:62:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "992a7933",
									"id": 1263,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "killGauge",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1261,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1260,
												"mutability": "mutable",
												"name": "_gauge",
												"nodeType": "VariableDeclaration",
												"scope": 1263,
												"src": "1126:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1259,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1126:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1125:16:7"
									},
									"returnParameters": {
										"id": 1262,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1150:0:7"
									},
									"scope": 1289,
									"src": "1107:44:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "7778960e",
									"id": 1268,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "emergencyCouncil",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1264,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1182:2:7"
									},
									"returnParameters": {
										"id": 1267,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1266,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1268,
												"src": "1208:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1265,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1208:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1207:9:7"
									},
									"scope": 1289,
									"src": "1157:60:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1269,
										"nodeType": "StructuredDocumentation",
										"src": "1223:106:7",
										"text": "@notice Claim emissions from gauges.\n @param _gauges Array of gauges to collect emissions from."
									},
									"functionSelector": "f9f031df",
									"id": 1275,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "claimRewards",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1273,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1272,
												"mutability": "mutable",
												"name": "_gauges",
												"nodeType": "VariableDeclaration",
												"scope": 1275,
												"src": "1356:24:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1270,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "1356:7:7",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1271,
													"nodeType": "ArrayTypeName",
													"src": "1356:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1355:26:7"
									},
									"returnParameters": {
										"id": 1274,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1390:0:7"
									},
									"scope": 1289,
									"src": "1334:57:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1276,
										"nodeType": "StructuredDocumentation",
										"src": "1397:295:7",
										"text": "@notice Claim fees for a given NFT.\n @dev Utility to help batch fee claims.\n @param _fees    Array of FeesVotingReward contracts to collect from.\n @param _tokens  Array of tokens that are used as fees.\n @param _tokenId Id of veNFT that you wish to claim fees for."
									},
									"functionSelector": "666256aa",
									"id": 1288,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "claimFees",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1286,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1279,
												"mutability": "mutable",
												"name": "_fees",
												"nodeType": "VariableDeclaration",
												"scope": 1288,
												"src": "1716:22:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1277,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "1716:7:7",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1278,
													"nodeType": "ArrayTypeName",
													"src": "1716:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1283,
												"mutability": "mutable",
												"name": "_tokens",
												"nodeType": "VariableDeclaration",
												"scope": 1288,
												"src": "1740:26:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_array$_t_address_$dyn_memory_ptr_$dyn_memory_ptr",
													"typeString": "address[][]"
												},
												"typeName": {
													"baseType": {
														"baseType": {
															"id": 1280,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "1740:7:7",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1281,
														"nodeType": "ArrayTypeName",
														"src": "1740:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
															"typeString": "address[]"
														}
													},
													"id": 1282,
													"nodeType": "ArrayTypeName",
													"src": "1740:11:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_array$_t_address_$dyn_storage_$dyn_storage_ptr",
														"typeString": "address[][]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1285,
												"mutability": "mutable",
												"name": "_tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1288,
												"src": "1768:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1284,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1768:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1715:70:7"
									},
									"returnParameters": {
										"id": 1287,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1794:0:7"
									},
									"scope": 1289,
									"src": "1697:98:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1290,
							"src": "234:1563:7"
						}
					],
					"src": "32:1766:7"
				},
				"id": 7
			},
			"contracts/core/interfaces/IVotingEscrow.sol": {
				"ast": {
					"absolutePath": "contracts/core/interfaces/IVotingEscrow.sol",
					"exportedSymbols": {
						"IVotingEscrow": [
							1307
						]
					},
					"id": 1308,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1291,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1307,
							"linearizedBaseContracts": [
								1307
							],
							"name": "IVotingEscrow",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "85f2aef2",
									"id": 1296,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "team",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1292,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "100:2:8"
									},
									"returnParameters": {
										"id": 1295,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1294,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1296,
												"src": "121:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1293,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "121:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "120:9:8"
									},
									"scope": 1307,
									"src": "87:43:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1297,
										"nodeType": "StructuredDocumentation",
										"src": "136:259:8",
										"text": "@notice Deposit `_value` tokens for `msg.sender` and lock for `_lockDuration`\n @param _value Amount to deposit\n @param _lockDuration Number of seconds to lock tokens for (rounded down to nearest week)\n @return TokenId of created veNFT"
									},
									"functionSelector": "b52c05fe",
									"id": 1306,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createLock",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1302,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1299,
												"mutability": "mutable",
												"name": "_value",
												"nodeType": "VariableDeclaration",
												"scope": 1306,
												"src": "420:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1298,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "420:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1301,
												"mutability": "mutable",
												"name": "_lockDuration",
												"nodeType": "VariableDeclaration",
												"scope": 1306,
												"src": "436:21:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1300,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "436:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "419:39:8"
									},
									"returnParameters": {
										"id": 1305,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1304,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1306,
												"src": "477:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1303,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "477:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "476:9:8"
									},
									"scope": 1307,
									"src": "400:86:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1308,
							"src": "57:431:8"
						}
					],
					"src": "32:457:8"
				},
				"id": 8
			},
			"contracts/core/interfaces/callback/ICLMintCallback.sol": {
				"ast": {
					"absolutePath": "contracts/core/interfaces/callback/ICLMintCallback.sol",
					"exportedSymbols": {
						"ICLMintCallback": [
							1321
						]
					},
					"id": 1322,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1309,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1310,
								"nodeType": "StructuredDocumentation",
								"src": "71:130:9",
								"text": "@title Callback for ICLPoolActions#mint\n @notice Any contract that calls ICLPoolActions#mint must implement this interface"
							},
							"fullyImplemented": false,
							"id": 1321,
							"linearizedBaseContracts": [
								1321
							],
							"name": "ICLMintCallback",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1311,
										"nodeType": "StructuredDocumentation",
										"src": "233:557:9",
										"text": "@notice Called to `msg.sender` after minting liquidity to a position from ICLPool#mint.\n @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\n The caller of this method must be checked to be a CLPool deployed by the canonical CLFactory.\n @param amount0Owed The amount of token0 due to the pool for the minted liquidity\n @param amount1Owed The amount of token1 due to the pool for the minted liquidity\n @param data Any data passed through by the caller via the ICLPoolActions#mint call"
									},
									"functionSelector": "d3487997",
									"id": 1320,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "uniswapV3MintCallback",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1318,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1313,
												"mutability": "mutable",
												"name": "amount0Owed",
												"nodeType": "VariableDeclaration",
												"scope": 1320,
												"src": "826:19:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1312,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "826:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1315,
												"mutability": "mutable",
												"name": "amount1Owed",
												"nodeType": "VariableDeclaration",
												"scope": 1320,
												"src": "847:19:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1314,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "847:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1317,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 1320,
												"src": "868:19:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1316,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "868:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "825:63:9"
									},
									"returnParameters": {
										"id": 1319,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "897:0:9"
									},
									"scope": 1321,
									"src": "795:103:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1322,
							"src": "201:699:9"
						}
					],
					"src": "45:856:9"
				},
				"id": 9
			},
			"contracts/core/interfaces/callback/ICLSwapCallback.sol": {
				"ast": {
					"absolutePath": "contracts/core/interfaces/callback/ICLSwapCallback.sol",
					"exportedSymbols": {
						"ICLSwapCallback": [
							1335
						]
					},
					"id": 1336,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1323,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1324,
								"nodeType": "StructuredDocumentation",
								"src": "71:130:10",
								"text": "@title Callback for ICLPoolActions#swap\n @notice Any contract that calls ICLPoolActions#swap must implement this interface"
							},
							"fullyImplemented": false,
							"id": 1335,
							"linearizedBaseContracts": [
								1335
							],
							"name": "ICLSwapCallback",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1325,
										"nodeType": "StructuredDocumentation",
										"src": "233:870:10",
										"text": "@notice Called to `msg.sender` after executing a swap via ICLPool#swap.\n @dev In the implementation you must pay the pool tokens owed for the swap.\n The caller of this method must be checked to be a CLPool deployed by the canonical CLFactory.\n amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n @param data Any data passed through by the caller via the ICLPoolActions#swap call"
									},
									"functionSelector": "fa461e33",
									"id": 1334,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "uniswapV3SwapCallback",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1332,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1327,
												"mutability": "mutable",
												"name": "amount0Delta",
												"nodeType": "VariableDeclaration",
												"scope": 1334,
												"src": "1139:19:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1326,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1139:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1329,
												"mutability": "mutable",
												"name": "amount1Delta",
												"nodeType": "VariableDeclaration",
												"scope": 1334,
												"src": "1160:19:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1328,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1160:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1331,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 1334,
												"src": "1181:19:10",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1330,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1181:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1138:63:10"
									},
									"returnParameters": {
										"id": 1333,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1210:0:10"
									},
									"scope": 1335,
									"src": "1108:103:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1336,
							"src": "201:1012:10"
						}
					],
					"src": "45:1169:10"
				},
				"id": 10
			},
			"contracts/core/interfaces/pool/ICLPoolActions.sol": {
				"ast": {
					"absolutePath": "contracts/core/interfaces/pool/ICLPoolActions.sol",
					"exportedSymbols": {
						"ICLPoolActions": [
							1511
						]
					},
					"id": 1512,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1337,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:11"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1338,
								"nodeType": "StructuredDocumentation",
								"src": "71:102:11",
								"text": "@title Permissionless pool actions\n @notice Contains pool methods that can be called by anyone"
							},
							"fullyImplemented": false,
							"id": 1511,
							"linearizedBaseContracts": [
								1511
							],
							"name": "ICLPoolActions",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1339,
										"nodeType": "StructuredDocumentation",
										"src": "204:652:11",
										"text": "@notice Initialize function used in proxy deployment\n @dev Can be called once only\n Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n @dev not locked because it initializes unlocked\n @param _factory The CL factory contract address\n @param _token0 The first token of the pool by address sort order\n @param _token1 The second token of the pool by address sort order\n @param _tickSpacing The pool tick spacing\n @param _factoryRegistry The address of the factory registry managing the pool factory\n @param _sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96"
									},
									"functionSelector": "2071d884",
									"id": 1354,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1352,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1341,
												"mutability": "mutable",
												"name": "_factory",
												"nodeType": "VariableDeclaration",
												"scope": 1354,
												"src": "890:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1340,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "890:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1343,
												"mutability": "mutable",
												"name": "_token0",
												"nodeType": "VariableDeclaration",
												"scope": 1354,
												"src": "916:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1342,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "916:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1345,
												"mutability": "mutable",
												"name": "_token1",
												"nodeType": "VariableDeclaration",
												"scope": 1354,
												"src": "941:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1344,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "941:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1347,
												"mutability": "mutable",
												"name": "_tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 1354,
												"src": "966:18:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1346,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "966:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1349,
												"mutability": "mutable",
												"name": "_factoryRegistry",
												"nodeType": "VariableDeclaration",
												"scope": 1354,
												"src": "994:24:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1348,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "994:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1351,
												"mutability": "mutable",
												"name": "_sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 1354,
												"src": "1028:21:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1350,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1028:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "880:175:11"
									},
									"returnParameters": {
										"id": 1353,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1064:0:11"
									},
									"scope": 1511,
									"src": "861:204:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1355,
										"nodeType": "StructuredDocumentation",
										"src": "1071:227:11",
										"text": "@notice Initialize gauge and nft manager\n @dev Callable only once, by the gauge factory\n @param _gauge The gauge corresponding to this pool\n @param _nft The position manager used for position management"
									},
									"functionSelector": "1f7c3568",
									"id": 1362,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setGaugeAndPositionManager",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1360,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1357,
												"mutability": "mutable",
												"name": "_gauge",
												"nodeType": "VariableDeclaration",
												"scope": 1362,
												"src": "1339:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1356,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1339:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1359,
												"mutability": "mutable",
												"name": "_nft",
												"nodeType": "VariableDeclaration",
												"scope": 1362,
												"src": "1355:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1358,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1355:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1338:30:11"
									},
									"returnParameters": {
										"id": 1361,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1377:0:11"
									},
									"scope": 1511,
									"src": "1303:75:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1363,
										"nodeType": "StructuredDocumentation",
										"src": "1384:1022:11",
										"text": "@notice Adds liquidity for the given recipient/tickLower/tickUpper position\n @dev The caller of this method receives a callback in the form of ICLMintCallback#uniswapV3MintCallback\n in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n on tickLower, tickUpper, the amount of liquidity, and the current price.\n @param recipient The address for which the liquidity will be created\n @param tickLower The lower tick of the position in which to add liquidity\n @param tickUpper The upper tick of the position in which to add liquidity\n @param amount The amount of liquidity to mint\n @param data Any data that should be passed through to the callback\n @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
									},
									"functionSelector": "3c8a7d8d",
									"id": 1380,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1374,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1365,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1380,
												"src": "2425:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1364,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2425:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1367,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 1380,
												"src": "2444:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1366,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2444:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1369,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 1380,
												"src": "2461:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1368,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2461:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1371,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1380,
												"src": "2478:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1370,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2478:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1373,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 1380,
												"src": "2494:19:11",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1372,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2494:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2424:90:11"
									},
									"returnParameters": {
										"id": 1379,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1376,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1380,
												"src": "2549:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1375,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2549:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1378,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1380,
												"src": "2566:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1377,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2566:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2548:34:11"
									},
									"scope": 1511,
									"src": "2411:172:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1381,
										"nodeType": "StructuredDocumentation",
										"src": "2589:1053:11",
										"text": "@notice Collects tokens owed to a position\n @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n @param recipient The address which should receive the fees collected\n @param tickLower The lower tick of the position for which to collect fees\n @param tickUpper The upper tick of the position for which to collect fees\n @param amount0Requested How much token0 should be withdrawn from the fees owed\n @param amount1Requested How much token1 should be withdrawn from the fees owed\n @return amount0 The amount of fees collected in token0\n @return amount1 The amount of fees collected in token1"
									},
									"functionSelector": "4f1eb3d8",
									"id": 1398,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collect",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1392,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1383,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1398,
												"src": "3673:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1382,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3673:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1385,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 1398,
												"src": "3700:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1384,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3700:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1387,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 1398,
												"src": "3725:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1386,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3725:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1389,
												"mutability": "mutable",
												"name": "amount0Requested",
												"nodeType": "VariableDeclaration",
												"scope": 1398,
												"src": "3750:24:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1388,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3750:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1391,
												"mutability": "mutable",
												"name": "amount1Requested",
												"nodeType": "VariableDeclaration",
												"scope": 1398,
												"src": "3784:24:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1390,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3784:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3663:151:11"
									},
									"returnParameters": {
										"id": 1397,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1394,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1398,
												"src": "3833:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1393,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3833:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1396,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1398,
												"src": "3850:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1395,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3850:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3832:34:11"
									},
									"scope": 1511,
									"src": "3647:220:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1399,
										"nodeType": "StructuredDocumentation",
										"src": "3873:1131:11",
										"text": "@notice Collects tokens owed to a position\n @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n @param recipient The address which should receive the fees collected\n @param tickLower The lower tick of the position for which to collect fees\n @param tickUpper The upper tick of the position for which to collect fees\n @param amount0Requested How much token0 should be withdrawn from the fees owed\n @param amount1Requested How much token1 should be withdrawn from the fees owed\n @param owner Owner of the position in the pool (nft manager or gauge)\n @return amount0 The amount of fees collected in token0\n @return amount1 The amount of fees collected in token1"
									},
									"functionSelector": "31338374",
									"id": 1418,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collect",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1412,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1401,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1418,
												"src": "5035:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1400,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5035:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1403,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 1418,
												"src": "5062:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1402,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "5062:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1405,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 1418,
												"src": "5087:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1404,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "5087:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1407,
												"mutability": "mutable",
												"name": "amount0Requested",
												"nodeType": "VariableDeclaration",
												"scope": 1418,
												"src": "5112:24:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1406,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5112:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1409,
												"mutability": "mutable",
												"name": "amount1Requested",
												"nodeType": "VariableDeclaration",
												"scope": 1418,
												"src": "5146:24:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1408,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5146:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1411,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 1418,
												"src": "5180:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1410,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5180:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5025:174:11"
									},
									"returnParameters": {
										"id": 1417,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1414,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1418,
												"src": "5218:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1413,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5218:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1416,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1418,
												"src": "5235:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1415,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5235:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5217:34:11"
									},
									"scope": 1511,
									"src": "5009:243:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1419,
										"nodeType": "StructuredDocumentation",
										"src": "5258:631:11",
										"text": "@notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n @dev Fees must be collected separately via a call to #collect\n @param tickLower The lower tick of the position for which to burn liquidity\n @param tickUpper The upper tick of the position for which to burn liquidity\n @param amount How much liquidity to burn\n @return amount0 The amount of token0 sent to the recipient\n @return amount1 The amount of token1 sent to the recipient"
									},
									"functionSelector": "a34123a7",
									"id": 1432,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1426,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1421,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 1432,
												"src": "5908:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1420,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "5908:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1423,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 1432,
												"src": "5925:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1422,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "5925:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1425,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1432,
												"src": "5942:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1424,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5942:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5907:50:11"
									},
									"returnParameters": {
										"id": 1431,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1428,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1432,
												"src": "5992:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1427,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5992:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1430,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1432,
												"src": "6009:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1429,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6009:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5991:34:11"
									},
									"scope": 1511,
									"src": "5894:132:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1433,
										"nodeType": "StructuredDocumentation",
										"src": "6032:717:11",
										"text": "@notice Burn liquidity from the supplied owner and account tokens owed for the liquidity to the position\n @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n @dev Fees must be collected separately via a call to #collect\n @param tickLower The lower tick of the position for which to burn liquidity\n @param tickUpper The upper tick of the position for which to burn liquidity\n @param amount How much liquidity to burn\n @param owner Owner of the position in the pool (nft manager or gauge)\n @return amount0 The amount of token0 sent to the recipient\n @return amount1 The amount of token1 sent to the recipient"
									},
									"functionSelector": "6f89244c",
									"id": 1448,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1442,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1435,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "6768:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1434,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "6768:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1437,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "6785:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1436,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "6785:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1439,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "6802:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1438,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "6802:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1441,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "6818:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1440,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6818:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6767:65:11"
									},
									"returnParameters": {
										"id": 1447,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1444,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "6867:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1443,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6867:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1446,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "6884:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1445,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6884:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6866:34:11"
									},
									"scope": 1511,
									"src": "6754:147:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1449,
										"nodeType": "StructuredDocumentation",
										"src": "6907:478:11",
										"text": "@notice Convert existing liquidity into staked liquidity\n @notice Only callable by the gauge associated with this pool\n @param stakedLiquidityDelta The amount by which to increase or decrease the staked liquidity\n @param tickLower The lower tick of the position for which to stake liquidity\n @param tickUpper The upper tick of the position for which to stake liquidity\n @param positionUpdate If the nft and gauge position should be updated"
									},
									"functionSelector": "4ed6210f",
									"id": 1460,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "stake",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1458,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1451,
												"mutability": "mutable",
												"name": "stakedLiquidityDelta",
												"nodeType": "VariableDeclaration",
												"scope": 1460,
												"src": "7405:27:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 1450,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "7405:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1453,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 1460,
												"src": "7434:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1452,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "7434:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1455,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 1460,
												"src": "7451:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1454,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "7451:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1457,
												"mutability": "mutable",
												"name": "positionUpdate",
												"nodeType": "VariableDeclaration",
												"scope": 1460,
												"src": "7468:19:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1456,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7468:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7404:84:11"
									},
									"returnParameters": {
										"id": 1459,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7497:0:11"
									},
									"scope": 1511,
									"src": "7390:108:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1461,
										"nodeType": "StructuredDocumentation",
										"src": "7504:1008:11",
										"text": "@notice Swap token0 for token1, or token1 for token0\n @dev The caller of this method receives a callback in the form of ICLSwapCallback#uniswapV3SwapCallback\n @param recipient The address to receive the output of the swap\n @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n value after the swap. If one for zero, the price cannot be greater than this value after the swap\n @param data Any data to be passed through to the callback\n @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
									},
									"functionSelector": "128acb08",
									"id": 1478,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "swap",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1472,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1463,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1478,
												"src": "8540:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1462,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8540:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1465,
												"mutability": "mutable",
												"name": "zeroForOne",
												"nodeType": "VariableDeclaration",
												"scope": 1478,
												"src": "8567:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1464,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8567:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1467,
												"mutability": "mutable",
												"name": "amountSpecified",
												"nodeType": "VariableDeclaration",
												"scope": 1478,
												"src": "8592:22:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1466,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "8592:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1469,
												"mutability": "mutable",
												"name": "sqrtPriceLimitX96",
												"nodeType": "VariableDeclaration",
												"scope": 1478,
												"src": "8624:25:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1468,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "8624:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1471,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 1478,
												"src": "8659:19:11",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1470,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8659:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8530:154:11"
									},
									"returnParameters": {
										"id": 1477,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1474,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1478,
												"src": "8703:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1473,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "8703:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1476,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1478,
												"src": "8719:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1475,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "8719:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8702:32:11"
									},
									"scope": 1511,
									"src": "8517:218:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1479,
										"nodeType": "StructuredDocumentation",
										"src": "8741:650:11",
										"text": "@notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n @dev The caller of this method receives a callback in the form of ICLFlashCallback#uniswapV3FlashCallback\n @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n with 0 amount{0,1} and sending the donation amount(s) from the callback\n @param recipient The address which will receive the token0 and token1 amounts\n @param amount0 The amount of token0 to send\n @param amount1 The amount of token1 to send\n @param data Any data to be passed through to the callback"
									},
									"functionSelector": "490e6cbc",
									"id": 1490,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "flash",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1488,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1481,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1490,
												"src": "9411:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1480,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9411:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1483,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1490,
												"src": "9430:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1482,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9430:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1485,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1490,
												"src": "9447:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1484,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9447:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1487,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 1490,
												"src": "9464:19:11",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1486,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9464:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9410:74:11"
									},
									"returnParameters": {
										"id": 1489,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9493:0:11"
									},
									"scope": 1511,
									"src": "9396:98:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1491,
										"nodeType": "StructuredDocumentation",
										"src": "9500:367:11",
										"text": "@notice Increase the maximum number of price and liquidity observations that this pool will store\n @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n the input observationCardinalityNext.\n @param observationCardinalityNext The desired minimum number of observations for the pool to store"
									},
									"functionSelector": "32148f67",
									"id": 1496,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseObservationCardinalityNext",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1494,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1493,
												"mutability": "mutable",
												"name": "observationCardinalityNext",
												"nodeType": "VariableDeclaration",
												"scope": 1496,
												"src": "9916:33:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1492,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "9916:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9915:35:11"
									},
									"returnParameters": {
										"id": 1495,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9959:0:11"
									},
									"scope": 1511,
									"src": "9872:88:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1497,
										"nodeType": "StructuredDocumentation",
										"src": "9966:142:11",
										"text": "@notice Updates rewardGrowthGlobalX128 every time when any tick is crossed,\n or when any position is staked/unstaked from the gauge"
									},
									"functionSelector": "1b410960",
									"id": 1500,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateRewardsGrowthGlobal",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1498,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10147:2:11"
									},
									"returnParameters": {
										"id": 1499,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10158:0:11"
									},
									"scope": 1511,
									"src": "10113:46:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1501,
										"nodeType": "StructuredDocumentation",
										"src": "10165:293:11",
										"text": "@notice Syncs rewards with gauge\n @param rewardRate the rate rewards being distributed during the epoch\n @param rewardReserve the available rewards to be distributed during the epoch\n @param periodFinish the end of the current period of rewards, updated once per epoch"
									},
									"functionSelector": "60a73f9b",
									"id": 1510,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "syncReward",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1508,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1503,
												"mutability": "mutable",
												"name": "rewardRate",
												"nodeType": "VariableDeclaration",
												"scope": 1510,
												"src": "10483:18:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1502,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10483:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1505,
												"mutability": "mutable",
												"name": "rewardReserve",
												"nodeType": "VariableDeclaration",
												"scope": 1510,
												"src": "10503:21:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1504,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10503:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1507,
												"mutability": "mutable",
												"name": "periodFinish",
												"nodeType": "VariableDeclaration",
												"scope": 1510,
												"src": "10526:20:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1506,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10526:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10482:65:11"
									},
									"returnParameters": {
										"id": 1509,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10556:0:11"
									},
									"scope": 1511,
									"src": "10463:94:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1512,
							"src": "173:10386:11"
						}
					],
					"src": "45:10515:11"
				},
				"id": 11
			},
			"contracts/core/interfaces/pool/ICLPoolConstants.sol": {
				"ast": {
					"absolutePath": "contracts/core/interfaces/pool/ICLPoolConstants.sol",
					"exportedSymbols": {
						"ICLPoolConstants": [
							1563
						]
					},
					"id": 1564,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1513,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:12"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1514,
								"nodeType": "StructuredDocumentation",
								"src": "71:218:12",
								"text": "@title Pool state that never changes\n @notice These parameters are not defined as immutable (due to proxy pattern) but are effectively immutable.\n @notice i.e., the methods will always return the same values"
							},
							"fullyImplemented": false,
							"id": 1563,
							"linearizedBaseContracts": [
								1563
							],
							"name": "ICLPoolConstants",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1515,
										"nodeType": "StructuredDocumentation",
										"src": "322:131:12",
										"text": "@notice The contract that deployed the pool, which must adhere to the ICLFactory interface\n @return The contract address"
									},
									"functionSelector": "c45a0155",
									"id": 1520,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factory",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1516,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "474:2:12"
									},
									"returnParameters": {
										"id": 1519,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1518,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1520,
												"src": "500:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1517,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "500:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "499:9:12"
									},
									"scope": 1563,
									"src": "458:51:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1521,
										"nodeType": "StructuredDocumentation",
										"src": "515:113:12",
										"text": "@notice The first of the two tokens of the pool, sorted by address\n @return The token contract address"
									},
									"functionSelector": "0dfe1681",
									"id": 1526,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "token0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1522,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "648:2:12"
									},
									"returnParameters": {
										"id": 1525,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1524,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1526,
												"src": "674:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1523,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "674:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "673:9:12"
									},
									"scope": 1563,
									"src": "633:50:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1527,
										"nodeType": "StructuredDocumentation",
										"src": "689:114:12",
										"text": "@notice The second of the two tokens of the pool, sorted by address\n @return The token contract address"
									},
									"functionSelector": "d21220a7",
									"id": 1532,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "token1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1528,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "823:2:12"
									},
									"returnParameters": {
										"id": 1531,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1530,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1532,
												"src": "849:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1529,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "849:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "848:9:12"
									},
									"scope": 1563,
									"src": "808:50:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1533,
										"nodeType": "StructuredDocumentation",
										"src": "864:91:12",
										"text": "@notice The gauge corresponding to this pool\n @return The gauge contract address"
									},
									"functionSelector": "a6f19c84",
									"id": 1538,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "gauge",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1534,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "974:2:12"
									},
									"returnParameters": {
										"id": 1537,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1536,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1538,
												"src": "1000:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1535,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1000:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "999:9:12"
									},
									"scope": 1563,
									"src": "960:49:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1539,
										"nodeType": "StructuredDocumentation",
										"src": "1015:76:12",
										"text": "@notice The nft manager\n @return The nft manager contract address"
									},
									"functionSelector": "47ccca02",
									"id": 1544,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nft",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1540,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1108:2:12"
									},
									"returnParameters": {
										"id": 1543,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1542,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1544,
												"src": "1134:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1541,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1134:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1133:9:12"
									},
									"scope": 1563,
									"src": "1096:47:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1545,
										"nodeType": "StructuredDocumentation",
										"src": "1149:145:12",
										"text": "@notice The factory registry that manages pool <> gauge <> reward factory relationships\n @return The factory registry contract address"
									},
									"functionSelector": "3bf0c9fb",
									"id": 1550,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factoryRegistry",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1546,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1323:2:12"
									},
									"returnParameters": {
										"id": 1549,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1548,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1550,
												"src": "1349:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1547,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1349:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1348:9:12"
									},
									"scope": 1563,
									"src": "1299:59:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1551,
										"nodeType": "StructuredDocumentation",
										"src": "1364:358:12",
										"text": "@notice The pool tick spacing\n @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n This value is an int24 to avoid casting even though it is always positive.\n @return The tick spacing"
									},
									"functionSelector": "d0c93a7c",
									"id": 1556,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tickSpacing",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1552,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1747:2:12"
									},
									"returnParameters": {
										"id": 1555,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1554,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1556,
												"src": "1773:5:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1553,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1773:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1772:7:12"
									},
									"scope": 1563,
									"src": "1727:53:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1557,
										"nodeType": "StructuredDocumentation",
										"src": "1786:363:12",
										"text": "@notice The maximum amount of position liquidity that can use any tick in the range\n @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n @return The max amount of liquidity per tick"
									},
									"functionSelector": "70cf754a",
									"id": 1562,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxLiquidityPerTick",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1558,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2182:2:12"
									},
									"returnParameters": {
										"id": 1561,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1560,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1562,
												"src": "2208:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1559,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2208:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2207:9:12"
									},
									"scope": 1563,
									"src": "2154:63:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1564,
							"src": "289:1930:12"
						}
					],
					"src": "45:2175:12"
				},
				"id": 12
			},
			"contracts/core/interfaces/pool/ICLPoolDerivedState.sol": {
				"ast": {
					"absolutePath": "contracts/core/interfaces/pool/ICLPoolDerivedState.sol",
					"exportedSymbols": {
						"ICLPoolDerivedState": [
							1594
						]
					},
					"id": 1595,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1565,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:13"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1566,
								"nodeType": "StructuredDocumentation",
								"src": "71:222:13",
								"text": "@title Pool state that is not stored\n @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n blockchain. The functions here may have variable gas costs."
							},
							"fullyImplemented": false,
							"id": 1594,
							"linearizedBaseContracts": [
								1594
							],
							"name": "ICLPoolDerivedState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1567,
										"nodeType": "StructuredDocumentation",
										"src": "329:1045:13",
										"text": "@notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n you must call it with secondsAgos = [3600, 0].\n @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n timestamp"
									},
									"functionSelector": "883bdbfd",
									"id": 1579,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "observe",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1571,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1570,
												"mutability": "mutable",
												"name": "secondsAgos",
												"nodeType": "VariableDeclaration",
												"scope": 1579,
												"src": "1396:29:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint32_$dyn_calldata_ptr",
													"typeString": "uint32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1568,
														"name": "uint32",
														"nodeType": "ElementaryTypeName",
														"src": "1396:6:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"id": 1569,
													"nodeType": "ArrayTypeName",
													"src": "1396:8:13",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
														"typeString": "uint32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1395:31:13"
									},
									"returnParameters": {
										"id": 1578,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1574,
												"mutability": "mutable",
												"name": "tickCumulatives",
												"nodeType": "VariableDeclaration",
												"scope": 1579,
												"src": "1474:30:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_int56_$dyn_memory_ptr",
													"typeString": "int56[]"
												},
												"typeName": {
													"baseType": {
														"id": 1572,
														"name": "int56",
														"nodeType": "ElementaryTypeName",
														"src": "1474:5:13",
														"typeDescriptions": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														}
													},
													"id": 1573,
													"nodeType": "ArrayTypeName",
													"src": "1474:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_int56_$dyn_storage_ptr",
														"typeString": "int56[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1577,
												"mutability": "mutable",
												"name": "secondsPerLiquidityCumulativeX128s",
												"nodeType": "VariableDeclaration",
												"scope": 1579,
												"src": "1506:51:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint160_$dyn_memory_ptr",
													"typeString": "uint160[]"
												},
												"typeName": {
													"baseType": {
														"id": 1575,
														"name": "uint160",
														"nodeType": "ElementaryTypeName",
														"src": "1506:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"id": 1576,
													"nodeType": "ArrayTypeName",
													"src": "1506:9:13",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint160_$dyn_storage_ptr",
														"typeString": "uint160[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1473:85:13"
									},
									"scope": 1594,
									"src": "1379:180:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1580,
										"nodeType": "StructuredDocumentation",
										"src": "1565:771:13",
										"text": "@notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n snapshot is taken and the second snapshot is taken.\n @param tickLower The lower tick of the range\n @param tickUpper The upper tick of the range\n @return tickCumulativeInside The snapshot of the tick accumulator for the range\n @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n @return secondsInside The snapshot of seconds per liquidity for the range"
									},
									"functionSelector": "a38807f2",
									"id": 1593,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "snapshotCumulativesInside",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1585,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1582,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 1593,
												"src": "2376:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1581,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2376:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1584,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 1593,
												"src": "2393:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1583,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2393:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2375:34:13"
									},
									"returnParameters": {
										"id": 1592,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1587,
												"mutability": "mutable",
												"name": "tickCumulativeInside",
												"nodeType": "VariableDeclaration",
												"scope": 1593,
												"src": "2457:26:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 1586,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "2457:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1589,
												"mutability": "mutable",
												"name": "secondsPerLiquidityInsideX128",
												"nodeType": "VariableDeclaration",
												"scope": 1593,
												"src": "2485:37:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1588,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "2485:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1591,
												"mutability": "mutable",
												"name": "secondsInside",
												"nodeType": "VariableDeclaration",
												"scope": 1593,
												"src": "2524:20:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1590,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "2524:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2456:89:13"
									},
									"scope": 1594,
									"src": "2341:205:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1595,
							"src": "293:2255:13"
						}
					],
					"src": "45:2504:13"
				},
				"id": 13
			},
			"contracts/core/interfaces/pool/ICLPoolEvents.sol": {
				"ast": {
					"absolutePath": "contracts/core/interfaces/pool/ICLPoolEvents.sol",
					"exportedSymbols": {
						"ICLPoolEvents": [
							1711
						]
					},
					"id": 1712,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1596,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:14"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1597,
								"nodeType": "StructuredDocumentation",
								"src": "71:88:14",
								"text": "@title Events emitted by a pool\n @notice Contains all events emitted by the pool"
							},
							"fullyImplemented": true,
							"id": 1711,
							"linearizedBaseContracts": [
								1711
							],
							"name": "ICLPoolEvents",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1598,
										"nodeType": "StructuredDocumentation",
										"src": "189:344:14",
										"text": "@notice Emitted exactly once by a pool when #initialize is first called on the pool\n @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
									},
									"id": 1604,
									"name": "Initialize",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1603,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1600,
												"indexed": false,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 1604,
												"src": "555:20:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1599,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "555:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1602,
												"indexed": false,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 1604,
												"src": "577:10:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1601,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "577:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "554:34:14"
									},
									"src": "538:51:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1605,
										"nodeType": "StructuredDocumentation",
										"src": "595:551:14",
										"text": "@notice Emitted when liquidity is minted for a given position\n @param sender The address that minted the liquidity\n @param owner The owner of the position and recipient of any minted liquidity\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity minted to the position range\n @param amount0 How much token0 was required for the minted liquidity\n @param amount1 How much token1 was required for the minted liquidity"
									},
									"id": 1621,
									"name": "Mint",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1620,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1607,
												"indexed": false,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 1621,
												"src": "1171:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1606,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1171:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1609,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 1621,
												"src": "1195:21:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1608,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1195:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1611,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 1621,
												"src": "1226:23:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1610,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1226:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1613,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 1621,
												"src": "1259:23:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1612,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1259:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1615,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1621,
												"src": "1292:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1614,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1292:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1617,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1621,
												"src": "1316:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1616,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1316:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1619,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1621,
												"src": "1341:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1618,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1341:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1161:201:14"
									},
									"src": "1151:212:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1622,
										"nodeType": "StructuredDocumentation",
										"src": "1369:493:14",
										"text": "@notice Emitted when fees are collected by the owner of a position\n @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n @param owner The owner of the position for which fees are collected\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount0 The amount of token0 fees collected\n @param amount1 The amount of token1 fees collected"
									},
									"id": 1636,
									"name": "Collect",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1635,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1624,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 1636,
												"src": "1890:21:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1623,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1890:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1626,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1636,
												"src": "1921:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1625,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1921:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1628,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 1636,
												"src": "1948:23:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1627,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1948:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1630,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 1636,
												"src": "1981:23:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1629,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1981:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1632,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1636,
												"src": "2014:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1631,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2014:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1634,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1636,
												"src": "2039:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1633,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2039:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1880:180:14"
									},
									"src": "1867:194:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1637,
										"nodeType": "StructuredDocumentation",
										"src": "2067:523:14",
										"text": "@notice Emitted when a position's liquidity is removed\n @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n @param owner The owner of the position for which liquidity is removed\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity to remove\n @param amount0 The amount of token0 withdrawn\n @param amount1 The amount of token1 withdrawn"
									},
									"id": 1651,
									"name": "Burn",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1650,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1639,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 1651,
												"src": "2615:21:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1638,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2615:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1641,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 1651,
												"src": "2646:23:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1640,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2646:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1643,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 1651,
												"src": "2679:23:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1642,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2679:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1645,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1651,
												"src": "2712:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1644,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2712:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1647,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1651,
												"src": "2736:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1646,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2736:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1649,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1651,
												"src": "2761:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1648,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2761:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2605:177:14"
									},
									"src": "2595:188:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1652,
										"nodeType": "StructuredDocumentation",
										"src": "2789:600:14",
										"text": "@notice Emitted by the pool for any swaps between token0 and token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the output of the swap\n @param amount0 The delta of the token0 balance of the pool\n @param amount1 The delta of the token1 balance of the pool\n @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n @param liquidity The liquidity of the pool after the swap\n @param tick The log base 1.0001 of price of the pool after the swap"
									},
									"id": 1668,
									"name": "Swap",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1667,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1654,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 1668,
												"src": "3414:22:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1653,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3414:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1656,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1668,
												"src": "3446:25:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1655,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3446:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1658,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1668,
												"src": "3481:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1657,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "3481:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1660,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1668,
												"src": "3505:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1659,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "3505:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1662,
												"indexed": false,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 1668,
												"src": "3529:20:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1661,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "3529:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1664,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 1668,
												"src": "3559:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1663,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3559:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1666,
												"indexed": false,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 1668,
												"src": "3586:10:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1665,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3586:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3404:198:14"
									},
									"src": "3394:209:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1669,
										"nodeType": "StructuredDocumentation",
										"src": "3609:562:14",
										"text": "@notice Emitted by the pool for any flashes of token0/token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the tokens from flash\n @param amount0 The amount of token0 that was flashed\n @param amount1 The amount of token1 that was flashed\n @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee"
									},
									"id": 1683,
									"name": "Flash",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1682,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1671,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 1683,
												"src": "4197:22:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1670,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4197:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1673,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1683,
												"src": "4229:25:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1672,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4229:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1675,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1683,
												"src": "4264:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1674,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4264:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1677,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1683,
												"src": "4289:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1676,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4289:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1679,
												"indexed": false,
												"mutability": "mutable",
												"name": "paid0",
												"nodeType": "VariableDeclaration",
												"scope": 1683,
												"src": "4314:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1678,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4314:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1681,
												"indexed": false,
												"mutability": "mutable",
												"name": "paid1",
												"nodeType": "VariableDeclaration",
												"scope": 1683,
												"src": "4337:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1680,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4337:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4187:169:14"
									},
									"src": "4176:181:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1684,
										"nodeType": "StructuredDocumentation",
										"src": "4363:451:14",
										"text": "@notice Emitted by the pool for increases to the number of observations that can be stored\n @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n just before a mint/swap/burn.\n @param observationCardinalityNextOld The previous value of the next observation cardinality\n @param observationCardinalityNextNew The updated value of the next observation cardinality"
									},
									"id": 1690,
									"name": "IncreaseObservationCardinalityNext",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1689,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1686,
												"indexed": false,
												"mutability": "mutable",
												"name": "observationCardinalityNextOld",
												"nodeType": "VariableDeclaration",
												"scope": 1690,
												"src": "4869:36:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1685,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "4869:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1688,
												"indexed": false,
												"mutability": "mutable",
												"name": "observationCardinalityNextNew",
												"nodeType": "VariableDeclaration",
												"scope": 1690,
												"src": "4907:36:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1687,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "4907:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4859:90:14"
									},
									"src": "4819:131:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1691,
										"nodeType": "StructuredDocumentation",
										"src": "4956:370:14",
										"text": "@notice Emitted when the protocol fee is changed by the pool\n @param feeProtocol0Old The previous value of the token0 protocol fee\n @param feeProtocol1Old The previous value of the token1 protocol fee\n @param feeProtocol0New The updated value of the token0 protocol fee\n @param feeProtocol1New The updated value of the token1 protocol fee"
									},
									"id": 1701,
									"name": "SetFeeProtocol",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1700,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1693,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol0Old",
												"nodeType": "VariableDeclaration",
												"scope": 1701,
												"src": "5352:21:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1692,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5352:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1695,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol1Old",
												"nodeType": "VariableDeclaration",
												"scope": 1701,
												"src": "5375:21:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1694,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5375:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1697,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol0New",
												"nodeType": "VariableDeclaration",
												"scope": 1701,
												"src": "5398:21:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1696,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5398:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1699,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol1New",
												"nodeType": "VariableDeclaration",
												"scope": 1701,
												"src": "5421:21:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1698,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5421:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5351:92:14"
									},
									"src": "5331:113:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1702,
										"nodeType": "StructuredDocumentation",
										"src": "5450:310:14",
										"text": "@notice Emitted when the collected protocol fees are withdrawn by the gauge\n @param recipient The address that receives the collected protocol fees\n @param amount0 The amount of token0 protocol fees that is withdrawn\n @param amount0 The amount of token1 protocol fees that is withdrawn"
									},
									"id": 1710,
									"name": "CollectFees",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1709,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1704,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1710,
												"src": "5783:25:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1703,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5783:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1706,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1710,
												"src": "5810:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1705,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5810:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1708,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1710,
												"src": "5827:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1707,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5827:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5782:61:14"
									},
									"src": "5765:79:14"
								}
							],
							"scope": 1712,
							"src": "159:5687:14"
						}
					],
					"src": "45:5802:14"
				},
				"id": 14
			},
			"contracts/core/interfaces/pool/ICLPoolOwnerActions.sol": {
				"ast": {
					"absolutePath": "contracts/core/interfaces/pool/ICLPoolOwnerActions.sol",
					"exportedSymbols": {
						"ICLPoolOwnerActions": [
							1723
						]
					},
					"id": 1724,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1713,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:15"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1714,
								"nodeType": "StructuredDocumentation",
								"src": "71:116:15",
								"text": "@title Permissioned pool actions\n @notice Contains pool methods that may only be called by the factory owner"
							},
							"fullyImplemented": false,
							"id": 1723,
							"linearizedBaseContracts": [
								1723
							],
							"name": "ICLPoolOwnerActions",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1715,
										"nodeType": "StructuredDocumentation",
										"src": "223:169:15",
										"text": "@notice Collect the gauge fee accrued to the pool\n @return amount0 The gauge fee collected in token0\n @return amount1 The gauge fee collected in token1"
									},
									"functionSelector": "c8796572",
									"id": 1722,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collectFees",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1716,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "417:2:15"
									},
									"returnParameters": {
										"id": 1721,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1718,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1722,
												"src": "438:15:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1717,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "438:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1720,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1722,
												"src": "455:15:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1719,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "455:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "437:34:15"
									},
									"scope": 1723,
									"src": "397:75:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1724,
							"src": "187:287:15"
						}
					],
					"src": "45:430:15"
				},
				"id": 15
			},
			"contracts/core/interfaces/pool/ICLPoolState.sol": {
				"ast": {
					"absolutePath": "contracts/core/interfaces/pool/ICLPoolState.sol",
					"exportedSymbols": {
						"ICLPoolState": [
							1899
						]
					},
					"id": 1900,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1725,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:16"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1726,
								"nodeType": "StructuredDocumentation",
								"src": "71:169:16",
								"text": "@title Pool state that can change\n @notice These methods compose the pool's state, and can change with any frequency including multiple times\n per transaction"
							},
							"fullyImplemented": false,
							"id": 1899,
							"linearizedBaseContracts": [
								1899
							],
							"name": "ICLPoolState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1727,
										"nodeType": "StructuredDocumentation",
										"src": "269:835:16",
										"text": "@notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n when accessed externally.\n @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n tick The current tick of the pool, i.e. according to the last tick transition that was run.\n This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n boundary.\n observationIndex The index of the last oracle observation that was written,\n observationCardinality The current maximum number of observations stored in the pool,\n observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n unlocked Whether the pool is currently locked to reentrancy"
									},
									"functionSelector": "3850c7bd",
									"id": 1742,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "slot0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1728,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1123:2:16"
									},
									"returnParameters": {
										"id": 1741,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1730,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 1742,
												"src": "1186:20:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1729,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1186:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1732,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 1742,
												"src": "1220:10:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1731,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1220:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1734,
												"mutability": "mutable",
												"name": "observationIndex",
												"nodeType": "VariableDeclaration",
												"scope": 1742,
												"src": "1244:23:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1733,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1244:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1736,
												"mutability": "mutable",
												"name": "observationCardinality",
												"nodeType": "VariableDeclaration",
												"scope": 1742,
												"src": "1281:29:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1735,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1281:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1738,
												"mutability": "mutable",
												"name": "observationCardinalityNext",
												"nodeType": "VariableDeclaration",
												"scope": 1742,
												"src": "1324:33:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1737,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1324:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1740,
												"mutability": "mutable",
												"name": "unlocked",
												"nodeType": "VariableDeclaration",
												"scope": 1742,
												"src": "1371:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1739,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1371:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1172:222:16"
									},
									"scope": 1899,
									"src": "1109:286:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1743,
										"nodeType": "StructuredDocumentation",
										"src": "1401:182:16",
										"text": "@notice The pool's swap & flash fee in pips, i.e. 1e-6\n @dev Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.\n @return The swap & flash fee"
									},
									"functionSelector": "ddca3f43",
									"id": 1748,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "fee",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1744,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1600:2:16"
									},
									"returnParameters": {
										"id": 1747,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1746,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1748,
												"src": "1626:6:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1745,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1626:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1625:8:16"
									},
									"scope": 1899,
									"src": "1588:46:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1749,
										"nodeType": "StructuredDocumentation",
										"src": "1640:174:16",
										"text": "@notice The pool's unstaked fee in pips, i.e. 1e-6\n @dev Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.\n @return The unstaked fee"
									},
									"functionSelector": "b64cc67b",
									"id": 1754,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unstakedFee",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1750,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1839:2:16"
									},
									"returnParameters": {
										"id": 1753,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1752,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1754,
												"src": "1865:6:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1751,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1865:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1864:8:16"
									},
									"scope": 1899,
									"src": "1819:54:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1755,
										"nodeType": "StructuredDocumentation",
										"src": "1879:168:16",
										"text": "@notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"
									},
									"functionSelector": "f3058399",
									"id": 1760,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeGrowthGlobal0X128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1756,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2081:2:16"
									},
									"returnParameters": {
										"id": 1759,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1758,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1760,
												"src": "2107:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1757,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2107:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2106:9:16"
									},
									"scope": 1899,
									"src": "2052:64:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1761,
										"nodeType": "StructuredDocumentation",
										"src": "2122:168:16",
										"text": "@notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"
									},
									"functionSelector": "46141319",
									"id": 1766,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeGrowthGlobal1X128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1762,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2324:2:16"
									},
									"returnParameters": {
										"id": 1765,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1764,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1766,
												"src": "2350:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1763,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2350:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2349:9:16"
									},
									"scope": 1899,
									"src": "2295:64:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1767,
										"nodeType": "StructuredDocumentation",
										"src": "2365:176:16",
										"text": "@notice The reward growth as a Q128.128 rewards of emission collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"
									},
									"functionSelector": "57806ada",
									"id": 1772,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "rewardGrowthGlobalX128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1768,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2577:2:16"
									},
									"returnParameters": {
										"id": 1771,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1770,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1772,
												"src": "2603:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1769,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2603:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2602:9:16"
									},
									"scope": 1899,
									"src": "2546:66:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1773,
										"nodeType": "StructuredDocumentation",
										"src": "2618:141:16",
										"text": "@notice The amounts of token0 and token1 that are owed to the gauge\n @dev Gauge fees will never exceed uint128 max in either token"
									},
									"functionSelector": "293833ba",
									"id": 1780,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "gaugeFees",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1774,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2782:2:16"
									},
									"returnParameters": {
										"id": 1779,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1776,
												"mutability": "mutable",
												"name": "token0",
												"nodeType": "VariableDeclaration",
												"scope": 1780,
												"src": "2808:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1775,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2808:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1778,
												"mutability": "mutable",
												"name": "token1",
												"nodeType": "VariableDeclaration",
												"scope": 1780,
												"src": "2824:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1777,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2824:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2807:32:16"
									},
									"scope": 1899,
									"src": "2764:76:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1781,
										"nodeType": "StructuredDocumentation",
										"src": "2846:51:16",
										"text": "@notice the emission rate of time-based farming"
									},
									"functionSelector": "7b0a47ee",
									"id": 1786,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "rewardRate",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1782,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2921:2:16"
									},
									"returnParameters": {
										"id": 1785,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1784,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1786,
												"src": "2947:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1783,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2947:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2946:9:16"
									},
									"scope": 1899,
									"src": "2902:54:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1787,
										"nodeType": "StructuredDocumentation",
										"src": "2962:106:16",
										"text": "@notice acts as a virtual reserve that holds information on how many rewards are yet to be distributed"
									},
									"functionSelector": "cab64bcd",
									"id": 1792,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "rewardReserve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1788,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3095:2:16"
									},
									"returnParameters": {
										"id": 1791,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1790,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1792,
												"src": "3121:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1789,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3121:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3120:9:16"
									},
									"scope": 1899,
									"src": "3073:57:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1793,
										"nodeType": "StructuredDocumentation",
										"src": "3136:63:16",
										"text": "@notice timestamp of the end of the current epoch's rewards"
									},
									"functionSelector": "ebe2b12b",
									"id": 1798,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "periodFinish",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1794,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3225:2:16"
									},
									"returnParameters": {
										"id": 1797,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1796,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1798,
												"src": "3251:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1795,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3251:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3250:9:16"
									},
									"scope": 1899,
									"src": "3204:56:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1799,
										"nodeType": "StructuredDocumentation",
										"src": "3266:67:16",
										"text": "@notice last time the rewardReserve and rewardRate were updated"
									},
									"functionSelector": "d0b06f5d",
									"id": 1804,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "lastUpdated",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1800,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3358:2:16"
									},
									"returnParameters": {
										"id": 1803,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1802,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1804,
												"src": "3384:6:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1801,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "3384:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3383:8:16"
									},
									"scope": 1899,
									"src": "3338:54:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1805,
										"nodeType": "StructuredDocumentation",
										"src": "3398:284:16",
										"text": "@notice tracks total rewards distributed when no staked liquidity in active tick for epoch ending at periodFinish\n @notice this amount is rolled over on the next call to notifyRewardAmount\n @dev rollover will always be smaller than the rewards distributed that epoch"
									},
									"functionSelector": "b056b49a",
									"id": 1810,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "rollover",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1806,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3704:2:16"
									},
									"returnParameters": {
										"id": 1809,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1808,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1810,
												"src": "3730:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1807,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3730:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3729:9:16"
									},
									"scope": 1899,
									"src": "3687:52:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1811,
										"nodeType": "StructuredDocumentation",
										"src": "3745:200:16",
										"text": "@notice The currently in range liquidity available to the pool\n @dev This value has no relationship to the total liquidity across all ticks\n @dev This value includes staked liquidity"
									},
									"functionSelector": "1a686502",
									"id": 1816,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "liquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1812,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3968:2:16"
									},
									"returnParameters": {
										"id": 1815,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1814,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1816,
												"src": "3994:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1813,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3994:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3993:9:16"
									},
									"scope": 1899,
									"src": "3950:53:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1817,
										"nodeType": "StructuredDocumentation",
										"src": "4009:164:16",
										"text": "@notice The currently in range staked liquidity available to the pool\n @dev This value has no relationship to the total staked liquidity across all ticks"
									},
									"functionSelector": "3ab04b20",
									"id": 1822,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "stakedLiquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1818,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4202:2:16"
									},
									"returnParameters": {
										"id": 1821,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1820,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1822,
												"src": "4228:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1819,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4228:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4227:9:16"
									},
									"scope": 1899,
									"src": "4178:59:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1823,
										"nodeType": "StructuredDocumentation",
										"src": "4243:1463:16",
										"text": "@notice Look up information about a specific tick in the pool\n @param tick The tick to look up\n @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n tick upper,\n liquidityNet how much liquidity changes when the pool price crosses the tick,\n stakedLiquidityNet how much staked liquidity changes when the pool price crosses the tick,\n feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n rewardGrowthOutsideX128 the reward growth on the other side of the tick from the current tick in emission token\n tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n secondsOutside the seconds spent on the other side of the tick from the current tick,\n initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n In addition, these values are only relative and must be used only in comparison to previous snapshots for\n a specific position."
									},
									"functionSelector": "f30dba93",
									"id": 1848,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ticks",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1826,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1825,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 1848,
												"src": "5726:10:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1824,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "5726:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5725:12:16"
									},
									"returnParameters": {
										"id": 1847,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1828,
												"mutability": "mutable",
												"name": "liquidityGross",
												"nodeType": "VariableDeclaration",
												"scope": 1848,
												"src": "5798:22:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1827,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5798:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1830,
												"mutability": "mutable",
												"name": "liquidityNet",
												"nodeType": "VariableDeclaration",
												"scope": 1848,
												"src": "5834:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 1829,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "5834:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1832,
												"mutability": "mutable",
												"name": "stakedLiquidityNet",
												"nodeType": "VariableDeclaration",
												"scope": 1848,
												"src": "5867:25:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 1831,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "5867:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1834,
												"mutability": "mutable",
												"name": "feeGrowthOutside0X128",
												"nodeType": "VariableDeclaration",
												"scope": 1848,
												"src": "5906:29:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1833,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5906:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1836,
												"mutability": "mutable",
												"name": "feeGrowthOutside1X128",
												"nodeType": "VariableDeclaration",
												"scope": 1848,
												"src": "5949:29:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1835,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5949:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1838,
												"mutability": "mutable",
												"name": "rewardGrowthOutsideX128",
												"nodeType": "VariableDeclaration",
												"scope": 1848,
												"src": "5992:31:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1837,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5992:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1840,
												"mutability": "mutable",
												"name": "tickCumulativeOutside",
												"nodeType": "VariableDeclaration",
												"scope": 1848,
												"src": "6037:27:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 1839,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "6037:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1842,
												"mutability": "mutable",
												"name": "secondsPerLiquidityOutsideX128",
												"nodeType": "VariableDeclaration",
												"scope": 1848,
												"src": "6078:38:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1841,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "6078:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1844,
												"mutability": "mutable",
												"name": "secondsOutside",
												"nodeType": "VariableDeclaration",
												"scope": 1848,
												"src": "6130:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1843,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "6130:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1846,
												"mutability": "mutable",
												"name": "initialized",
												"nodeType": "VariableDeclaration",
												"scope": 1848,
												"src": "6165:16:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1845,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6165:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5784:407:16"
									},
									"scope": 1899,
									"src": "5711:481:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1849,
										"nodeType": "StructuredDocumentation",
										"src": "6198:99:16",
										"text": "@notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
									},
									"functionSelector": "5339c296",
									"id": 1856,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tickBitmap",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1852,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1851,
												"mutability": "mutable",
												"name": "wordPosition",
												"nodeType": "VariableDeclaration",
												"scope": 1856,
												"src": "6322:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int16",
													"typeString": "int16"
												},
												"typeName": {
													"id": 1850,
													"name": "int16",
													"nodeType": "ElementaryTypeName",
													"src": "6322:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int16",
														"typeString": "int16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6321:20:16"
									},
									"returnParameters": {
										"id": 1855,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1854,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1856,
												"src": "6365:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1853,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6365:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6364:9:16"
									},
									"scope": 1899,
									"src": "6302:72:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1857,
										"nodeType": "StructuredDocumentation",
										"src": "6380:700:16",
										"text": "@notice Returns the information about a position by the position's key\n @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n @return _liquidity The amount of liquidity in the position,\n Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
									},
									"functionSelector": "514ea4bf",
									"id": 1872,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "positions",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1860,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1859,
												"mutability": "mutable",
												"name": "key",
												"nodeType": "VariableDeclaration",
												"scope": 1872,
												"src": "7104:11:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1858,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7104:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7103:13:16"
									},
									"returnParameters": {
										"id": 1871,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1862,
												"mutability": "mutable",
												"name": "_liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 1872,
												"src": "7177:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1861,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "7177:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1864,
												"mutability": "mutable",
												"name": "feeGrowthInside0LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 1872,
												"src": "7209:32:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1863,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7209:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1866,
												"mutability": "mutable",
												"name": "feeGrowthInside1LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 1872,
												"src": "7255:32:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1865,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7255:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1868,
												"mutability": "mutable",
												"name": "tokensOwed0",
												"nodeType": "VariableDeclaration",
												"scope": 1872,
												"src": "7301:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1867,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "7301:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1870,
												"mutability": "mutable",
												"name": "tokensOwed1",
												"nodeType": "VariableDeclaration",
												"scope": 1872,
												"src": "7334:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1869,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "7334:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7163:200:16"
									},
									"scope": 1899,
									"src": "7085:279:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1873,
										"nodeType": "StructuredDocumentation",
										"src": "7370:749:16",
										"text": "@notice Returns data about a specific observation index\n @param index The element of the observations array to fetch\n @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n ago, rather than at a specific index in the array.\n @return blockTimestamp The timestamp of the observation,\n Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n Returns initialized whether the observation has been initialized and the values are safe to use"
									},
									"functionSelector": "252c09d7",
									"id": 1886,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "observations",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1876,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1875,
												"mutability": "mutable",
												"name": "index",
												"nodeType": "VariableDeclaration",
												"scope": 1886,
												"src": "8146:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1874,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8146:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8145:15:16"
									},
									"returnParameters": {
										"id": 1885,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1878,
												"mutability": "mutable",
												"name": "blockTimestamp",
												"nodeType": "VariableDeclaration",
												"scope": 1886,
												"src": "8221:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1877,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "8221:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1880,
												"mutability": "mutable",
												"name": "tickCumulative",
												"nodeType": "VariableDeclaration",
												"scope": 1886,
												"src": "8256:20:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 1879,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "8256:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1882,
												"mutability": "mutable",
												"name": "secondsPerLiquidityCumulativeX128",
												"nodeType": "VariableDeclaration",
												"scope": 1886,
												"src": "8290:41:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1881,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "8290:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1884,
												"mutability": "mutable",
												"name": "initialized",
												"nodeType": "VariableDeclaration",
												"scope": 1886,
												"src": "8345:16:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1883,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8345:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8207:164:16"
									},
									"scope": 1899,
									"src": "8124:248:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1887,
										"nodeType": "StructuredDocumentation",
										"src": "8378:541:16",
										"text": "@notice Returns data about reward growth within a tick range.\n RewardGrowthGlobalX128 can be supplied as a parameter for claimable reward calculations.\n @dev Used in gauge reward/earned calculations\n @param tickLower The lower tick of the range\n @param tickUpper The upper tick of the range\n @param _rewardGrowthGlobalX128 a calculated rewardGrowthGlobalX128 or 0 (in case of 0 it means we use the rewardGrowthGlobalX128 from state)\n @return rewardGrowthInsideX128 The reward growth in the range"
									},
									"functionSelector": "a16368c9",
									"id": 1898,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getRewardGrowthInside",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1894,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1889,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 1898,
												"src": "8955:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1888,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "8955:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1891,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 1898,
												"src": "8972:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1890,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "8972:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1893,
												"mutability": "mutable",
												"name": "_rewardGrowthGlobalX128",
												"nodeType": "VariableDeclaration",
												"scope": 1898,
												"src": "8989:31:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1892,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8989:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8954:67:16"
									},
									"returnParameters": {
										"id": 1897,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1896,
												"mutability": "mutable",
												"name": "rewardGrowthInsideX128",
												"nodeType": "VariableDeclaration",
												"scope": 1898,
												"src": "9069:30:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1895,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9069:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9068:32:16"
									},
									"scope": 1899,
									"src": "8924:177:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1900,
							"src": "240:8863:16"
						}
					],
					"src": "45:9059:16"
				},
				"id": 16
			},
			"contracts/core/libraries/BitMath.sol": {
				"ast": {
					"absolutePath": "contracts/core/libraries/BitMath.sol",
					"exportedSymbols": {
						"BitMath": [
							2178
						]
					},
					"id": 2179,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1901,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:17"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1902,
								"nodeType": "StructuredDocumentation",
								"src": "71:116:17",
								"text": "@title BitMath\n @dev This library provides functionality for computing bit properties of an unsigned integer"
							},
							"fullyImplemented": true,
							"id": 2178,
							"linearizedBaseContracts": [
								2178
							],
							"name": "BitMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2015,
										"nodeType": "Block",
										"src": "742:660:17",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1913,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1911,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1905,
																"src": "760:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1912,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "764:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "760:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1910,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "752:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1914,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "752:14:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1915,
												"nodeType": "ExpressionStatement",
												"src": "752:14:17"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1918,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1916,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1905,
														"src": "781:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"hexValue": "3078313030303030303030303030303030303030303030303030303030303030303030",
														"id": 1917,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "786:35:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
															"typeString": "int_const 3402...(31 digits omitted)...1456"
														},
														"value": "0x100000000000000000000000000000000"
													},
													"src": "781:40:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1928,
												"nodeType": "IfStatement",
												"src": "777:102:17",
												"trueBody": {
													"id": 1927,
													"nodeType": "Block",
													"src": "823:56:17",
													"statements": [
														{
															"expression": {
																"id": 1921,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1919,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1905,
																	"src": "837:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "313238",
																	"id": 1920,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "843:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "837:9:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1922,
															"nodeType": "ExpressionStatement",
															"src": "837:9:17"
														},
														{
															"expression": {
																"id": 1925,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1923,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1908,
																	"src": "860:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "313238",
																	"id": 1924,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "865:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "860:8:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 1926,
															"nodeType": "ExpressionStatement",
															"src": "860:8:17"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1931,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1929,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1905,
														"src": "892:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"hexValue": "30783130303030303030303030303030303030",
														"id": 1930,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "897:19:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_18446744073709551616_by_1",
															"typeString": "int_const 18446744073709551616"
														},
														"value": "0x10000000000000000"
													},
													"src": "892:24:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1941,
												"nodeType": "IfStatement",
												"src": "888:84:17",
												"trueBody": {
													"id": 1940,
													"nodeType": "Block",
													"src": "918:54:17",
													"statements": [
														{
															"expression": {
																"id": 1934,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1932,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1905,
																	"src": "932:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "3634",
																	"id": 1933,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "938:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "932:8:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1935,
															"nodeType": "ExpressionStatement",
															"src": "932:8:17"
														},
														{
															"expression": {
																"id": 1938,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1936,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1908,
																	"src": "954:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "3634",
																	"id": 1937,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "959:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "954:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 1939,
															"nodeType": "ExpressionStatement",
															"src": "954:7:17"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1944,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1942,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1905,
														"src": "985:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"hexValue": "3078313030303030303030",
														"id": 1943,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "990:11:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_4294967296_by_1",
															"typeString": "int_const 4294967296"
														},
														"value": "0x100000000"
													},
													"src": "985:16:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1954,
												"nodeType": "IfStatement",
												"src": "981:76:17",
												"trueBody": {
													"id": 1953,
													"nodeType": "Block",
													"src": "1003:54:17",
													"statements": [
														{
															"expression": {
																"id": 1947,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1945,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1905,
																	"src": "1017:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "3332",
																	"id": 1946,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1023:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "1017:8:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1948,
															"nodeType": "ExpressionStatement",
															"src": "1017:8:17"
														},
														{
															"expression": {
																"id": 1951,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1949,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1908,
																	"src": "1039:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "3332",
																	"id": 1950,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1044:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "1039:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 1952,
															"nodeType": "ExpressionStatement",
															"src": "1039:7:17"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1957,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1955,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1905,
														"src": "1070:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"hexValue": "30783130303030",
														"id": 1956,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1075:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_65536_by_1",
															"typeString": "int_const 65536"
														},
														"value": "0x10000"
													},
													"src": "1070:12:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1967,
												"nodeType": "IfStatement",
												"src": "1066:72:17",
												"trueBody": {
													"id": 1966,
													"nodeType": "Block",
													"src": "1084:54:17",
													"statements": [
														{
															"expression": {
																"id": 1960,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1958,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1905,
																	"src": "1098:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "3136",
																	"id": 1959,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1104:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "1098:8:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1961,
															"nodeType": "ExpressionStatement",
															"src": "1098:8:17"
														},
														{
															"expression": {
																"id": 1964,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1962,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1908,
																	"src": "1120:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "3136",
																	"id": 1963,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1125:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "1120:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 1965,
															"nodeType": "ExpressionStatement",
															"src": "1120:7:17"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1970,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1968,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1905,
														"src": "1151:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"hexValue": "3078313030",
														"id": 1969,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1156:5:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_256_by_1",
															"typeString": "int_const 256"
														},
														"value": "0x100"
													},
													"src": "1151:10:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1980,
												"nodeType": "IfStatement",
												"src": "1147:68:17",
												"trueBody": {
													"id": 1979,
													"nodeType": "Block",
													"src": "1163:52:17",
													"statements": [
														{
															"expression": {
																"id": 1973,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1971,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1905,
																	"src": "1177:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "38",
																	"id": 1972,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1183:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "1177:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1974,
															"nodeType": "ExpressionStatement",
															"src": "1177:7:17"
														},
														{
															"expression": {
																"id": 1977,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1975,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1908,
																	"src": "1198:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "38",
																	"id": 1976,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1203:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "1198:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 1978,
															"nodeType": "ExpressionStatement",
															"src": "1198:6:17"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1983,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1981,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1905,
														"src": "1228:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"hexValue": "30783130",
														"id": 1982,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1233:4:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_16_by_1",
															"typeString": "int_const 16"
														},
														"value": "0x10"
													},
													"src": "1228:9:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1993,
												"nodeType": "IfStatement",
												"src": "1224:67:17",
												"trueBody": {
													"id": 1992,
													"nodeType": "Block",
													"src": "1239:52:17",
													"statements": [
														{
															"expression": {
																"id": 1986,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1984,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1905,
																	"src": "1253:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 1985,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1259:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "1253:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1987,
															"nodeType": "ExpressionStatement",
															"src": "1253:7:17"
														},
														{
															"expression": {
																"id": 1990,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1988,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1908,
																	"src": "1274:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 1989,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1279:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "1274:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 1991,
															"nodeType": "ExpressionStatement",
															"src": "1274:6:17"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1996,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1994,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1905,
														"src": "1304:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"hexValue": "307834",
														"id": 1995,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1309:3:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_4_by_1",
															"typeString": "int_const 4"
														},
														"value": "0x4"
													},
													"src": "1304:8:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2006,
												"nodeType": "IfStatement",
												"src": "1300:66:17",
												"trueBody": {
													"id": 2005,
													"nodeType": "Block",
													"src": "1314:52:17",
													"statements": [
														{
															"expression": {
																"id": 1999,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1997,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1905,
																	"src": "1328:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "32",
																	"id": 1998,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1334:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "1328:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2000,
															"nodeType": "ExpressionStatement",
															"src": "1328:7:17"
														},
														{
															"expression": {
																"id": 2003,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2001,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1908,
																	"src": "1349:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "32",
																	"id": 2002,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1354:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "1349:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 2004,
															"nodeType": "ExpressionStatement",
															"src": "1349:6:17"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2009,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2007,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1905,
														"src": "1379:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"hexValue": "307832",
														"id": 2008,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1384:3:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_2_by_1",
															"typeString": "int_const 2"
														},
														"value": "0x2"
													},
													"src": "1379:8:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2014,
												"nodeType": "IfStatement",
												"src": "1375:20:17",
												"trueBody": {
													"expression": {
														"id": 2012,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2010,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1908,
															"src": "1389:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "Assignment",
														"operator": "+=",
														"rightHandSide": {
															"hexValue": "31",
															"id": 2011,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1394:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1389:6:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"id": 2013,
													"nodeType": "ExpressionStatement",
													"src": "1389:6:17"
												}
											}
										]
									},
									"documentation": {
										"id": 1903,
										"nodeType": "StructuredDocumentation",
										"src": "209:457:17",
										"text": "@notice Returns the index of the most significant bit of the number,\n     where the least significant bit is at index 0 and the most significant bit is at index 255\n @dev The function satisfies the property:\n     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\n @param x the value for which to compute the most significant bit, must be greater than 0\n @return r the index of the most significant bit"
									},
									"id": 2016,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mostSignificantBit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1906,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1905,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 2016,
												"src": "699:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1904,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "699:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "698:11:17"
									},
									"returnParameters": {
										"id": 1909,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1908,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 2016,
												"src": "733:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1907,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "733:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "732:9:17"
									},
									"scope": 2178,
									"src": "671:731:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2176,
										"nodeType": "Block",
										"src": "1965:822:17",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2027,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2025,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2019,
																"src": "1983:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2026,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1987:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1983:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2024,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1975:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 2028,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1975:14:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2029,
												"nodeType": "ExpressionStatement",
												"src": "1975:14:17"
											},
											{
												"expression": {
													"id": 2032,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2030,
														"name": "r",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2022,
														"src": "2000:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "323535",
														"id": 2031,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2004:3:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_255_by_1",
															"typeString": "int_const 255"
														},
														"value": "255"
													},
													"src": "2000:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 2033,
												"nodeType": "ExpressionStatement",
												"src": "2000:7:17"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2042,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2040,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2034,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2019,
															"src": "2021:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 2037,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2030:7:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint128_$",
																			"typeString": "type(uint128)"
																		},
																		"typeName": {
																			"id": 2036,
																			"name": "uint128",
																			"nodeType": "ElementaryTypeName",
																			"src": "2030:7:17",
																			"typeDescriptions": {}
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_uint128_$",
																			"typeString": "type(uint128)"
																		}
																	],
																	"id": 2035,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "2025:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 2038,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2025:13:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_uint128",
																	"typeString": "type(uint128)"
																}
															},
															"id": 2039,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "max",
															"nodeType": "MemberAccess",
															"src": "2025:17:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														"src": "2021:21:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2041,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2045:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2021:25:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2052,
													"nodeType": "Block",
													"src": "2087:34:17",
													"statements": [
														{
															"expression": {
																"id": 2050,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2048,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2019,
																	"src": "2101:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "313238",
																	"id": 2049,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2107:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "2101:9:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2051,
															"nodeType": "ExpressionStatement",
															"src": "2101:9:17"
														}
													]
												},
												"id": 2053,
												"nodeType": "IfStatement",
												"src": "2017:104:17",
												"trueBody": {
													"id": 2047,
													"nodeType": "Block",
													"src": "2048:33:17",
													"statements": [
														{
															"expression": {
																"id": 2045,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2043,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2022,
																	"src": "2062:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "313238",
																	"id": 2044,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2067:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "2062:8:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 2046,
															"nodeType": "ExpressionStatement",
															"src": "2062:8:17"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2062,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2060,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2054,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2019,
															"src": "2134:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 2057,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2143:6:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint64_$",
																			"typeString": "type(uint64)"
																		},
																		"typeName": {
																			"id": 2056,
																			"name": "uint64",
																			"nodeType": "ElementaryTypeName",
																			"src": "2143:6:17",
																			"typeDescriptions": {}
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_uint64_$",
																			"typeString": "type(uint64)"
																		}
																	],
																	"id": 2055,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "2138:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 2058,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2138:12:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_uint64",
																	"typeString": "type(uint64)"
																}
															},
															"id": 2059,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "max",
															"nodeType": "MemberAccess",
															"src": "2138:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"src": "2134:20:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2061,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2157:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2134:24:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2072,
													"nodeType": "Block",
													"src": "2198:33:17",
													"statements": [
														{
															"expression": {
																"id": 2070,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2068,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2019,
																	"src": "2212:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "3634",
																	"id": 2069,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2218:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "2212:8:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2071,
															"nodeType": "ExpressionStatement",
															"src": "2212:8:17"
														}
													]
												},
												"id": 2073,
												"nodeType": "IfStatement",
												"src": "2130:101:17",
												"trueBody": {
													"id": 2067,
													"nodeType": "Block",
													"src": "2160:32:17",
													"statements": [
														{
															"expression": {
																"id": 2065,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2063,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2022,
																	"src": "2174:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "3634",
																	"id": 2064,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2179:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "2174:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 2066,
															"nodeType": "ExpressionStatement",
															"src": "2174:7:17"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2082,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2080,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2074,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2019,
															"src": "2244:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 2077,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2253:6:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint32_$",
																			"typeString": "type(uint32)"
																		},
																		"typeName": {
																			"id": 2076,
																			"name": "uint32",
																			"nodeType": "ElementaryTypeName",
																			"src": "2253:6:17",
																			"typeDescriptions": {}
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_uint32_$",
																			"typeString": "type(uint32)"
																		}
																	],
																	"id": 2075,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "2248:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 2078,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2248:12:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_uint32",
																	"typeString": "type(uint32)"
																}
															},
															"id": 2079,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "max",
															"nodeType": "MemberAccess",
															"src": "2248:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														"src": "2244:20:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2081,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2267:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2244:24:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2092,
													"nodeType": "Block",
													"src": "2308:33:17",
													"statements": [
														{
															"expression": {
																"id": 2090,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2088,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2019,
																	"src": "2322:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "3332",
																	"id": 2089,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2328:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "2322:8:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2091,
															"nodeType": "ExpressionStatement",
															"src": "2322:8:17"
														}
													]
												},
												"id": 2093,
												"nodeType": "IfStatement",
												"src": "2240:101:17",
												"trueBody": {
													"id": 2087,
													"nodeType": "Block",
													"src": "2270:32:17",
													"statements": [
														{
															"expression": {
																"id": 2085,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2083,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2022,
																	"src": "2284:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "3332",
																	"id": 2084,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2289:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "2284:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 2086,
															"nodeType": "ExpressionStatement",
															"src": "2284:7:17"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2102,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2100,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2094,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2019,
															"src": "2354:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 2097,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2363:6:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint16_$",
																			"typeString": "type(uint16)"
																		},
																		"typeName": {
																			"id": 2096,
																			"name": "uint16",
																			"nodeType": "ElementaryTypeName",
																			"src": "2363:6:17",
																			"typeDescriptions": {}
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_uint16_$",
																			"typeString": "type(uint16)"
																		}
																	],
																	"id": 2095,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "2358:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 2098,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2358:12:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_uint16",
																	"typeString": "type(uint16)"
																}
															},
															"id": 2099,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "max",
															"nodeType": "MemberAccess",
															"src": "2358:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														},
														"src": "2354:20:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2101,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2377:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2354:24:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2112,
													"nodeType": "Block",
													"src": "2418:33:17",
													"statements": [
														{
															"expression": {
																"id": 2110,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2108,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2019,
																	"src": "2432:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "3136",
																	"id": 2109,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2438:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "2432:8:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2111,
															"nodeType": "ExpressionStatement",
															"src": "2432:8:17"
														}
													]
												},
												"id": 2113,
												"nodeType": "IfStatement",
												"src": "2350:101:17",
												"trueBody": {
													"id": 2107,
													"nodeType": "Block",
													"src": "2380:32:17",
													"statements": [
														{
															"expression": {
																"id": 2105,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2103,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2022,
																	"src": "2394:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "3136",
																	"id": 2104,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2399:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "2394:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 2106,
															"nodeType": "ExpressionStatement",
															"src": "2394:7:17"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2122,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2120,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2114,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2019,
															"src": "2464:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 2117,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2473:5:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint8_$",
																			"typeString": "type(uint8)"
																		},
																		"typeName": {
																			"id": 2116,
																			"name": "uint8",
																			"nodeType": "ElementaryTypeName",
																			"src": "2473:5:17",
																			"typeDescriptions": {}
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_uint8_$",
																			"typeString": "type(uint8)"
																		}
																	],
																	"id": 2115,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "2468:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 2118,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2468:11:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_uint8",
																	"typeString": "type(uint8)"
																}
															},
															"id": 2119,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "max",
															"nodeType": "MemberAccess",
															"src": "2468:15:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"src": "2464:19:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2121,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2486:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2464:23:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2132,
													"nodeType": "Block",
													"src": "2526:32:17",
													"statements": [
														{
															"expression": {
																"id": 2130,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2128,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2019,
																	"src": "2540:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "38",
																	"id": 2129,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2546:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "2540:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2131,
															"nodeType": "ExpressionStatement",
															"src": "2540:7:17"
														}
													]
												},
												"id": 2133,
												"nodeType": "IfStatement",
												"src": "2460:98:17",
												"trueBody": {
													"id": 2127,
													"nodeType": "Block",
													"src": "2489:31:17",
													"statements": [
														{
															"expression": {
																"id": 2125,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2123,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2022,
																	"src": "2503:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "38",
																	"id": 2124,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2508:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "2503:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 2126,
															"nodeType": "ExpressionStatement",
															"src": "2503:6:17"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2136,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2134,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2019,
															"src": "2571:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307866",
															"id": 2135,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2575:3:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_15_by_1",
																"typeString": "int_const 15"
															},
															"value": "0xf"
														},
														"src": "2571:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2137,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2581:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2571:11:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2148,
													"nodeType": "Block",
													"src": "2621:32:17",
													"statements": [
														{
															"expression": {
																"id": 2146,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2144,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2019,
																	"src": "2635:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 2145,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2641:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "2635:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2147,
															"nodeType": "ExpressionStatement",
															"src": "2635:7:17"
														}
													]
												},
												"id": 2149,
												"nodeType": "IfStatement",
												"src": "2567:86:17",
												"trueBody": {
													"id": 2143,
													"nodeType": "Block",
													"src": "2584:31:17",
													"statements": [
														{
															"expression": {
																"id": 2141,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2139,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2022,
																	"src": "2598:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 2140,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2603:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "2598:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 2142,
															"nodeType": "ExpressionStatement",
															"src": "2598:6:17"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2154,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2152,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2150,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2019,
															"src": "2666:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307833",
															"id": 2151,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2670:3:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_3_by_1",
																"typeString": "int_const 3"
															},
															"value": "0x3"
														},
														"src": "2666:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2153,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2676:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2666:11:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2164,
													"nodeType": "Block",
													"src": "2716:32:17",
													"statements": [
														{
															"expression": {
																"id": 2162,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2160,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2019,
																	"src": "2730:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "32",
																	"id": 2161,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2736:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "2730:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2163,
															"nodeType": "ExpressionStatement",
															"src": "2730:7:17"
														}
													]
												},
												"id": 2165,
												"nodeType": "IfStatement",
												"src": "2662:86:17",
												"trueBody": {
													"id": 2159,
													"nodeType": "Block",
													"src": "2679:31:17",
													"statements": [
														{
															"expression": {
																"id": 2157,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2155,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2022,
																	"src": "2693:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "32",
																	"id": 2156,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2698:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "2693:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 2158,
															"nodeType": "ExpressionStatement",
															"src": "2693:6:17"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2170,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2168,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2166,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2019,
															"src": "2761:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307831",
															"id": 2167,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2765:3:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "0x1"
														},
														"src": "2761:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2169,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2771:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2761:11:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2175,
												"nodeType": "IfStatement",
												"src": "2757:23:17",
												"trueBody": {
													"expression": {
														"id": 2173,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2171,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2022,
															"src": "2774:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "Assignment",
														"operator": "-=",
														"rightHandSide": {
															"hexValue": "31",
															"id": 2172,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2779:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "2774:6:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"id": 2174,
													"nodeType": "ExpressionStatement",
													"src": "2774:6:17"
												}
											}
										]
									},
									"documentation": {
										"id": 2017,
										"nodeType": "StructuredDocumentation",
										"src": "1408:480:17",
										"text": "@notice Returns the index of the least significant bit of the number,\n     where the least significant bit is at index 0 and the most significant bit is at index 255\n @dev The function satisfies the property:\n     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\n @param x the value for which to compute the least significant bit, must be greater than 0\n @return r the index of the least significant bit"
									},
									"id": 2177,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "leastSignificantBit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2020,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2019,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 2177,
												"src": "1922:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2018,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1922:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1921:11:17"
									},
									"returnParameters": {
										"id": 2023,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2022,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 2177,
												"src": "1956:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2021,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1956:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1955:9:17"
									},
									"scope": 2178,
									"src": "1893:894:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2179,
							"src": "187:2602:17"
						}
					],
					"src": "45:2745:17"
				},
				"id": 17
			},
			"contracts/core/libraries/FixedPoint128.sol": {
				"ast": {
					"absolutePath": "contracts/core/libraries/FixedPoint128.sol",
					"exportedSymbols": {
						"FixedPoint128": [
							2185
						]
					},
					"id": 2186,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2180,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:18"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2181,
								"nodeType": "StructuredDocumentation",
								"src": "71:140:18",
								"text": "@title FixedPoint128\n @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)"
							},
							"fullyImplemented": true,
							"id": 2185,
							"linearizedBaseContracts": [
								2185
							],
							"name": "FixedPoint128",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 2184,
									"mutability": "constant",
									"name": "Q128",
									"nodeType": "VariableDeclaration",
									"scope": 2185,
									"src": "239:68:18",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2182,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "239:7:18",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3078313030303030303030303030303030303030303030303030303030303030303030",
										"id": 2183,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "272:35:18",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
											"typeString": "int_const 3402...(31 digits omitted)...1456"
										},
										"value": "0x100000000000000000000000000000000"
									},
									"visibility": "internal"
								}
							],
							"scope": 2186,
							"src": "211:99:18"
						}
					],
					"src": "45:266:18"
				},
				"id": 18
			},
			"contracts/core/libraries/FixedPoint96.sol": {
				"ast": {
					"absolutePath": "contracts/core/libraries/FixedPoint96.sol",
					"exportedSymbols": {
						"FixedPoint96": [
							2195
						]
					},
					"id": 2196,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2187,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:19"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2188,
								"nodeType": "StructuredDocumentation",
								"src": "71:174:19",
								"text": "@title FixedPoint96\n @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\n @dev Used in SqrtPriceMath.sol"
							},
							"fullyImplemented": true,
							"id": 2195,
							"linearizedBaseContracts": [
								2195
							],
							"name": "FixedPoint96",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 2191,
									"mutability": "constant",
									"name": "RESOLUTION",
									"nodeType": "VariableDeclaration",
									"scope": 2195,
									"src": "272:39:19",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 2189,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "272:5:19",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "3936",
										"id": 2190,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "309:2:19",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_96_by_1",
											"typeString": "int_const 96"
										},
										"value": "96"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2194,
									"mutability": "constant",
									"name": "Q96",
									"nodeType": "VariableDeclaration",
									"scope": 2195,
									"src": "317:59:19",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2192,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "317:7:19",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "307831303030303030303030303030303030303030303030303030",
										"id": 2193,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "349:27:19",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_79228162514264337593543950336_by_1",
											"typeString": "int_const 79228162514264337593543950336"
										},
										"value": "0x1000000000000000000000000"
									},
									"visibility": "internal"
								}
							],
							"scope": 2196,
							"src": "245:134:19"
						}
					],
					"src": "45:335:19"
				},
				"id": 19
			},
			"contracts/core/libraries/FullMath.sol": {
				"ast": {
					"absolutePath": "contracts/core/libraries/FullMath.sol",
					"exportedSymbols": {
						"FullMath": [
							2368
						]
					},
					"id": 2369,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2197,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:31:20"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2198,
								"nodeType": "StructuredDocumentation",
								"src": "65:297:20",
								"text": "@title Contains 512-bit math functions\n @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits"
							},
							"fullyImplemented": true,
							"id": 2368,
							"linearizedBaseContracts": [
								2368
							],
							"name": "FullMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2323,
										"nodeType": "Block",
										"src": "847:3648:20",
										"statements": [
											{
												"assignments": [
													2211
												],
												"declarations": [
													{
														"constant": false,
														"id": 2211,
														"mutability": "mutable",
														"name": "prod0",
														"nodeType": "VariableDeclaration",
														"scope": 2323,
														"src": "1160:13:20",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2210,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1160:7:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2212,
												"nodeType": "VariableDeclarationStatement",
												"src": "1160:13:20"
											},
											{
												"assignments": [
													2214
												],
												"declarations": [
													{
														"constant": false,
														"id": 2214,
														"mutability": "mutable",
														"name": "prod1",
														"nodeType": "VariableDeclaration",
														"scope": 2323,
														"src": "1228:13:20",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2213,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1228:7:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2215,
												"nodeType": "VariableDeclarationStatement",
												"src": "1228:13:20"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "1304:141:20",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1318:30:20",
															"value": {
																"arguments": [
																	{
																		"name": "a",
																		"nodeType": "YulIdentifier",
																		"src": "1335:1:20"
																	},
																	{
																		"name": "b",
																		"nodeType": "YulIdentifier",
																		"src": "1338:1:20"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1345:1:20",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "1341:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1341:6:20"
																	}
																],
																"functionName": {
																	"name": "mulmod",
																	"nodeType": "YulIdentifier",
																	"src": "1328:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "1328:20:20"
															},
															"variables": [
																{
																	"name": "mm",
																	"nodeType": "YulTypedName",
																	"src": "1322:2:20",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1361:18:20",
															"value": {
																"arguments": [
																	{
																		"name": "a",
																		"nodeType": "YulIdentifier",
																		"src": "1374:1:20"
																	},
																	{
																		"name": "b",
																		"nodeType": "YulIdentifier",
																		"src": "1377:1:20"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "1370:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "1370:9:20"
															},
															"variableNames": [
																{
																	"name": "prod0",
																	"nodeType": "YulIdentifier",
																	"src": "1361:5:20"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1392:43:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "mm",
																				"nodeType": "YulIdentifier",
																				"src": "1409:2:20"
																			},
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "1413:5:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1405:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1405:14:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "mm",
																				"nodeType": "YulIdentifier",
																				"src": "1424:2:20"
																			},
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "1428:5:20"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1421:2:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1421:13:20"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "1401:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "1401:34:20"
															},
															"variableNames": [
																{
																	"name": "prod1",
																	"nodeType": "YulIdentifier",
																	"src": "1392:5:20"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2201,
														"isOffset": false,
														"isSlot": false,
														"src": "1335:1:20",
														"valueSize": 1
													},
													{
														"declaration": 2201,
														"isOffset": false,
														"isSlot": false,
														"src": "1374:1:20",
														"valueSize": 1
													},
													{
														"declaration": 2203,
														"isOffset": false,
														"isSlot": false,
														"src": "1338:1:20",
														"valueSize": 1
													},
													{
														"declaration": 2203,
														"isOffset": false,
														"isSlot": false,
														"src": "1377:1:20",
														"valueSize": 1
													},
													{
														"declaration": 2211,
														"isOffset": false,
														"isSlot": false,
														"src": "1361:5:20",
														"valueSize": 1
													},
													{
														"declaration": 2211,
														"isOffset": false,
														"isSlot": false,
														"src": "1413:5:20",
														"valueSize": 1
													},
													{
														"declaration": 2211,
														"isOffset": false,
														"isSlot": false,
														"src": "1428:5:20",
														"valueSize": 1
													},
													{
														"declaration": 2214,
														"isOffset": false,
														"isSlot": false,
														"src": "1392:5:20",
														"valueSize": 1
													}
												],
												"id": 2216,
												"nodeType": "InlineAssembly",
												"src": "1295:150:20"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2219,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2217,
														"name": "prod1",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2214,
														"src": "1517:5:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2218,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1526:1:20",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1517:10:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2230,
												"nodeType": "IfStatement",
												"src": "1513:179:20",
												"trueBody": {
													"id": 2229,
													"nodeType": "Block",
													"src": "1529:163:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2223,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2221,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2205,
																			"src": "1551:11:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 2222,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1565:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1551:15:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 2220,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "1543:7:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																		"typeString": "function (bool) pure"
																	}
																},
																"id": 2224,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1543:24:20",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2225,
															"nodeType": "ExpressionStatement",
															"src": "1543:24:20"
														},
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "1590:65:20",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1608:33:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "prod0",
																					"nodeType": "YulIdentifier",
																					"src": "1622:5:20"
																				},
																				{
																					"name": "denominator",
																					"nodeType": "YulIdentifier",
																					"src": "1629:11:20"
																				}
																			],
																			"functionName": {
																				"name": "div",
																				"nodeType": "YulIdentifier",
																				"src": "1618:3:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1618:23:20"
																		},
																		"variableNames": [
																			{
																				"name": "result",
																				"nodeType": "YulIdentifier",
																				"src": "1608:6:20"
																			}
																		]
																	}
																]
															},
															"evmVersion": "istanbul",
															"externalReferences": [
																{
																	"declaration": 2205,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "1629:11:20",
																	"valueSize": 1
																},
																{
																	"declaration": 2211,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "1622:5:20",
																	"valueSize": 1
																},
																{
																	"declaration": 2208,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "1608:6:20",
																	"valueSize": 1
																}
															],
															"id": 2226,
															"nodeType": "InlineAssembly",
															"src": "1581:74:20"
														},
														{
															"expression": {
																"id": 2227,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2208,
																"src": "1675:6:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 2209,
															"id": 2228,
															"nodeType": "Return",
															"src": "1668:13:20"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2234,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2232,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2205,
																"src": "1805:11:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 2233,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2214,
																"src": "1819:5:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1805:19:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2231,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1797:7:20",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 2235,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1797:28:20",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2236,
												"nodeType": "ExpressionStatement",
												"src": "1797:28:20"
											},
											{
												"assignments": [
													2238
												],
												"declarations": [
													{
														"constant": false,
														"id": 2238,
														"mutability": "mutable",
														"name": "remainder",
														"nodeType": "VariableDeclaration",
														"scope": 2323,
														"src": "2102:17:20",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2237,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2102:7:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2239,
												"nodeType": "VariableDeclarationStatement",
												"src": "2102:17:20"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2138:62:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2152:38:20",
															"value": {
																"arguments": [
																	{
																		"name": "a",
																		"nodeType": "YulIdentifier",
																		"src": "2172:1:20"
																	},
																	{
																		"name": "b",
																		"nodeType": "YulIdentifier",
																		"src": "2175:1:20"
																	},
																	{
																		"name": "denominator",
																		"nodeType": "YulIdentifier",
																		"src": "2178:11:20"
																	}
																],
																"functionName": {
																	"name": "mulmod",
																	"nodeType": "YulIdentifier",
																	"src": "2165:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "2165:25:20"
															},
															"variableNames": [
																{
																	"name": "remainder",
																	"nodeType": "YulIdentifier",
																	"src": "2152:9:20"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2201,
														"isOffset": false,
														"isSlot": false,
														"src": "2172:1:20",
														"valueSize": 1
													},
													{
														"declaration": 2203,
														"isOffset": false,
														"isSlot": false,
														"src": "2175:1:20",
														"valueSize": 1
													},
													{
														"declaration": 2205,
														"isOffset": false,
														"isSlot": false,
														"src": "2178:11:20",
														"valueSize": 1
													},
													{
														"declaration": 2238,
														"isOffset": false,
														"isSlot": false,
														"src": "2152:9:20",
														"valueSize": 1
													}
												],
												"id": 2240,
												"nodeType": "InlineAssembly",
												"src": "2129:71:20"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2273:108:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2287:41:20",
															"value": {
																"arguments": [
																	{
																		"name": "prod1",
																		"nodeType": "YulIdentifier",
																		"src": "2300:5:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "remainder",
																				"nodeType": "YulIdentifier",
																				"src": "2310:9:20"
																			},
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "2321:5:20"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "2307:2:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2307:20:20"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "2296:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "2296:32:20"
															},
															"variableNames": [
																{
																	"name": "prod1",
																	"nodeType": "YulIdentifier",
																	"src": "2287:5:20"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2341:30:20",
															"value": {
																"arguments": [
																	{
																		"name": "prod0",
																		"nodeType": "YulIdentifier",
																		"src": "2354:5:20"
																	},
																	{
																		"name": "remainder",
																		"nodeType": "YulIdentifier",
																		"src": "2361:9:20"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "2350:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "2350:21:20"
															},
															"variableNames": [
																{
																	"name": "prod0",
																	"nodeType": "YulIdentifier",
																	"src": "2341:5:20"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2211,
														"isOffset": false,
														"isSlot": false,
														"src": "2321:5:20",
														"valueSize": 1
													},
													{
														"declaration": 2211,
														"isOffset": false,
														"isSlot": false,
														"src": "2341:5:20",
														"valueSize": 1
													},
													{
														"declaration": 2211,
														"isOffset": false,
														"isSlot": false,
														"src": "2354:5:20",
														"valueSize": 1
													},
													{
														"declaration": 2214,
														"isOffset": false,
														"isSlot": false,
														"src": "2287:5:20",
														"valueSize": 1
													},
													{
														"declaration": 2214,
														"isOffset": false,
														"isSlot": false,
														"src": "2300:5:20",
														"valueSize": 1
													},
													{
														"declaration": 2238,
														"isOffset": false,
														"isSlot": false,
														"src": "2310:9:20",
														"valueSize": 1
													},
													{
														"declaration": 2238,
														"isOffset": false,
														"isSlot": false,
														"src": "2361:9:20",
														"valueSize": 1
													}
												],
												"id": 2241,
												"nodeType": "InlineAssembly",
												"src": "2264:117:20"
											},
											{
												"assignments": [
													2243
												],
												"declarations": [
													{
														"constant": false,
														"id": 2243,
														"mutability": "mutable",
														"name": "twos",
														"nodeType": "VariableDeclaration",
														"scope": 2323,
														"src": "2530:12:20",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2242,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2530:7:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2248,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2247,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2245,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "-",
														"prefix": true,
														"src": "2545:12:20",
														"subExpression": {
															"id": 2244,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2205,
															"src": "2546:11:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&",
													"rightExpression": {
														"id": 2246,
														"name": "denominator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2205,
														"src": "2560:11:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2545:26:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2530:41:20"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2636:61:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2650:37:20",
															"value": {
																"arguments": [
																	{
																		"name": "denominator",
																		"nodeType": "YulIdentifier",
																		"src": "2669:11:20"
																	},
																	{
																		"name": "twos",
																		"nodeType": "YulIdentifier",
																		"src": "2682:4:20"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "2665:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "2665:22:20"
															},
															"variableNames": [
																{
																	"name": "denominator",
																	"nodeType": "YulIdentifier",
																	"src": "2650:11:20"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2205,
														"isOffset": false,
														"isSlot": false,
														"src": "2650:11:20",
														"valueSize": 1
													},
													{
														"declaration": 2205,
														"isOffset": false,
														"isSlot": false,
														"src": "2669:11:20",
														"valueSize": 1
													},
													{
														"declaration": 2243,
														"isOffset": false,
														"isSlot": false,
														"src": "2682:4:20",
														"valueSize": 1
													}
												],
												"id": 2249,
												"nodeType": "InlineAssembly",
												"src": "2627:70:20"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2770:49:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2784:25:20",
															"value": {
																"arguments": [
																	{
																		"name": "prod0",
																		"nodeType": "YulIdentifier",
																		"src": "2797:5:20"
																	},
																	{
																		"name": "twos",
																		"nodeType": "YulIdentifier",
																		"src": "2804:4:20"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "2793:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "2793:16:20"
															},
															"variableNames": [
																{
																	"name": "prod0",
																	"nodeType": "YulIdentifier",
																	"src": "2784:5:20"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2211,
														"isOffset": false,
														"isSlot": false,
														"src": "2784:5:20",
														"valueSize": 1
													},
													{
														"declaration": 2211,
														"isOffset": false,
														"isSlot": false,
														"src": "2797:5:20",
														"valueSize": 1
													},
													{
														"declaration": 2243,
														"isOffset": false,
														"isSlot": false,
														"src": "2804:4:20",
														"valueSize": 1
													}
												],
												"id": 2250,
												"nodeType": "InlineAssembly",
												"src": "2761:58:20"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "3007:63:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3021:39:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3041:1:20",
																						"type": "",
																						"value": "0"
																					},
																					{
																						"name": "twos",
																						"nodeType": "YulIdentifier",
																						"src": "3044:4:20"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "3037:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3037:12:20"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "3051:4:20"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "3033:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3033:23:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3058:1:20",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3029:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "3029:31:20"
															},
															"variableNames": [
																{
																	"name": "twos",
																	"nodeType": "YulIdentifier",
																	"src": "3021:4:20"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2243,
														"isOffset": false,
														"isSlot": false,
														"src": "3021:4:20",
														"valueSize": 1
													},
													{
														"declaration": 2243,
														"isOffset": false,
														"isSlot": false,
														"src": "3044:4:20",
														"valueSize": 1
													},
													{
														"declaration": 2243,
														"isOffset": false,
														"isSlot": false,
														"src": "3051:4:20",
														"valueSize": 1
													}
												],
												"id": 2251,
												"nodeType": "InlineAssembly",
												"src": "2998:72:20"
											},
											{
												"expression": {
													"id": 2256,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2252,
														"name": "prod0",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2211,
														"src": "3079:5:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "|=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2255,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2253,
															"name": "prod1",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2214,
															"src": "3088:5:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"id": 2254,
															"name": "twos",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2243,
															"src": "3096:4:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3088:12:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3079:21:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2257,
												"nodeType": "ExpressionStatement",
												"src": "3079:21:20"
											},
											{
												"assignments": [
													2259
												],
												"declarations": [
													{
														"constant": false,
														"id": 2259,
														"mutability": "mutable",
														"name": "inv",
														"nodeType": "VariableDeclaration",
														"scope": 2323,
														"src": "3434:11:20",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2258,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3434:7:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2266,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2265,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2262,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "33",
																	"id": 2260,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3449:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_3_by_1",
																		"typeString": "int_const 3"
																	},
																	"value": "3"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2261,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2205,
																	"src": "3453:11:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3449:15:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2263,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "3448:17:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "^",
													"rightExpression": {
														"hexValue": "32",
														"id": 2264,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3468:1:20",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_2_by_1",
															"typeString": "int_const 2"
														},
														"value": "2"
													},
													"src": "3448:21:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3434:35:20"
											},
											{
												"expression": {
													"id": 2273,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2267,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2259,
														"src": "3684:3:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2272,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 2268,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3691:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2271,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2269,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2205,
																"src": "3695:11:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2270,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2259,
																"src": "3709:3:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3695:17:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3691:21:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3684:28:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2274,
												"nodeType": "ExpressionStatement",
												"src": "3684:28:20"
											},
											{
												"expression": {
													"id": 2281,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2275,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2259,
														"src": "3742:3:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2280,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 2276,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3749:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2279,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2277,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2205,
																"src": "3753:11:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2278,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2259,
																"src": "3767:3:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3753:17:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3749:21:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3742:28:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2282,
												"nodeType": "ExpressionStatement",
												"src": "3742:28:20"
											},
											{
												"expression": {
													"id": 2289,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2283,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2259,
														"src": "3801:3:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2288,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 2284,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3808:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2287,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2285,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2205,
																"src": "3812:11:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2286,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2259,
																"src": "3826:3:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3812:17:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3808:21:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3801:28:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2290,
												"nodeType": "ExpressionStatement",
												"src": "3801:28:20"
											},
											{
												"expression": {
													"id": 2297,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2291,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2259,
														"src": "3860:3:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2296,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 2292,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3867:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2295,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2293,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2205,
																"src": "3871:11:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2294,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2259,
																"src": "3885:3:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3871:17:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3867:21:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3860:28:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2298,
												"nodeType": "ExpressionStatement",
												"src": "3860:28:20"
											},
											{
												"expression": {
													"id": 2305,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2299,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2259,
														"src": "3919:3:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2304,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 2300,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3926:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2303,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2301,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2205,
																"src": "3930:11:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2302,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2259,
																"src": "3944:3:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3930:17:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3926:21:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3919:28:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2306,
												"nodeType": "ExpressionStatement",
												"src": "3919:28:20"
											},
											{
												"expression": {
													"id": 2313,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2307,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2259,
														"src": "3979:3:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2312,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 2308,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3986:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2311,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2309,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2205,
																"src": "3990:11:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2310,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2259,
																"src": "4004:3:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3990:17:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3986:21:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3979:28:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2314,
												"nodeType": "ExpressionStatement",
												"src": "3979:28:20"
											},
											{
												"expression": {
													"id": 2319,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2315,
														"name": "result",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2208,
														"src": "4445:6:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2318,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2316,
															"name": "prod0",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2211,
															"src": "4454:5:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"id": 2317,
															"name": "inv",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2259,
															"src": "4462:3:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "4454:11:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4445:20:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2320,
												"nodeType": "ExpressionStatement",
												"src": "4445:20:20"
											},
											{
												"expression": {
													"id": 2321,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2208,
													"src": "4482:6:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2209,
												"id": 2322,
												"nodeType": "Return",
												"src": "4475:13:20"
											}
										]
									},
									"documentation": {
										"id": 2199,
										"nodeType": "StructuredDocumentation",
										"src": "385:359:20",
										"text": "@notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @param a The multiplicand\n @param b The multiplier\n @param denominator The divisor\n @return result The 256-bit result\n @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv"
									},
									"id": 2324,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2206,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2201,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2324,
												"src": "765:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2200,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "765:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2203,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2324,
												"src": "776:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2202,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "776:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2205,
												"mutability": "mutable",
												"name": "denominator",
												"nodeType": "VariableDeclaration",
												"scope": 2324,
												"src": "787:19:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2204,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "787:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "764:43:20"
									},
									"returnParameters": {
										"id": 2209,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2208,
												"mutability": "mutable",
												"name": "result",
												"nodeType": "VariableDeclaration",
												"scope": 2324,
												"src": "831:14:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2207,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "831:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "830:16:20"
									},
									"scope": 2368,
									"src": "749:3746:20",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2366,
										"nodeType": "Block",
										"src": "4885:177:20",
										"statements": [
											{
												"expression": {
													"id": 2342,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2336,
														"name": "result",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2334,
														"src": "4895:6:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2338,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2327,
																"src": "4911:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 2339,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2329,
																"src": "4914:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 2340,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2331,
																"src": "4917:11:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 2337,
															"name": "mulDiv",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2324,
															"src": "4904:6:20",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 2341,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4904:25:20",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4895:34:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2343,
												"nodeType": "ExpressionStatement",
												"src": "4895:34:20"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2350,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 2345,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2327,
																"src": "4950:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 2346,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2329,
																"src": "4953:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 2347,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2331,
																"src": "4956:11:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 2344,
															"name": "mulmod",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967280,
															"src": "4943:6:20",
															"typeDescriptions": {
																"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 2348,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4943:25:20",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2349,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4971:1:20",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4943:29:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2365,
												"nodeType": "IfStatement",
												"src": "4939:117:20",
												"trueBody": {
													"id": 2364,
													"nodeType": "Block",
													"src": "4974:82:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2358,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2352,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2334,
																			"src": "4996:6:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"expression": {
																				"arguments": [
																					{
																						"id": 2355,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "5010:7:20",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						},
																						"typeName": {
																							"id": 2354,
																							"name": "uint256",
																							"nodeType": "ElementaryTypeName",
																							"src": "5010:7:20",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						}
																					],
																					"id": 2353,
																					"name": "type",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967269,
																					"src": "5005:4:20",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																						"typeString": "function () pure"
																					}
																				},
																				"id": 2356,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "5005:13:20",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_meta_type_t_uint256",
																					"typeString": "type(uint256)"
																				}
																			},
																			"id": 2357,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "max",
																			"nodeType": "MemberAccess",
																			"src": "5005:17:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4996:26:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 2351,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "4988:7:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																		"typeString": "function (bool) pure"
																	}
																},
																"id": 2359,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4988:35:20",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2360,
															"nodeType": "ExpressionStatement",
															"src": "4988:35:20"
														},
														{
															"expression": {
																"id": 2362,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "5037:8:20",
																"subExpression": {
																	"id": 2361,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2334,
																	"src": "5037:6:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2363,
															"nodeType": "ExpressionStatement",
															"src": "5037:8:20"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2325,
										"nodeType": "StructuredDocumentation",
										"src": "4501:271:20",
										"text": "@notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @param a The multiplicand\n @param b The multiplier\n @param denominator The divisor\n @return result The 256-bit result"
									},
									"id": 2367,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDivRoundingUp",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2332,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2327,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2367,
												"src": "4803:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2326,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4803:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2329,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2367,
												"src": "4814:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2328,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4814:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2331,
												"mutability": "mutable",
												"name": "denominator",
												"nodeType": "VariableDeclaration",
												"scope": 2367,
												"src": "4825:19:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2330,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4825:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4802:43:20"
									},
									"returnParameters": {
										"id": 2335,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2334,
												"mutability": "mutable",
												"name": "result",
												"nodeType": "VariableDeclaration",
												"scope": 2367,
												"src": "4869:14:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2333,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4869:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4868:16:20"
									},
									"scope": 2368,
									"src": "4777:285:20",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2369,
							"src": "362:4702:20"
						}
					],
					"src": "32:5033:20"
				},
				"id": 20
			},
			"contracts/core/libraries/LiquidityAmounts.sol": {
				"ast": {
					"absolutePath": "contracts/core/libraries/LiquidityAmounts.sol",
					"exportedSymbols": {
						"FixedPoint96": [
							2195
						],
						"FullMath": [
							2368
						],
						"LiquidityAmounts": [
							2708
						]
					},
					"id": 2709,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2370,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "46:24:21"
						},
						{
							"absolutePath": "contracts/core/libraries/FullMath.sol",
							"file": "contracts/core/libraries/FullMath.sol",
							"id": 2371,
							"nodeType": "ImportDirective",
							"scope": 2709,
							"sourceUnit": 2369,
							"src": "74:47:21",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/FixedPoint96.sol",
							"file": "contracts/core/libraries/FixedPoint96.sol",
							"id": 2372,
							"nodeType": "ImportDirective",
							"scope": 2709,
							"sourceUnit": 2196,
							"src": "123:51:21",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2373,
								"nodeType": "StructuredDocumentation",
								"src": "178:133:21",
								"text": "@title Liquidity amount functions\n @notice Provides functions for computing liquidity amounts from token amounts and prices"
							},
							"fullyImplemented": true,
							"id": 2708,
							"linearizedBaseContracts": [
								2708
							],
							"name": "LiquidityAmounts",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2393,
										"nodeType": "Block",
										"src": "558:49:21",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2390,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"id": 2387,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2382,
																			"name": "y",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2379,
																			"src": "578:1:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"arguments": [
																				{
																					"id": 2385,
																					"name": "x",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2376,
																					"src": "590:1:21",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 2384,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "582:7:21",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint128_$",
																					"typeString": "type(uint128)"
																				},
																				"typeName": {
																					"id": 2383,
																					"name": "uint128",
																					"nodeType": "ElementaryTypeName",
																					"src": "582:7:21",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 2386,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "582:10:21",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		},
																		"src": "578:14:21",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		}
																	}
																],
																"id": 2388,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "577:16:21",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 2389,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2376,
																"src": "597:1:21",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "577:21:21",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2381,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "569:7:21",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 2391,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "569:30:21",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2392,
												"nodeType": "ExpressionStatement",
												"src": "569:30:21"
											}
										]
									},
									"documentation": {
										"id": 2374,
										"nodeType": "StructuredDocumentation",
										"src": "343:146:21",
										"text": "@notice Downcasts uint256 to uint128\n @param x The uint258 to be downcasted\n @return y The passed value, downcasted to uint128"
									},
									"id": 2394,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toUint128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2377,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2376,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 2394,
												"src": "514:9:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2375,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "514:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "513:11:21"
									},
									"returnParameters": {
										"id": 2380,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2379,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 2394,
												"src": "547:9:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2378,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "547:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "546:11:21"
									},
									"scope": 2708,
									"src": "495:112:21",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2439,
										"nodeType": "Block",
										"src": "1252:312:21",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 2408,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2406,
														"name": "sqrtRatioAX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2397,
														"src": "1267:13:21",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 2407,
														"name": "sqrtRatioBX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2399,
														"src": "1283:13:21",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "1267:29:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2417,
												"nodeType": "IfStatement",
												"src": "1263:98:21",
												"trueBody": {
													"expression": {
														"id": 2415,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"components": [
																{
																	"id": 2409,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2397,
																	"src": "1299:13:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																{
																	"id": 2410,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2399,
																	"src": "1314:13:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"id": 2411,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "TupleExpression",
															"src": "1298:30:21",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint160_$_t_uint160_$",
																"typeString": "tuple(uint160,uint160)"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"components": [
																{
																	"id": 2412,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2399,
																	"src": "1332:13:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																{
																	"id": 2413,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2397,
																	"src": "1347:13:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"id": 2414,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1331:30:21",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint160_$_t_uint160_$",
																"typeString": "tuple(uint160,uint160)"
															}
														},
														"src": "1298:63:21",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2416,
													"nodeType": "ExpressionStatement",
													"src": "1298:63:21"
												}
											},
											{
												"assignments": [
													2419
												],
												"declarations": [
													{
														"constant": false,
														"id": 2419,
														"mutability": "mutable",
														"name": "intermediate",
														"nodeType": "VariableDeclaration",
														"scope": 2439,
														"src": "1372:20:21",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2418,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1372:7:21",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2427,
												"initialValue": {
													"arguments": [
														{
															"id": 2422,
															"name": "sqrtRatioAX96",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2397,
															"src": "1411:13:21",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														{
															"id": 2423,
															"name": "sqrtRatioBX96",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2399,
															"src": "1426:13:21",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														{
															"expression": {
																"id": 2424,
																"name": "FixedPoint96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2195,
																"src": "1441:12:21",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_FixedPoint96_$2195_$",
																	"typeString": "type(library FixedPoint96)"
																}
															},
															"id": 2425,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "Q96",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2194,
															"src": "1441:16:21",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 2420,
															"name": "FullMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2368,
															"src": "1395:8:21",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_FullMath_$2368_$",
																"typeString": "type(library FullMath)"
															}
														},
														"id": 2421,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "mulDiv",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2324,
														"src": "1395:15:21",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 2426,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1395:63:21",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1372:86:21"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2431,
																	"name": "amount0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2401,
																	"src": "1502:7:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2432,
																	"name": "intermediate",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2419,
																	"src": "1511:12:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	},
																	"id": 2435,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2433,
																		"name": "sqrtRatioBX96",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2399,
																		"src": "1525:13:21",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 2434,
																		"name": "sqrtRatioAX96",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2397,
																		"src": "1541:13:21",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	},
																	"src": "1525:29:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																],
																"expression": {
																	"id": 2429,
																	"name": "FullMath",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2368,
																	"src": "1486:8:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_FullMath_$2368_$",
																		"typeString": "type(library FullMath)"
																	}
																},
																"id": 2430,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "mulDiv",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2324,
																"src": "1486:15:21",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2436,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1486:69:21",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2428,
														"name": "toUint128",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2394,
														"src": "1476:9:21",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint128_$",
															"typeString": "function (uint256) pure returns (uint128)"
														}
													},
													"id": 2437,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1476:80:21",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"functionReturnParameters": 2405,
												"id": 2438,
												"nodeType": "Return",
												"src": "1469:87:21"
											}
										]
									},
									"documentation": {
										"id": 2395,
										"nodeType": "StructuredDocumentation",
										"src": "615:462:21",
										"text": "@notice Computes the amount of liquidity received for a given amount of token0 and price range\n @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\n @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n @param amount0 The amount0 being sent in\n @return liquidity The amount of returned liquidity"
									},
									"id": 2440,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getLiquidityForAmount0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2402,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2397,
												"mutability": "mutable",
												"name": "sqrtRatioAX96",
												"nodeType": "VariableDeclaration",
												"scope": 2440,
												"src": "1115:21:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 2396,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1115:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2399,
												"mutability": "mutable",
												"name": "sqrtRatioBX96",
												"nodeType": "VariableDeclaration",
												"scope": 2440,
												"src": "1138:21:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 2398,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1138:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2401,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 2440,
												"src": "1161:15:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2400,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1161:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1114:63:21"
									},
									"returnParameters": {
										"id": 2405,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2404,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 2440,
												"src": "1228:17:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2403,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1228:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1227:19:21"
									},
									"scope": 2708,
									"src": "1083:481:21",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2476,
										"nodeType": "Block",
										"src": "2180:219:21",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 2454,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2452,
														"name": "sqrtRatioAX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2443,
														"src": "2195:13:21",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 2453,
														"name": "sqrtRatioBX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2445,
														"src": "2211:13:21",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "2195:29:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2463,
												"nodeType": "IfStatement",
												"src": "2191:98:21",
												"trueBody": {
													"expression": {
														"id": 2461,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"components": [
																{
																	"id": 2455,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2443,
																	"src": "2227:13:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																{
																	"id": 2456,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2445,
																	"src": "2242:13:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"id": 2457,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "TupleExpression",
															"src": "2226:30:21",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint160_$_t_uint160_$",
																"typeString": "tuple(uint160,uint160)"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"components": [
																{
																	"id": 2458,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2445,
																	"src": "2260:13:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																{
																	"id": 2459,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2443,
																	"src": "2275:13:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"id": 2460,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2259:30:21",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint160_$_t_uint160_$",
																"typeString": "tuple(uint160,uint160)"
															}
														},
														"src": "2226:63:21",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2462,
													"nodeType": "ExpressionStatement",
													"src": "2226:63:21"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2467,
																	"name": "amount1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2447,
																	"src": "2333:7:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"expression": {
																		"id": 2468,
																		"name": "FixedPoint96",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2195,
																		"src": "2342:12:21",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_FixedPoint96_$2195_$",
																			"typeString": "type(library FixedPoint96)"
																		}
																	},
																	"id": 2469,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "Q96",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2194,
																	"src": "2342:16:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	},
																	"id": 2472,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2470,
																		"name": "sqrtRatioBX96",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2445,
																		"src": "2360:13:21",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 2471,
																		"name": "sqrtRatioAX96",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2443,
																		"src": "2376:13:21",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	},
																	"src": "2360:29:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																],
																"expression": {
																	"id": 2465,
																	"name": "FullMath",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2368,
																	"src": "2317:8:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_FullMath_$2368_$",
																		"typeString": "type(library FullMath)"
																	}
																},
																"id": 2466,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "mulDiv",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2324,
																"src": "2317:15:21",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2473,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2317:73:21",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2464,
														"name": "toUint128",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2394,
														"src": "2307:9:21",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint128_$",
															"typeString": "function (uint256) pure returns (uint128)"
														}
													},
													"id": 2474,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2307:84:21",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"functionReturnParameters": 2451,
												"id": 2475,
												"nodeType": "Return",
												"src": "2300:91:21"
											}
										]
									},
									"documentation": {
										"id": 2441,
										"nodeType": "StructuredDocumentation",
										"src": "1572:433:21",
										"text": "@notice Computes the amount of liquidity received for a given amount of token1 and price range\n @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\n @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n @param amount1 The amount1 being sent in\n @return liquidity The amount of returned liquidity"
									},
									"id": 2477,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getLiquidityForAmount1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2448,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2443,
												"mutability": "mutable",
												"name": "sqrtRatioAX96",
												"nodeType": "VariableDeclaration",
												"scope": 2477,
												"src": "2043:21:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 2442,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "2043:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2445,
												"mutability": "mutable",
												"name": "sqrtRatioBX96",
												"nodeType": "VariableDeclaration",
												"scope": 2477,
												"src": "2066:21:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 2444,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "2066:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2447,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 2477,
												"src": "2089:15:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2446,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2089:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2042:63:21"
									},
									"returnParameters": {
										"id": 2451,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2450,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 2477,
												"src": "2156:17:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2449,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2156:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2155:19:21"
									},
									"scope": 2708,
									"src": "2011:388:21",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2557,
										"nodeType": "Block",
										"src": "3237:692:21",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 2495,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2493,
														"name": "sqrtRatioAX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2482,
														"src": "3252:13:21",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 2494,
														"name": "sqrtRatioBX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2484,
														"src": "3268:13:21",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "3252:29:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2504,
												"nodeType": "IfStatement",
												"src": "3248:98:21",
												"trueBody": {
													"expression": {
														"id": 2502,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"components": [
																{
																	"id": 2496,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2482,
																	"src": "3284:13:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																{
																	"id": 2497,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2484,
																	"src": "3299:13:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"id": 2498,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "TupleExpression",
															"src": "3283:30:21",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint160_$_t_uint160_$",
																"typeString": "tuple(uint160,uint160)"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"components": [
																{
																	"id": 2499,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2484,
																	"src": "3317:13:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																{
																	"id": 2500,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2482,
																	"src": "3332:13:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"id": 2501,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "3316:30:21",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint160_$_t_uint160_$",
																"typeString": "tuple(uint160,uint160)"
															}
														},
														"src": "3283:63:21",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2503,
													"nodeType": "ExpressionStatement",
													"src": "3283:63:21"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 2507,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2505,
														"name": "sqrtRatioX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2480,
														"src": "3363:12:21",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<=",
													"rightExpression": {
														"id": 2506,
														"name": "sqrtRatioAX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2482,
														"src": "3379:13:21",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "3363:29:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"id": 2519,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2517,
															"name": "sqrtRatioX96",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2480,
															"src": "3504:12:21",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 2518,
															"name": "sqrtRatioBX96",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2484,
															"src": "3519:13:21",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"src": "3504:28:21",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"id": 2554,
														"nodeType": "Block",
														"src": "3822:100:21",
														"statements": [
															{
																"expression": {
																	"id": 2552,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"id": 2546,
																		"name": "liquidity",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2491,
																		"src": "3837:9:21",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "=",
																	"rightHandSide": {
																		"arguments": [
																			{
																				"id": 2548,
																				"name": "sqrtRatioAX96",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2482,
																				"src": "3872:13:21",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			{
																				"id": 2549,
																				"name": "sqrtRatioBX96",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2484,
																				"src": "3887:13:21",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			{
																				"id": 2550,
																				"name": "amount1",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2488,
																				"src": "3902:7:21",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				},
																				{
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 2547,
																			"name": "getLiquidityForAmount1",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2477,
																			"src": "3849:22:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint256_$returns$_t_uint128_$",
																				"typeString": "function (uint160,uint160,uint256) pure returns (uint128)"
																			}
																		},
																		"id": 2551,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3849:61:21",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		}
																	},
																	"src": "3837:73:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"id": 2553,
																"nodeType": "ExpressionStatement",
																"src": "3837:73:21"
															}
														]
													},
													"id": 2555,
													"nodeType": "IfStatement",
													"src": "3500:422:21",
													"trueBody": {
														"id": 2545,
														"nodeType": "Block",
														"src": "3534:282:21",
														"statements": [
															{
																"assignments": [
																	2521
																],
																"declarations": [
																	{
																		"constant": false,
																		"id": 2521,
																		"mutability": "mutable",
																		"name": "liquidity0",
																		"nodeType": "VariableDeclaration",
																		"scope": 2545,
																		"src": "3549:18:21",
																		"stateVariable": false,
																		"storageLocation": "default",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		},
																		"typeName": {
																			"id": 2520,
																			"name": "uint128",
																			"nodeType": "ElementaryTypeName",
																			"src": "3549:7:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		},
																		"visibility": "internal"
																	}
																],
																"id": 2527,
																"initialValue": {
																	"arguments": [
																		{
																			"id": 2523,
																			"name": "sqrtRatioX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2480,
																			"src": "3593:12:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		{
																			"id": 2524,
																			"name": "sqrtRatioBX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2484,
																			"src": "3607:13:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		{
																			"id": 2525,
																			"name": "amount0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2486,
																			"src": "3622:7:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 2522,
																		"name": "getLiquidityForAmount0",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2440,
																		"src": "3570:22:21",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint256_$returns$_t_uint128_$",
																			"typeString": "function (uint160,uint160,uint256) pure returns (uint128)"
																		}
																	},
																	"id": 2526,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3570:60:21",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"nodeType": "VariableDeclarationStatement",
																"src": "3549:81:21"
															},
															{
																"assignments": [
																	2529
																],
																"declarations": [
																	{
																		"constant": false,
																		"id": 2529,
																		"mutability": "mutable",
																		"name": "liquidity1",
																		"nodeType": "VariableDeclaration",
																		"scope": 2545,
																		"src": "3645:18:21",
																		"stateVariable": false,
																		"storageLocation": "default",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		},
																		"typeName": {
																			"id": 2528,
																			"name": "uint128",
																			"nodeType": "ElementaryTypeName",
																			"src": "3645:7:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		},
																		"visibility": "internal"
																	}
																],
																"id": 2535,
																"initialValue": {
																	"arguments": [
																		{
																			"id": 2531,
																			"name": "sqrtRatioAX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2482,
																			"src": "3689:13:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		{
																			"id": 2532,
																			"name": "sqrtRatioX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2480,
																			"src": "3704:12:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		{
																			"id": 2533,
																			"name": "amount1",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2488,
																			"src": "3718:7:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 2530,
																		"name": "getLiquidityForAmount1",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2477,
																		"src": "3666:22:21",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint256_$returns$_t_uint128_$",
																			"typeString": "function (uint160,uint160,uint256) pure returns (uint128)"
																		}
																	},
																	"id": 2534,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3666:60:21",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"nodeType": "VariableDeclarationStatement",
																"src": "3645:81:21"
															},
															{
																"expression": {
																	"id": 2543,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"id": 2536,
																		"name": "liquidity",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2491,
																		"src": "3743:9:21",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "=",
																	"rightHandSide": {
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			},
																			"id": 2539,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2537,
																				"name": "liquidity0",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2521,
																				"src": "3755:10:21",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<",
																			"rightExpression": {
																				"id": 2538,
																				"name": "liquidity1",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2529,
																				"src": "3768:10:21",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			},
																			"src": "3755:23:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"id": 2541,
																			"name": "liquidity1",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2529,
																			"src": "3794:10:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		},
																		"id": 2542,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "3755:49:21",
																		"trueExpression": {
																			"id": 2540,
																			"name": "liquidity0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2521,
																			"src": "3781:10:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		}
																	},
																	"src": "3743:61:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"id": 2544,
																"nodeType": "ExpressionStatement",
																"src": "3743:61:21"
															}
														]
													}
												},
												"id": 2556,
												"nodeType": "IfStatement",
												"src": "3359:563:21",
												"trueBody": {
													"id": 2516,
													"nodeType": "Block",
													"src": "3394:100:21",
													"statements": [
														{
															"expression": {
																"id": 2514,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2508,
																	"name": "liquidity",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2491,
																	"src": "3409:9:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 2510,
																			"name": "sqrtRatioAX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2482,
																			"src": "3444:13:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		{
																			"id": 2511,
																			"name": "sqrtRatioBX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2484,
																			"src": "3459:13:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		{
																			"id": 2512,
																			"name": "amount0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2486,
																			"src": "3474:7:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 2509,
																		"name": "getLiquidityForAmount0",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2440,
																		"src": "3421:22:21",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint256_$returns$_t_uint128_$",
																			"typeString": "function (uint160,uint160,uint256) pure returns (uint128)"
																		}
																	},
																	"id": 2513,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3421:61:21",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"src": "3409:73:21",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"id": 2515,
															"nodeType": "ExpressionStatement",
															"src": "3409:73:21"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2478,
										"nodeType": "StructuredDocumentation",
										"src": "2407:596:21",
										"text": "@notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\n pool prices and the prices at the tick boundaries\n @param sqrtRatioX96 A sqrt price representing the current pool prices\n @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n @param amount0 The amount of token0 being sent in\n @param amount1 The amount of token1 being sent in\n @return liquidity The maximum amount of liquidity received"
									},
									"id": 2558,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getLiquidityForAmounts",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2489,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2480,
												"mutability": "mutable",
												"name": "sqrtRatioX96",
												"nodeType": "VariableDeclaration",
												"scope": 2558,
												"src": "3051:20:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 2479,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "3051:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2482,
												"mutability": "mutable",
												"name": "sqrtRatioAX96",
												"nodeType": "VariableDeclaration",
												"scope": 2558,
												"src": "3082:21:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 2481,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "3082:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2484,
												"mutability": "mutable",
												"name": "sqrtRatioBX96",
												"nodeType": "VariableDeclaration",
												"scope": 2558,
												"src": "3114:21:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 2483,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "3114:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2486,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 2558,
												"src": "3146:15:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2485,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3146:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2488,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 2558,
												"src": "3172:15:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2487,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3172:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3040:154:21"
									},
									"returnParameters": {
										"id": 2492,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2491,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 2558,
												"src": "3218:17:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2490,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3218:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3217:19:21"
									},
									"scope": 2708,
									"src": "3009:920:21",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2599,
										"nodeType": "Block",
										"src": "4463:285:21",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 2572,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2570,
														"name": "sqrtRatioAX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2561,
														"src": "4478:13:21",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 2571,
														"name": "sqrtRatioBX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2563,
														"src": "4494:13:21",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "4478:29:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2581,
												"nodeType": "IfStatement",
												"src": "4474:98:21",
												"trueBody": {
													"expression": {
														"id": 2579,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"components": [
																{
																	"id": 2573,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2561,
																	"src": "4510:13:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																{
																	"id": 2574,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2563,
																	"src": "4525:13:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"id": 2575,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "TupleExpression",
															"src": "4509:30:21",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint160_$_t_uint160_$",
																"typeString": "tuple(uint160,uint160)"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"components": [
																{
																	"id": 2576,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2563,
																	"src": "4543:13:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																{
																	"id": 2577,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2561,
																	"src": "4558:13:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"id": 2578,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "4542:30:21",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint160_$_t_uint160_$",
																"typeString": "tuple(uint160,uint160)"
															}
														},
														"src": "4509:63:21",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2580,
													"nodeType": "ExpressionStatement",
													"src": "4509:63:21"
												}
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2597,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2590,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 2586,
																			"name": "liquidity",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2565,
																			"src": "4630:9:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		],
																		"id": 2585,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4622:7:21",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 2584,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "4622:7:21",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2587,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4622:18:21",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<<",
																"rightExpression": {
																	"expression": {
																		"id": 2588,
																		"name": "FixedPoint96",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2195,
																		"src": "4644:12:21",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_FixedPoint96_$2195_$",
																			"typeString": "type(library FixedPoint96)"
																		}
																	},
																	"id": 2589,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "RESOLUTION",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2191,
																	"src": "4644:23:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "4622:45:21",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 2593,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2591,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2563,
																	"src": "4669:13:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 2592,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2561,
																	"src": "4685:13:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "4669:29:21",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															{
																"id": 2594,
																"name": "sqrtRatioBX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2563,
																"src": "4700:13:21",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															],
															"expression": {
																"id": 2582,
																"name": "FullMath",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2368,
																"src": "4592:8:21",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_FullMath_$2368_$",
																	"typeString": "type(library FullMath)"
																}
															},
															"id": 2583,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "mulDiv",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2324,
															"src": "4592:15:21",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 2595,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4592:132:21",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 2596,
														"name": "sqrtRatioAX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2561,
														"src": "4727:13:21",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "4592:148:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2569,
												"id": 2598,
												"nodeType": "Return",
												"src": "4585:155:21"
											}
										]
									},
									"documentation": {
										"id": 2559,
										"nodeType": "StructuredDocumentation",
										"src": "3937:351:21",
										"text": "@notice Computes the amount of token0 for a given amount of liquidity and a price range\n @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n @param liquidity The liquidity being valued\n @return amount0 The amount of token0"
									},
									"id": 2600,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAmount0ForLiquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2566,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2561,
												"mutability": "mutable",
												"name": "sqrtRatioAX96",
												"nodeType": "VariableDeclaration",
												"scope": 2600,
												"src": "4326:21:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 2560,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4326:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2563,
												"mutability": "mutable",
												"name": "sqrtRatioBX96",
												"nodeType": "VariableDeclaration",
												"scope": 2600,
												"src": "4349:21:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 2562,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4349:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2565,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 2600,
												"src": "4372:17:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2564,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4372:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4325:65:21"
									},
									"returnParameters": {
										"id": 2569,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2568,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 2600,
												"src": "4441:15:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2567,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4441:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4440:17:21"
									},
									"scope": 2708,
									"src": "4294:454:21",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2634,
										"nodeType": "Block",
										"src": "5282:212:21",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 2614,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2612,
														"name": "sqrtRatioAX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2603,
														"src": "5297:13:21",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 2613,
														"name": "sqrtRatioBX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2605,
														"src": "5313:13:21",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "5297:29:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2623,
												"nodeType": "IfStatement",
												"src": "5293:98:21",
												"trueBody": {
													"expression": {
														"id": 2621,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"components": [
																{
																	"id": 2615,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2603,
																	"src": "5329:13:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																{
																	"id": 2616,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2605,
																	"src": "5344:13:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"id": 2617,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "TupleExpression",
															"src": "5328:30:21",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint160_$_t_uint160_$",
																"typeString": "tuple(uint160,uint160)"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"components": [
																{
																	"id": 2618,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2605,
																	"src": "5362:13:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																{
																	"id": 2619,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2603,
																	"src": "5377:13:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"id": 2620,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "5361:30:21",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint160_$_t_uint160_$",
																"typeString": "tuple(uint160,uint160)"
															}
														},
														"src": "5328:63:21",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2622,
													"nodeType": "ExpressionStatement",
													"src": "5328:63:21"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2626,
															"name": "liquidity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2607,
															"src": "5427:9:21",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															"id": 2629,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2627,
																"name": "sqrtRatioBX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2605,
																"src": "5438:13:21",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 2628,
																"name": "sqrtRatioAX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2603,
																"src": "5454:13:21",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"src": "5438:29:21",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														{
															"expression": {
																"id": 2630,
																"name": "FixedPoint96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2195,
																"src": "5469:12:21",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_FixedPoint96_$2195_$",
																	"typeString": "type(library FixedPoint96)"
																}
															},
															"id": 2631,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "Q96",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2194,
															"src": "5469:16:21",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															},
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 2624,
															"name": "FullMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2368,
															"src": "5411:8:21",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_FullMath_$2368_$",
																"typeString": "type(library FullMath)"
															}
														},
														"id": 2625,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "mulDiv",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2324,
														"src": "5411:15:21",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 2632,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5411:75:21",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2611,
												"id": 2633,
												"nodeType": "Return",
												"src": "5404:82:21"
											}
										]
									},
									"documentation": {
										"id": 2601,
										"nodeType": "StructuredDocumentation",
										"src": "4756:351:21",
										"text": "@notice Computes the amount of token1 for a given amount of liquidity and a price range\n @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n @param liquidity The liquidity being valued\n @return amount1 The amount of token1"
									},
									"id": 2635,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAmount1ForLiquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2608,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2603,
												"mutability": "mutable",
												"name": "sqrtRatioAX96",
												"nodeType": "VariableDeclaration",
												"scope": 2635,
												"src": "5145:21:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 2602,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "5145:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2605,
												"mutability": "mutable",
												"name": "sqrtRatioBX96",
												"nodeType": "VariableDeclaration",
												"scope": 2635,
												"src": "5168:21:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 2604,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "5168:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2607,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 2635,
												"src": "5191:17:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2606,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5191:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5144:65:21"
									},
									"returnParameters": {
										"id": 2611,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2610,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 2635,
												"src": "5260:15:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2609,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5260:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5259:17:21"
									},
									"scope": 2708,
									"src": "5113:381:21",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2706,
										"nodeType": "Block",
										"src": "6264:596:21",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 2653,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2651,
														"name": "sqrtRatioAX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2640,
														"src": "6279:13:21",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 2652,
														"name": "sqrtRatioBX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2642,
														"src": "6295:13:21",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "6279:29:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2662,
												"nodeType": "IfStatement",
												"src": "6275:98:21",
												"trueBody": {
													"expression": {
														"id": 2660,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"components": [
																{
																	"id": 2654,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2640,
																	"src": "6311:13:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																{
																	"id": 2655,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2642,
																	"src": "6326:13:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"id": 2656,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "TupleExpression",
															"src": "6310:30:21",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint160_$_t_uint160_$",
																"typeString": "tuple(uint160,uint160)"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"components": [
																{
																	"id": 2657,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2642,
																	"src": "6344:13:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																{
																	"id": 2658,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2640,
																	"src": "6359:13:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"id": 2659,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "6343:30:21",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint160_$_t_uint160_$",
																"typeString": "tuple(uint160,uint160)"
															}
														},
														"src": "6310:63:21",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2661,
													"nodeType": "ExpressionStatement",
													"src": "6310:63:21"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 2665,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2663,
														"name": "sqrtRatioX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2638,
														"src": "6390:12:21",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<=",
													"rightExpression": {
														"id": 2664,
														"name": "sqrtRatioAX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2640,
														"src": "6406:13:21",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "6390:29:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"id": 2677,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2675,
															"name": "sqrtRatioX96",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2638,
															"src": "6531:12:21",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 2676,
															"name": "sqrtRatioBX96",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2642,
															"src": "6546:13:21",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"src": "6531:28:21",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"id": 2703,
														"nodeType": "Block",
														"src": "6753:100:21",
														"statements": [
															{
																"expression": {
																	"id": 2701,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"id": 2695,
																		"name": "amount1",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2649,
																		"src": "6768:7:21",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "=",
																	"rightHandSide": {
																		"arguments": [
																			{
																				"id": 2697,
																				"name": "sqrtRatioAX96",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2640,
																				"src": "6801:13:21",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			{
																				"id": 2698,
																				"name": "sqrtRatioBX96",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2642,
																				"src": "6816:13:21",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			{
																				"id": 2699,
																				"name": "liquidity",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2644,
																				"src": "6831:9:21",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				},
																				{
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				},
																				{
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			],
																			"id": 2696,
																			"name": "getAmount1ForLiquidity",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2635,
																			"src": "6778:22:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$returns$_t_uint256_$",
																				"typeString": "function (uint160,uint160,uint128) pure returns (uint256)"
																			}
																		},
																		"id": 2700,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6778:63:21",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6768:73:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 2702,
																"nodeType": "ExpressionStatement",
																"src": "6768:73:21"
															}
														]
													},
													"id": 2704,
													"nodeType": "IfStatement",
													"src": "6527:326:21",
													"trueBody": {
														"id": 2694,
														"nodeType": "Block",
														"src": "6561:186:21",
														"statements": [
															{
																"expression": {
																	"id": 2684,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"id": 2678,
																		"name": "amount0",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2647,
																		"src": "6576:7:21",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "=",
																	"rightHandSide": {
																		"arguments": [
																			{
																				"id": 2680,
																				"name": "sqrtRatioX96",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2638,
																				"src": "6609:12:21",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			{
																				"id": 2681,
																				"name": "sqrtRatioBX96",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2642,
																				"src": "6623:13:21",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			{
																				"id": 2682,
																				"name": "liquidity",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2644,
																				"src": "6638:9:21",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				},
																				{
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				},
																				{
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			],
																			"id": 2679,
																			"name": "getAmount0ForLiquidity",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2600,
																			"src": "6586:22:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$returns$_t_uint256_$",
																				"typeString": "function (uint160,uint160,uint128) pure returns (uint256)"
																			}
																		},
																		"id": 2683,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6586:62:21",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6576:72:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 2685,
																"nodeType": "ExpressionStatement",
																"src": "6576:72:21"
															},
															{
																"expression": {
																	"id": 2692,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"id": 2686,
																		"name": "amount1",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2649,
																		"src": "6663:7:21",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "=",
																	"rightHandSide": {
																		"arguments": [
																			{
																				"id": 2688,
																				"name": "sqrtRatioAX96",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2640,
																				"src": "6696:13:21",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			{
																				"id": 2689,
																				"name": "sqrtRatioX96",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2638,
																				"src": "6711:12:21",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			{
																				"id": 2690,
																				"name": "liquidity",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2644,
																				"src": "6725:9:21",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				},
																				{
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				},
																				{
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			],
																			"id": 2687,
																			"name": "getAmount1ForLiquidity",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2635,
																			"src": "6673:22:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$returns$_t_uint256_$",
																				"typeString": "function (uint160,uint160,uint128) pure returns (uint256)"
																			}
																		},
																		"id": 2691,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6673:62:21",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6663:72:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 2693,
																"nodeType": "ExpressionStatement",
																"src": "6663:72:21"
															}
														]
													}
												},
												"id": 2705,
												"nodeType": "IfStatement",
												"src": "6386:467:21",
												"trueBody": {
													"id": 2674,
													"nodeType": "Block",
													"src": "6421:100:21",
													"statements": [
														{
															"expression": {
																"id": 2672,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2666,
																	"name": "amount0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2647,
																	"src": "6436:7:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 2668,
																			"name": "sqrtRatioAX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2640,
																			"src": "6469:13:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		{
																			"id": 2669,
																			"name": "sqrtRatioBX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2642,
																			"src": "6484:13:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		{
																			"id": 2670,
																			"name": "liquidity",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2644,
																			"src": "6499:9:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			{
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		],
																		"id": 2667,
																		"name": "getAmount0ForLiquidity",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2600,
																		"src": "6446:22:21",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$returns$_t_uint256_$",
																			"typeString": "function (uint160,uint160,uint128) pure returns (uint256)"
																		}
																	},
																	"id": 2671,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6446:63:21",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6436:73:21",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2673,
															"nodeType": "ExpressionStatement",
															"src": "6436:73:21"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2636,
										"nodeType": "StructuredDocumentation",
										"src": "5502:537:21",
										"text": "@notice Computes the token0 and token1 value for a given amount of liquidity, the current\n pool prices and the prices at the tick boundaries\n @param sqrtRatioX96 A sqrt price representing the current pool prices\n @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n @param liquidity The liquidity being valued\n @return amount0 The amount of token0\n @return amount1 The amount of token1"
									},
									"id": 2707,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAmountsForLiquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2645,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2638,
												"mutability": "mutable",
												"name": "sqrtRatioX96",
												"nodeType": "VariableDeclaration",
												"scope": 2707,
												"src": "6087:20:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 2637,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "6087:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2640,
												"mutability": "mutable",
												"name": "sqrtRatioAX96",
												"nodeType": "VariableDeclaration",
												"scope": 2707,
												"src": "6118:21:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 2639,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "6118:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2642,
												"mutability": "mutable",
												"name": "sqrtRatioBX96",
												"nodeType": "VariableDeclaration",
												"scope": 2707,
												"src": "6150:21:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 2641,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "6150:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2644,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 2707,
												"src": "6182:17:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2643,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "6182:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6076:130:21"
									},
									"returnParameters": {
										"id": 2650,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2647,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 2707,
												"src": "6230:15:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2646,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6230:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2649,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 2707,
												"src": "6247:15:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2648,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6247:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6229:34:21"
									},
									"scope": 2708,
									"src": "6045:815:21",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2709,
							"src": "311:6552:21"
						}
					],
					"src": "46:6819:21"
				},
				"id": 21
			},
			"contracts/core/libraries/LiquidityMath.sol": {
				"ast": {
					"absolutePath": "contracts/core/libraries/LiquidityMath.sol",
					"exportedSymbols": {
						"LiquidityMath": [
							2760
						]
					},
					"id": 2761,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2710,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:22"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2711,
								"nodeType": "StructuredDocumentation",
								"src": "71:38:22",
								"text": "@title Math library for liquidity"
							},
							"fullyImplemented": true,
							"id": 2760,
							"linearizedBaseContracts": [
								2760
							],
							"name": "LiquidityMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2758,
										"nodeType": "Block",
										"src": "456:163:22",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													},
													"id": 2723,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2721,
														"name": "y",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2716,
														"src": "470:1:22",
														"typeDescriptions": {
															"typeIdentifier": "t_int128",
															"typeString": "int128"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"hexValue": "30",
														"id": 2722,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "474:1:22",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "470:5:22",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2756,
													"nodeType": "Block",
													"src": "548:65:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		},
																		"id": 2752,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"id": 2749,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"id": 2742,
																						"name": "z",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2719,
																						"src": "571:1:22",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint128",
																							"typeString": "uint128"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"commonType": {
																							"typeIdentifier": "t_uint128",
																							"typeString": "uint128"
																						},
																						"id": 2748,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 2743,
																							"name": "x",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2714,
																							"src": "575:1:22",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint128",
																								"typeString": "uint128"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "+",
																						"rightExpression": {
																							"arguments": [
																								{
																									"id": 2746,
																									"name": "y",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2716,
																									"src": "587:1:22",
																									"typeDescriptions": {
																										"typeIdentifier": "t_int128",
																										"typeString": "int128"
																									}
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_int128",
																										"typeString": "int128"
																									}
																								],
																								"id": 2745,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"nodeType": "ElementaryTypeNameExpression",
																								"src": "579:7:22",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_uint128_$",
																									"typeString": "type(uint128)"
																								},
																								"typeName": {
																									"id": 2744,
																									"name": "uint128",
																									"nodeType": "ElementaryTypeName",
																									"src": "579:7:22",
																									"typeDescriptions": {}
																								}
																							},
																							"id": 2747,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"kind": "typeConversion",
																							"lValueRequested": false,
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "579:10:22",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint128",
																								"typeString": "uint128"
																							}
																						},
																						"src": "575:14:22",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint128",
																							"typeString": "uint128"
																						}
																					},
																					"src": "571:18:22",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint128",
																						"typeString": "uint128"
																					}
																				}
																			],
																			"id": 2750,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "570:20:22",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"id": 2751,
																			"name": "x",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2714,
																			"src": "594:1:22",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		},
																		"src": "570:25:22",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "4c41",
																		"id": 2753,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "597:4:22",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_ce8fc98a1432efc8ba166615239eb1702fbbbd0ddab9a5952502a98483035383",
																			"typeString": "literal_string \"LA\""
																		},
																		"value": "LA"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_ce8fc98a1432efc8ba166615239eb1702fbbbd0ddab9a5952502a98483035383",
																			"typeString": "literal_string \"LA\""
																		}
																	],
																	"id": 2741,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "562:7:22",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 2754,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "562:40:22",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2755,
															"nodeType": "ExpressionStatement",
															"src": "562:40:22"
														}
													]
												},
												"id": 2757,
												"nodeType": "IfStatement",
												"src": "466:147:22",
												"trueBody": {
													"id": 2740,
													"nodeType": "Block",
													"src": "477:65:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		},
																		"id": 2736,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"id": 2733,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"id": 2725,
																						"name": "z",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2719,
																						"src": "500:1:22",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint128",
																							"typeString": "uint128"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"commonType": {
																							"typeIdentifier": "t_uint128",
																							"typeString": "uint128"
																						},
																						"id": 2732,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 2726,
																							"name": "x",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2714,
																							"src": "504:1:22",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint128",
																								"typeString": "uint128"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "-",
																						"rightExpression": {
																							"arguments": [
																								{
																									"id": 2730,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "UnaryOperation",
																									"operator": "-",
																									"prefix": true,
																									"src": "516:2:22",
																									"subExpression": {
																										"id": 2729,
																										"name": "y",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 2716,
																										"src": "517:1:22",
																										"typeDescriptions": {
																											"typeIdentifier": "t_int128",
																											"typeString": "int128"
																										}
																									},
																									"typeDescriptions": {
																										"typeIdentifier": "t_int128",
																										"typeString": "int128"
																									}
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_int128",
																										"typeString": "int128"
																									}
																								],
																								"id": 2728,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"nodeType": "ElementaryTypeNameExpression",
																								"src": "508:7:22",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_uint128_$",
																									"typeString": "type(uint128)"
																								},
																								"typeName": {
																									"id": 2727,
																									"name": "uint128",
																									"nodeType": "ElementaryTypeName",
																									"src": "508:7:22",
																									"typeDescriptions": {}
																								}
																							},
																							"id": 2731,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"kind": "typeConversion",
																							"lValueRequested": false,
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "508:11:22",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint128",
																								"typeString": "uint128"
																							}
																						},
																						"src": "504:15:22",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint128",
																							"typeString": "uint128"
																						}
																					},
																					"src": "500:19:22",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint128",
																						"typeString": "uint128"
																					}
																				}
																			],
																			"id": 2734,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "499:21:22",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"id": 2735,
																			"name": "x",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2714,
																			"src": "523:1:22",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		},
																		"src": "499:25:22",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "4c53",
																		"id": 2737,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "526:4:22",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_2be2231ccd52e7fedf30c30a3dfa3d6c9d9d3400159e305398a7b6d437f56985",
																			"typeString": "literal_string \"LS\""
																		},
																		"value": "LS"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_2be2231ccd52e7fedf30c30a3dfa3d6c9d9d3400159e305398a7b6d437f56985",
																			"typeString": "literal_string \"LS\""
																		}
																	],
																	"id": 2724,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "491:7:22",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 2738,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "491:40:22",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2739,
															"nodeType": "ExpressionStatement",
															"src": "491:40:22"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2712,
										"nodeType": "StructuredDocumentation",
										"src": "137:241:22",
										"text": "@notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\n @param x The liquidity before change\n @param y The delta by which liquidity should be changed\n @return z The liquidity delta"
									},
									"id": 2759,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "addDelta",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2717,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2714,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 2759,
												"src": "401:9:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2713,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "401:7:22",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2716,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 2759,
												"src": "412:8:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 2715,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "412:6:22",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "400:21:22"
									},
									"returnParameters": {
										"id": 2720,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2719,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 2759,
												"src": "445:9:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2718,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:22",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "444:11:22"
									},
									"scope": 2760,
									"src": "383:236:22",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2761,
							"src": "109:512:22"
						}
					],
					"src": "45:577:22"
				},
				"id": 22
			},
			"contracts/core/libraries/LowGasSafeMath.sol": {
				"ast": {
					"absolutePath": "contracts/core/libraries/LowGasSafeMath.sol",
					"exportedSymbols": {
						"LowGasSafeMath": [
							2890
						]
					},
					"id": 2891,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2762,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:23"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2763,
								"nodeType": "StructuredDocumentation",
								"src": "71:178:23",
								"text": "@title Optimized overflow and underflow safe math operations\n @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost"
							},
							"fullyImplemented": true,
							"id": 2890,
							"linearizedBaseContracts": [
								2890
							],
							"name": "LowGasSafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2784,
										"nodeType": "Block",
										"src": "504:42:23",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2781,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"id": 2778,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2774,
																			"name": "z",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2771,
																			"src": "523:1:23",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2777,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2775,
																				"name": "x",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2766,
																				"src": "527:1:23",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"id": 2776,
																				"name": "y",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2768,
																				"src": "531:1:23",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "527:5:23",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "523:9:23",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2779,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "522:11:23",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 2780,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2766,
																"src": "537:1:23",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "522:16:23",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2773,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "514:7:23",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 2782,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "514:25:23",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2783,
												"nodeType": "ExpressionStatement",
												"src": "514:25:23"
											}
										]
									},
									"documentation": {
										"id": 2764,
										"nodeType": "StructuredDocumentation",
										"src": "278:152:23",
										"text": "@notice Returns x + y, reverts if sum overflows uint256\n @param x The augend\n @param y The addend\n @return z The sum of x and y"
									},
									"id": 2785,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2769,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2766,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 2785,
												"src": "448:9:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2765,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "448:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2768,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 2785,
												"src": "459:9:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2767,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "459:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "447:22:23"
									},
									"returnParameters": {
										"id": 2772,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2771,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 2785,
												"src": "493:9:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2770,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "493:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "492:11:23"
									},
									"scope": 2890,
									"src": "435:111:23",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2806,
										"nodeType": "Block",
										"src": "779:42:23",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2803,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"id": 2800,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2796,
																			"name": "z",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2793,
																			"src": "798:1:23",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2799,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2797,
																				"name": "x",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2788,
																				"src": "802:1:23",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 2798,
																				"name": "y",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2790,
																				"src": "806:1:23",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "802:5:23",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "798:9:23",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2801,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "797:11:23",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 2802,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2788,
																"src": "812:1:23",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "797:16:23",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2795,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "789:7:23",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 2804,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "789:25:23",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2805,
												"nodeType": "ExpressionStatement",
												"src": "789:25:23"
											}
										]
									},
									"documentation": {
										"id": 2786,
										"nodeType": "StructuredDocumentation",
										"src": "552:153:23",
										"text": "@notice Returns x - y, reverts if underflows\n @param x The minuend\n @param y The subtrahend\n @return z The difference of x and y"
									},
									"id": 2807,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2791,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2788,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 2807,
												"src": "723:9:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2787,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "723:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2790,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 2807,
												"src": "734:9:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2789,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "734:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "722:22:23"
									},
									"returnParameters": {
										"id": 2794,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2793,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 2807,
												"src": "768:9:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2792,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "768:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "767:11:23"
									},
									"scope": 2890,
									"src": "710:111:23",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2834,
										"nodeType": "Block",
										"src": "1055:56:23",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2831,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2820,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2818,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2810,
																	"src": "1073:1:23",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 2819,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1078:1:23",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "1073:6:23",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2830,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2828,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"id": 2825,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"id": 2821,
																					"name": "z",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2815,
																					"src": "1084:1:23",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "=",
																				"rightHandSide": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2824,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 2822,
																						"name": "x",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2810,
																						"src": "1088:1:23",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 2823,
																						"name": "y",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2812,
																						"src": "1092:1:23",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "1088:5:23",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "1084:9:23",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 2826,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "1083:11:23",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2827,
																		"name": "x",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2810,
																		"src": "1097:1:23",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1083:15:23",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 2829,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2812,
																	"src": "1102:1:23",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1083:20:23",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1073:30:23",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2817,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1065:7:23",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 2832,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1065:39:23",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2833,
												"nodeType": "ExpressionStatement",
												"src": "1065:39:23"
											}
										]
									},
									"documentation": {
										"id": 2808,
										"nodeType": "StructuredDocumentation",
										"src": "827:154:23",
										"text": "@notice Returns x * y, reverts if overflows\n @param x The multiplicand\n @param y The multiplier\n @return z The product of x and y"
									},
									"id": 2835,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2813,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2810,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 2835,
												"src": "999:9:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2809,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "999:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2812,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 2835,
												"src": "1010:9:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2811,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1010:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "998:22:23"
									},
									"returnParameters": {
										"id": 2816,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2815,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 2835,
												"src": "1044:9:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2814,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1044:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1043:11:23"
									},
									"scope": 2890,
									"src": "986:125:23",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2861,
										"nodeType": "Block",
										"src": "1342:54:23",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2858,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 2853,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"id": 2850,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 2846,
																				"name": "z",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2843,
																				"src": "1361:1:23",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"commonType": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				},
																				"id": 2849,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2847,
																					"name": "x",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2838,
																					"src": "1365:1:23",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"id": 2848,
																					"name": "y",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2840,
																					"src": "1369:1:23",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				},
																				"src": "1365:5:23",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "1361:9:23",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 2851,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1360:11:23",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"id": 2852,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2838,
																	"src": "1375:1:23",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "1360:16:23",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 2856,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2854,
																			"name": "y",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2840,
																			"src": "1381:1:23",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 2855,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1386:1:23",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1381:6:23",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 2857,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1380:8:23",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1360:28:23",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2845,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1352:7:23",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 2859,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1352:37:23",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2860,
												"nodeType": "ExpressionStatement",
												"src": "1352:37:23"
											}
										]
									},
									"documentation": {
										"id": 2836,
										"nodeType": "StructuredDocumentation",
										"src": "1117:154:23",
										"text": "@notice Returns x + y, reverts if overflows or underflows\n @param x The augend\n @param y The addend\n @return z The sum of x and y"
									},
									"id": 2862,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2841,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2838,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 2862,
												"src": "1289:8:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2837,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1289:6:23",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2840,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 2862,
												"src": "1299:8:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2839,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1299:6:23",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1288:20:23"
									},
									"returnParameters": {
										"id": 2844,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2843,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 2862,
												"src": "1332:8:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2842,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1332:6:23",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1331:10:23"
									},
									"scope": 2890,
									"src": "1276:120:23",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2888,
										"nodeType": "Block",
										"src": "1639:54:23",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2885,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 2880,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"id": 2877,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 2873,
																				"name": "z",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2870,
																				"src": "1658:1:23",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"commonType": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				},
																				"id": 2876,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2874,
																					"name": "x",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2865,
																					"src": "1662:1:23",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 2875,
																					"name": "y",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2867,
																					"src": "1666:1:23",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				},
																				"src": "1662:5:23",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "1658:9:23",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 2878,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1657:11:23",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"id": 2879,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2865,
																	"src": "1672:1:23",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "1657:16:23",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 2883,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2881,
																			"name": "y",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2867,
																			"src": "1678:1:23",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 2882,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1683:1:23",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1678:6:23",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 2884,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1677:8:23",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1657:28:23",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2872,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1649:7:23",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 2886,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1649:37:23",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2887,
												"nodeType": "ExpressionStatement",
												"src": "1649:37:23"
											}
										]
									},
									"documentation": {
										"id": 2863,
										"nodeType": "StructuredDocumentation",
										"src": "1402:166:23",
										"text": "@notice Returns x - y, reverts if overflows or underflows\n @param x The minuend\n @param y The subtrahend\n @return z The difference of x and y"
									},
									"id": 2889,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2868,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2865,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 2889,
												"src": "1586:8:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2864,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1586:6:23",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2867,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 2889,
												"src": "1596:8:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2866,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1596:6:23",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1585:20:23"
									},
									"returnParameters": {
										"id": 2871,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2870,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 2889,
												"src": "1629:8:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2869,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1629:6:23",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1628:10:23"
									},
									"scope": 2890,
									"src": "1573:120:23",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2891,
							"src": "249:1446:23"
						}
					],
					"src": "45:1651:23"
				},
				"id": 23
			},
			"contracts/core/libraries/Position.sol": {
				"ast": {
					"absolutePath": "contracts/core/libraries/Position.sol",
					"exportedSymbols": {
						"FixedPoint128": [
							2185
						],
						"FullMath": [
							2368
						],
						"LiquidityMath": [
							2760
						],
						"Position": [
							3075
						]
					},
					"id": 3076,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2892,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:31:24"
						},
						{
							"absolutePath": "contracts/core/libraries/FullMath.sol",
							"file": "./FullMath.sol",
							"id": 2893,
							"nodeType": "ImportDirective",
							"scope": 3076,
							"sourceUnit": 2369,
							"src": "78:24:24",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/FixedPoint128.sol",
							"file": "./FixedPoint128.sol",
							"id": 2894,
							"nodeType": "ImportDirective",
							"scope": 3076,
							"sourceUnit": 2186,
							"src": "103:29:24",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/LiquidityMath.sol",
							"file": "./LiquidityMath.sol",
							"id": 2895,
							"nodeType": "ImportDirective",
							"scope": 3076,
							"sourceUnit": 2761,
							"src": "133:29:24",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2896,
								"nodeType": "StructuredDocumentation",
								"src": "164:201:24",
								"text": "@title Position\n @notice Positions represent an owner address' liquidity between a lower and upper tick boundary\n @dev Positions store additional state for tracking fees owed to the position"
							},
							"fullyImplemented": true,
							"id": 3075,
							"linearizedBaseContracts": [
								3075
							],
							"name": "Position",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Position.Info",
									"id": 2907,
									"members": [
										{
											"constant": false,
											"id": 2898,
											"mutability": "mutable",
											"name": "liquidity",
											"nodeType": "VariableDeclaration",
											"scope": 2907,
											"src": "512:17:24",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 2897,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "512:7:24",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2900,
											"mutability": "mutable",
											"name": "feeGrowthInside0LastX128",
											"nodeType": "VariableDeclaration",
											"scope": 2907,
											"src": "631:32:24",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2899,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "631:7:24",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2902,
											"mutability": "mutable",
											"name": "feeGrowthInside1LastX128",
											"nodeType": "VariableDeclaration",
											"scope": 2907,
											"src": "673:32:24",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2901,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "673:7:24",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2904,
											"mutability": "mutable",
											"name": "tokensOwed0",
											"nodeType": "VariableDeclaration",
											"scope": 2907,
											"src": "779:19:24",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 2903,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "779:7:24",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2906,
											"mutability": "mutable",
											"name": "tokensOwed1",
											"nodeType": "VariableDeclaration",
											"scope": 2907,
											"src": "808:19:24",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 2905,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "808:7:24",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Info",
									"nodeType": "StructDefinition",
									"scope": 3075,
									"src": "432:402:24",
									"visibility": "public"
								},
								{
									"body": {
										"id": 2936,
										"nodeType": "Block",
										"src": "1445:90:24",
										"statements": [
											{
												"expression": {
													"id": 2934,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2923,
														"name": "position",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2921,
														"src": "1455:8:24",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$2907_storage_ptr",
															"typeString": "struct Position.Info storage pointer"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"baseExpression": {
															"id": 2924,
															"name": "self",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2912,
															"src": "1466:4:24",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Info_$2907_storage_$",
																"typeString": "mapping(bytes32 => struct Position.Info storage ref)"
															}
														},
														"id": 2933,
														"indexExpression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 2928,
																			"name": "owner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2914,
																			"src": "1498:5:24",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 2929,
																			"name": "tickLower",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2916,
																			"src": "1505:9:24",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		},
																		{
																			"id": 2930,
																			"name": "tickUpper",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2918,
																			"src": "1516:9:24",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			},
																			{
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		],
																		"expression": {
																			"id": 2926,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "1481:3:24",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 2927,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "encodePacked",
																		"nodeType": "MemberAccess",
																		"src": "1481:16:24",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function () pure returns (bytes memory)"
																		}
																	},
																	"id": 2931,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1481:45:24",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 2925,
																"name": "keccak256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967288,
																"src": "1471:9:24",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																	"typeString": "function (bytes memory) pure returns (bytes32)"
																}
															},
															"id": 2932,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1471:56:24",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "1466:62:24",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$2907_storage",
															"typeString": "struct Position.Info storage ref"
														}
													},
													"src": "1455:73:24",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Info_$2907_storage_ptr",
														"typeString": "struct Position.Info storage pointer"
													}
												},
												"id": 2935,
												"nodeType": "ExpressionStatement",
												"src": "1455:73:24"
											}
										]
									},
									"documentation": {
										"id": 2908,
										"nodeType": "StructuredDocumentation",
										"src": "840:416:24",
										"text": "@notice Returns the Info struct of a position, given an owner and position boundaries\n @param self The mapping containing all user positions\n @param owner The address of the position owner\n @param tickLower The lower tick boundary of the position\n @param tickUpper The upper tick boundary of the position\n @return position The position info struct of the given owners' position"
									},
									"id": 2937,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "get",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2919,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2912,
												"mutability": "mutable",
												"name": "self",
												"nodeType": "VariableDeclaration",
												"scope": 2937,
												"src": "1274:37:24",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Info_$2907_storage_$",
													"typeString": "mapping(bytes32 => struct Position.Info)"
												},
												"typeName": {
													"id": 2911,
													"keyType": {
														"id": 2909,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "1282:7:24",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Mapping",
													"src": "1274:24:24",
													"typeDescriptions": {
														"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Info_$2907_storage_$",
														"typeString": "mapping(bytes32 => struct Position.Info)"
													},
													"valueType": {
														"id": 2910,
														"name": "Info",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 2907,
														"src": "1293:4:24",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$2907_storage_ptr",
															"typeString": "struct Position.Info"
														}
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2914,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 2937,
												"src": "1313:13:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2913,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1313:7:24",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2916,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 2937,
												"src": "1328:15:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 2915,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1328:5:24",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2918,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 2937,
												"src": "1345:15:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 2917,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1345:5:24",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1273:88:24"
									},
									"returnParameters": {
										"id": 2922,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2921,
												"mutability": "mutable",
												"name": "position",
												"nodeType": "VariableDeclaration",
												"scope": 2937,
												"src": "1409:30:24",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Info_$2907_storage_ptr",
													"typeString": "struct Position.Info"
												},
												"typeName": {
													"id": 2920,
													"name": "Position.Info",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2907,
													"src": "1409:13:24",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Info_$2907_storage_ptr",
														"typeString": "struct Position.Info"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1408:32:24"
									},
									"scope": 3075,
									"src": "1261:274:24",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3073,
										"nodeType": "Block",
										"src": "2279:1380:24",
										"statements": [
											{
												"assignments": [
													2952
												],
												"declarations": [
													{
														"constant": false,
														"id": 2952,
														"mutability": "mutable",
														"name": "_self",
														"nodeType": "VariableDeclaration",
														"scope": 3073,
														"src": "2289:17:24",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$2907_memory_ptr",
															"typeString": "struct Position.Info"
														},
														"typeName": {
															"id": 2951,
															"name": "Info",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 2907,
															"src": "2289:4:24",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$2907_storage_ptr",
																"typeString": "struct Position.Info"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2954,
												"initialValue": {
													"id": 2953,
													"name": "self",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2940,
													"src": "2309:4:24",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Info_$2907_storage_ptr",
														"typeString": "struct Position.Info storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2289:24:24"
											},
											{
												"assignments": [
													2956
												],
												"declarations": [
													{
														"constant": false,
														"id": 2956,
														"mutability": "mutable",
														"name": "liquidityNext",
														"nodeType": "VariableDeclaration",
														"scope": 3073,
														"src": "2324:21:24",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														},
														"typeName": {
															"id": 2955,
															"name": "uint128",
															"nodeType": "ElementaryTypeName",
															"src": "2324:7:24",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2957,
												"nodeType": "VariableDeclarationStatement",
												"src": "2324:21:24"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													},
													"id": 2960,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2958,
														"name": "liquidityDelta",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2942,
														"src": "2359:14:24",
														"typeDescriptions": {
															"typeIdentifier": "t_int128",
															"typeString": "int128"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2959,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2377:1:24",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2359:19:24",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2984,
													"nodeType": "Block",
													"src": "2534:96:24",
													"statements": [
														{
															"expression": {
																"id": 2982,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2975,
																	"name": "liquidityNext",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2956,
																	"src": "2548:13:24",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"expression": {
																				"id": 2978,
																				"name": "_self",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2952,
																				"src": "2587:5:24",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Info_$2907_memory_ptr",
																					"typeString": "struct Position.Info memory"
																				}
																			},
																			"id": 2979,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "liquidity",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 2898,
																			"src": "2587:15:24",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		},
																		{
																			"id": 2980,
																			"name": "liquidityDelta",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2942,
																			"src": "2604:14:24",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int128",
																				"typeString": "int128"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			},
																			{
																				"typeIdentifier": "t_int128",
																				"typeString": "int128"
																			}
																		],
																		"expression": {
																			"id": 2976,
																			"name": "LiquidityMath",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2760,
																			"src": "2564:13:24",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_LiquidityMath_$2760_$",
																				"typeString": "type(library LiquidityMath)"
																			}
																		},
																		"id": 2977,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "addDelta",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2759,
																		"src": "2564:22:24",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint128_$_t_int128_$returns$_t_uint128_$",
																			"typeString": "function (uint128,int128) pure returns (uint128)"
																		}
																	},
																	"id": 2981,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2564:55:24",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"src": "2548:71:24",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"id": 2983,
															"nodeType": "ExpressionStatement",
															"src": "2548:71:24"
														}
													]
												},
												"id": 2985,
												"nodeType": "IfStatement",
												"src": "2355:275:24",
												"trueBody": {
													"id": 2974,
													"nodeType": "Block",
													"src": "2380:148:24",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		},
																		"id": 2965,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 2962,
																				"name": "_self",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2952,
																				"src": "2402:5:24",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Info_$2907_memory_ptr",
																					"typeString": "struct Position.Info memory"
																				}
																			},
																			"id": 2963,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "liquidity",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 2898,
																			"src": "2402:15:24",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 2964,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2420:1:24",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "2402:19:24",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "4e50",
																		"id": 2966,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2423:4:24",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_ebb814de87c671cfe97a338672e9700a9288a1a6d16839e238618b2b7f2aa86d",
																			"typeString": "literal_string \"NP\""
																		},
																		"value": "NP"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_ebb814de87c671cfe97a338672e9700a9288a1a6d16839e238618b2b7f2aa86d",
																			"typeString": "literal_string \"NP\""
																		}
																	],
																	"id": 2961,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "2394:7:24",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 2967,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2394:34:24",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2968,
															"nodeType": "ExpressionStatement",
															"src": "2394:34:24"
														},
														{
															"expression": {
																"id": 2972,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2969,
																	"name": "liquidityNext",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2956,
																	"src": "2486:13:24",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"id": 2970,
																		"name": "_self",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2952,
																		"src": "2502:5:24",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Info_$2907_memory_ptr",
																			"typeString": "struct Position.Info memory"
																		}
																	},
																	"id": 2971,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "liquidity",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2898,
																	"src": "2502:15:24",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"src": "2486:31:24",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"id": 2973,
															"nodeType": "ExpressionStatement",
															"src": "2486:31:24"
														}
													]
												}
											},
											{
												"assignments": [
													2987
												],
												"declarations": [
													{
														"constant": false,
														"id": 2987,
														"mutability": "mutable",
														"name": "tokensOwed0",
														"nodeType": "VariableDeclaration",
														"scope": 3073,
														"src": "2640:19:24",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														},
														"typeName": {
															"id": 2986,
															"name": "uint128",
															"nodeType": "ElementaryTypeName",
															"src": "2640:7:24",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2988,
												"nodeType": "VariableDeclarationStatement",
												"src": "2640:19:24"
											},
											{
												"assignments": [
													2990
												],
												"declarations": [
													{
														"constant": false,
														"id": 2990,
														"mutability": "mutable",
														"name": "tokensOwed1",
														"nodeType": "VariableDeclaration",
														"scope": 3073,
														"src": "2669:19:24",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														},
														"typeName": {
															"id": 2989,
															"name": "uint128",
															"nodeType": "ElementaryTypeName",
															"src": "2669:7:24",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2991,
												"nodeType": "VariableDeclarationStatement",
												"src": "2669:19:24"
											},
											{
												"condition": {
													"id": 2993,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "2702:7:24",
													"subExpression": {
														"id": 2992,
														"name": "staked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2948,
														"src": "2703:6:24",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3029,
												"nodeType": "IfStatement",
												"src": "2698:490:24",
												"trueBody": {
													"id": 3028,
													"nodeType": "Block",
													"src": "2711:477:24",
													"statements": [
														{
															"expression": {
																"id": 3009,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2994,
																	"name": "tokensOwed0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2987,
																	"src": "2767:11:24",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3002,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 2999,
																						"name": "feeGrowthInside0X128",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2944,
																						"src": "2843:20:24",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "-",
																					"rightExpression": {
																						"expression": {
																							"id": 3000,
																							"name": "_self",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2952,
																							"src": "2866:5:24",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_Info_$2907_memory_ptr",
																								"typeString": "struct Position.Info memory"
																							}
																						},
																						"id": 3001,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "feeGrowthInside0LastX128",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2900,
																						"src": "2866:30:24",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "2843:53:24",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"expression": {
																						"id": 3003,
																						"name": "_self",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2952,
																						"src": "2898:5:24",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Info_$2907_memory_ptr",
																							"typeString": "struct Position.Info memory"
																						}
																					},
																					"id": 3004,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "liquidity",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2898,
																					"src": "2898:15:24",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint128",
																						"typeString": "uint128"
																					}
																				},
																				{
																					"expression": {
																						"id": 3005,
																						"name": "FixedPoint128",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2185,
																						"src": "2915:13:24",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_FixedPoint128_$2185_$",
																							"typeString": "type(library FixedPoint128)"
																						}
																					},
																					"id": 3006,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "Q128",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2184,
																					"src": "2915:18:24",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint128",
																						"typeString": "uint128"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"id": 2997,
																					"name": "FullMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2368,
																					"src": "2806:8:24",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_FullMath_$2368_$",
																						"typeString": "type(library FullMath)"
																					}
																				},
																				"id": 2998,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "mulDiv",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2324,
																				"src": "2806:15:24",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																					"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																				}
																			},
																			"id": 3007,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2806:145:24",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 2996,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2781:7:24",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint128_$",
																			"typeString": "type(uint128)"
																		},
																		"typeName": {
																			"id": 2995,
																			"name": "uint128",
																			"nodeType": "ElementaryTypeName",
																			"src": "2781:7:24",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 3008,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2781:184:24",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"src": "2767:198:24",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"id": 3010,
															"nodeType": "ExpressionStatement",
															"src": "2767:198:24"
														},
														{
															"expression": {
																"id": 3026,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3011,
																	"name": "tokensOwed1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2990,
																	"src": "2979:11:24",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3019,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 3016,
																						"name": "feeGrowthInside1X128",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2946,
																						"src": "3055:20:24",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "-",
																					"rightExpression": {
																						"expression": {
																							"id": 3017,
																							"name": "_self",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2952,
																							"src": "3078:5:24",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_Info_$2907_memory_ptr",
																								"typeString": "struct Position.Info memory"
																							}
																						},
																						"id": 3018,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "feeGrowthInside1LastX128",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2902,
																						"src": "3078:30:24",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "3055:53:24",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"expression": {
																						"id": 3020,
																						"name": "_self",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2952,
																						"src": "3110:5:24",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Info_$2907_memory_ptr",
																							"typeString": "struct Position.Info memory"
																						}
																					},
																					"id": 3021,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "liquidity",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2898,
																					"src": "3110:15:24",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint128",
																						"typeString": "uint128"
																					}
																				},
																				{
																					"expression": {
																						"id": 3022,
																						"name": "FixedPoint128",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2185,
																						"src": "3127:13:24",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_FixedPoint128_$2185_$",
																							"typeString": "type(library FixedPoint128)"
																						}
																					},
																					"id": 3023,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "Q128",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2184,
																					"src": "3127:18:24",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint128",
																						"typeString": "uint128"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"id": 3014,
																					"name": "FullMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2368,
																					"src": "3018:8:24",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_FullMath_$2368_$",
																						"typeString": "type(library FullMath)"
																					}
																				},
																				"id": 3015,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "mulDiv",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2324,
																				"src": "3018:15:24",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																					"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																				}
																			},
																			"id": 3024,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "3018:145:24",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 3013,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2993:7:24",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint128_$",
																			"typeString": "type(uint128)"
																		},
																		"typeName": {
																			"id": 3012,
																			"name": "uint128",
																			"nodeType": "ElementaryTypeName",
																			"src": "2993:7:24",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 3025,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2993:184:24",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"src": "2979:198:24",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"id": 3027,
															"nodeType": "ExpressionStatement",
															"src": "2979:198:24"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													},
													"id": 3032,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3030,
														"name": "liquidityDelta",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2942,
														"src": "3233:14:24",
														"typeDescriptions": {
															"typeIdentifier": "t_int128",
															"typeString": "int128"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 3031,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3251:1:24",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3233:19:24",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3039,
												"nodeType": "IfStatement",
												"src": "3229:55:24",
												"trueBody": {
													"expression": {
														"id": 3037,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"expression": {
																"id": 3033,
																"name": "self",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2940,
																"src": "3254:4:24",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Info_$2907_storage_ptr",
																	"typeString": "struct Position.Info storage pointer"
																}
															},
															"id": 3035,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"memberName": "liquidity",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2898,
															"src": "3254:14:24",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"id": 3036,
															"name": "liquidityNext",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2956,
															"src": "3271:13:24",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														"src": "3254:30:24",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"id": 3038,
													"nodeType": "ExpressionStatement",
													"src": "3254:30:24"
												}
											},
											{
												"expression": {
													"id": 3044,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 3040,
															"name": "self",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2940,
															"src": "3294:4:24",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$2907_storage_ptr",
																"typeString": "struct Position.Info storage pointer"
															}
														},
														"id": 3042,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "feeGrowthInside0LastX128",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2900,
														"src": "3294:29:24",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 3043,
														"name": "feeGrowthInside0X128",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2944,
														"src": "3326:20:24",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3294:52:24",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 3045,
												"nodeType": "ExpressionStatement",
												"src": "3294:52:24"
											},
											{
												"expression": {
													"id": 3050,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 3046,
															"name": "self",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2940,
															"src": "3356:4:24",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$2907_storage_ptr",
																"typeString": "struct Position.Info storage pointer"
															}
														},
														"id": 3048,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "feeGrowthInside1LastX128",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2902,
														"src": "3356:29:24",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 3049,
														"name": "feeGrowthInside1X128",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2946,
														"src": "3388:20:24",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3356:52:24",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 3051,
												"nodeType": "ExpressionStatement",
												"src": "3356:52:24"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 3058,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														},
														"id": 3054,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3052,
															"name": "tokensOwed0",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2987,
															"src": "3422:11:24",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 3053,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3436:1:24",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "3422:15:24",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														},
														"id": 3057,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3055,
															"name": "tokensOwed1",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2990,
															"src": "3441:11:24",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 3056,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3455:1:24",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "3441:15:24",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3422:34:24",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3072,
												"nodeType": "IfStatement",
												"src": "3418:235:24",
												"trueBody": {
													"id": 3071,
													"nodeType": "Block",
													"src": "3458:195:24",
													"statements": [
														{
															"expression": {
																"id": 3063,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 3059,
																		"name": "self",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2940,
																		"src": "3566:4:24",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Info_$2907_storage_ptr",
																			"typeString": "struct Position.Info storage pointer"
																		}
																	},
																	"id": 3061,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "tokensOwed0",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2904,
																	"src": "3566:16:24",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 3062,
																	"name": "tokensOwed0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2987,
																	"src": "3586:11:24",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"src": "3566:31:24",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"id": 3064,
															"nodeType": "ExpressionStatement",
															"src": "3566:31:24"
														},
														{
															"expression": {
																"id": 3069,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 3065,
																		"name": "self",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2940,
																		"src": "3611:4:24",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Info_$2907_storage_ptr",
																			"typeString": "struct Position.Info storage pointer"
																		}
																	},
																	"id": 3067,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "tokensOwed1",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2906,
																	"src": "3611:16:24",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 3068,
																	"name": "tokensOwed1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2990,
																	"src": "3631:11:24",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"src": "3611:31:24",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"id": 3070,
															"nodeType": "ExpressionStatement",
															"src": "3611:31:24"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2938,
										"nodeType": "StructuredDocumentation",
										"src": "1541:547:24",
										"text": "@notice Credits accumulated fees to a user's position\n @param self The individual position to update\n @param liquidityDelta The change in pool liquidity as a result of the position update\n @param feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries\n @param feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries\n @param staked Signifies if the position is staked in the gauge or not"
									},
									"id": 3074,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "update",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2949,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2940,
												"mutability": "mutable",
												"name": "self",
												"nodeType": "VariableDeclaration",
												"scope": 3074,
												"src": "2118:17:24",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Info_$2907_storage_ptr",
													"typeString": "struct Position.Info"
												},
												"typeName": {
													"id": 2939,
													"name": "Info",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2907,
													"src": "2118:4:24",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Info_$2907_storage_ptr",
														"typeString": "struct Position.Info"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2942,
												"mutability": "mutable",
												"name": "liquidityDelta",
												"nodeType": "VariableDeclaration",
												"scope": 3074,
												"src": "2145:21:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 2941,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "2145:6:24",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2944,
												"mutability": "mutable",
												"name": "feeGrowthInside0X128",
												"nodeType": "VariableDeclaration",
												"scope": 3074,
												"src": "2176:28:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2943,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2176:7:24",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2946,
												"mutability": "mutable",
												"name": "feeGrowthInside1X128",
												"nodeType": "VariableDeclaration",
												"scope": 3074,
												"src": "2214:28:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2945,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2214:7:24",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2948,
												"mutability": "mutable",
												"name": "staked",
												"nodeType": "VariableDeclaration",
												"scope": 3074,
												"src": "2252:11:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2947,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2252:4:24",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2108:161:24"
									},
									"returnParameters": {
										"id": 2950,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2279:0:24"
									},
									"scope": 3075,
									"src": "2093:1566:24",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3076,
							"src": "365:3296:24"
						}
					],
					"src": "45:3617:24"
				},
				"id": 24
			},
			"contracts/core/libraries/SafeCast.sol": {
				"ast": {
					"absolutePath": "contracts/core/libraries/SafeCast.sol",
					"exportedSymbols": {
						"SafeCast": [
							3145
						]
					},
					"id": 3146,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3077,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:25"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 3078,
								"nodeType": "StructuredDocumentation",
								"src": "71:94:25",
								"text": "@title Safe casting methods\n @notice Contains methods for safely casting between types"
							},
							"fullyImplemented": true,
							"id": 3145,
							"linearizedBaseContracts": [
								3145
							],
							"name": "SafeCast",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 3098,
										"nodeType": "Block",
										"src": "421:47:25",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3095,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"id": 3092,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3087,
																			"name": "z",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3084,
																			"src": "440:1:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"arguments": [
																				{
																					"id": 3090,
																					"name": "y",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3081,
																					"src": "452:1:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 3089,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "444:7:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint160_$",
																					"typeString": "type(uint160)"
																				},
																				"typeName": {
																					"id": 3088,
																					"name": "uint160",
																					"nodeType": "ElementaryTypeName",
																					"src": "444:7:25",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 3091,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "444:10:25",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"src": "440:14:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	}
																],
																"id": 3093,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "439:16:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 3094,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3081,
																"src": "459:1:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "439:21:25",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 3086,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "431:7:25",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 3096,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "431:30:25",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3097,
												"nodeType": "ExpressionStatement",
												"src": "431:30:25"
											}
										]
									},
									"documentation": {
										"id": 3079,
										"nodeType": "StructuredDocumentation",
										"src": "188:164:25",
										"text": "@notice Cast a uint256 to a uint160, revert on overflow\n @param y The uint256 to be downcasted\n @return z The downcasted integer, now type uint160"
									},
									"id": 3099,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toUint160",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3082,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3081,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 3099,
												"src": "376:9:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3080,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "376:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "375:11:25"
									},
									"returnParameters": {
										"id": 3085,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3084,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 3099,
												"src": "410:9:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3083,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "410:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "409:11:25"
									},
									"scope": 3145,
									"src": "357:111:25",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3119,
										"nodeType": "Block",
										"src": "713:46:25",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															"id": 3116,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"id": 3113,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3108,
																			"name": "z",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3105,
																			"src": "732:1:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int128",
																				"typeString": "int128"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"arguments": [
																				{
																					"id": 3111,
																					"name": "y",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3102,
																					"src": "743:1:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				],
																				"id": 3110,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "736:6:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_int128_$",
																					"typeString": "type(int128)"
																				},
																				"typeName": {
																					"id": 3109,
																					"name": "int128",
																					"nodeType": "ElementaryTypeName",
																					"src": "736:6:25",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 3112,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "736:9:25",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_int128",
																				"typeString": "int128"
																			}
																		},
																		"src": "732:13:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int128",
																			"typeString": "int128"
																		}
																	}
																],
																"id": 3114,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "731:15:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_int128",
																	"typeString": "int128"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 3115,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3102,
																"src": "750:1:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"src": "731:20:25",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 3107,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "723:7:25",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 3117,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "723:29:25",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3118,
												"nodeType": "ExpressionStatement",
												"src": "723:29:25"
											}
										]
									},
									"documentation": {
										"id": 3100,
										"nodeType": "StructuredDocumentation",
										"src": "474:173:25",
										"text": "@notice Cast a int256 to a int128, revert on overflow or underflow\n @param y The int256 to be downcasted\n @return z The downcasted integer, now type int128"
									},
									"id": 3120,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toInt128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3102,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 3120,
												"src": "670:8:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3101,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "670:6:25",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "669:10:25"
									},
									"returnParameters": {
										"id": 3106,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3105,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 3120,
												"src": "703:8:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 3104,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "703:6:25",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "702:10:25"
									},
									"scope": 3145,
									"src": "652:107:25",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3143,
										"nodeType": "Block",
										"src": "986:61:25",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3133,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3129,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3123,
																"src": "1004:1:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819968_by_1",
																	"typeString": "int_const 5789...(69 digits omitted)...9968"
																},
																"id": 3132,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 3130,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1008:1:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "323535",
																	"id": 3131,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1013:3:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_255_by_1",
																		"typeString": "int_const 255"
																	},
																	"value": "255"
																},
																"src": "1008:8:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819968_by_1",
																	"typeString": "int_const 5789...(69 digits omitted)...9968"
																}
															},
															"src": "1004:12:25",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 3128,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "996:7:25",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 3134,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "996:21:25",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3135,
												"nodeType": "ExpressionStatement",
												"src": "996:21:25"
											},
											{
												"expression": {
													"id": 3141,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3136,
														"name": "z",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3126,
														"src": "1027:1:25",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 3139,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3123,
																"src": "1038:1:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 3138,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1031:6:25",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_int256_$",
																"typeString": "type(int256)"
															},
															"typeName": {
																"id": 3137,
																"name": "int256",
																"nodeType": "ElementaryTypeName",
																"src": "1031:6:25",
																"typeDescriptions": {}
															}
														},
														"id": 3140,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1031:9:25",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "1027:13:25",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"id": 3142,
												"nodeType": "ExpressionStatement",
												"src": "1027:13:25"
											}
										]
									},
									"documentation": {
										"id": 3121,
										"nodeType": "StructuredDocumentation",
										"src": "765:154:25",
										"text": "@notice Cast a uint256 to a int256, revert on overflow\n @param y The uint256 to be casted\n @return z The casted integer, now type int256"
									},
									"id": 3144,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toInt256",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3124,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3123,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 3144,
												"src": "942:9:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3122,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "942:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "941:11:25"
									},
									"returnParameters": {
										"id": 3127,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3126,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 3144,
												"src": "976:8:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3125,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "976:6:25",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "975:10:25"
									},
									"scope": 3145,
									"src": "924:123:25",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3146,
							"src": "165:884:25"
						}
					],
					"src": "45:1005:25"
				},
				"id": 25
			},
			"contracts/core/libraries/SqrtPriceMath.sol": {
				"ast": {
					"absolutePath": "contracts/core/libraries/SqrtPriceMath.sol",
					"exportedSymbols": {
						"FixedPoint96": [
							2195
						],
						"FullMath": [
							2368
						],
						"LowGasSafeMath": [
							2890
						],
						"SafeCast": [
							3145
						],
						"SqrtPriceMath": [
							3662
						],
						"UnsafeMath": [
							5139
						]
					},
					"id": 3663,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3147,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:26"
						},
						{
							"absolutePath": "contracts/core/libraries/LowGasSafeMath.sol",
							"file": "./LowGasSafeMath.sol",
							"id": 3148,
							"nodeType": "ImportDirective",
							"scope": 3663,
							"sourceUnit": 2891,
							"src": "71:30:26",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/SafeCast.sol",
							"file": "./SafeCast.sol",
							"id": 3149,
							"nodeType": "ImportDirective",
							"scope": 3663,
							"sourceUnit": 3146,
							"src": "102:24:26",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/FullMath.sol",
							"file": "./FullMath.sol",
							"id": 3150,
							"nodeType": "ImportDirective",
							"scope": 3663,
							"sourceUnit": 2369,
							"src": "128:24:26",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/UnsafeMath.sol",
							"file": "./UnsafeMath.sol",
							"id": 3151,
							"nodeType": "ImportDirective",
							"scope": 3663,
							"sourceUnit": 5140,
							"src": "153:26:26",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/FixedPoint96.sol",
							"file": "./FixedPoint96.sol",
							"id": 3152,
							"nodeType": "ImportDirective",
							"scope": 3663,
							"sourceUnit": 2196,
							"src": "180:28:26",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 3153,
								"nodeType": "StructuredDocumentation",
								"src": "210:167:26",
								"text": "@title Functions based on Q64.96 sqrt price and liquidity\n @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas"
							},
							"fullyImplemented": true,
							"id": 3662,
							"linearizedBaseContracts": [
								3662
							],
							"name": "SqrtPriceMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 3156,
									"libraryName": {
										"id": 3154,
										"name": "LowGasSafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2890,
										"src": "411:14:26",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_LowGasSafeMath_$2890",
											"typeString": "library LowGasSafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "405:33:26",
									"typeName": {
										"id": 3155,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "430:7:26",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"id": 3159,
									"libraryName": {
										"id": 3157,
										"name": "SafeCast",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 3145,
										"src": "449:8:26",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeCast_$3145",
											"typeString": "library SafeCast"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "443:27:26",
									"typeName": {
										"id": 3158,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "462:7:26",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"body": {
										"id": 3279,
										"nodeType": "Block",
										"src": "1583:1206:26",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3175,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3173,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3166,
														"src": "1709:6:26",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 3174,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1719:1:26",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1709:11:26",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3178,
												"nodeType": "IfStatement",
												"src": "1705:32:26",
												"trueBody": {
													"expression": {
														"id": 3176,
														"name": "sqrtPX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3162,
														"src": "1729:8:26",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"functionReturnParameters": 3172,
													"id": 3177,
													"nodeType": "Return",
													"src": "1722:15:26"
												}
											},
											{
												"assignments": [
													3180
												],
												"declarations": [
													{
														"constant": false,
														"id": 3180,
														"mutability": "mutable",
														"name": "numerator1",
														"nodeType": "VariableDeclaration",
														"scope": 3279,
														"src": "1747:18:26",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3179,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1747:7:26",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3188,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3187,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 3183,
																"name": "liquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3164,
																"src": "1776:9:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															],
															"id": 3182,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1768:7:26",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 3181,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1768:7:26",
																"typeDescriptions": {}
															}
														},
														"id": 3184,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1768:18:26",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"expression": {
															"id": 3185,
															"name": "FixedPoint96",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2195,
															"src": "1790:12:26",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_FixedPoint96_$2195_$",
																"typeString": "type(library FixedPoint96)"
															}
														},
														"id": 3186,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "RESOLUTION",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2191,
														"src": "1790:23:26",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "1768:45:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1747:66:26"
											},
											{
												"condition": {
													"id": 3189,
													"name": "add",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3168,
													"src": "1828:3:26",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 3277,
													"nodeType": "Block",
													"src": "2339:444:26",
													"statements": [
														{
															"assignments": [
																3243
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 3243,
																	"mutability": "mutable",
																	"name": "product",
																	"nodeType": "VariableDeclaration",
																	"scope": 3277,
																	"src": "2353:15:26",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 3242,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2353:7:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 3244,
															"nodeType": "VariableDeclarationStatement",
															"src": "2353:15:26"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 3259,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3255,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3253,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"components": [
																						{
																							"id": 3250,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftHandSide": {
																								"id": 3246,
																								"name": "product",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 3243,
																								"src": "2549:7:26",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "Assignment",
																							"operator": "=",
																							"rightHandSide": {
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 3249,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 3247,
																									"name": "amount",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 3166,
																									"src": "2559:6:26",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"id": 3248,
																									"name": "sqrtPX96",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 3162,
																									"src": "2568:8:26",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint160",
																										"typeString": "uint160"
																									}
																								},
																								"src": "2559:17:26",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "2549:27:26",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 3251,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "2548:29:26",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3252,
																					"name": "amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3166,
																					"src": "2580:6:26",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "2548:38:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"id": 3254,
																				"name": "sqrtPX96",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3162,
																				"src": "2590:8:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"src": "2548:50:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3258,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3256,
																				"name": "numerator1",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3180,
																				"src": "2602:10:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">",
																			"rightExpression": {
																				"id": 3257,
																				"name": "product",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3243,
																				"src": "2615:7:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "2602:20:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "2548:74:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 3245,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "2540:7:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																		"typeString": "function (bool) pure"
																	}
																},
																"id": 3260,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2540:83:26",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 3261,
															"nodeType": "ExpressionStatement",
															"src": "2540:83:26"
														},
														{
															"assignments": [
																3263
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 3263,
																	"mutability": "mutable",
																	"name": "denominator",
																	"nodeType": "VariableDeclaration",
																	"scope": 3277,
																	"src": "2637:19:26",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 3262,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2637:7:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 3267,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3266,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3264,
																	"name": "numerator1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3180,
																	"src": "2659:10:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 3265,
																	"name": "product",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3243,
																	"src": "2672:7:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2659:20:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "2637:42:26"
														},
														{
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"arguments": [
																			{
																				"id": 3270,
																				"name": "numerator1",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3180,
																				"src": "2726:10:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"id": 3271,
																				"name": "sqrtPX96",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3162,
																				"src": "2738:8:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			{
																				"id": 3272,
																				"name": "denominator",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3263,
																				"src": "2748:11:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 3268,
																				"name": "FullMath",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2368,
																				"src": "2700:8:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_FullMath_$2368_$",
																					"typeString": "type(library FullMath)"
																				}
																			},
																			"id": 3269,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "mulDivRoundingUp",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 2367,
																			"src": "2700:25:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																			}
																		},
																		"id": 3273,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2700:60:26",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3274,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "toUint160",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3099,
																	"src": "2700:70:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint160_$bound_to$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (uint160)"
																	}
																},
																"id": 3275,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2700:72:26",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"functionReturnParameters": 3172,
															"id": 3276,
															"nodeType": "Return",
															"src": "2693:79:26"
														}
													]
												},
												"id": 3278,
												"nodeType": "IfStatement",
												"src": "1824:959:26",
												"trueBody": {
													"id": 3241,
													"nodeType": "Block",
													"src": "1833:500:26",
													"statements": [
														{
															"assignments": [
																3191
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 3191,
																	"mutability": "mutable",
																	"name": "product",
																	"nodeType": "VariableDeclaration",
																	"scope": 3241,
																	"src": "1847:15:26",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 3190,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1847:7:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 3192,
															"nodeType": "VariableDeclarationStatement",
															"src": "1847:15:26"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3202,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3200,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"id": 3197,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"id": 3193,
																					"name": "product",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3191,
																					"src": "1881:7:26",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "=",
																				"rightHandSide": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3196,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 3194,
																						"name": "amount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3166,
																						"src": "1891:6:26",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 3195,
																						"name": "sqrtPX96",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3162,
																						"src": "1900:8:26",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint160",
																							"typeString": "uint160"
																						}
																					},
																					"src": "1891:17:26",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "1881:27:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 3198,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "1880:29:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 3199,
																		"name": "amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3166,
																		"src": "1912:6:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1880:38:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 3201,
																	"name": "sqrtPX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3162,
																	"src": "1922:8:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "1880:50:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 3225,
															"nodeType": "IfStatement",
															"src": "1876:343:26",
															"trueBody": {
																"id": 3224,
																"nodeType": "Block",
																"src": "1932:287:26",
																"statements": [
																	{
																		"assignments": [
																			3204
																		],
																		"declarations": [
																			{
																				"constant": false,
																				"id": 3204,
																				"mutability": "mutable",
																				"name": "denominator",
																				"nodeType": "VariableDeclaration",
																				"scope": 3224,
																				"src": "1950:19:26",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"typeName": {
																					"id": 3203,
																					"name": "uint256",
																					"nodeType": "ElementaryTypeName",
																					"src": "1950:7:26",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"id": 3208,
																		"initialValue": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3207,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3205,
																				"name": "numerator1",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3180,
																				"src": "1972:10:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"id": 3206,
																				"name": "product",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3191,
																				"src": "1985:7:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "1972:20:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "VariableDeclarationStatement",
																		"src": "1950:42:26"
																	},
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3211,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3209,
																				"name": "denominator",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3204,
																				"src": "2014:11:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">=",
																			"rightExpression": {
																				"id": 3210,
																				"name": "numerator1",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3180,
																				"src": "2029:10:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "2014:25:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"id": 3223,
																		"nodeType": "IfStatement",
																		"src": "2010:195:26",
																		"trueBody": {
																			"id": 3222,
																			"nodeType": "Block",
																			"src": "2041:164:26",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"id": 3216,
																										"name": "numerator1",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 3180,
																										"src": "2151:10:26",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									{
																										"id": 3217,
																										"name": "sqrtPX96",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 3162,
																										"src": "2163:8:26",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint160",
																											"typeString": "uint160"
																										}
																									},
																									{
																										"id": 3218,
																										"name": "denominator",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 3204,
																										"src": "2173:11:26",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										},
																										{
																											"typeIdentifier": "t_uint160",
																											"typeString": "uint160"
																										},
																										{
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									],
																									"expression": {
																										"id": 3214,
																										"name": "FullMath",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 2368,
																										"src": "2125:8:26",
																										"typeDescriptions": {
																											"typeIdentifier": "t_type$_t_contract$_FullMath_$2368_$",
																											"typeString": "type(library FullMath)"
																										}
																									},
																									"id": 3215,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"memberName": "mulDivRoundingUp",
																									"nodeType": "MemberAccess",
																									"referencedDeclaration": 2367,
																									"src": "2125:25:26",
																									"typeDescriptions": {
																										"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																										"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																									}
																								},
																								"id": 3219,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "functionCall",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "2125:60:26",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							],
																							"id": 3213,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "2117:7:26",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_uint160_$",
																								"typeString": "type(uint160)"
																							},
																							"typeName": {
																								"id": 3212,
																								"name": "uint160",
																								"nodeType": "ElementaryTypeName",
																								"src": "2117:7:26",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 3220,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "2117:69:26",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint160",
																							"typeString": "uint160"
																						}
																					},
																					"functionReturnParameters": 3172,
																					"id": 3221,
																					"nodeType": "Return",
																					"src": "2110:76:26"
																				}
																			]
																		}
																	}
																]
															}
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 3230,
																				"name": "numerator1",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3180,
																				"src": "2273:10:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"arguments": [
																					{
																						"id": 3236,
																						"name": "amount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3166,
																						"src": "2313:6:26",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					],
																					"expression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 3233,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 3231,
																									"name": "numerator1",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 3180,
																									"src": "2286:10:26",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "/",
																								"rightExpression": {
																									"id": 3232,
																									"name": "sqrtPX96",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 3162,
																									"src": "2299:8:26",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint160",
																										"typeString": "uint160"
																									}
																								},
																								"src": "2286:21:26",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 3234,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "2285:23:26",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"id": 3235,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "add",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2785,
																					"src": "2285:27:26",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																						"typeString": "function (uint256,uint256) pure returns (uint256)"
																					}
																				},
																				"id": 3237,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "2285:35:26",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 3228,
																				"name": "UnsafeMath",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 5139,
																				"src": "2248:10:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_UnsafeMath_$5139_$",
																					"typeString": "type(library UnsafeMath)"
																				}
																			},
																			"id": 3229,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "divRoundingUp",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 5138,
																			"src": "2248:24:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256,uint256) pure returns (uint256)"
																			}
																		},
																		"id": 3238,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2248:73:26",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 3227,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2240:7:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint160_$",
																		"typeString": "type(uint160)"
																	},
																	"typeName": {
																		"id": 3226,
																		"name": "uint160",
																		"nodeType": "ElementaryTypeName",
																		"src": "2240:7:26",
																		"typeDescriptions": {}
																	}
																},
																"id": 3239,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2240:82:26",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"functionReturnParameters": 3172,
															"id": 3240,
															"nodeType": "Return",
															"src": "2233:89:26"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 3160,
										"nodeType": "StructuredDocumentation",
										"src": "476:932:26",
										"text": "@notice Gets the next sqrt price given a delta of token0\n @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\n far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\n price less in order to not send too much output.\n The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\n if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\n @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\n @param liquidity The amount of usable liquidity\n @param amount How much of token0 to add or remove from virtual reserves\n @param add Whether to add or remove the amount of token0\n @return The price after adding or removing amount, depending on add"
									},
									"id": 3280,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getNextSqrtPriceFromAmount0RoundingUp",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3169,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3162,
												"mutability": "mutable",
												"name": "sqrtPX96",
												"nodeType": "VariableDeclaration",
												"scope": 3280,
												"src": "1460:16:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3161,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1460:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3164,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 3280,
												"src": "1478:17:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 3163,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1478:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3166,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 3280,
												"src": "1497:14:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3165,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1497:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3168,
												"mutability": "mutable",
												"name": "add",
												"nodeType": "VariableDeclaration",
												"scope": 3280,
												"src": "1513:8:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3167,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1513:4:26",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1459:63:26"
									},
									"returnParameters": {
										"id": 3172,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3171,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 3280,
												"src": "1570:7:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3170,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1570:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1569:9:26"
									},
									"scope": 3662,
									"src": "1413:1376:26",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3374,
										"nodeType": "Block",
										"src": "3787:907:26",
										"statements": [
											{
												"condition": {
													"id": 3294,
													"name": "add",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3289,
													"src": "3955:3:26",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 3372,
													"nodeType": "Block",
													"src": "4279:409:26",
													"statements": [
														{
															"assignments": [
																3333
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 3333,
																	"mutability": "mutable",
																	"name": "quotient",
																	"nodeType": "VariableDeclaration",
																	"scope": 3372,
																	"src": "4293:16:26",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 3332,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "4293:7:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 3358,
															"initialValue": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3340,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3334,
																				"name": "amount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3287,
																				"src": "4330:6:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<=",
																			"rightExpression": {
																				"expression": {
																					"arguments": [
																						{
																							"id": 3337,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "4345:7:26",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_uint160_$",
																								"typeString": "type(uint160)"
																							},
																							"typeName": {
																								"id": 3336,
																								"name": "uint160",
																								"nodeType": "ElementaryTypeName",
																								"src": "4345:7:26",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_type$_t_uint160_$",
																								"typeString": "type(uint160)"
																							}
																						],
																						"id": 3335,
																						"name": "type",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967269,
																						"src": "4340:4:26",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																							"typeString": "function () pure"
																						}
																					},
																					"id": 3338,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "4340:13:26",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_meta_type_t_uint160",
																						"typeString": "type(uint160)"
																					}
																				},
																				"id": 3339,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "max",
																				"nodeType": "MemberAccess",
																				"src": "4340:17:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"src": "4330:27:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"arguments": [
																				{
																					"id": 3351,
																					"name": "amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3287,
																					"src": "4499:6:26",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"expression": {
																						"id": 3352,
																						"name": "FixedPoint96",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2195,
																						"src": "4507:12:26",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_FixedPoint96_$2195_$",
																							"typeString": "type(library FixedPoint96)"
																						}
																					},
																					"id": 3353,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "Q96",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2194,
																					"src": "4507:16:26",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 3354,
																					"name": "liquidity",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3285,
																					"src": "4525:9:26",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint128",
																						"typeString": "uint128"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint128",
																						"typeString": "uint128"
																					}
																				],
																				"expression": {
																					"id": 3349,
																					"name": "FullMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2368,
																					"src": "4473:8:26",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_FullMath_$2368_$",
																						"typeString": "type(library FullMath)"
																					}
																				},
																				"id": 3350,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "mulDivRoundingUp",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2367,
																				"src": "4473:25:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																					"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																				}
																			},
																			"id": 3355,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "4473:62:26",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 3356,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "4330:205:26",
																		"trueExpression": {
																			"arguments": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3346,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 3343,
																						"name": "amount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3287,
																						"src": "4405:6:26",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"expression": {
																							"id": 3344,
																							"name": "FixedPoint96",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2195,
																							"src": "4415:12:26",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_contract$_FixedPoint96_$2195_$",
																								"typeString": "type(library FixedPoint96)"
																							}
																						},
																						"id": 3345,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "RESOLUTION",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2191,
																						"src": "4415:23:26",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint8",
																							"typeString": "uint8"
																						}
																					},
																					"src": "4405:33:26",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 3347,
																					"name": "liquidity",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3285,
																					"src": "4440:9:26",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint128",
																						"typeString": "uint128"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint128",
																						"typeString": "uint128"
																					}
																				],
																				"expression": {
																					"id": 3341,
																					"name": "UnsafeMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 5139,
																					"src": "4380:10:26",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_UnsafeMath_$5139_$",
																						"typeString": "type(library UnsafeMath)"
																					}
																				},
																				"id": 3342,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "divRoundingUp",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 5138,
																				"src": "4380:24:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																					"typeString": "function (uint256,uint256) pure returns (uint256)"
																				}
																			},
																			"id": 3348,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "4380:70:26",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 3357,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "4312:237:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "4293:256:26"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 3362,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 3360,
																			"name": "sqrtPX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3283,
																			"src": "4572:8:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">",
																		"rightExpression": {
																			"id": 3361,
																			"name": "quotient",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3333,
																			"src": "4583:8:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4572:19:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 3359,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "4564:7:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																		"typeString": "function (bool) pure"
																	}
																},
																"id": 3363,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4564:28:26",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 3364,
															"nodeType": "ExpressionStatement",
															"src": "4564:28:26"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 3369,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 3367,
																			"name": "sqrtPX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3283,
																			"src": "4657:8:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 3368,
																			"name": "quotient",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3333,
																			"src": "4668:8:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4657:19:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 3366,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4649:7:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint160_$",
																		"typeString": "type(uint160)"
																	},
																	"typeName": {
																		"id": 3365,
																		"name": "uint160",
																		"nodeType": "ElementaryTypeName",
																		"src": "4649:7:26",
																		"typeDescriptions": {}
																	}
																},
																"id": 3370,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4649:28:26",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"functionReturnParameters": 3293,
															"id": 3371,
															"nodeType": "Return",
															"src": "4642:35:26"
														}
													]
												},
												"id": 3373,
												"nodeType": "IfStatement",
												"src": "3951:737:26",
												"trueBody": {
													"id": 3331,
													"nodeType": "Block",
													"src": "3960:313:26",
													"statements": [
														{
															"assignments": [
																3296
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 3296,
																	"mutability": "mutable",
																	"name": "quotient",
																	"nodeType": "VariableDeclaration",
																	"scope": 3331,
																	"src": "3974:16:26",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 3295,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "3974:7:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 3320,
															"initialValue": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3303,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3297,
																				"name": "amount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3287,
																				"src": "4011:6:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<=",
																			"rightExpression": {
																				"expression": {
																					"arguments": [
																						{
																							"id": 3300,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "4026:7:26",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_uint160_$",
																								"typeString": "type(uint160)"
																							},
																							"typeName": {
																								"id": 3299,
																								"name": "uint160",
																								"nodeType": "ElementaryTypeName",
																								"src": "4026:7:26",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_type$_t_uint160_$",
																								"typeString": "type(uint160)"
																							}
																						],
																						"id": 3298,
																						"name": "type",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967269,
																						"src": "4021:4:26",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																							"typeString": "function () pure"
																						}
																					},
																					"id": 3301,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "4021:13:26",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_meta_type_t_uint160",
																						"typeString": "type(uint160)"
																					}
																				},
																				"id": 3302,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "max",
																				"nodeType": "MemberAccess",
																				"src": "4021:17:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"src": "4011:27:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"arguments": [
																				{
																					"id": 3313,
																					"name": "amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3287,
																					"src": "4147:6:26",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"expression": {
																						"id": 3314,
																						"name": "FixedPoint96",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2195,
																						"src": "4155:12:26",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_FixedPoint96_$2195_$",
																							"typeString": "type(library FixedPoint96)"
																						}
																					},
																					"id": 3315,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "Q96",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2194,
																					"src": "4155:16:26",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 3316,
																					"name": "liquidity",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3285,
																					"src": "4173:9:26",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint128",
																						"typeString": "uint128"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint128",
																						"typeString": "uint128"
																					}
																				],
																				"expression": {
																					"id": 3311,
																					"name": "FullMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2368,
																					"src": "4131:8:26",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_FullMath_$2368_$",
																						"typeString": "type(library FullMath)"
																					}
																				},
																				"id": 3312,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "mulDiv",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2324,
																				"src": "4131:15:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																					"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																				}
																			},
																			"id": 3317,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "4131:52:26",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 3318,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "4011:172:26",
																		"trueExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3310,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 3307,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 3304,
																							"name": "amount",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 3287,
																							"src": "4062:6:26",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "<<",
																						"rightExpression": {
																							"expression": {
																								"id": 3305,
																								"name": "FixedPoint96",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2195,
																								"src": "4072:12:26",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_contract$_FixedPoint96_$2195_$",
																									"typeString": "type(library FixedPoint96)"
																								}
																							},
																							"id": 3306,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "RESOLUTION",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 2191,
																							"src": "4072:23:26",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint8",
																								"typeString": "uint8"
																							}
																						},
																						"src": "4062:33:26",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 3308,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "4061:35:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "/",
																			"rightExpression": {
																				"id": 3309,
																				"name": "liquidity",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3285,
																				"src": "4099:9:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			},
																			"src": "4061:47:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 3319,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3993:204:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3974:223:26"
														},
														{
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"arguments": [
																			{
																				"id": 3326,
																				"name": "quotient",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3296,
																				"src": "4241:8:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"arguments": [
																					{
																						"id": 3323,
																						"name": "sqrtPX96",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3283,
																						"src": "4227:8:26",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint160",
																							"typeString": "uint160"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_uint160",
																							"typeString": "uint160"
																						}
																					],
																					"id": 3322,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "4219:7:26",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 3321,
																						"name": "uint256",
																						"nodeType": "ElementaryTypeName",
																						"src": "4219:7:26",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 3324,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "4219:17:26",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 3325,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "add",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 2785,
																			"src": "4219:21:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																				"typeString": "function (uint256,uint256) pure returns (uint256)"
																			}
																		},
																		"id": 3327,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4219:31:26",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3328,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "toUint160",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3099,
																	"src": "4219:41:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint160_$bound_to$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (uint160)"
																	}
																},
																"id": 3329,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4219:43:26",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"functionReturnParameters": 3293,
															"id": 3330,
															"nodeType": "Return",
															"src": "4212:50:26"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 3281,
										"nodeType": "StructuredDocumentation",
										"src": "2795:815:26",
										"text": "@notice Gets the next sqrt price given a delta of token1\n @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\n far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\n price less in order to not send too much output.\n The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\n @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\n @param liquidity The amount of usable liquidity\n @param amount How much of token1 to add, or remove, from virtual reserves\n @param add Whether to add, or remove, the amount of token1\n @return The price after adding or removing `amount`"
									},
									"id": 3375,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getNextSqrtPriceFromAmount1RoundingDown",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3290,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3283,
												"mutability": "mutable",
												"name": "sqrtPX96",
												"nodeType": "VariableDeclaration",
												"scope": 3375,
												"src": "3664:16:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3282,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "3664:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3285,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 3375,
												"src": "3682:17:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 3284,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3682:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3287,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 3375,
												"src": "3701:14:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3286,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3701:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3289,
												"mutability": "mutable",
												"name": "add",
												"nodeType": "VariableDeclaration",
												"scope": 3375,
												"src": "3717:8:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3288,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3717:4:26",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3663:63:26"
									},
									"returnParameters": {
										"id": 3293,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3292,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 3375,
												"src": "3774:7:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3291,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "3774:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3773:9:26"
									},
									"scope": 3662,
									"src": "3615:1079:26",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3416,
										"nodeType": "Block",
										"src": "5419:344:26",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															"id": 3392,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3390,
																"name": "sqrtPX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3378,
																"src": "5437:8:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3391,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5448:1:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "5437:12:26",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 3389,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5429:7:26",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 3393,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5429:21:26",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3394,
												"nodeType": "ExpressionStatement",
												"src": "5429:21:26"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															},
															"id": 3398,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3396,
																"name": "liquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3380,
																"src": "5468:9:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3397,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5480:1:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "5468:13:26",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 3395,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5460:7:26",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 3399,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5460:22:26",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3400,
												"nodeType": "ExpressionStatement",
												"src": "5460:22:26"
											},
											{
												"expression": {
													"condition": {
														"id": 3401,
														"name": "zeroForOne",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3384,
														"src": "5566:10:26",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"arguments": [
															{
																"id": 3409,
																"name": "sqrtPX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3378,
																"src": "5720:8:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															{
																"id": 3410,
																"name": "liquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3380,
																"src": "5730:9:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															{
																"id": 3411,
																"name": "amountIn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3382,
																"src": "5741:8:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "74727565",
																"id": 3412,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5751:4:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																{
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															],
															"id": 3408,
															"name": "getNextSqrtPriceFromAmount1RoundingDown",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3375,
															"src": "5680:39:26",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint128_$_t_uint256_$_t_bool_$returns$_t_uint160_$",
																"typeString": "function (uint160,uint128,uint256,bool) pure returns (uint160)"
															}
														},
														"id": 3413,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5680:76:26",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"id": 3414,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "5566:190:26",
													"trueExpression": {
														"arguments": [
															{
																"id": 3403,
																"name": "sqrtPX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3378,
																"src": "5629:8:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															{
																"id": 3404,
																"name": "liquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3380,
																"src": "5639:9:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															{
																"id": 3405,
																"name": "amountIn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3382,
																"src": "5650:8:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "74727565",
																"id": 3406,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5660:4:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																{
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															],
															"id": 3402,
															"name": "getNextSqrtPriceFromAmount0RoundingUp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3280,
															"src": "5591:37:26",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint128_$_t_uint256_$_t_bool_$returns$_t_uint160_$",
																"typeString": "function (uint160,uint128,uint256,bool) pure returns (uint160)"
															}
														},
														"id": 3407,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5591:74:26",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"functionReturnParameters": 3388,
												"id": 3415,
												"nodeType": "Return",
												"src": "5559:197:26"
											}
										]
									},
									"documentation": {
										"id": 3376,
										"nodeType": "StructuredDocumentation",
										"src": "4700:538:26",
										"text": "@notice Gets the next sqrt price given an input amount of token0 or token1\n @dev Throws if price or liquidity are 0, or if the next price is out of bounds\n @param sqrtPX96 The starting price, i.e., before accounting for the input amount\n @param liquidity The amount of usable liquidity\n @param amountIn How much of token0, or token1, is being swapped in\n @param zeroForOne Whether the amount in is token0 or token1\n @return sqrtQX96 The price after adding the input amount to token0 or token1"
									},
									"id": 3417,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getNextSqrtPriceFromInput",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3385,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3378,
												"mutability": "mutable",
												"name": "sqrtPX96",
												"nodeType": "VariableDeclaration",
												"scope": 3417,
												"src": "5278:16:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3377,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "5278:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3380,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 3417,
												"src": "5296:17:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 3379,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5296:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3382,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 3417,
												"src": "5315:16:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3381,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5315:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3384,
												"mutability": "mutable",
												"name": "zeroForOne",
												"nodeType": "VariableDeclaration",
												"scope": 3417,
												"src": "5333:15:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3383,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5333:4:26",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5277:72:26"
									},
									"returnParameters": {
										"id": 3388,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3387,
												"mutability": "mutable",
												"name": "sqrtQX96",
												"nodeType": "VariableDeclaration",
												"scope": 3417,
												"src": "5397:16:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3386,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "5397:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5396:18:26"
									},
									"scope": 3662,
									"src": "5243:520:26",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3458,
										"nodeType": "Block",
										"src": "6487:342:26",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															"id": 3434,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3432,
																"name": "sqrtPX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3420,
																"src": "6505:8:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3433,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6516:1:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "6505:12:26",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 3431,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6497:7:26",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 3435,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6497:21:26",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3436,
												"nodeType": "ExpressionStatement",
												"src": "6497:21:26"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															},
															"id": 3440,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3438,
																"name": "liquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3422,
																"src": "6536:9:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3439,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6548:1:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "6536:13:26",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 3437,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6528:7:26",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 3441,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6528:22:26",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3442,
												"nodeType": "ExpressionStatement",
												"src": "6528:22:26"
											},
											{
												"expression": {
													"condition": {
														"id": 3443,
														"name": "zeroForOne",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3426,
														"src": "6628:10:26",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"arguments": [
															{
																"id": 3451,
																"name": "sqrtPX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3420,
																"src": "6784:8:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															{
																"id": 3452,
																"name": "liquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3422,
																"src": "6794:9:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															{
																"id": 3453,
																"name": "amountOut",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3424,
																"src": "6805:9:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "66616c7365",
																"id": 3454,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6816:5:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																{
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															],
															"id": 3450,
															"name": "getNextSqrtPriceFromAmount0RoundingUp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3280,
															"src": "6746:37:26",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint128_$_t_uint256_$_t_bool_$returns$_t_uint160_$",
																"typeString": "function (uint160,uint128,uint256,bool) pure returns (uint160)"
															}
														},
														"id": 3455,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6746:76:26",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"id": 3456,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "6628:194:26",
													"trueExpression": {
														"arguments": [
															{
																"id": 3445,
																"name": "sqrtPX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3420,
																"src": "6693:8:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															{
																"id": 3446,
																"name": "liquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3422,
																"src": "6703:9:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															{
																"id": 3447,
																"name": "amountOut",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3424,
																"src": "6714:9:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "66616c7365",
																"id": 3448,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6725:5:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																{
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															],
															"id": 3444,
															"name": "getNextSqrtPriceFromAmount1RoundingDown",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3375,
															"src": "6653:39:26",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint128_$_t_uint256_$_t_bool_$returns$_t_uint160_$",
																"typeString": "function (uint160,uint128,uint256,bool) pure returns (uint160)"
															}
														},
														"id": 3449,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6653:78:26",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"functionReturnParameters": 3430,
												"id": 3457,
												"nodeType": "Return",
												"src": "6621:201:26"
											}
										]
									},
									"documentation": {
										"id": 3418,
										"nodeType": "StructuredDocumentation",
										"src": "5769:535:26",
										"text": "@notice Gets the next sqrt price given an output amount of token0 or token1\n @dev Throws if price or liquidity are 0 or the next price is out of bounds\n @param sqrtPX96 The starting price before accounting for the output amount\n @param liquidity The amount of usable liquidity\n @param amountOut How much of token0, or token1, is being swapped out\n @param zeroForOne Whether the amount out is token0 or token1\n @return sqrtQX96 The price after removing the output amount of token0 or token1"
									},
									"id": 3459,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getNextSqrtPriceFromOutput",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3427,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3420,
												"mutability": "mutable",
												"name": "sqrtPX96",
												"nodeType": "VariableDeclaration",
												"scope": 3459,
												"src": "6345:16:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3419,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "6345:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3422,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 3459,
												"src": "6363:17:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 3421,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "6363:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3424,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 3459,
												"src": "6382:17:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3423,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6382:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3426,
												"mutability": "mutable",
												"name": "zeroForOne",
												"nodeType": "VariableDeclaration",
												"scope": 3459,
												"src": "6401:15:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3425,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6401:4:26",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6344:73:26"
									},
									"returnParameters": {
										"id": 3430,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3429,
												"mutability": "mutable",
												"name": "sqrtQX96",
												"nodeType": "VariableDeclaration",
												"scope": 3459,
												"src": "6465:16:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3428,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "6465:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6464:18:26"
									},
									"scope": 3662,
									"src": "6309:520:26",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3528,
										"nodeType": "Block",
										"src": "7549:519:26",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 3475,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3473,
														"name": "sqrtRatioAX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3462,
														"src": "7563:13:26",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 3474,
														"name": "sqrtRatioBX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3464,
														"src": "7579:13:26",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "7563:29:26",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3484,
												"nodeType": "IfStatement",
												"src": "7559:98:26",
												"trueBody": {
													"expression": {
														"id": 3482,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"components": [
																{
																	"id": 3476,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3462,
																	"src": "7595:13:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																{
																	"id": 3477,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3464,
																	"src": "7610:13:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"id": 3478,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "TupleExpression",
															"src": "7594:30:26",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint160_$_t_uint160_$",
																"typeString": "tuple(uint160,uint160)"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"components": [
																{
																	"id": 3479,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3464,
																	"src": "7628:13:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																{
																	"id": 3480,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3462,
																	"src": "7643:13:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"id": 3481,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "7627:30:26",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint160_$_t_uint160_$",
																"typeString": "tuple(uint160,uint160)"
															}
														},
														"src": "7594:63:26",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 3483,
													"nodeType": "ExpressionStatement",
													"src": "7594:63:26"
												}
											},
											{
												"assignments": [
													3486
												],
												"declarations": [
													{
														"constant": false,
														"id": 3486,
														"mutability": "mutable",
														"name": "numerator1",
														"nodeType": "VariableDeclaration",
														"scope": 3528,
														"src": "7668:18:26",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3485,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7668:7:26",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3494,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3493,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 3489,
																"name": "liquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3466,
																"src": "7697:9:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															],
															"id": 3488,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7689:7:26",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 3487,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "7689:7:26",
																"typeDescriptions": {}
															}
														},
														"id": 3490,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7689:18:26",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"expression": {
															"id": 3491,
															"name": "FixedPoint96",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2195,
															"src": "7711:12:26",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_FixedPoint96_$2195_$",
																"typeString": "type(library FixedPoint96)"
															}
														},
														"id": 3492,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "RESOLUTION",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2191,
														"src": "7711:23:26",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "7689:45:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7668:66:26"
											},
											{
												"assignments": [
													3496
												],
												"declarations": [
													{
														"constant": false,
														"id": 3496,
														"mutability": "mutable",
														"name": "numerator2",
														"nodeType": "VariableDeclaration",
														"scope": 3528,
														"src": "7744:18:26",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3495,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7744:7:26",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3500,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 3499,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3497,
														"name": "sqrtRatioBX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3464,
														"src": "7765:13:26",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 3498,
														"name": "sqrtRatioAX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3462,
														"src": "7781:13:26",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "7765:29:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7744:50:26"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															"id": 3504,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3502,
																"name": "sqrtRatioAX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3462,
																"src": "7813:13:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3503,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7829:1:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "7813:17:26",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 3501,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7805:7:26",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 3505,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7805:26:26",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3506,
												"nodeType": "ExpressionStatement",
												"src": "7805:26:26"
											},
											{
												"expression": {
													"condition": {
														"id": 3507,
														"name": "roundUp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3468,
														"src": "7849:7:26",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 3525,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 3520,
																	"name": "numerator1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3486,
																	"src": "8007:10:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 3521,
																	"name": "numerator2",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3496,
																	"src": "8019:10:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 3522,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3464,
																	"src": "8031:13:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																],
																"expression": {
																	"id": 3518,
																	"name": "FullMath",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2368,
																	"src": "7991:8:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_FullMath_$2368_$",
																		"typeString": "type(library FullMath)"
																	}
																},
																"id": 3519,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "mulDiv",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2324,
																"src": "7991:15:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 3523,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7991:54:26",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"id": 3524,
															"name": "sqrtRatioAX96",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3462,
															"src": "8048:13:26",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"src": "7991:70:26",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 3526,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "7849:212:26",
													"trueExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 3512,
																		"name": "numerator1",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3486,
																		"src": "7922:10:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 3513,
																		"name": "numerator2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3496,
																		"src": "7934:10:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 3514,
																		"name": "sqrtRatioBX96",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3464,
																		"src": "7946:13:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	],
																	"expression": {
																		"id": 3510,
																		"name": "FullMath",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2368,
																		"src": "7896:8:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_FullMath_$2368_$",
																			"typeString": "type(library FullMath)"
																		}
																	},
																	"id": 3511,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "mulDivRoundingUp",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2367,
																	"src": "7896:25:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																	}
																},
																"id": 3515,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7896:64:26",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 3516,
																"name": "sqrtRatioAX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3462,
																"src": "7962:13:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															],
															"expression": {
																"id": 3508,
																"name": "UnsafeMath",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 5139,
																"src": "7871:10:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_UnsafeMath_$5139_$",
																	"typeString": "type(library UnsafeMath)"
																}
															},
															"id": 3509,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "divRoundingUp",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 5138,
															"src": "7871:24:26",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 3517,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7871:105:26",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3472,
												"id": 3527,
												"nodeType": "Return",
												"src": "7842:219:26"
											}
										]
									},
									"documentation": {
										"id": 3460,
										"nodeType": "StructuredDocumentation",
										"src": "6835:537:26",
										"text": "@notice Gets the amount0 delta between two prices\n @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\n i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\n @param sqrtRatioAX96 A sqrt price\n @param sqrtRatioBX96 Another sqrt price\n @param liquidity The amount of usable liquidity\n @param roundUp Whether to round the amount up or down\n @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices"
									},
									"id": 3529,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAmount0Delta",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3469,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3462,
												"mutability": "mutable",
												"name": "sqrtRatioAX96",
												"nodeType": "VariableDeclaration",
												"scope": 3529,
												"src": "7402:21:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3461,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "7402:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3464,
												"mutability": "mutable",
												"name": "sqrtRatioBX96",
												"nodeType": "VariableDeclaration",
												"scope": 3529,
												"src": "7425:21:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3463,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "7425:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3466,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 3529,
												"src": "7448:17:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 3465,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "7448:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3468,
												"mutability": "mutable",
												"name": "roundUp",
												"nodeType": "VariableDeclaration",
												"scope": 3529,
												"src": "7467:12:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3467,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7467:4:26",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7401:79:26"
									},
									"returnParameters": {
										"id": 3472,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3471,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 3529,
												"src": "7528:15:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3470,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7528:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7527:17:26"
									},
									"scope": 3662,
									"src": "7377:691:26",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3576,
										"nodeType": "Block",
										"src": "8695:330:26",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 3545,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3543,
														"name": "sqrtRatioAX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3532,
														"src": "8709:13:26",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 3544,
														"name": "sqrtRatioBX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3534,
														"src": "8725:13:26",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "8709:29:26",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3554,
												"nodeType": "IfStatement",
												"src": "8705:98:26",
												"trueBody": {
													"expression": {
														"id": 3552,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"components": [
																{
																	"id": 3546,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3532,
																	"src": "8741:13:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																{
																	"id": 3547,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3534,
																	"src": "8756:13:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"id": 3548,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "TupleExpression",
															"src": "8740:30:26",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint160_$_t_uint160_$",
																"typeString": "tuple(uint160,uint160)"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"components": [
																{
																	"id": 3549,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3534,
																	"src": "8774:13:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																{
																	"id": 3550,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3532,
																	"src": "8789:13:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"id": 3551,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "8773:30:26",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint160_$_t_uint160_$",
																"typeString": "tuple(uint160,uint160)"
															}
														},
														"src": "8740:63:26",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 3553,
													"nodeType": "ExpressionStatement",
													"src": "8740:63:26"
												}
											},
											{
												"expression": {
													"condition": {
														"id": 3555,
														"name": "roundUp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3538,
														"src": "8821:7:26",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"arguments": [
															{
																"id": 3567,
																"name": "liquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3536,
																"src": "8959:9:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															{
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 3570,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3568,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3534,
																	"src": "8970:13:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 3569,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3532,
																	"src": "8986:13:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "8970:29:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															{
																"expression": {
																	"id": 3571,
																	"name": "FixedPoint96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2195,
																	"src": "9001:12:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_FixedPoint96_$2195_$",
																		"typeString": "type(library FixedPoint96)"
																	}
																},
																"id": 3572,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "Q96",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2194,
																"src": "9001:16:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																},
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 3565,
																"name": "FullMath",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2368,
																"src": "8943:8:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_FullMath_$2368_$",
																	"typeString": "type(library FullMath)"
																}
															},
															"id": 3566,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "mulDiv",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2324,
															"src": "8943:15:26",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 3573,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8943:75:26",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 3574,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "8821:197:26",
													"trueExpression": {
														"arguments": [
															{
																"id": 3558,
																"name": "liquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3536,
																"src": "8869:9:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															{
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 3561,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3559,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3534,
																	"src": "8880:13:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 3560,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3532,
																	"src": "8896:13:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "8880:29:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															{
																"expression": {
																	"id": 3562,
																	"name": "FixedPoint96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2195,
																	"src": "8911:12:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_FixedPoint96_$2195_$",
																		"typeString": "type(library FixedPoint96)"
																	}
																},
																"id": 3563,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "Q96",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2194,
																"src": "8911:16:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																},
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 3556,
																"name": "FullMath",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2368,
																"src": "8843:8:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_FullMath_$2368_$",
																	"typeString": "type(library FullMath)"
																}
															},
															"id": 3557,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "mulDivRoundingUp",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2367,
															"src": "8843:25:26",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 3564,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8843:85:26",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3542,
												"id": 3575,
												"nodeType": "Return",
												"src": "8814:204:26"
											}
										]
									},
									"documentation": {
										"id": 3530,
										"nodeType": "StructuredDocumentation",
										"src": "8074:444:26",
										"text": "@notice Gets the amount1 delta between two prices\n @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\n @param sqrtRatioAX96 A sqrt price\n @param sqrtRatioBX96 Another sqrt price\n @param liquidity The amount of usable liquidity\n @param roundUp Whether to round the amount up, or down\n @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices"
									},
									"id": 3577,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAmount1Delta",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3539,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3532,
												"mutability": "mutable",
												"name": "sqrtRatioAX96",
												"nodeType": "VariableDeclaration",
												"scope": 3577,
												"src": "8548:21:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3531,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "8548:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3534,
												"mutability": "mutable",
												"name": "sqrtRatioBX96",
												"nodeType": "VariableDeclaration",
												"scope": 3577,
												"src": "8571:21:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3533,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "8571:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3536,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 3577,
												"src": "8594:17:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 3535,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "8594:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3538,
												"mutability": "mutable",
												"name": "roundUp",
												"nodeType": "VariableDeclaration",
												"scope": 3577,
												"src": "8613:12:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3537,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8613:4:26",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8547:79:26"
									},
									"returnParameters": {
										"id": 3542,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3541,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 3577,
												"src": "8674:15:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3540,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8674:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8673:17:26"
									},
									"scope": 3662,
									"src": "8523:502:26",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3618,
										"nodeType": "Block",
										"src": "9525:234:26",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int128",
															"typeString": "int128"
														},
														"id": 3591,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3589,
															"name": "liquidity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3584,
															"src": "9542:9:26",
															"typeDescriptions": {
																"typeIdentifier": "t_int128",
																"typeString": "int128"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"hexValue": "30",
															"id": 3590,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9554:1:26",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "9542:13:26",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"arguments": [
																	{
																		"id": 3606,
																		"name": "sqrtRatioAX96",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3580,
																		"src": "9686:13:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	},
																	{
																		"id": 3607,
																		"name": "sqrtRatioBX96",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3582,
																		"src": "9701:13:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"id": 3610,
																				"name": "liquidity",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3584,
																				"src": "9724:9:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int128",
																					"typeString": "int128"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_int128",
																					"typeString": "int128"
																				}
																			],
																			"id": 3609,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "9716:7:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint128_$",
																				"typeString": "type(uint128)"
																			},
																			"typeName": {
																				"id": 3608,
																				"name": "uint128",
																				"nodeType": "ElementaryTypeName",
																				"src": "9716:7:26",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 3611,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9716:18:26",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		}
																	},
																	{
																		"hexValue": "74727565",
																		"id": 3612,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9736:4:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		},
																		{
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		},
																		{
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		},
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 3605,
																	"name": "getAmount0Delta",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		3529,
																		3619
																	],
																	"referencedDeclaration": 3529,
																	"src": "9670:15:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_bool_$returns$_t_uint256_$",
																		"typeString": "function (uint160,uint160,uint128,bool) pure returns (uint256)"
																	}
																},
																"id": 3613,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9670:71:26",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3614,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "toInt256",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3144,
															"src": "9670:80:26",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256) pure returns (int256)"
															}
														},
														"id": 3615,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9670:82:26",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 3616,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "9542:210:26",
													"trueExpression": {
														"id": 3604,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "-",
														"prefix": true,
														"src": "9570:85:26",
														"subExpression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"expression": {
																	"arguments": [
																		{
																			"id": 3593,
																			"name": "sqrtRatioAX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3580,
																			"src": "9587:13:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		{
																			"id": 3594,
																			"name": "sqrtRatioBX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3582,
																			"src": "9602:13:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		{
																			"arguments": [
																				{
																					"id": 3598,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "-",
																					"prefix": true,
																					"src": "9625:10:26",
																					"subExpression": {
																						"id": 3597,
																						"name": "liquidity",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3584,
																						"src": "9626:9:26",
																						"typeDescriptions": {
																							"typeIdentifier": "t_int128",
																							"typeString": "int128"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_int128",
																						"typeString": "int128"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_int128",
																						"typeString": "int128"
																					}
																				],
																				"id": 3596,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "9617:7:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint128_$",
																					"typeString": "type(uint128)"
																				},
																				"typeName": {
																					"id": 3595,
																					"name": "uint128",
																					"nodeType": "ElementaryTypeName",
																					"src": "9617:7:26",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 3599,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "9617:19:26",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		},
																		{
																			"hexValue": "66616c7365",
																			"id": 3600,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "bool",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9638:5:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"value": "false"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			{
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			},
																			{
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		],
																		"id": 3592,
																		"name": "getAmount0Delta",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			3529,
																			3619
																		],
																		"referencedDeclaration": 3529,
																		"src": "9571:15:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_bool_$returns$_t_uint256_$",
																			"typeString": "function (uint160,uint160,uint128,bool) pure returns (uint256)"
																		}
																	},
																	"id": 3601,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9571:73:26",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 3602,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "toInt256",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 3144,
																"src": "9571:82:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (int256)"
																}
															},
															"id": 3603,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9571:84:26",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3588,
												"id": 3617,
												"nodeType": "Return",
												"src": "9535:217:26"
											}
										]
									},
									"documentation": {
										"id": 3578,
										"nodeType": "StructuredDocumentation",
										"src": "9031:333:26",
										"text": "@notice Helper that gets signed token0 delta\n @param sqrtRatioAX96 A sqrt price\n @param sqrtRatioBX96 Another sqrt price\n @param liquidity The change in liquidity for which to compute the amount0 delta\n @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices"
									},
									"id": 3619,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAmount0Delta",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3585,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3580,
												"mutability": "mutable",
												"name": "sqrtRatioAX96",
												"nodeType": "VariableDeclaration",
												"scope": 3619,
												"src": "9394:21:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3579,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "9394:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3582,
												"mutability": "mutable",
												"name": "sqrtRatioBX96",
												"nodeType": "VariableDeclaration",
												"scope": 3619,
												"src": "9417:21:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3581,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "9417:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3584,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 3619,
												"src": "9440:16:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 3583,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "9440:6:26",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9393:64:26"
									},
									"returnParameters": {
										"id": 3588,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3587,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 3619,
												"src": "9505:14:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3586,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "9505:6:26",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9504:16:26"
									},
									"scope": 3662,
									"src": "9369:390:26",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3660,
										"nodeType": "Block",
										"src": "10259:234:26",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int128",
															"typeString": "int128"
														},
														"id": 3633,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3631,
															"name": "liquidity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3626,
															"src": "10276:9:26",
															"typeDescriptions": {
																"typeIdentifier": "t_int128",
																"typeString": "int128"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"hexValue": "30",
															"id": 3632,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10288:1:26",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "10276:13:26",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"arguments": [
																	{
																		"id": 3648,
																		"name": "sqrtRatioAX96",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3622,
																		"src": "10420:13:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	},
																	{
																		"id": 3649,
																		"name": "sqrtRatioBX96",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3624,
																		"src": "10435:13:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"id": 3652,
																				"name": "liquidity",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3626,
																				"src": "10458:9:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int128",
																					"typeString": "int128"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_int128",
																					"typeString": "int128"
																				}
																			],
																			"id": 3651,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10450:7:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint128_$",
																				"typeString": "type(uint128)"
																			},
																			"typeName": {
																				"id": 3650,
																				"name": "uint128",
																				"nodeType": "ElementaryTypeName",
																				"src": "10450:7:26",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 3653,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10450:18:26",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		}
																	},
																	{
																		"hexValue": "74727565",
																		"id": 3654,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10470:4:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		},
																		{
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		},
																		{
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		},
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 3647,
																	"name": "getAmount1Delta",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		3577,
																		3661
																	],
																	"referencedDeclaration": 3577,
																	"src": "10404:15:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_bool_$returns$_t_uint256_$",
																		"typeString": "function (uint160,uint160,uint128,bool) pure returns (uint256)"
																	}
																},
																"id": 3655,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10404:71:26",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3656,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "toInt256",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3144,
															"src": "10404:80:26",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256) pure returns (int256)"
															}
														},
														"id": 3657,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10404:82:26",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 3658,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "10276:210:26",
													"trueExpression": {
														"id": 3646,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "-",
														"prefix": true,
														"src": "10304:85:26",
														"subExpression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"expression": {
																	"arguments": [
																		{
																			"id": 3635,
																			"name": "sqrtRatioAX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3622,
																			"src": "10321:13:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		{
																			"id": 3636,
																			"name": "sqrtRatioBX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3624,
																			"src": "10336:13:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		{
																			"arguments": [
																				{
																					"id": 3640,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "-",
																					"prefix": true,
																					"src": "10359:10:26",
																					"subExpression": {
																						"id": 3639,
																						"name": "liquidity",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3626,
																						"src": "10360:9:26",
																						"typeDescriptions": {
																							"typeIdentifier": "t_int128",
																							"typeString": "int128"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_int128",
																						"typeString": "int128"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_int128",
																						"typeString": "int128"
																					}
																				],
																				"id": 3638,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "10351:7:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint128_$",
																					"typeString": "type(uint128)"
																				},
																				"typeName": {
																					"id": 3637,
																					"name": "uint128",
																					"nodeType": "ElementaryTypeName",
																					"src": "10351:7:26",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 3641,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10351:19:26",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		},
																		{
																			"hexValue": "66616c7365",
																			"id": 3642,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "bool",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10372:5:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"value": "false"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			{
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			},
																			{
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		],
																		"id": 3634,
																		"name": "getAmount1Delta",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			3577,
																			3661
																		],
																		"referencedDeclaration": 3577,
																		"src": "10305:15:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_bool_$returns$_t_uint256_$",
																			"typeString": "function (uint160,uint160,uint128,bool) pure returns (uint256)"
																		}
																	},
																	"id": 3643,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "10305:73:26",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 3644,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "toInt256",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 3144,
																"src": "10305:82:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (int256)"
																}
															},
															"id": 3645,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10305:84:26",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3630,
												"id": 3659,
												"nodeType": "Return",
												"src": "10269:217:26"
											}
										]
									},
									"documentation": {
										"id": 3620,
										"nodeType": "StructuredDocumentation",
										"src": "9765:333:26",
										"text": "@notice Helper that gets signed token1 delta\n @param sqrtRatioAX96 A sqrt price\n @param sqrtRatioBX96 Another sqrt price\n @param liquidity The change in liquidity for which to compute the amount1 delta\n @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices"
									},
									"id": 3661,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAmount1Delta",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3627,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3622,
												"mutability": "mutable",
												"name": "sqrtRatioAX96",
												"nodeType": "VariableDeclaration",
												"scope": 3661,
												"src": "10128:21:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3621,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "10128:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3624,
												"mutability": "mutable",
												"name": "sqrtRatioBX96",
												"nodeType": "VariableDeclaration",
												"scope": 3661,
												"src": "10151:21:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3623,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "10151:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3626,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 3661,
												"src": "10174:16:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 3625,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "10174:6:26",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10127:64:26"
									},
									"returnParameters": {
										"id": 3630,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3629,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 3661,
												"src": "10239:14:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3628,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "10239:6:26",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10238:16:26"
									},
									"scope": 3662,
									"src": "10103:390:26",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3663,
							"src": "377:10118:26"
						}
					],
					"src": "45:10451:26"
				},
				"id": 26
			},
			"contracts/core/libraries/Tick.sol": {
				"ast": {
					"absolutePath": "contracts/core/libraries/Tick.sol",
					"exportedSymbols": {
						"LiquidityMath": [
							2760
						],
						"LowGasSafeMath": [
							2890
						],
						"SafeCast": [
							3145
						],
						"Tick": [
							4281
						],
						"TickMath": [
							5072
						]
					},
					"id": 4282,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3664,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:31:27"
						},
						{
							"absolutePath": "contracts/core/libraries/LowGasSafeMath.sol",
							"file": "./LowGasSafeMath.sol",
							"id": 3665,
							"nodeType": "ImportDirective",
							"scope": 4282,
							"sourceUnit": 2891,
							"src": "78:30:27",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/SafeCast.sol",
							"file": "./SafeCast.sol",
							"id": 3666,
							"nodeType": "ImportDirective",
							"scope": 4282,
							"sourceUnit": 3146,
							"src": "109:24:27",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/TickMath.sol",
							"file": "./TickMath.sol",
							"id": 3667,
							"nodeType": "ImportDirective",
							"scope": 4282,
							"sourceUnit": 5073,
							"src": "135:24:27",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/LiquidityMath.sol",
							"file": "./LiquidityMath.sol",
							"id": 3668,
							"nodeType": "ImportDirective",
							"scope": 4282,
							"sourceUnit": 2761,
							"src": "160:29:27",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 3669,
								"nodeType": "StructuredDocumentation",
								"src": "191:101:27",
								"text": "@title Tick\n @notice Contains functions for managing tick processes and relevant calculations"
							},
							"fullyImplemented": true,
							"id": 4281,
							"linearizedBaseContracts": [
								4281
							],
							"name": "Tick",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 3672,
									"libraryName": {
										"id": 3670,
										"name": "LowGasSafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2890,
										"src": "317:14:27",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_LowGasSafeMath_$2890",
											"typeString": "library LowGasSafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "311:32:27",
									"typeName": {
										"id": 3671,
										"name": "int256",
										"nodeType": "ElementaryTypeName",
										"src": "336:6:27",
										"typeDescriptions": {
											"typeIdentifier": "t_int256",
											"typeString": "int256"
										}
									}
								},
								{
									"id": 3675,
									"libraryName": {
										"id": 3673,
										"name": "SafeCast",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 3145,
										"src": "354:8:27",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeCast_$3145",
											"typeString": "library SafeCast"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "348:26:27",
									"typeName": {
										"id": 3674,
										"name": "int256",
										"nodeType": "ElementaryTypeName",
										"src": "367:6:27",
										"typeDescriptions": {
											"typeIdentifier": "t_int256",
											"typeString": "int256"
										}
									}
								},
								{
									"canonicalName": "Tick.Info",
									"id": 3696,
									"members": [
										{
											"constant": false,
											"id": 3677,
											"mutability": "mutable",
											"name": "liquidityGross",
											"nodeType": "VariableDeclaration",
											"scope": 3696,
											"src": "579:22:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 3676,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "579:7:27",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3679,
											"mutability": "mutable",
											"name": "liquidityNet",
											"nodeType": "VariableDeclaration",
											"scope": 3696,
											"src": "776:19:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int128",
												"typeString": "int128"
											},
											"typeName": {
												"id": 3678,
												"name": "int128",
												"nodeType": "ElementaryTypeName",
												"src": "776:6:27",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3681,
											"mutability": "mutable",
											"name": "stakedLiquidityNet",
											"nodeType": "VariableDeclaration",
											"scope": 3696,
											"src": "922:25:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int128",
												"typeString": "int128"
											},
											"typeName": {
												"id": 3680,
												"name": "int128",
												"nodeType": "ElementaryTypeName",
												"src": "922:6:27",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3683,
											"mutability": "mutable",
											"name": "feeGrowthOutside0X128",
											"nodeType": "VariableDeclaration",
											"scope": 3696,
											"src": "1170:29:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3682,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1170:7:27",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3685,
											"mutability": "mutable",
											"name": "feeGrowthOutside1X128",
											"nodeType": "VariableDeclaration",
											"scope": 3696,
											"src": "1209:29:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3684,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1209:7:27",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3687,
											"mutability": "mutable",
											"name": "rewardGrowthOutsideX128",
											"nodeType": "VariableDeclaration",
											"scope": 3696,
											"src": "1464:31:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3686,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1464:7:27",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3689,
											"mutability": "mutable",
											"name": "tickCumulativeOutside",
											"nodeType": "VariableDeclaration",
											"scope": 3696,
											"src": "1572:27:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int56",
												"typeString": "int56"
											},
											"typeName": {
												"id": 3688,
												"name": "int56",
												"nodeType": "ElementaryTypeName",
												"src": "1572:5:27",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3691,
											"mutability": "mutable",
											"name": "secondsPerLiquidityOutsideX128",
											"nodeType": "VariableDeclaration",
											"scope": 3696,
											"src": "1823:38:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint160",
												"typeString": "uint160"
											},
											"typeName": {
												"id": 3690,
												"name": "uint160",
												"nodeType": "ElementaryTypeName",
												"src": "1823:7:27",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3693,
											"mutability": "mutable",
											"name": "secondsOutside",
											"nodeType": "VariableDeclaration",
											"scope": 3696,
											"src": "2066:21:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint32",
												"typeString": "uint32"
											},
											"typeName": {
												"id": 3692,
												"name": "uint32",
												"nodeType": "ElementaryTypeName",
												"src": "2066:6:27",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3695,
											"mutability": "mutable",
											"name": "initialized",
											"nodeType": "VariableDeclaration",
											"scope": 3696,
											"src": "2312:16:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 3694,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "2312:4:27",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Info",
									"nodeType": "StructDefinition",
									"scope": 4281,
									"src": "436:1899:27",
									"visibility": "public"
								},
								{
									"canonicalName": "Tick.LiquidityNets",
									"id": 3701,
									"members": [
										{
											"constant": false,
											"id": 3698,
											"mutability": "mutable",
											"name": "liquidityNet",
											"nodeType": "VariableDeclaration",
											"scope": 3701,
											"src": "2372:19:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int128",
												"typeString": "int128"
											},
											"typeName": {
												"id": 3697,
												"name": "int128",
												"nodeType": "ElementaryTypeName",
												"src": "2372:6:27",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3700,
											"mutability": "mutable",
											"name": "stakedLiquidityNet",
											"nodeType": "VariableDeclaration",
											"scope": 3701,
											"src": "2401:25:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int128",
												"typeString": "int128"
											},
											"typeName": {
												"id": 3699,
												"name": "int128",
												"nodeType": "ElementaryTypeName",
												"src": "2401:6:27",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "LiquidityNets",
									"nodeType": "StructDefinition",
									"scope": 4281,
									"src": "2341:92:27",
									"visibility": "public"
								},
								{
									"body": {
										"id": 3751,
										"nodeType": "Block",
										"src": "2919:271:27",
										"statements": [
											{
												"assignments": [
													3710
												],
												"declarations": [
													{
														"constant": false,
														"id": 3710,
														"mutability": "mutable",
														"name": "minTick",
														"nodeType": "VariableDeclaration",
														"scope": 3751,
														"src": "2929:13:27",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 3709,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "2929:5:27",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3718,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													},
													"id": 3717,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																},
																"id": 3714,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 3711,
																		"name": "TickMath",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 5072,
																		"src": "2946:8:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_TickMath_$5072_$",
																			"typeString": "type(library TickMath)"
																		}
																	},
																	"id": 3712,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "MIN_TICK",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 4545,
																	"src": "2946:17:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 3713,
																	"name": "tickSpacing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3704,
																	"src": "2966:11:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																"src": "2946:31:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															}
														],
														"id": 3715,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2945:33:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 3716,
														"name": "tickSpacing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3704,
														"src": "2981:11:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "2945:47:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2929:63:27"
											},
											{
												"assignments": [
													3720
												],
												"declarations": [
													{
														"constant": false,
														"id": 3720,
														"mutability": "mutable",
														"name": "maxTick",
														"nodeType": "VariableDeclaration",
														"scope": 3751,
														"src": "3002:13:27",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 3719,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "3002:5:27",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3728,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													},
													"id": 3727,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																},
																"id": 3724,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 3721,
																		"name": "TickMath",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 5072,
																		"src": "3019:8:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_TickMath_$5072_$",
																			"typeString": "type(library TickMath)"
																		}
																	},
																	"id": 3722,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "MAX_TICK",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 4550,
																	"src": "3019:17:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 3723,
																	"name": "tickSpacing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3704,
																	"src": "3039:11:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																"src": "3019:31:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															}
														],
														"id": 3725,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "3018:33:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 3726,
														"name": "tickSpacing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3704,
														"src": "3054:11:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "3018:47:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3002:63:27"
											},
											{
												"assignments": [
													3730
												],
												"declarations": [
													{
														"constant": false,
														"id": 3730,
														"mutability": "mutable",
														"name": "numTicks",
														"nodeType": "VariableDeclaration",
														"scope": 3751,
														"src": "3075:15:27",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint24",
															"typeString": "uint24"
														},
														"typeName": {
															"id": 3729,
															"name": "uint24",
															"nodeType": "ElementaryTypeName",
															"src": "3075:6:27",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3742,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													},
													"id": 3741,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																},
																"id": 3738,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			},
																			"id": 3735,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3733,
																				"name": "maxTick",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3720,
																				"src": "3101:7:27",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int24",
																					"typeString": "int24"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 3734,
																				"name": "minTick",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3710,
																				"src": "3111:7:27",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int24",
																					"typeString": "int24"
																				}
																			},
																			"src": "3101:17:27",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		}
																	],
																	"id": 3736,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3100:19:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 3737,
																	"name": "tickSpacing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3704,
																	"src": "3122:11:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																"src": "3100:33:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															],
															"id": 3732,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3093:6:27",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint24_$",
																"typeString": "type(uint24)"
															},
															"typeName": {
																"id": 3731,
																"name": "uint24",
																"nodeType": "ElementaryTypeName",
																"src": "3093:6:27",
																"typeDescriptions": {}
															}
														},
														"id": 3739,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3093:41:27",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint24",
															"typeString": "uint24"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"hexValue": "31",
														"id": 3740,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3137:1:27",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "3093:45:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3075:63:27"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													},
													"id": 3749,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 3745,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3160:7:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint128_$",
																		"typeString": "type(uint128)"
																	},
																	"typeName": {
																		"id": 3744,
																		"name": "uint128",
																		"nodeType": "ElementaryTypeName",
																		"src": "3160:7:27",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint128_$",
																		"typeString": "type(uint128)"
																	}
																],
																"id": 3743,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "3155:4:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 3746,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3155:13:27",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint128",
																"typeString": "type(uint128)"
															}
														},
														"id": 3747,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "3155:17:27",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 3748,
														"name": "numTicks",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3730,
														"src": "3175:8:27",
														"typeDescriptions": {
															"typeIdentifier": "t_uint24",
															"typeString": "uint24"
														}
													},
													"src": "3155:28:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"functionReturnParameters": 3708,
												"id": 3750,
												"nodeType": "Return",
												"src": "3148:35:27"
											}
										]
									},
									"documentation": {
										"id": 3702,
										"nodeType": "StructuredDocumentation",
										"src": "2439:382:27",
										"text": "@notice Derives max liquidity per tick from given tick spacing\n @dev Executed within the pool constructor\n @param tickSpacing The amount of required tick separation, realized in multiples of `tickSpacing`\n     e.g., a tickSpacing of 3 requires ticks to be initialized every 3rd tick i.e., ..., -6, -3, 0, 3, 6, ...\n @return The max liquidity per tick"
									},
									"id": 3752,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tickSpacingToMaxLiquidityPerTick",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3705,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3704,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 3752,
												"src": "2868:17:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 3703,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2868:5:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2867:19:27"
									},
									"returnParameters": {
										"id": 3708,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3707,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 3752,
												"src": "2910:7:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 3706,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2910:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2909:9:27"
									},
									"scope": 4281,
									"src": "2826:364:27",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3874,
										"nodeType": "Block",
										"src": "4286:1249:27",
										"statements": [
											{
												"assignments": [
													3775
												],
												"declarations": [
													{
														"constant": false,
														"id": 3775,
														"mutability": "mutable",
														"name": "lower",
														"nodeType": "VariableDeclaration",
														"scope": 3874,
														"src": "4296:18:27",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
															"typeString": "struct Tick.Info"
														},
														"typeName": {
															"id": 3774,
															"name": "Info",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 3696,
															"src": "4296:4:27",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																"typeString": "struct Tick.Info"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3779,
												"initialValue": {
													"baseExpression": {
														"id": 3776,
														"name": "self",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3757,
														"src": "4317:4:27",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3696_storage_$",
															"typeString": "mapping(int24 => struct Tick.Info storage ref)"
														}
													},
													"id": 3778,
													"indexExpression": {
														"id": 3777,
														"name": "tickLower",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3759,
														"src": "4322:9:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4317:15:27",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Info_$3696_storage",
														"typeString": "struct Tick.Info storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4296:36:27"
											},
											{
												"assignments": [
													3781
												],
												"declarations": [
													{
														"constant": false,
														"id": 3781,
														"mutability": "mutable",
														"name": "upper",
														"nodeType": "VariableDeclaration",
														"scope": 3874,
														"src": "4342:18:27",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
															"typeString": "struct Tick.Info"
														},
														"typeName": {
															"id": 3780,
															"name": "Info",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 3696,
															"src": "4342:4:27",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																"typeString": "struct Tick.Info"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3785,
												"initialValue": {
													"baseExpression": {
														"id": 3782,
														"name": "self",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3757,
														"src": "4363:4:27",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3696_storage_$",
															"typeString": "mapping(int24 => struct Tick.Info storage ref)"
														}
													},
													"id": 3784,
													"indexExpression": {
														"id": 3783,
														"name": "tickUpper",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3761,
														"src": "4368:9:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4363:15:27",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Info_$3696_storage",
														"typeString": "struct Tick.Info storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4342:36:27"
											},
											{
												"assignments": [
													3787
												],
												"declarations": [
													{
														"constant": false,
														"id": 3787,
														"mutability": "mutable",
														"name": "feeGrowthBelow0X128",
														"nodeType": "VariableDeclaration",
														"scope": 3874,
														"src": "4427:27:27",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3786,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4427:7:27",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3788,
												"nodeType": "VariableDeclarationStatement",
												"src": "4427:27:27"
											},
											{
												"assignments": [
													3790
												],
												"declarations": [
													{
														"constant": false,
														"id": 3790,
														"mutability": "mutable",
														"name": "feeGrowthBelow1X128",
														"nodeType": "VariableDeclaration",
														"scope": 3874,
														"src": "4464:27:27",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3789,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4464:7:27",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3791,
												"nodeType": "VariableDeclarationStatement",
												"src": "4464:27:27"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													},
													"id": 3794,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3792,
														"name": "tickCurrent",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3763,
														"src": "4505:11:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"id": 3793,
														"name": "tickLower",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3759,
														"src": "4520:9:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "4505:24:27",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 3820,
													"nodeType": "Block",
													"src": "4674:183:27",
													"statements": [
														{
															"expression": {
																"id": 3811,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3806,
																	"name": "feeGrowthBelow0X128",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3787,
																	"src": "4688:19:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3810,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3807,
																		"name": "feeGrowthGlobal0X128",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3765,
																		"src": "4710:20:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"expression": {
																			"id": 3808,
																			"name": "lower",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3775,
																			"src": "4733:5:27",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																				"typeString": "struct Tick.Info storage pointer"
																			}
																		},
																		"id": 3809,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "feeGrowthOutside0X128",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 3683,
																		"src": "4733:27:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4710:50:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4688:72:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3812,
															"nodeType": "ExpressionStatement",
															"src": "4688:72:27"
														},
														{
															"expression": {
																"id": 3818,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3813,
																	"name": "feeGrowthBelow1X128",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3790,
																	"src": "4774:19:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3817,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3814,
																		"name": "feeGrowthGlobal1X128",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3767,
																		"src": "4796:20:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"expression": {
																			"id": 3815,
																			"name": "lower",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3775,
																			"src": "4819:5:27",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																				"typeString": "struct Tick.Info storage pointer"
																			}
																		},
																		"id": 3816,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "feeGrowthOutside1X128",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 3685,
																		"src": "4819:27:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4796:50:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4774:72:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3819,
															"nodeType": "ExpressionStatement",
															"src": "4774:72:27"
														}
													]
												},
												"id": 3821,
												"nodeType": "IfStatement",
												"src": "4501:356:27",
												"trueBody": {
													"id": 3805,
													"nodeType": "Block",
													"src": "4531:137:27",
													"statements": [
														{
															"expression": {
																"id": 3798,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3795,
																	"name": "feeGrowthBelow0X128",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3787,
																	"src": "4545:19:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"id": 3796,
																		"name": "lower",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3775,
																		"src": "4567:5:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																			"typeString": "struct Tick.Info storage pointer"
																		}
																	},
																	"id": 3797,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "feeGrowthOutside0X128",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3683,
																	"src": "4567:27:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4545:49:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3799,
															"nodeType": "ExpressionStatement",
															"src": "4545:49:27"
														},
														{
															"expression": {
																"id": 3803,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3800,
																	"name": "feeGrowthBelow1X128",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3790,
																	"src": "4608:19:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"id": 3801,
																		"name": "lower",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3775,
																		"src": "4630:5:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																			"typeString": "struct Tick.Info storage pointer"
																		}
																	},
																	"id": 3802,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "feeGrowthOutside1X128",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3685,
																	"src": "4630:27:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4608:49:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3804,
															"nodeType": "ExpressionStatement",
															"src": "4608:49:27"
														}
													]
												}
											},
											{
												"assignments": [
													3823
												],
												"declarations": [
													{
														"constant": false,
														"id": 3823,
														"mutability": "mutable",
														"name": "feeGrowthAbove0X128",
														"nodeType": "VariableDeclaration",
														"scope": 3874,
														"src": "4905:27:27",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3822,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4905:7:27",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3824,
												"nodeType": "VariableDeclarationStatement",
												"src": "4905:27:27"
											},
											{
												"assignments": [
													3826
												],
												"declarations": [
													{
														"constant": false,
														"id": 3826,
														"mutability": "mutable",
														"name": "feeGrowthAbove1X128",
														"nodeType": "VariableDeclaration",
														"scope": 3874,
														"src": "4942:27:27",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3825,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4942:7:27",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3827,
												"nodeType": "VariableDeclarationStatement",
												"src": "4942:27:27"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													},
													"id": 3830,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3828,
														"name": "tickCurrent",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3763,
														"src": "4983:11:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 3829,
														"name": "tickUpper",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3761,
														"src": "4997:9:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "4983:23:27",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 3856,
													"nodeType": "Block",
													"src": "5151:183:27",
													"statements": [
														{
															"expression": {
																"id": 3847,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3842,
																	"name": "feeGrowthAbove0X128",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3823,
																	"src": "5165:19:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3846,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3843,
																		"name": "feeGrowthGlobal0X128",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3765,
																		"src": "5187:20:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"expression": {
																			"id": 3844,
																			"name": "upper",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3781,
																			"src": "5210:5:27",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																				"typeString": "struct Tick.Info storage pointer"
																			}
																		},
																		"id": 3845,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "feeGrowthOutside0X128",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 3683,
																		"src": "5210:27:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5187:50:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5165:72:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3848,
															"nodeType": "ExpressionStatement",
															"src": "5165:72:27"
														},
														{
															"expression": {
																"id": 3854,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3849,
																	"name": "feeGrowthAbove1X128",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3826,
																	"src": "5251:19:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3853,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3850,
																		"name": "feeGrowthGlobal1X128",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3767,
																		"src": "5273:20:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"expression": {
																			"id": 3851,
																			"name": "upper",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3781,
																			"src": "5296:5:27",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																				"typeString": "struct Tick.Info storage pointer"
																			}
																		},
																		"id": 3852,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "feeGrowthOutside1X128",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 3685,
																		"src": "5296:27:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5273:50:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5251:72:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3855,
															"nodeType": "ExpressionStatement",
															"src": "5251:72:27"
														}
													]
												},
												"id": 3857,
												"nodeType": "IfStatement",
												"src": "4979:355:27",
												"trueBody": {
													"id": 3841,
													"nodeType": "Block",
													"src": "5008:137:27",
													"statements": [
														{
															"expression": {
																"id": 3834,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3831,
																	"name": "feeGrowthAbove0X128",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3823,
																	"src": "5022:19:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"id": 3832,
																		"name": "upper",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3781,
																		"src": "5044:5:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																			"typeString": "struct Tick.Info storage pointer"
																		}
																	},
																	"id": 3833,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "feeGrowthOutside0X128",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3683,
																	"src": "5044:27:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5022:49:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3835,
															"nodeType": "ExpressionStatement",
															"src": "5022:49:27"
														},
														{
															"expression": {
																"id": 3839,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3836,
																	"name": "feeGrowthAbove1X128",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3826,
																	"src": "5085:19:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"id": 3837,
																		"name": "upper",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3781,
																		"src": "5107:5:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																			"typeString": "struct Tick.Info storage pointer"
																		}
																	},
																	"id": 3838,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "feeGrowthOutside1X128",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3685,
																	"src": "5107:27:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5085:49:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3840,
															"nodeType": "ExpressionStatement",
															"src": "5085:49:27"
														}
													]
												}
											},
											{
												"expression": {
													"id": 3864,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3858,
														"name": "feeGrowthInside0X128",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3770,
														"src": "5344:20:27",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 3863,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3861,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3859,
																"name": "feeGrowthGlobal0X128",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3765,
																"src": "5367:20:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 3860,
																"name": "feeGrowthBelow0X128",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3787,
																"src": "5390:19:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5367:42:27",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"id": 3862,
															"name": "feeGrowthAbove0X128",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3823,
															"src": "5412:19:27",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "5367:64:27",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5344:87:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 3865,
												"nodeType": "ExpressionStatement",
												"src": "5344:87:27"
											},
											{
												"expression": {
													"id": 3872,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3866,
														"name": "feeGrowthInside1X128",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3772,
														"src": "5441:20:27",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 3871,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3869,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3867,
																"name": "feeGrowthGlobal1X128",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3767,
																"src": "5464:20:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 3868,
																"name": "feeGrowthBelow1X128",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3790,
																"src": "5487:19:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5464:42:27",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"id": 3870,
															"name": "feeGrowthAbove1X128",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3826,
															"src": "5509:19:27",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "5464:64:27",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5441:87:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 3873,
												"nodeType": "ExpressionStatement",
												"src": "5441:87:27"
											}
										]
									},
									"documentation": {
										"id": 3753,
										"nodeType": "StructuredDocumentation",
										"src": "3196:765:27",
										"text": "@notice Retrieves fee growth data\n @param self The mapping containing all tick information for initialized ticks\n @param tickLower The lower tick boundary of the position\n @param tickUpper The upper tick boundary of the position\n @param tickCurrent The current tick\n @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\n @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\n @return feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries\n @return feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries"
									},
									"id": 3875,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getFeeGrowthInside",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3768,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3757,
												"mutability": "mutable",
												"name": "self",
												"nodeType": "VariableDeclaration",
												"scope": 3875,
												"src": "4003:40:27",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3696_storage_$",
													"typeString": "mapping(int24 => struct Tick.Info)"
												},
												"typeName": {
													"id": 3756,
													"keyType": {
														"id": 3754,
														"name": "int24",
														"nodeType": "ElementaryTypeName",
														"src": "4011:5:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Mapping",
													"src": "4003:27:27",
													"typeDescriptions": {
														"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3696_storage_$",
														"typeString": "mapping(int24 => struct Tick.Info)"
													},
													"valueType": {
														"id": 3755,
														"name": "Tick.Info",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 3696,
														"src": "4020:9:27",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
															"typeString": "struct Tick.Info"
														}
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3759,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 3875,
												"src": "4053:15:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 3758,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "4053:5:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3761,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 3875,
												"src": "4078:15:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 3760,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "4078:5:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3763,
												"mutability": "mutable",
												"name": "tickCurrent",
												"nodeType": "VariableDeclaration",
												"scope": 3875,
												"src": "4103:17:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 3762,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "4103:5:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3765,
												"mutability": "mutable",
												"name": "feeGrowthGlobal0X128",
												"nodeType": "VariableDeclaration",
												"scope": 3875,
												"src": "4130:28:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3764,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4130:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3767,
												"mutability": "mutable",
												"name": "feeGrowthGlobal1X128",
												"nodeType": "VariableDeclaration",
												"scope": 3875,
												"src": "4168:28:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3766,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4168:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3993:209:27"
									},
									"returnParameters": {
										"id": 3773,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3770,
												"mutability": "mutable",
												"name": "feeGrowthInside0X128",
												"nodeType": "VariableDeclaration",
												"scope": 3875,
												"src": "4226:28:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3769,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4226:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3772,
												"mutability": "mutable",
												"name": "feeGrowthInside1X128",
												"nodeType": "VariableDeclaration",
												"scope": 3875,
												"src": "4256:28:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3771,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4256:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4225:60:27"
									},
									"scope": 4281,
									"src": "3966:1569:27",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3954,
										"nodeType": "Block",
										"src": "5800:818:27",
										"statements": [
											{
												"assignments": [
													3893
												],
												"declarations": [
													{
														"constant": false,
														"id": 3893,
														"mutability": "mutable",
														"name": "lower",
														"nodeType": "VariableDeclaration",
														"scope": 3954,
														"src": "5810:18:27",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
															"typeString": "struct Tick.Info"
														},
														"typeName": {
															"id": 3892,
															"name": "Info",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 3696,
															"src": "5810:4:27",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																"typeString": "struct Tick.Info"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3897,
												"initialValue": {
													"baseExpression": {
														"id": 3894,
														"name": "self",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3879,
														"src": "5831:4:27",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3696_storage_$",
															"typeString": "mapping(int24 => struct Tick.Info storage ref)"
														}
													},
													"id": 3896,
													"indexExpression": {
														"id": 3895,
														"name": "tickLower",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3881,
														"src": "5836:9:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "5831:15:27",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Info_$3696_storage",
														"typeString": "struct Tick.Info storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5810:36:27"
											},
											{
												"assignments": [
													3899
												],
												"declarations": [
													{
														"constant": false,
														"id": 3899,
														"mutability": "mutable",
														"name": "upper",
														"nodeType": "VariableDeclaration",
														"scope": 3954,
														"src": "5856:18:27",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
															"typeString": "struct Tick.Info"
														},
														"typeName": {
															"id": 3898,
															"name": "Info",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 3696,
															"src": "5856:4:27",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																"typeString": "struct Tick.Info"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3903,
												"initialValue": {
													"baseExpression": {
														"id": 3900,
														"name": "self",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3879,
														"src": "5877:4:27",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3696_storage_$",
															"typeString": "mapping(int24 => struct Tick.Info storage ref)"
														}
													},
													"id": 3902,
													"indexExpression": {
														"id": 3901,
														"name": "tickUpper",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3883,
														"src": "5882:9:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "5877:15:27",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Info_$3696_storage",
														"typeString": "struct Tick.Info storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5856:36:27"
											},
											{
												"assignments": [
													3905
												],
												"declarations": [
													{
														"constant": false,
														"id": 3905,
														"mutability": "mutable",
														"name": "rewardGrowthBelowX128",
														"nodeType": "VariableDeclaration",
														"scope": 3954,
														"src": "5944:29:27",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3904,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5944:7:27",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3906,
												"nodeType": "VariableDeclarationStatement",
												"src": "5944:29:27"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													},
													"id": 3909,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3907,
														"name": "tickCurrent",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3885,
														"src": "5987:11:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"id": 3908,
														"name": "tickLower",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3881,
														"src": "6002:9:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "5987:24:27",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 3923,
													"nodeType": "Block",
													"src": "6097:103:27",
													"statements": [
														{
															"expression": {
																"id": 3921,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3916,
																	"name": "rewardGrowthBelowX128",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3905,
																	"src": "6111:21:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3920,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3917,
																		"name": "rewardGrowthGlobalX128",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3887,
																		"src": "6135:22:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"expression": {
																			"id": 3918,
																			"name": "lower",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3893,
																			"src": "6160:5:27",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																				"typeString": "struct Tick.Info storage pointer"
																			}
																		},
																		"id": 3919,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "rewardGrowthOutsideX128",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 3687,
																		"src": "6160:29:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6135:54:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6111:78:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3922,
															"nodeType": "ExpressionStatement",
															"src": "6111:78:27"
														}
													]
												},
												"id": 3924,
												"nodeType": "IfStatement",
												"src": "5983:217:27",
												"trueBody": {
													"id": 3915,
													"nodeType": "Block",
													"src": "6013:78:27",
													"statements": [
														{
															"expression": {
																"id": 3913,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3910,
																	"name": "rewardGrowthBelowX128",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3905,
																	"src": "6027:21:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"id": 3911,
																		"name": "lower",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3893,
																		"src": "6051:5:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																			"typeString": "struct Tick.Info storage pointer"
																		}
																	},
																	"id": 3912,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "rewardGrowthOutsideX128",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3687,
																	"src": "6051:29:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6027:53:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3914,
															"nodeType": "ExpressionStatement",
															"src": "6027:53:27"
														}
													]
												}
											},
											{
												"assignments": [
													3926
												],
												"declarations": [
													{
														"constant": false,
														"id": 3926,
														"mutability": "mutable",
														"name": "rewardGrowthAboveX128",
														"nodeType": "VariableDeclaration",
														"scope": 3954,
														"src": "6251:29:27",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3925,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6251:7:27",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3927,
												"nodeType": "VariableDeclarationStatement",
												"src": "6251:29:27"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													},
													"id": 3930,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3928,
														"name": "tickCurrent",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3885,
														"src": "6294:11:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 3929,
														"name": "tickUpper",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3883,
														"src": "6308:9:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "6294:23:27",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 3944,
													"nodeType": "Block",
													"src": "6403:103:27",
													"statements": [
														{
															"expression": {
																"id": 3942,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3937,
																	"name": "rewardGrowthAboveX128",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3926,
																	"src": "6417:21:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3941,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3938,
																		"name": "rewardGrowthGlobalX128",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3887,
																		"src": "6441:22:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"expression": {
																			"id": 3939,
																			"name": "upper",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3899,
																			"src": "6466:5:27",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																				"typeString": "struct Tick.Info storage pointer"
																			}
																		},
																		"id": 3940,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "rewardGrowthOutsideX128",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 3687,
																		"src": "6466:29:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6441:54:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6417:78:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3943,
															"nodeType": "ExpressionStatement",
															"src": "6417:78:27"
														}
													]
												},
												"id": 3945,
												"nodeType": "IfStatement",
												"src": "6290:216:27",
												"trueBody": {
													"id": 3936,
													"nodeType": "Block",
													"src": "6319:78:27",
													"statements": [
														{
															"expression": {
																"id": 3934,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3931,
																	"name": "rewardGrowthAboveX128",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3926,
																	"src": "6333:21:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"id": 3932,
																		"name": "upper",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3899,
																		"src": "6357:5:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																			"typeString": "struct Tick.Info storage pointer"
																		}
																	},
																	"id": 3933,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "rewardGrowthOutsideX128",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3687,
																	"src": "6357:29:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6333:53:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3935,
															"nodeType": "ExpressionStatement",
															"src": "6333:53:27"
														}
													]
												}
											},
											{
												"expression": {
													"id": 3952,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3946,
														"name": "rewardGrowthInsideX128",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3890,
														"src": "6516:22:27",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 3951,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3949,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3947,
																"name": "rewardGrowthGlobalX128",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3887,
																"src": "6541:22:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 3948,
																"name": "rewardGrowthBelowX128",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3905,
																"src": "6566:21:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6541:46:27",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"id": 3950,
															"name": "rewardGrowthAboveX128",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3926,
															"src": "6590:21:27",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "6541:70:27",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6516:95:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 3953,
												"nodeType": "ExpressionStatement",
												"src": "6516:95:27"
											}
										]
									},
									"id": 3955,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getRewardGrowthInside",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3888,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3879,
												"mutability": "mutable",
												"name": "self",
												"nodeType": "VariableDeclaration",
												"scope": 3955,
												"src": "5581:40:27",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3696_storage_$",
													"typeString": "mapping(int24 => struct Tick.Info)"
												},
												"typeName": {
													"id": 3878,
													"keyType": {
														"id": 3876,
														"name": "int24",
														"nodeType": "ElementaryTypeName",
														"src": "5589:5:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Mapping",
													"src": "5581:27:27",
													"typeDescriptions": {
														"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3696_storage_$",
														"typeString": "mapping(int24 => struct Tick.Info)"
													},
													"valueType": {
														"id": 3877,
														"name": "Tick.Info",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 3696,
														"src": "5598:9:27",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
															"typeString": "struct Tick.Info"
														}
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3881,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 3955,
												"src": "5631:15:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 3880,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "5631:5:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3883,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 3955,
												"src": "5656:15:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 3882,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "5656:5:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3885,
												"mutability": "mutable",
												"name": "tickCurrent",
												"nodeType": "VariableDeclaration",
												"scope": 3955,
												"src": "5681:17:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 3884,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "5681:5:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3887,
												"mutability": "mutable",
												"name": "rewardGrowthGlobalX128",
												"nodeType": "VariableDeclaration",
												"scope": 3955,
												"src": "5708:30:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3886,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5708:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5571:173:27"
									},
									"returnParameters": {
										"id": 3891,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3890,
												"mutability": "mutable",
												"name": "rewardGrowthInsideX128",
												"nodeType": "VariableDeclaration",
												"scope": 3955,
												"src": "5768:30:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3889,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5768:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5767:32:27"
									},
									"scope": 4281,
									"src": "5541:1077:27",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 4112,
										"nodeType": "Block",
										"src": "8360:1350:27",
										"statements": [
											{
												"assignments": [
													3990
												],
												"declarations": [
													{
														"constant": false,
														"id": 3990,
														"mutability": "mutable",
														"name": "info",
														"nodeType": "VariableDeclaration",
														"scope": 4112,
														"src": "8370:22:27",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
															"typeString": "struct Tick.Info"
														},
														"typeName": {
															"id": 3989,
															"name": "Tick.Info",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 3696,
															"src": "8370:9:27",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																"typeString": "struct Tick.Info"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3994,
												"initialValue": {
													"baseExpression": {
														"id": 3991,
														"name": "self",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3960,
														"src": "8395:4:27",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3696_storage_$",
															"typeString": "mapping(int24 => struct Tick.Info storage ref)"
														}
													},
													"id": 3993,
													"indexExpression": {
														"id": 3992,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3962,
														"src": "8400:4:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8395:10:27",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Info_$3696_storage",
														"typeString": "struct Tick.Info storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8370:35:27"
											},
											{
												"assignments": [
													3996
												],
												"declarations": [
													{
														"constant": false,
														"id": 3996,
														"mutability": "mutable",
														"name": "liquidityGrossBefore",
														"nodeType": "VariableDeclaration",
														"scope": 4112,
														"src": "8416:28:27",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														},
														"typeName": {
															"id": 3995,
															"name": "uint128",
															"nodeType": "ElementaryTypeName",
															"src": "8416:7:27",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3999,
												"initialValue": {
													"expression": {
														"id": 3997,
														"name": "info",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3990,
														"src": "8447:4:27",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
															"typeString": "struct Tick.Info storage pointer"
														}
													},
													"id": 3998,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "liquidityGross",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 3677,
													"src": "8447:19:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8416:50:27"
											},
											{
												"assignments": [
													4001
												],
												"declarations": [
													{
														"constant": false,
														"id": 4001,
														"mutability": "mutable",
														"name": "liquidityGrossAfter",
														"nodeType": "VariableDeclaration",
														"scope": 4112,
														"src": "8476:27:27",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														},
														"typeName": {
															"id": 4000,
															"name": "uint128",
															"nodeType": "ElementaryTypeName",
															"src": "8476:7:27",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4007,
												"initialValue": {
													"arguments": [
														{
															"id": 4004,
															"name": "liquidityGrossBefore",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3996,
															"src": "8529:20:27",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														{
															"id": 4005,
															"name": "liquidityDelta",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3966,
															"src": "8551:14:27",
															"typeDescriptions": {
																"typeIdentifier": "t_int128",
																"typeString": "int128"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															},
															{
																"typeIdentifier": "t_int128",
																"typeString": "int128"
															}
														],
														"expression": {
															"id": 4002,
															"name": "LiquidityMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2760,
															"src": "8506:13:27",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_LiquidityMath_$2760_$",
																"typeString": "type(library LiquidityMath)"
															}
														},
														"id": 4003,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "addDelta",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2759,
														"src": "8506:22:27",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint128_$_t_int128_$returns$_t_uint128_$",
															"typeString": "function (uint128,int128) pure returns (uint128)"
														}
													},
													"id": 4006,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8506:60:27",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8476:90:27"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															},
															"id": 4011,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 4009,
																"name": "liquidityGrossAfter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4001,
																"src": "8585:19:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 4010,
																"name": "maxLiquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3982,
																"src": "8608:12:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"src": "8585:35:27",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4c4f",
															"id": 4012,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8622:4:27",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_df0e8e403ea3fe54c7efb80492fa8f6599886b9c5435c1772b8d6400862c8c48",
																"typeString": "literal_string \"LO\""
															},
															"value": "LO"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_df0e8e403ea3fe54c7efb80492fa8f6599886b9c5435c1772b8d6400862c8c48",
																"typeString": "literal_string \"LO\""
															}
														],
														"id": 4008,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8577:7:27",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 4013,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8577:50:27",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4014,
												"nodeType": "ExpressionStatement",
												"src": "8577:50:27"
											},
											{
												"expression": {
													"id": 4025,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 4015,
														"name": "flipped",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3985,
														"src": "8638:7:27",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 4024,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	},
																	"id": 4018,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 4016,
																		"name": "liquidityGrossAfter",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4001,
																		"src": "8649:19:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 4017,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8672:1:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "8649:24:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																}
															],
															"id": 4019,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "8648:26:27",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	},
																	"id": 4022,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 4020,
																		"name": "liquidityGrossBefore",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3996,
																		"src": "8679:20:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 4021,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8703:1:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "8679:25:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																}
															],
															"id": 4023,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "8678:27:27",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "8648:57:27",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "8638:67:27",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4026,
												"nodeType": "ExpressionStatement",
												"src": "8638:67:27"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													},
													"id": 4029,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 4027,
														"name": "liquidityGrossBefore",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3996,
														"src": "8720:20:27",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 4028,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8744:1:27",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8720:25:27",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4078,
												"nodeType": "IfStatement",
												"src": "8716:643:27",
												"trueBody": {
													"id": 4077,
													"nodeType": "Block",
													"src": "8747:612:27",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																},
																"id": 4032,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 4030,
																	"name": "tick",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3962,
																	"src": "8877:4:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"id": 4031,
																	"name": "tickCurrent",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3964,
																	"src": "8885:11:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																"src": "8877:19:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 4070,
															"nodeType": "IfStatement",
															"src": "8873:439:27",
															"trueBody": {
																"id": 4069,
																"nodeType": "Block",
																"src": "8898:414:27",
																"statements": [
																	{
																		"expression": {
																			"id": 4037,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"expression": {
																					"id": 4033,
																					"name": "info",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3990,
																					"src": "8916:4:27",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																						"typeString": "struct Tick.Info storage pointer"
																					}
																				},
																				"id": 4035,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"memberName": "feeGrowthOutside0X128",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 3683,
																				"src": "8916:26:27",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 4036,
																				"name": "feeGrowthGlobal0X128",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3968,
																				"src": "8945:20:27",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "8916:49:27",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 4038,
																		"nodeType": "ExpressionStatement",
																		"src": "8916:49:27"
																	},
																	{
																		"expression": {
																			"id": 4043,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"expression": {
																					"id": 4039,
																					"name": "info",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3990,
																					"src": "8983:4:27",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																						"typeString": "struct Tick.Info storage pointer"
																					}
																				},
																				"id": 4041,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"memberName": "feeGrowthOutside1X128",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 3685,
																				"src": "8983:26:27",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 4042,
																				"name": "feeGrowthGlobal1X128",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3970,
																				"src": "9012:20:27",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "8983:49:27",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 4044,
																		"nodeType": "ExpressionStatement",
																		"src": "8983:49:27"
																	},
																	{
																		"expression": {
																			"id": 4049,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"expression": {
																					"id": 4045,
																					"name": "info",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3990,
																					"src": "9050:4:27",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																						"typeString": "struct Tick.Info storage pointer"
																					}
																				},
																				"id": 4047,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"memberName": "rewardGrowthOutsideX128",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 3687,
																				"src": "9050:28:27",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 4048,
																				"name": "rewardGrowthGlobalX128",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3972,
																				"src": "9081:22:27",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9050:53:27",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 4050,
																		"nodeType": "ExpressionStatement",
																		"src": "9050:53:27"
																	},
																	{
																		"expression": {
																			"id": 4055,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"expression": {
																					"id": 4051,
																					"name": "info",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3990,
																					"src": "9121:4:27",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																						"typeString": "struct Tick.Info storage pointer"
																					}
																				},
																				"id": 4053,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"memberName": "secondsPerLiquidityOutsideX128",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 3691,
																				"src": "9121:35:27",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 4054,
																				"name": "secondsPerLiquidityCumulativeX128",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3974,
																				"src": "9159:33:27",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"src": "9121:71:27",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"id": 4056,
																		"nodeType": "ExpressionStatement",
																		"src": "9121:71:27"
																	},
																	{
																		"expression": {
																			"id": 4061,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"expression": {
																					"id": 4057,
																					"name": "info",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3990,
																					"src": "9210:4:27",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																						"typeString": "struct Tick.Info storage pointer"
																					}
																				},
																				"id": 4059,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"memberName": "tickCumulativeOutside",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 3689,
																				"src": "9210:26:27",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int56",
																					"typeString": "int56"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 4060,
																				"name": "tickCumulative",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3976,
																				"src": "9239:14:27",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int56",
																					"typeString": "int56"
																				}
																			},
																			"src": "9210:43:27",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int56",
																				"typeString": "int56"
																			}
																		},
																		"id": 4062,
																		"nodeType": "ExpressionStatement",
																		"src": "9210:43:27"
																	},
																	{
																		"expression": {
																			"id": 4067,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"expression": {
																					"id": 4063,
																					"name": "info",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3990,
																					"src": "9271:4:27",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																						"typeString": "struct Tick.Info storage pointer"
																					}
																				},
																				"id": 4065,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"memberName": "secondsOutside",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 3693,
																				"src": "9271:19:27",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint32",
																					"typeString": "uint32"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 4066,
																				"name": "time",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3978,
																				"src": "9293:4:27",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint32",
																					"typeString": "uint32"
																				}
																			},
																			"src": "9271:26:27",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint32",
																				"typeString": "uint32"
																			}
																		},
																		"id": 4068,
																		"nodeType": "ExpressionStatement",
																		"src": "9271:26:27"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 4075,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 4071,
																		"name": "info",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3990,
																		"src": "9325:4:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																			"typeString": "struct Tick.Info storage pointer"
																		}
																	},
																	"id": 4073,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "initialized",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3695,
																	"src": "9325:16:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 4074,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9344:4:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "9325:23:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 4076,
															"nodeType": "ExpressionStatement",
															"src": "9325:23:27"
														}
													]
												}
											},
											{
												"expression": {
													"id": 4083,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 4079,
															"name": "info",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3990,
															"src": "9369:4:27",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																"typeString": "struct Tick.Info storage pointer"
															}
														},
														"id": 4081,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "liquidityGross",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3677,
														"src": "9369:19:27",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 4082,
														"name": "liquidityGrossAfter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4001,
														"src": "9391:19:27",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"src": "9369:41:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"id": 4084,
												"nodeType": "ExpressionStatement",
												"src": "9369:41:27"
											},
											{
												"expression": {
													"id": 4110,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 4085,
															"name": "info",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3990,
															"src": "9536:4:27",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																"typeString": "struct Tick.Info storage pointer"
															}
														},
														"id": 4087,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "liquidityNet",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3679,
														"src": "9536:17:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int128",
															"typeString": "int128"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"condition": {
															"id": 4088,
															"name": "upper",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3980,
															"src": "9556:5:27",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseExpression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"expression": {
																	"arguments": [
																		{
																			"id": 4105,
																			"name": "liquidityDelta",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3966,
																			"src": "9677:14:27",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int128",
																				"typeString": "int128"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int128",
																				"typeString": "int128"
																			}
																		],
																		"expression": {
																			"arguments": [
																				{
																					"expression": {
																						"id": 4101,
																						"name": "info",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3990,
																						"src": "9654:4:27",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																							"typeString": "struct Tick.Info storage pointer"
																						}
																					},
																					"id": 4102,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "liquidityNet",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 3679,
																					"src": "9654:17:27",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int128",
																						"typeString": "int128"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_int128",
																						"typeString": "int128"
																					}
																				],
																				"id": 4100,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "9647:6:27",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_int256_$",
																					"typeString": "type(int256)"
																				},
																				"typeName": {
																					"id": 4099,
																					"name": "int256",
																					"nodeType": "ElementaryTypeName",
																					"src": "9647:6:27",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 4103,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "9647:25:27",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"id": 4104,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "add",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2862,
																		"src": "9647:29:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$",
																			"typeString": "function (int256,int256) pure returns (int256)"
																		}
																	},
																	"id": 4106,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9647:45:27",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"id": 4107,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "toInt128",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 3120,
																"src": "9647:54:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_int128_$bound_to$_t_int256_$",
																	"typeString": "function (int256) pure returns (int128)"
																}
															},
															"id": 4108,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9647:56:27",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_int128",
																"typeString": "int128"
															}
														},
														"id": 4109,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "Conditional",
														"src": "9556:147:27",
														"trueExpression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"expression": {
																	"arguments": [
																		{
																			"id": 4095,
																			"name": "liquidityDelta",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3966,
																			"src": "9606:14:27",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int128",
																				"typeString": "int128"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int128",
																				"typeString": "int128"
																			}
																		],
																		"expression": {
																			"arguments": [
																				{
																					"expression": {
																						"id": 4091,
																						"name": "info",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3990,
																						"src": "9583:4:27",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																							"typeString": "struct Tick.Info storage pointer"
																						}
																					},
																					"id": 4092,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "liquidityNet",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 3679,
																					"src": "9583:17:27",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int128",
																						"typeString": "int128"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_int128",
																						"typeString": "int128"
																					}
																				],
																				"id": 4090,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "9576:6:27",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_int256_$",
																					"typeString": "type(int256)"
																				},
																				"typeName": {
																					"id": 4089,
																					"name": "int256",
																					"nodeType": "ElementaryTypeName",
																					"src": "9576:6:27",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 4093,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "9576:25:27",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"id": 4094,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sub",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2889,
																		"src": "9576:29:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$",
																			"typeString": "function (int256,int256) pure returns (int256)"
																		}
																	},
																	"id": 4096,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9576:45:27",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"id": 4097,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "toInt128",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 3120,
																"src": "9576:54:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_int128_$bound_to$_t_int256_$",
																	"typeString": "function (int256) pure returns (int128)"
																}
															},
															"id": 4098,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9576:56:27",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_int128",
																"typeString": "int128"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_int128",
															"typeString": "int128"
														}
													},
													"src": "9536:167:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"id": 4111,
												"nodeType": "ExpressionStatement",
												"src": "9536:167:27"
											}
										]
									},
									"documentation": {
										"id": 3956,
										"nodeType": "StructuredDocumentation",
										"src": "6624:1281:27",
										"text": "@notice Updates a tick and returns true if the tick was flipped from initialized to uninitialized, or vice versa\n @param self The mapping containing all tick information for initialized ticks\n @param tick The tick that will be updated\n @param tickCurrent The current tick\n @param liquidityDelta A new amount of liquidity to be added (subtracted) when tick is crossed from left to right (right to left)\n @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\n @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\n @param rewardGrowthGlobalX128 The all-time global reward growth, per unit of liquidity\n @param secondsPerLiquidityCumulativeX128 The all-time seconds per max(1, liquidity) of the pool\n @param tickCumulative The tick * time elapsed since the pool was first initialized\n @param time The current block timestamp cast to a uint32\n @param upper true for updating a position's upper tick, or false for updating a position's lower tick\n @param maxLiquidity The maximum liquidity allocation for a single tick\n @return flipped Whether the tick was flipped from initialized to uninitialized, or vice versa"
									},
									"id": 4113,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "update",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3983,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3960,
												"mutability": "mutable",
												"name": "self",
												"nodeType": "VariableDeclaration",
												"scope": 4113,
												"src": "7935:40:27",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3696_storage_$",
													"typeString": "mapping(int24 => struct Tick.Info)"
												},
												"typeName": {
													"id": 3959,
													"keyType": {
														"id": 3957,
														"name": "int24",
														"nodeType": "ElementaryTypeName",
														"src": "7943:5:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Mapping",
													"src": "7935:27:27",
													"typeDescriptions": {
														"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3696_storage_$",
														"typeString": "mapping(int24 => struct Tick.Info)"
													},
													"valueType": {
														"id": 3958,
														"name": "Tick.Info",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 3696,
														"src": "7952:9:27",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
															"typeString": "struct Tick.Info"
														}
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3962,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 4113,
												"src": "7985:10:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 3961,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "7985:5:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3964,
												"mutability": "mutable",
												"name": "tickCurrent",
												"nodeType": "VariableDeclaration",
												"scope": 4113,
												"src": "8005:17:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 3963,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "8005:5:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3966,
												"mutability": "mutable",
												"name": "liquidityDelta",
												"nodeType": "VariableDeclaration",
												"scope": 4113,
												"src": "8032:21:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 3965,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "8032:6:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3968,
												"mutability": "mutable",
												"name": "feeGrowthGlobal0X128",
												"nodeType": "VariableDeclaration",
												"scope": 4113,
												"src": "8063:28:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3967,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8063:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3970,
												"mutability": "mutable",
												"name": "feeGrowthGlobal1X128",
												"nodeType": "VariableDeclaration",
												"scope": 4113,
												"src": "8101:28:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3969,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8101:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3972,
												"mutability": "mutable",
												"name": "rewardGrowthGlobalX128",
												"nodeType": "VariableDeclaration",
												"scope": 4113,
												"src": "8139:30:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3971,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8139:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3974,
												"mutability": "mutable",
												"name": "secondsPerLiquidityCumulativeX128",
												"nodeType": "VariableDeclaration",
												"scope": 4113,
												"src": "8179:41:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3973,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "8179:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3976,
												"mutability": "mutable",
												"name": "tickCumulative",
												"nodeType": "VariableDeclaration",
												"scope": 4113,
												"src": "8230:20:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 3975,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "8230:5:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3978,
												"mutability": "mutable",
												"name": "time",
												"nodeType": "VariableDeclaration",
												"scope": 4113,
												"src": "8260:11:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 3977,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "8260:6:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3980,
												"mutability": "mutable",
												"name": "upper",
												"nodeType": "VariableDeclaration",
												"scope": 4113,
												"src": "8281:10:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3979,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8281:4:27",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3982,
												"mutability": "mutable",
												"name": "maxLiquidity",
												"nodeType": "VariableDeclaration",
												"scope": 4113,
												"src": "8301:20:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 3981,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "8301:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7925:402:27"
									},
									"returnParameters": {
										"id": 3986,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3985,
												"mutability": "mutable",
												"name": "flipped",
												"nodeType": "VariableDeclaration",
												"scope": 4113,
												"src": "8346:12:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3984,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8346:4:27",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8345:14:27"
									},
									"scope": 4281,
									"src": "7910:1800:27",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 4162,
										"nodeType": "Block",
										"src": "10468:381:27",
										"statements": [
											{
												"assignments": [
													4130
												],
												"declarations": [
													{
														"constant": false,
														"id": 4130,
														"mutability": "mutable",
														"name": "info",
														"nodeType": "VariableDeclaration",
														"scope": 4162,
														"src": "10478:22:27",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
															"typeString": "struct Tick.Info"
														},
														"typeName": {
															"id": 4129,
															"name": "Tick.Info",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 3696,
															"src": "10478:9:27",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																"typeString": "struct Tick.Info"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4134,
												"initialValue": {
													"baseExpression": {
														"id": 4131,
														"name": "self",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4118,
														"src": "10503:4:27",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3696_storage_$",
															"typeString": "mapping(int24 => struct Tick.Info storage ref)"
														}
													},
													"id": 4133,
													"indexExpression": {
														"id": 4132,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4120,
														"src": "10508:4:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "10503:10:27",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Info_$3696_storage",
														"typeString": "struct Tick.Info storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10478:35:27"
											},
											{
												"expression": {
													"id": 4160,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 4135,
															"name": "info",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4130,
															"src": "10645:4:27",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																"typeString": "struct Tick.Info storage pointer"
															}
														},
														"id": 4137,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "stakedLiquidityNet",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3681,
														"src": "10645:23:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int128",
															"typeString": "int128"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"condition": {
															"id": 4138,
															"name": "upper",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4124,
															"src": "10671:5:27",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseExpression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"expression": {
																	"arguments": [
																		{
																			"id": 4155,
																			"name": "stakedLiquidityDelta",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4122,
																			"src": "10810:20:27",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int128",
																				"typeString": "int128"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int128",
																				"typeString": "int128"
																			}
																		],
																		"expression": {
																			"arguments": [
																				{
																					"expression": {
																						"id": 4151,
																						"name": "info",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4130,
																						"src": "10781:4:27",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																							"typeString": "struct Tick.Info storage pointer"
																						}
																					},
																					"id": 4152,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "stakedLiquidityNet",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 3681,
																					"src": "10781:23:27",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int128",
																						"typeString": "int128"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_int128",
																						"typeString": "int128"
																					}
																				],
																				"id": 4150,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "10774:6:27",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_int256_$",
																					"typeString": "type(int256)"
																				},
																				"typeName": {
																					"id": 4149,
																					"name": "int256",
																					"nodeType": "ElementaryTypeName",
																					"src": "10774:6:27",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 4153,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10774:31:27",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"id": 4154,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "add",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2862,
																		"src": "10774:35:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$",
																			"typeString": "function (int256,int256) pure returns (int256)"
																		}
																	},
																	"id": 4156,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "10774:57:27",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"id": 4157,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "toInt128",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 3120,
																"src": "10774:66:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_int128_$bound_to$_t_int256_$",
																	"typeString": "function (int256) pure returns (int128)"
																}
															},
															"id": 4158,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10774:68:27",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_int128",
																"typeString": "int128"
															}
														},
														"id": 4159,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "Conditional",
														"src": "10671:171:27",
														"trueExpression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"expression": {
																	"arguments": [
																		{
																			"id": 4145,
																			"name": "stakedLiquidityDelta",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4122,
																			"src": "10727:20:27",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int128",
																				"typeString": "int128"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int128",
																				"typeString": "int128"
																			}
																		],
																		"expression": {
																			"arguments": [
																				{
																					"expression": {
																						"id": 4141,
																						"name": "info",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4130,
																						"src": "10698:4:27",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																							"typeString": "struct Tick.Info storage pointer"
																						}
																					},
																					"id": 4142,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "stakedLiquidityNet",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 3681,
																					"src": "10698:23:27",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int128",
																						"typeString": "int128"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_int128",
																						"typeString": "int128"
																					}
																				],
																				"id": 4140,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "10691:6:27",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_int256_$",
																					"typeString": "type(int256)"
																				},
																				"typeName": {
																					"id": 4139,
																					"name": "int256",
																					"nodeType": "ElementaryTypeName",
																					"src": "10691:6:27",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 4143,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10691:31:27",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"id": 4144,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sub",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2889,
																		"src": "10691:35:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$",
																			"typeString": "function (int256,int256) pure returns (int256)"
																		}
																	},
																	"id": 4146,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "10691:57:27",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"id": 4147,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "toInt128",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 3120,
																"src": "10691:66:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_int128_$bound_to$_t_int256_$",
																	"typeString": "function (int256) pure returns (int128)"
																}
															},
															"id": 4148,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10691:68:27",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_int128",
																"typeString": "int128"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_int128",
															"typeString": "int128"
														}
													},
													"src": "10645:197:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"id": 4161,
												"nodeType": "ExpressionStatement",
												"src": "10645:197:27"
											}
										]
									},
									"documentation": {
										"id": 4114,
										"nodeType": "StructuredDocumentation",
										"src": "9716:610:27",
										"text": "@notice Updates the staked liquidity component of a tick. Assumes tick is already initialized with an existing position.\n @notice We reuse existing liquidity for staking, so there is no change in liquidity\n @param self The mapping containing all tick information for initialized ticks\n @param tick The tick that will be updated\n @param stakedLiquidityDelta The amount of staked liquidity to be added (subtracted) when tick is crossed from left to right (right to left)\n @param upper true for updating a position's upper tick, or false for updating a position's lower tick"
									},
									"id": 4163,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "updateStake",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4118,
												"mutability": "mutable",
												"name": "self",
												"nodeType": "VariableDeclaration",
												"scope": 4163,
												"src": "10352:40:27",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3696_storage_$",
													"typeString": "mapping(int24 => struct Tick.Info)"
												},
												"typeName": {
													"id": 4117,
													"keyType": {
														"id": 4115,
														"name": "int24",
														"nodeType": "ElementaryTypeName",
														"src": "10360:5:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Mapping",
													"src": "10352:27:27",
													"typeDescriptions": {
														"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3696_storage_$",
														"typeString": "mapping(int24 => struct Tick.Info)"
													},
													"valueType": {
														"id": 4116,
														"name": "Tick.Info",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 3696,
														"src": "10369:9:27",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
															"typeString": "struct Tick.Info"
														}
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4120,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 4163,
												"src": "10394:10:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 4119,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "10394:5:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4122,
												"mutability": "mutable",
												"name": "stakedLiquidityDelta",
												"nodeType": "VariableDeclaration",
												"scope": 4163,
												"src": "10406:27:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 4121,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "10406:6:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4124,
												"mutability": "mutable",
												"name": "upper",
												"nodeType": "VariableDeclaration",
												"scope": 4163,
												"src": "10435:10:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 4123,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10435:4:27",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10351:95:27"
									},
									"returnParameters": {
										"id": 4126,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10468:0:27"
									},
									"scope": 4281,
									"src": "10331:518:27",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 4178,
										"nodeType": "Block",
										"src": "11114:34:27",
										"statements": [
											{
												"expression": {
													"id": 4176,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "11124:17:27",
													"subExpression": {
														"baseExpression": {
															"id": 4173,
															"name": "self",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4168,
															"src": "11131:4:27",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3696_storage_$",
																"typeString": "mapping(int24 => struct Tick.Info storage ref)"
															}
														},
														"id": 4175,
														"indexExpression": {
															"id": 4174,
															"name": "tick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4170,
															"src": "11136:4:27",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11131:10:27",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$3696_storage",
															"typeString": "struct Tick.Info storage ref"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4177,
												"nodeType": "ExpressionStatement",
												"src": "11124:17:27"
											}
										]
									},
									"documentation": {
										"id": 4164,
										"nodeType": "StructuredDocumentation",
										"src": "10855:176:27",
										"text": "@notice Clears tick data\n @param self The mapping containing all initialized tick information for initialized ticks\n @param tick The tick that will be cleared"
									},
									"id": 4179,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "clear",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4171,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4168,
												"mutability": "mutable",
												"name": "self",
												"nodeType": "VariableDeclaration",
												"scope": 4179,
												"src": "11051:40:27",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3696_storage_$",
													"typeString": "mapping(int24 => struct Tick.Info)"
												},
												"typeName": {
													"id": 4167,
													"keyType": {
														"id": 4165,
														"name": "int24",
														"nodeType": "ElementaryTypeName",
														"src": "11059:5:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Mapping",
													"src": "11051:27:27",
													"typeDescriptions": {
														"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3696_storage_$",
														"typeString": "mapping(int24 => struct Tick.Info)"
													},
													"valueType": {
														"id": 4166,
														"name": "Tick.Info",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 3696,
														"src": "11068:9:27",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
															"typeString": "struct Tick.Info"
														}
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4170,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 4179,
												"src": "11093:10:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 4169,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "11093:5:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11050:54:27"
									},
									"returnParameters": {
										"id": 4172,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11114:0:27"
									},
									"scope": 4281,
									"src": "11036:112:27",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 4279,
										"nodeType": "Block",
										"src": "12382:687:27",
										"statements": [
											{
												"assignments": [
													4206
												],
												"declarations": [
													{
														"constant": false,
														"id": 4206,
														"mutability": "mutable",
														"name": "info",
														"nodeType": "VariableDeclaration",
														"scope": 4279,
														"src": "12392:22:27",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
															"typeString": "struct Tick.Info"
														},
														"typeName": {
															"id": 4205,
															"name": "Tick.Info",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 3696,
															"src": "12392:9:27",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																"typeString": "struct Tick.Info"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4210,
												"initialValue": {
													"baseExpression": {
														"id": 4207,
														"name": "self",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4184,
														"src": "12417:4:27",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3696_storage_$",
															"typeString": "mapping(int24 => struct Tick.Info storage ref)"
														}
													},
													"id": 4209,
													"indexExpression": {
														"id": 4208,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4186,
														"src": "12422:4:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "12417:10:27",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Info_$3696_storage",
														"typeString": "struct Tick.Info storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12392:35:27"
											},
											{
												"expression": {
													"id": 4218,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 4211,
															"name": "info",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4206,
															"src": "12437:4:27",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																"typeString": "struct Tick.Info storage pointer"
															}
														},
														"id": 4213,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "feeGrowthOutside0X128",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3683,
														"src": "12437:26:27",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4217,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4214,
															"name": "feeGrowthGlobal0X128",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4188,
															"src": "12466:20:27",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"expression": {
																"id": 4215,
																"name": "info",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4206,
																"src": "12489:4:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																	"typeString": "struct Tick.Info storage pointer"
																}
															},
															"id": 4216,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "feeGrowthOutside0X128",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3683,
															"src": "12489:26:27",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "12466:49:27",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "12437:78:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 4219,
												"nodeType": "ExpressionStatement",
												"src": "12437:78:27"
											},
											{
												"expression": {
													"id": 4227,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 4220,
															"name": "info",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4206,
															"src": "12525:4:27",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																"typeString": "struct Tick.Info storage pointer"
															}
														},
														"id": 4222,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "feeGrowthOutside1X128",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3685,
														"src": "12525:26:27",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4226,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4223,
															"name": "feeGrowthGlobal1X128",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4190,
															"src": "12554:20:27",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"expression": {
																"id": 4224,
																"name": "info",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4206,
																"src": "12577:4:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																	"typeString": "struct Tick.Info storage pointer"
																}
															},
															"id": 4225,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "feeGrowthOutside1X128",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3685,
															"src": "12577:26:27",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "12554:49:27",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "12525:78:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 4228,
												"nodeType": "ExpressionStatement",
												"src": "12525:78:27"
											},
											{
												"expression": {
													"id": 4236,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 4229,
															"name": "info",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4206,
															"src": "12613:4:27",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																"typeString": "struct Tick.Info storage pointer"
															}
														},
														"id": 4231,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "rewardGrowthOutsideX128",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3687,
														"src": "12613:28:27",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4235,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4232,
															"name": "rewardGrowthGlobalX128",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4198,
															"src": "12644:22:27",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"expression": {
																"id": 4233,
																"name": "info",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4206,
																"src": "12669:4:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																	"typeString": "struct Tick.Info storage pointer"
																}
															},
															"id": 4234,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "rewardGrowthOutsideX128",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3687,
															"src": "12669:28:27",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "12644:53:27",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "12613:84:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 4237,
												"nodeType": "ExpressionStatement",
												"src": "12613:84:27"
											},
											{
												"expression": {
													"id": 4245,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 4238,
															"name": "info",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4206,
															"src": "12707:4:27",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																"typeString": "struct Tick.Info storage pointer"
															}
														},
														"id": 4240,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "secondsPerLiquidityOutsideX128",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3691,
														"src": "12707:35:27",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"id": 4244,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4241,
															"name": "secondsPerLiquidityCumulativeX128",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4192,
															"src": "12745:33:27",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"expression": {
																"id": 4242,
																"name": "info",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4206,
																"src": "12781:4:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																	"typeString": "struct Tick.Info storage pointer"
																}
															},
															"id": 4243,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "secondsPerLiquidityOutsideX128",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3691,
															"src": "12781:35:27",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"src": "12745:71:27",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "12707:109:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"id": 4246,
												"nodeType": "ExpressionStatement",
												"src": "12707:109:27"
											},
											{
												"expression": {
													"id": 4254,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 4247,
															"name": "info",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4206,
															"src": "12826:4:27",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																"typeString": "struct Tick.Info storage pointer"
															}
														},
														"id": 4249,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "tickCumulativeOutside",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3689,
														"src": "12826:26:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														},
														"id": 4253,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4250,
															"name": "tickCumulative",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4194,
															"src": "12855:14:27",
															"typeDescriptions": {
																"typeIdentifier": "t_int56",
																"typeString": "int56"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"expression": {
																"id": 4251,
																"name": "info",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4206,
																"src": "12872:4:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																	"typeString": "struct Tick.Info storage pointer"
																}
															},
															"id": 4252,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "tickCumulativeOutside",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3689,
															"src": "12872:26:27",
															"typeDescriptions": {
																"typeIdentifier": "t_int56",
																"typeString": "int56"
															}
														},
														"src": "12855:43:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														}
													},
													"src": "12826:72:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"id": 4255,
												"nodeType": "ExpressionStatement",
												"src": "12826:72:27"
											},
											{
												"expression": {
													"id": 4263,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 4256,
															"name": "info",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4206,
															"src": "12908:4:27",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																"typeString": "struct Tick.Info storage pointer"
															}
														},
														"id": 4258,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "secondsOutside",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3693,
														"src": "12908:19:27",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														},
														"id": 4262,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4259,
															"name": "time",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4196,
															"src": "12930:4:27",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"expression": {
																"id": 4260,
																"name": "info",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4206,
																"src": "12937:4:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																	"typeString": "struct Tick.Info storage pointer"
																}
															},
															"id": 4261,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "secondsOutside",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3693,
															"src": "12937:19:27",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														"src": "12930:26:27",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"src": "12908:48:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"id": 4264,
												"nodeType": "ExpressionStatement",
												"src": "12908:48:27"
											},
											{
												"expression": {
													"id": 4270,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 4265,
															"name": "nets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4201,
															"src": "12966:4:27",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_LiquidityNets_$3701_memory_ptr",
																"typeString": "struct Tick.LiquidityNets memory"
															}
														},
														"id": 4267,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "liquidityNet",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3698,
														"src": "12966:17:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int128",
															"typeString": "int128"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 4268,
															"name": "info",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4206,
															"src": "12986:4:27",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																"typeString": "struct Tick.Info storage pointer"
															}
														},
														"id": 4269,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "liquidityNet",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3679,
														"src": "12986:17:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int128",
															"typeString": "int128"
														}
													},
													"src": "12966:37:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"id": 4271,
												"nodeType": "ExpressionStatement",
												"src": "12966:37:27"
											},
											{
												"expression": {
													"id": 4277,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 4272,
															"name": "nets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4201,
															"src": "13013:4:27",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_LiquidityNets_$3701_memory_ptr",
																"typeString": "struct Tick.LiquidityNets memory"
															}
														},
														"id": 4274,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "stakedLiquidityNet",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3700,
														"src": "13013:23:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int128",
															"typeString": "int128"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 4275,
															"name": "info",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4206,
															"src": "13039:4:27",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
																"typeString": "struct Tick.Info storage pointer"
															}
														},
														"id": 4276,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "stakedLiquidityNet",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3681,
														"src": "13039:23:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int128",
															"typeString": "int128"
														}
													},
													"src": "13013:49:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"id": 4278,
												"nodeType": "ExpressionStatement",
												"src": "13013:49:27"
											}
										]
									},
									"documentation": {
										"id": 4180,
										"nodeType": "StructuredDocumentation",
										"src": "11154:869:27",
										"text": "@notice Transitions to next tick as needed by price movement\n @param self The mapping containing all tick information for initialized ticks\n @param tick The destination tick of the transition\n @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\n @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\n @param secondsPerLiquidityCumulativeX128 The current seconds per liquidity\n @param tickCumulative The tick * time elapsed since the pool was first initialized\n @param time The current block.timestamp\n @param rewardGrowthGlobalX128 The all-time global reward growth, per unit of liquidity\n @return nets The amount of liquidity and staked liquidity added (subtracted) when tick is crossed from left to right (right to left)"
									},
									"id": 4280,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "cross",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4184,
												"mutability": "mutable",
												"name": "self",
												"nodeType": "VariableDeclaration",
												"scope": 4280,
												"src": "12052:40:27",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3696_storage_$",
													"typeString": "mapping(int24 => struct Tick.Info)"
												},
												"typeName": {
													"id": 4183,
													"keyType": {
														"id": 4181,
														"name": "int24",
														"nodeType": "ElementaryTypeName",
														"src": "12060:5:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Mapping",
													"src": "12052:27:27",
													"typeDescriptions": {
														"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3696_storage_$",
														"typeString": "mapping(int24 => struct Tick.Info)"
													},
													"valueType": {
														"id": 4182,
														"name": "Tick.Info",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 3696,
														"src": "12069:9:27",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$3696_storage_ptr",
															"typeString": "struct Tick.Info"
														}
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4186,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 4280,
												"src": "12102:10:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 4185,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "12102:5:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4188,
												"mutability": "mutable",
												"name": "feeGrowthGlobal0X128",
												"nodeType": "VariableDeclaration",
												"scope": 4280,
												"src": "12122:28:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4187,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12122:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4190,
												"mutability": "mutable",
												"name": "feeGrowthGlobal1X128",
												"nodeType": "VariableDeclaration",
												"scope": 4280,
												"src": "12160:28:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4189,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12160:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4192,
												"mutability": "mutable",
												"name": "secondsPerLiquidityCumulativeX128",
												"nodeType": "VariableDeclaration",
												"scope": 4280,
												"src": "12198:41:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 4191,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "12198:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4194,
												"mutability": "mutable",
												"name": "tickCumulative",
												"nodeType": "VariableDeclaration",
												"scope": 4280,
												"src": "12249:20:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 4193,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "12249:5:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4196,
												"mutability": "mutable",
												"name": "time",
												"nodeType": "VariableDeclaration",
												"scope": 4280,
												"src": "12279:11:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 4195,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "12279:6:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4198,
												"mutability": "mutable",
												"name": "rewardGrowthGlobalX128",
												"nodeType": "VariableDeclaration",
												"scope": 4280,
												"src": "12300:30:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12300:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12042:294:27"
									},
									"returnParameters": {
										"id": 4202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4201,
												"mutability": "mutable",
												"name": "nets",
												"nodeType": "VariableDeclaration",
												"scope": 4280,
												"src": "12355:25:27",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_LiquidityNets_$3701_memory_ptr",
													"typeString": "struct Tick.LiquidityNets"
												},
												"typeName": {
													"id": 4200,
													"name": "LiquidityNets",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 3701,
													"src": "12355:13:27",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_LiquidityNets_$3701_storage_ptr",
														"typeString": "struct Tick.LiquidityNets"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12354:27:27"
									},
									"scope": 4281,
									"src": "12028:1041:27",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 4282,
							"src": "292:12779:27"
						}
					],
					"src": "45:13027:27"
				},
				"id": 27
			},
			"contracts/core/libraries/TickBitmap.sol": {
				"ast": {
					"absolutePath": "contracts/core/libraries/TickBitmap.sol",
					"exportedSymbols": {
						"BitMath": [
							2178
						],
						"TickBitmap": [
							4537
						]
					},
					"id": 4538,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 4283,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:28"
						},
						{
							"absolutePath": "contracts/core/libraries/BitMath.sol",
							"file": "./BitMath.sol",
							"id": 4284,
							"nodeType": "ImportDirective",
							"scope": 4538,
							"sourceUnit": 2179,
							"src": "71:23:28",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 4285,
								"nodeType": "StructuredDocumentation",
								"src": "96:243:28",
								"text": "@title Packed tick initialized state library\n @notice Stores a packed mapping of tick index to its initialized state\n @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word."
							},
							"fullyImplemented": true,
							"id": 4537,
							"linearizedBaseContracts": [
								4537
							],
							"name": "TickBitmap",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 4313,
										"nodeType": "Block",
										"src": "775:79:28",
										"statements": [
											{
												"expression": {
													"id": 4302,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 4295,
														"name": "wordPos",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4291,
														"src": "785:7:28",
														"typeDescriptions": {
															"typeIdentifier": "t_int16",
															"typeString": "int16"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																},
																"id": 4300,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 4298,
																	"name": "tick",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4288,
																	"src": "801:4:28",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 4299,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "809:1:28",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "801:9:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															],
															"id": 4297,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "795:5:28",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_int16_$",
																"typeString": "type(int16)"
															},
															"typeName": {
																"id": 4296,
																"name": "int16",
																"nodeType": "ElementaryTypeName",
																"src": "795:5:28",
																"typeDescriptions": {}
															}
														},
														"id": 4301,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "795:16:28",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int16",
															"typeString": "int16"
														}
													},
													"src": "785:26:28",
													"typeDescriptions": {
														"typeIdentifier": "t_int16",
														"typeString": "int16"
													}
												},
												"id": 4303,
												"nodeType": "ExpressionStatement",
												"src": "785:26:28"
											},
											{
												"expression": {
													"id": 4311,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 4304,
														"name": "bitPos",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4293,
														"src": "821:6:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																},
																"id": 4309,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 4307,
																	"name": "tick",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4288,
																	"src": "836:4:28",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "%",
																"rightExpression": {
																	"hexValue": "323536",
																	"id": 4308,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "843:3:28",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_256_by_1",
																		"typeString": "int_const 256"
																	},
																	"value": "256"
																},
																"src": "836:10:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															],
															"id": 4306,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "830:5:28",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint8_$",
																"typeString": "type(uint8)"
															},
															"typeName": {
																"id": 4305,
																"name": "uint8",
																"nodeType": "ElementaryTypeName",
																"src": "830:5:28",
																"typeDescriptions": {}
															}
														},
														"id": 4310,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "830:17:28",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "821:26:28",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 4312,
												"nodeType": "ExpressionStatement",
												"src": "821:26:28"
											}
										]
									},
									"documentation": {
										"id": 4286,
										"nodeType": "StructuredDocumentation",
										"src": "364:325:28",
										"text": "@notice Computes the position in the mapping where the initialized bit for a tick lives\n @param tick The tick for which to compute the position\n @return wordPos The key in the mapping containing the word in which the bit is stored\n @return bitPos The bit position in the word where the flag is stored"
									},
									"id": 4314,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "position",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4289,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4288,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 4314,
												"src": "712:10:28",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 4287,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "712:5:28",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "711:12:28"
									},
									"returnParameters": {
										"id": 4294,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4291,
												"mutability": "mutable",
												"name": "wordPos",
												"nodeType": "VariableDeclaration",
												"scope": 4314,
												"src": "746:13:28",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int16",
													"typeString": "int16"
												},
												"typeName": {
													"id": 4290,
													"name": "int16",
													"nodeType": "ElementaryTypeName",
													"src": "746:5:28",
													"typeDescriptions": {
														"typeIdentifier": "t_int16",
														"typeString": "int16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4293,
												"mutability": "mutable",
												"name": "bitPos",
												"nodeType": "VariableDeclaration",
												"scope": 4314,
												"src": "761:12:28",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 4292,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "761:5:28",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "745:29:28"
									},
									"scope": 4537,
									"src": "694:160:28",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 4356,
										"nodeType": "Block",
										"src": "1208:220:28",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															},
															"id": 4331,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																},
																"id": 4329,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 4327,
																	"name": "tick",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4321,
																	"src": "1226:4:28",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "%",
																"rightExpression": {
																	"id": 4328,
																	"name": "tickSpacing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4323,
																	"src": "1233:11:28",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																"src": "1226:18:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 4330,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1248:1:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1226:23:28",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 4326,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1218:7:28",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 4332,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1218:32:28",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4333,
												"nodeType": "ExpressionStatement",
												"src": "1218:32:28"
											},
											{
												"assignments": [
													4335,
													4337
												],
												"declarations": [
													{
														"constant": false,
														"id": 4335,
														"mutability": "mutable",
														"name": "wordPos",
														"nodeType": "VariableDeclaration",
														"scope": 4356,
														"src": "1295:13:28",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int16",
															"typeString": "int16"
														},
														"typeName": {
															"id": 4334,
															"name": "int16",
															"nodeType": "ElementaryTypeName",
															"src": "1295:5:28",
															"typeDescriptions": {
																"typeIdentifier": "t_int16",
																"typeString": "int16"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 4337,
														"mutability": "mutable",
														"name": "bitPos",
														"nodeType": "VariableDeclaration",
														"scope": 4356,
														"src": "1310:12:28",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"typeName": {
															"id": 4336,
															"name": "uint8",
															"nodeType": "ElementaryTypeName",
															"src": "1310:5:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4343,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															},
															"id": 4341,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 4339,
																"name": "tick",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4321,
																"src": "1335:4:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 4340,
																"name": "tickSpacing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4323,
																"src": "1342:11:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"src": "1335:18:28",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														],
														"id": 4338,
														"name": "position",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4314,
														"src": "1326:8:28",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_int24_$returns$_t_int16_$_t_uint8_$",
															"typeString": "function (int24) pure returns (int16,uint8)"
														}
													},
													"id": 4342,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1326:28:28",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_int16_$_t_uint8_$",
														"typeString": "tuple(int16,uint8)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1294:60:28"
											},
											{
												"assignments": [
													4345
												],
												"declarations": [
													{
														"constant": false,
														"id": 4345,
														"mutability": "mutable",
														"name": "mask",
														"nodeType": "VariableDeclaration",
														"scope": 4356,
														"src": "1364:12:28",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 4344,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1364:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4349,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4348,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 4346,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1379:1:28",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"id": 4347,
														"name": "bitPos",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4337,
														"src": "1384:6:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "1379:11:28",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1364:26:28"
											},
											{
												"expression": {
													"id": 4354,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 4350,
															"name": "self",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4319,
															"src": "1400:4:28",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_int16_$_t_uint256_$",
																"typeString": "mapping(int16 => uint256)"
															}
														},
														"id": 4352,
														"indexExpression": {
															"id": 4351,
															"name": "wordPos",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4335,
															"src": "1405:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_int16",
																"typeString": "int16"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1400:13:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "^=",
													"rightHandSide": {
														"id": 4353,
														"name": "mask",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4345,
														"src": "1417:4:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1400:21:28",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 4355,
												"nodeType": "ExpressionStatement",
												"src": "1400:21:28"
											}
										]
									},
									"documentation": {
										"id": 4315,
										"nodeType": "StructuredDocumentation",
										"src": "860:245:28",
										"text": "@notice Flips the initialized state for a given tick from false to true, or vice versa\n @param self The mapping in which to flip the tick\n @param tick The tick to flip\n @param tickSpacing The spacing between usable ticks"
									},
									"id": 4357,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "flipTick",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4324,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4319,
												"mutability": "mutable",
												"name": "self",
												"nodeType": "VariableDeclaration",
												"scope": 4357,
												"src": "1128:38:28",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_int16_$_t_uint256_$",
													"typeString": "mapping(int16 => uint256)"
												},
												"typeName": {
													"id": 4318,
													"keyType": {
														"id": 4316,
														"name": "int16",
														"nodeType": "ElementaryTypeName",
														"src": "1136:5:28",
														"typeDescriptions": {
															"typeIdentifier": "t_int16",
															"typeString": "int16"
														}
													},
													"nodeType": "Mapping",
													"src": "1128:25:28",
													"typeDescriptions": {
														"typeIdentifier": "t_mapping$_t_int16_$_t_uint256_$",
														"typeString": "mapping(int16 => uint256)"
													},
													"valueType": {
														"id": 4317,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "1145:7:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4321,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 4357,
												"src": "1168:10:28",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 4320,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1168:5:28",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4323,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 4357,
												"src": "1180:17:28",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 4322,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1180:5:28",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1127:71:28"
									},
									"returnParameters": {
										"id": 4325,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1208:0:28"
									},
									"scope": 4537,
									"src": "1110:318:28",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 4535,
										"nodeType": "Block",
										"src": "2380:1707:28",
										"statements": [
											{
												"assignments": [
													4376
												],
												"declarations": [
													{
														"constant": false,
														"id": 4376,
														"mutability": "mutable",
														"name": "compressed",
														"nodeType": "VariableDeclaration",
														"scope": 4535,
														"src": "2390:16:28",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 4375,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "2390:5:28",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4380,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													},
													"id": 4379,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 4377,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4364,
														"src": "2409:4:28",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 4378,
														"name": "tickSpacing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4366,
														"src": "2416:11:28",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "2409:18:28",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2390:37:28"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 4389,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"id": 4383,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4381,
															"name": "tick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4364,
															"src": "2441:4:28",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"hexValue": "30",
															"id": 4382,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2448:1:28",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "2441:8:28",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"id": 4388,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															},
															"id": 4386,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 4384,
																"name": "tick",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4364,
																"src": "2453:4:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"id": 4385,
																"name": "tickSpacing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4366,
																"src": "2460:11:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"src": "2453:18:28",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "30",
															"id": 4387,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2475:1:28",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "2453:23:28",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "2441:35:28",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4393,
												"nodeType": "IfStatement",
												"src": "2437:53:28",
												"trueBody": {
													"expression": {
														"id": 4391,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": false,
														"src": "2478:12:28",
														"subExpression": {
															"id": 4390,
															"name": "compressed",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4376,
															"src": "2478:10:28",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"id": 4392,
													"nodeType": "ExpressionStatement",
													"src": "2478:12:28"
												}
											},
											{
												"condition": {
													"id": 4394,
													"name": "lte",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 4368,
													"src": "2540:3:28",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 4533,
													"nodeType": "Block",
													"src": "3267:814:28",
													"statements": [
														{
															"assignments": [
																4461,
																4463
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 4461,
																	"mutability": "mutable",
																	"name": "wordPos",
																	"nodeType": "VariableDeclaration",
																	"scope": 4533,
																	"src": "3379:13:28",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int16",
																		"typeString": "int16"
																	},
																	"typeName": {
																		"id": 4460,
																		"name": "int16",
																		"nodeType": "ElementaryTypeName",
																		"src": "3379:5:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int16",
																			"typeString": "int16"
																		}
																	},
																	"visibility": "internal"
																},
																{
																	"constant": false,
																	"id": 4463,
																	"mutability": "mutable",
																	"name": "bitPos",
																	"nodeType": "VariableDeclaration",
																	"scope": 4533,
																	"src": "3394:12:28",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	"typeName": {
																		"id": 4462,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "3394:5:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 4469,
															"initialValue": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		},
																		"id": 4467,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4465,
																			"name": "compressed",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4376,
																			"src": "3419:10:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 4466,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3432:1:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "3419:14:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	],
																	"id": 4464,
																	"name": "position",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4314,
																	"src": "3410:8:28",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_int24_$returns$_t_int16_$_t_uint8_$",
																		"typeString": "function (int24) pure returns (int16,uint8)"
																	}
																},
																"id": 4468,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3410:24:28",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_int16_$_t_uint8_$",
																	"typeString": "tuple(int16,uint8)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3378:56:28"
														},
														{
															"assignments": [
																4471
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 4471,
																	"mutability": "mutable",
																	"name": "mask",
																	"nodeType": "VariableDeclaration",
																	"scope": 4533,
																	"src": "3506:12:28",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 4470,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "3506:7:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 4480,
															"initialValue": {
																"id": 4479,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "~",
																"prefix": true,
																"src": "3521:20:28",
																"subExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 4477,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 4474,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"hexValue": "31",
																							"id": 4472,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "3524:1:28",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_1_by_1",
																								"typeString": "int_const 1"
																							},
																							"value": "1"
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "<<",
																						"rightExpression": {
																							"id": 4473,
																							"name": "bitPos",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4463,
																							"src": "3529:6:28",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint8",
																								"typeString": "uint8"
																							}
																						},
																						"src": "3524:11:28",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 4475,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "3523:13:28",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 4476,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3539:1:28",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "3523:17:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 4478,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3522:19:28",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3506:35:28"
														},
														{
															"assignments": [
																4482
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 4482,
																	"mutability": "mutable",
																	"name": "masked",
																	"nodeType": "VariableDeclaration",
																	"scope": 4533,
																	"src": "3555:14:28",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 4481,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "3555:7:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 4488,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 4487,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"baseExpression": {
																		"id": 4483,
																		"name": "self",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4362,
																		"src": "3572:4:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_int16_$_t_uint256_$",
																			"typeString": "mapping(int16 => uint256)"
																		}
																	},
																	"id": 4485,
																	"indexExpression": {
																		"id": 4484,
																		"name": "wordPos",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4461,
																		"src": "3577:7:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int16",
																			"typeString": "int16"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "3572:13:28",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 4486,
																	"name": "mask",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4471,
																	"src": "3588:4:28",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3572:20:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3555:37:28"
														},
														{
															"expression": {
																"id": 4493,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 4489,
																	"name": "initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4373,
																	"src": "3717:11:28",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 4492,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 4490,
																		"name": "masked",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4482,
																		"src": "3731:6:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "!=",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 4491,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3741:1:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "3731:11:28",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "3717:25:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 4494,
															"nodeType": "ExpressionStatement",
															"src": "3717:25:28"
														},
														{
															"expression": {
																"id": 4531,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 4495,
																	"name": "next",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4371,
																	"src": "3866:4:28",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"condition": {
																		"id": 4496,
																		"name": "initialized",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4373,
																		"src": "3873:11:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"commonType": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		},
																		"id": 4529,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_int24",
																						"typeString": "int24"
																					},
																					"id": 4526,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"commonType": {
																							"typeIdentifier": "t_int24",
																							"typeString": "int24"
																						},
																						"id": 4515,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 4513,
																							"name": "compressed",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4376,
																							"src": "4007:10:28",
																							"typeDescriptions": {
																								"typeIdentifier": "t_int24",
																								"typeString": "int24"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "+",
																						"rightExpression": {
																							"hexValue": "31",
																							"id": 4514,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "4020:1:28",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_1_by_1",
																								"typeString": "int_const 1"
																							},
																							"value": "1"
																						},
																						"src": "4007:14:28",
																						"typeDescriptions": {
																							"typeIdentifier": "t_int24",
																							"typeString": "int24"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "+",
																					"rightExpression": {
																						"arguments": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint8",
																									"typeString": "uint8"
																								},
																								"id": 4524,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"expression": {
																										"arguments": [
																											{
																												"id": 4520,
																												"isConstant": false,
																												"isLValue": false,
																												"isPure": true,
																												"lValueRequested": false,
																												"nodeType": "ElementaryTypeNameExpression",
																												"src": "4035:5:28",
																												"typeDescriptions": {
																													"typeIdentifier": "t_type$_t_uint8_$",
																													"typeString": "type(uint8)"
																												},
																												"typeName": {
																													"id": 4519,
																													"name": "uint8",
																													"nodeType": "ElementaryTypeName",
																													"src": "4035:5:28",
																													"typeDescriptions": {}
																												}
																											}
																										],
																										"expression": {
																											"argumentTypes": [
																												{
																													"typeIdentifier": "t_type$_t_uint8_$",
																													"typeString": "type(uint8)"
																												}
																											],
																											"id": 4518,
																											"name": "type",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 4294967269,
																											"src": "4030:4:28",
																											"typeDescriptions": {
																												"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																												"typeString": "function () pure"
																											}
																										},
																										"id": 4521,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "functionCall",
																										"lValueRequested": false,
																										"names": [],
																										"nodeType": "FunctionCall",
																										"src": "4030:11:28",
																										"tryCall": false,
																										"typeDescriptions": {
																											"typeIdentifier": "t_magic_meta_type_t_uint8",
																											"typeString": "type(uint8)"
																										}
																									},
																									"id": 4522,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"lValueRequested": false,
																									"memberName": "max",
																									"nodeType": "MemberAccess",
																									"src": "4030:15:28",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint8",
																										"typeString": "uint8"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "-",
																								"rightExpression": {
																									"id": 4523,
																									"name": "bitPos",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 4463,
																									"src": "4048:6:28",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint8",
																										"typeString": "uint8"
																									}
																								},
																								"src": "4030:24:28",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint8",
																									"typeString": "uint8"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint8",
																									"typeString": "uint8"
																								}
																							],
																							"id": 4517,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "4024:5:28",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_int24_$",
																								"typeString": "type(int24)"
																							},
																							"typeName": {
																								"id": 4516,
																								"name": "int24",
																								"nodeType": "ElementaryTypeName",
																								"src": "4024:5:28",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 4525,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "4024:31:28",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_int24",
																							"typeString": "int24"
																						}
																					},
																					"src": "4007:48:28",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int24",
																						"typeString": "int24"
																					}
																				}
																			],
																			"id": 4527,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "4006:50:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 4528,
																			"name": "tickSpacing",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4366,
																			"src": "4059:11:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		},
																		"src": "4006:64:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	},
																	"id": 4530,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "3873:197:28",
																	"trueExpression": {
																		"commonType": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		},
																		"id": 4512,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_int24",
																						"typeString": "int24"
																					},
																					"id": 4509,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"commonType": {
																							"typeIdentifier": "t_int24",
																							"typeString": "int24"
																						},
																						"id": 4499,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 4497,
																							"name": "compressed",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4376,
																							"src": "3904:10:28",
																							"typeDescriptions": {
																								"typeIdentifier": "t_int24",
																								"typeString": "int24"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "+",
																						"rightExpression": {
																							"hexValue": "31",
																							"id": 4498,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "3917:1:28",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_1_by_1",
																								"typeString": "int_const 1"
																							},
																							"value": "1"
																						},
																						"src": "3904:14:28",
																						"typeDescriptions": {
																							"typeIdentifier": "t_int24",
																							"typeString": "int24"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "+",
																					"rightExpression": {
																						"arguments": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint8",
																									"typeString": "uint8"
																								},
																								"id": 4507,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"arguments": [
																										{
																											"id": 4504,
																											"name": "masked",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 4482,
																											"src": "3955:6:28",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										}
																									],
																									"expression": {
																										"argumentTypes": [
																											{
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										],
																										"expression": {
																											"id": 4502,
																											"name": "BitMath",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 2178,
																											"src": "3927:7:28",
																											"typeDescriptions": {
																												"typeIdentifier": "t_type$_t_contract$_BitMath_$2178_$",
																												"typeString": "type(library BitMath)"
																											}
																										},
																										"id": 4503,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "leastSignificantBit",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 2177,
																										"src": "3927:27:28",
																										"typeDescriptions": {
																											"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint8_$",
																											"typeString": "function (uint256) pure returns (uint8)"
																										}
																									},
																									"id": 4505,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"kind": "functionCall",
																									"lValueRequested": false,
																									"names": [],
																									"nodeType": "FunctionCall",
																									"src": "3927:35:28",
																									"tryCall": false,
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint8",
																										"typeString": "uint8"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "-",
																								"rightExpression": {
																									"id": 4506,
																									"name": "bitPos",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 4463,
																									"src": "3965:6:28",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint8",
																										"typeString": "uint8"
																									}
																								},
																								"src": "3927:44:28",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint8",
																									"typeString": "uint8"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint8",
																									"typeString": "uint8"
																								}
																							],
																							"id": 4501,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "3921:5:28",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_int24_$",
																								"typeString": "type(int24)"
																							},
																							"typeName": {
																								"id": 4500,
																								"name": "int24",
																								"nodeType": "ElementaryTypeName",
																								"src": "3921:5:28",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 4508,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "3921:51:28",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_int24",
																							"typeString": "int24"
																						}
																					},
																					"src": "3904:68:28",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int24",
																						"typeString": "int24"
																					}
																				}
																			],
																			"id": 4510,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "3903:70:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 4511,
																			"name": "tickSpacing",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4366,
																			"src": "3976:11:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		},
																		"src": "3903:84:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																"src": "3866:204:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"id": 4532,
															"nodeType": "ExpressionStatement",
															"src": "3866:204:28"
														}
													]
												},
												"id": 4534,
												"nodeType": "IfStatement",
												"src": "2536:1545:28",
												"trueBody": {
													"id": 4459,
													"nodeType": "Block",
													"src": "2545:716:28",
													"statements": [
														{
															"assignments": [
																4396,
																4398
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 4396,
																	"mutability": "mutable",
																	"name": "wordPos",
																	"nodeType": "VariableDeclaration",
																	"scope": 4459,
																	"src": "2560:13:28",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int16",
																		"typeString": "int16"
																	},
																	"typeName": {
																		"id": 4395,
																		"name": "int16",
																		"nodeType": "ElementaryTypeName",
																		"src": "2560:5:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int16",
																			"typeString": "int16"
																		}
																	},
																	"visibility": "internal"
																},
																{
																	"constant": false,
																	"id": 4398,
																	"mutability": "mutable",
																	"name": "bitPos",
																	"nodeType": "VariableDeclaration",
																	"scope": 4459,
																	"src": "2575:12:28",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	"typeName": {
																		"id": 4397,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "2575:5:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 4402,
															"initialValue": {
																"arguments": [
																	{
																		"id": 4400,
																		"name": "compressed",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4376,
																		"src": "2600:10:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	],
																	"id": 4399,
																	"name": "position",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4314,
																	"src": "2591:8:28",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_int24_$returns$_t_int16_$_t_uint8_$",
																		"typeString": "function (int24) pure returns (int16,uint8)"
																	}
																},
																"id": 4401,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2591:20:28",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_int16_$_t_uint8_$",
																	"typeString": "tuple(int16,uint8)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "2559:52:28"
														},
														{
															"assignments": [
																4404
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 4404,
																	"mutability": "mutable",
																	"name": "mask",
																	"nodeType": "VariableDeclaration",
																	"scope": 4459,
																	"src": "2692:12:28",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 4403,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2692:7:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 4416,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 4415,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 4410,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 4407,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"hexValue": "31",
																					"id": 4405,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "2708:1:28",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1_by_1",
																						"typeString": "int_const 1"
																					},
																					"value": "1"
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<<",
																				"rightExpression": {
																					"id": 4406,
																					"name": "bitPos",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4398,
																					"src": "2713:6:28",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint8",
																						"typeString": "uint8"
																					}
																				},
																				"src": "2708:11:28",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 4408,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "2707:13:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 4409,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2723:1:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "2707:17:28",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 4413,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "31",
																				"id": 4411,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2728:1:28",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<<",
																			"rightExpression": {
																				"id": 4412,
																				"name": "bitPos",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4398,
																				"src": "2733:6:28",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"src": "2728:11:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 4414,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "2727:13:28",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2707:33:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "2692:48:28"
														},
														{
															"assignments": [
																4418
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 4418,
																	"mutability": "mutable",
																	"name": "masked",
																	"nodeType": "VariableDeclaration",
																	"scope": 4459,
																	"src": "2754:14:28",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 4417,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2754:7:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 4424,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 4423,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"baseExpression": {
																		"id": 4419,
																		"name": "self",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4362,
																		"src": "2771:4:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_int16_$_t_uint256_$",
																			"typeString": "mapping(int16 => uint256)"
																		}
																	},
																	"id": 4421,
																	"indexExpression": {
																		"id": 4420,
																		"name": "wordPos",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4396,
																		"src": "2776:7:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int16",
																			"typeString": "int16"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2771:13:28",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 4422,
																	"name": "mask",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4404,
																	"src": "2787:4:28",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2771:20:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "2754:37:28"
														},
														{
															"expression": {
																"id": 4429,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 4425,
																	"name": "initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4373,
																	"src": "2924:11:28",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 4428,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 4426,
																		"name": "masked",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4418,
																		"src": "2938:6:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "!=",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 4427,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2948:1:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "2938:11:28",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "2924:25:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 4430,
															"nodeType": "ExpressionStatement",
															"src": "2924:25:28"
														},
														{
															"expression": {
																"id": 4457,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 4431,
																	"name": "next",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4371,
																	"src": "3073:4:28",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"condition": {
																		"id": 4432,
																		"name": "initialized",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4373,
																		"src": "3080:11:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"commonType": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		},
																		"id": 4455,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_int24",
																						"typeString": "int24"
																					},
																					"id": 4452,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 4447,
																						"name": "compressed",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4376,
																						"src": "3209:10:28",
																						"typeDescriptions": {
																							"typeIdentifier": "t_int24",
																							"typeString": "int24"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "-",
																					"rightExpression": {
																						"arguments": [
																							{
																								"id": 4450,
																								"name": "bitPos",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4398,
																								"src": "3228:6:28",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint8",
																									"typeString": "uint8"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint8",
																									"typeString": "uint8"
																								}
																							],
																							"id": 4449,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "3222:5:28",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_int24_$",
																								"typeString": "type(int24)"
																							},
																							"typeName": {
																								"id": 4448,
																								"name": "int24",
																								"nodeType": "ElementaryTypeName",
																								"src": "3222:5:28",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 4451,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "3222:13:28",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_int24",
																							"typeString": "int24"
																						}
																					},
																					"src": "3209:26:28",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int24",
																						"typeString": "int24"
																					}
																				}
																			],
																			"id": 4453,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "3208:28:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 4454,
																			"name": "tickSpacing",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4366,
																			"src": "3239:11:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		},
																		"src": "3208:42:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	},
																	"id": 4456,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "3080:170:28",
																	"trueExpression": {
																		"commonType": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		},
																		"id": 4446,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_int24",
																						"typeString": "int24"
																					},
																					"id": 4443,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 4433,
																						"name": "compressed",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4376,
																						"src": "3111:10:28",
																						"typeDescriptions": {
																							"typeIdentifier": "t_int24",
																							"typeString": "int24"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "-",
																					"rightExpression": {
																						"arguments": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint8",
																									"typeString": "uint8"
																								},
																								"id": 4441,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 4436,
																									"name": "bitPos",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 4398,
																									"src": "3130:6:28",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint8",
																										"typeString": "uint8"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "-",
																								"rightExpression": {
																									"arguments": [
																										{
																											"id": 4439,
																											"name": "masked",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 4418,
																											"src": "3166:6:28",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										}
																									],
																									"expression": {
																										"argumentTypes": [
																											{
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										],
																										"expression": {
																											"id": 4437,
																											"name": "BitMath",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 2178,
																											"src": "3139:7:28",
																											"typeDescriptions": {
																												"typeIdentifier": "t_type$_t_contract$_BitMath_$2178_$",
																												"typeString": "type(library BitMath)"
																											}
																										},
																										"id": 4438,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "mostSignificantBit",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 2016,
																										"src": "3139:26:28",
																										"typeDescriptions": {
																											"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint8_$",
																											"typeString": "function (uint256) pure returns (uint8)"
																										}
																									},
																									"id": 4440,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"kind": "functionCall",
																									"lValueRequested": false,
																									"names": [],
																									"nodeType": "FunctionCall",
																									"src": "3139:34:28",
																									"tryCall": false,
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint8",
																										"typeString": "uint8"
																									}
																								},
																								"src": "3130:43:28",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint8",
																									"typeString": "uint8"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint8",
																									"typeString": "uint8"
																								}
																							],
																							"id": 4435,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "3124:5:28",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_int24_$",
																								"typeString": "type(int24)"
																							},
																							"typeName": {
																								"id": 4434,
																								"name": "int24",
																								"nodeType": "ElementaryTypeName",
																								"src": "3124:5:28",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 4442,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "3124:50:28",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_int24",
																							"typeString": "int24"
																						}
																					},
																					"src": "3111:63:28",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int24",
																						"typeString": "int24"
																					}
																				}
																			],
																			"id": 4444,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "3110:65:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 4445,
																			"name": "tickSpacing",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4366,
																			"src": "3178:11:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		},
																		"src": "3110:79:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																"src": "3073:177:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"id": 4458,
															"nodeType": "ExpressionStatement",
															"src": "3073:177:28"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 4358,
										"nodeType": "StructuredDocumentation",
										"src": "1434:727:28",
										"text": "@notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\n to the left (less than or equal to) or right (greater than) of the given tick\n @param self The mapping in which to compute the next initialized tick\n @param tick The starting tick\n @param tickSpacing The spacing between usable ticks\n @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\n @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\n @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks"
									},
									"id": 4536,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "nextInitializedTickWithinOneWord",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4369,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4362,
												"mutability": "mutable",
												"name": "self",
												"nodeType": "VariableDeclaration",
												"scope": 4536,
												"src": "2217:38:28",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_int16_$_t_uint256_$",
													"typeString": "mapping(int16 => uint256)"
												},
												"typeName": {
													"id": 4361,
													"keyType": {
														"id": 4359,
														"name": "int16",
														"nodeType": "ElementaryTypeName",
														"src": "2225:5:28",
														"typeDescriptions": {
															"typeIdentifier": "t_int16",
															"typeString": "int16"
														}
													},
													"nodeType": "Mapping",
													"src": "2217:25:28",
													"typeDescriptions": {
														"typeIdentifier": "t_mapping$_t_int16_$_t_uint256_$",
														"typeString": "mapping(int16 => uint256)"
													},
													"valueType": {
														"id": 4360,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "2234:7:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4364,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 4536,
												"src": "2265:10:28",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 4363,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2265:5:28",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4366,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 4536,
												"src": "2285:17:28",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 4365,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2285:5:28",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4368,
												"mutability": "mutable",
												"name": "lte",
												"nodeType": "VariableDeclaration",
												"scope": 4536,
												"src": "2312:8:28",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 4367,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2312:4:28",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2207:119:28"
									},
									"returnParameters": {
										"id": 4374,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4371,
												"mutability": "mutable",
												"name": "next",
												"nodeType": "VariableDeclaration",
												"scope": 4536,
												"src": "2350:10:28",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 4370,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2350:5:28",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4373,
												"mutability": "mutable",
												"name": "initialized",
												"nodeType": "VariableDeclaration",
												"scope": 4536,
												"src": "2362:16:28",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 4372,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2362:4:28",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2349:30:28"
									},
									"scope": 4537,
									"src": "2166:1921:28",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 4538,
							"src": "339:3750:28"
						}
					],
					"src": "45:4045:28"
				},
				"id": 28
			},
			"contracts/core/libraries/TickMath.sol": {
				"ast": {
					"absolutePath": "contracts/core/libraries/TickMath.sol",
					"exportedSymbols": {
						"TickMath": [
							5072
						]
					},
					"id": 5073,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 4539,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:31:29"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 4540,
								"nodeType": "StructuredDocumentation",
								"src": "78:235:29",
								"text": "@title Math library for computing sqrt prices from ticks and vice versa\n @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n prices between 2**-128 and 2**128"
							},
							"fullyImplemented": true,
							"id": 5072,
							"linearizedBaseContracts": [
								5072
							],
							"name": "TickMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"documentation": {
										"id": 4541,
										"nodeType": "StructuredDocumentation",
										"src": "336:108:29",
										"text": "@dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"
									},
									"id": 4545,
									"mutability": "constant",
									"name": "MIN_TICK",
									"nodeType": "VariableDeclaration",
									"scope": 5072,
									"src": "449:42:29",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_int24",
										"typeString": "int24"
									},
									"typeName": {
										"id": 4542,
										"name": "int24",
										"nodeType": "ElementaryTypeName",
										"src": "449:5:29",
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"value": {
										"id": 4544,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "-",
										"prefix": true,
										"src": "484:7:29",
										"subExpression": {
											"hexValue": "383837323732",
											"id": 4543,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "485:6:29",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_887272_by_1",
												"typeString": "int_const 887272"
											},
											"value": "887272"
										},
										"typeDescriptions": {
											"typeIdentifier": "t_rational_minus_887272_by_1",
											"typeString": "int_const -887272"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 4546,
										"nodeType": "StructuredDocumentation",
										"src": "497:107:29",
										"text": "@dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"
									},
									"id": 4550,
									"mutability": "constant",
									"name": "MAX_TICK",
									"nodeType": "VariableDeclaration",
									"scope": 5072,
									"src": "609:44:29",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_int24",
										"typeString": "int24"
									},
									"typeName": {
										"id": 4547,
										"name": "int24",
										"nodeType": "ElementaryTypeName",
										"src": "609:5:29",
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"value": {
										"id": 4549,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "-",
										"prefix": true,
										"src": "644:9:29",
										"subExpression": {
											"id": 4548,
											"name": "MIN_TICK",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4545,
											"src": "645:8:29",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											}
										},
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 4551,
										"nodeType": "StructuredDocumentation",
										"src": "660:116:29",
										"text": "@dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"
									},
									"id": 4554,
									"mutability": "constant",
									"name": "MIN_SQRT_RATIO",
									"nodeType": "VariableDeclaration",
									"scope": 5072,
									"src": "781:53:29",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint160",
										"typeString": "uint160"
									},
									"typeName": {
										"id": 4552,
										"name": "uint160",
										"nodeType": "ElementaryTypeName",
										"src": "781:7:29",
										"typeDescriptions": {
											"typeIdentifier": "t_uint160",
											"typeString": "uint160"
										}
									},
									"value": {
										"hexValue": "34323935313238373339",
										"id": 4553,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "824:10:29",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_4295128739_by_1",
											"typeString": "int_const 4295128739"
										},
										"value": "4295128739"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 4555,
										"nodeType": "StructuredDocumentation",
										"src": "840:116:29",
										"text": "@dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"
									},
									"id": 4558,
									"mutability": "constant",
									"name": "MAX_SQRT_RATIO",
									"nodeType": "VariableDeclaration",
									"scope": 5072,
									"src": "961:92:29",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint160",
										"typeString": "uint160"
									},
									"typeName": {
										"id": 4556,
										"name": "uint160",
										"nodeType": "ElementaryTypeName",
										"src": "961:7:29",
										"typeDescriptions": {
											"typeIdentifier": "t_uint160",
											"typeString": "uint160"
										}
									},
									"value": {
										"hexValue": "31343631343436373033343835323130313033323837323733303532323033393838383232333738373233393730333432",
										"id": 4557,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1004:49:29",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1461446703485210103287273052203988822378723970342_by_1",
											"typeString": "int_const 1461...(41 digits omitted)...0342"
										},
										"value": "1461446703485210103287273052203988822378723970342"
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 4931,
										"nodeType": "Block",
										"src": "1447:2495:29",
										"statements": [
											{
												"assignments": [
													4567
												],
												"declarations": [
													{
														"constant": false,
														"id": 4567,
														"mutability": "mutable",
														"name": "absTick",
														"nodeType": "VariableDeclaration",
														"scope": 4931,
														"src": "1457:15:29",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 4566,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1457:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4587,
												"initialValue": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"id": 4570,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4568,
															"name": "tick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4561,
															"src": "1475:4:29",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"hexValue": "30",
															"id": 4569,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1482:1:29",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1475:8:29",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 4583,
																		"name": "tick",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4561,
																		"src": "1526:4:29",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	],
																	"id": 4582,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1519:6:29",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_int256_$",
																		"typeString": "type(int256)"
																	},
																	"typeName": {
																		"id": 4581,
																		"name": "int256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1519:6:29",
																		"typeDescriptions": {}
																	}
																},
																"id": 4584,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1519:12:29",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															],
															"id": 4580,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1511:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 4579,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1511:7:29",
																"typeDescriptions": {}
															}
														},
														"id": 4585,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1511:21:29",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4586,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1475:57:29",
													"trueExpression": {
														"arguments": [
															{
																"id": 4577,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "-",
																"prefix": true,
																"src": "1494:13:29",
																"subExpression": {
																	"arguments": [
																		{
																			"id": 4575,
																			"name": "tick",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4561,
																			"src": "1502:4:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		],
																		"id": 4574,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "1495:6:29",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 4573,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "1495:6:29",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 4576,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1495:12:29",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															],
															"id": 4572,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1486:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 4571,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1486:7:29",
																"typeDescriptions": {}
															}
														},
														"id": 4578,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1486:22:29",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1457:75:29"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4594,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 4589,
																"name": "absTick",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4567,
																"src": "1550:7:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 4592,
																		"name": "MAX_TICK",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4550,
																		"src": "1569:8:29",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	],
																	"id": 4591,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1561:7:29",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 4590,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1561:7:29",
																		"typeDescriptions": {}
																	}
																},
																"id": 4593,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1561:17:29",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1550:28:29",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54",
															"id": 4595,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1580:3:29",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_846b7b6deb1cfa110d0ea7ec6162a7123b761785528db70cceed5143183b11fc",
																"typeString": "literal_string \"T\""
															},
															"value": "T"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_846b7b6deb1cfa110d0ea7ec6162a7123b761785528db70cceed5143183b11fc",
																"typeString": "literal_string \"T\""
															}
														],
														"id": 4588,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1542:7:29",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 4596,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1542:42:29",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4597,
												"nodeType": "ExpressionStatement",
												"src": "1542:42:29"
											},
											{
												"assignments": [
													4599
												],
												"declarations": [
													{
														"constant": false,
														"id": 4599,
														"mutability": "mutable",
														"name": "ratio",
														"nodeType": "VariableDeclaration",
														"scope": 4931,
														"src": "1595:13:29",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 4598,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1595:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4608,
												"initialValue": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4604,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4602,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 4600,
																"name": "absTick",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4567,
																"src": "1611:7:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"hexValue": "307831",
																"id": 4601,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1621:3:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "0x1"
															},
															"src": "1611:13:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "30",
															"id": 4603,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1628:1:29",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1611:18:29",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"hexValue": "3078313030303030303030303030303030303030303030303030303030303030303030",
														"id": 4606,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1669:35:29",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
															"typeString": "int_const 3402...(31 digits omitted)...1456"
														},
														"value": "0x100000000000000000000000000000000"
													},
													"id": 4607,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1611:93:29",
													"trueExpression": {
														"hexValue": "30786666666362393333626436666164333761613264313632643161353934303031",
														"id": 4605,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1632:34:29",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_340265354078544963557816517032075149313_by_1",
															"typeString": "int_const 3402...(31 digits omitted)...9313"
														},
														"value": "0xfffcb933bd6fad37aa2d162d1a594001"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint136",
														"typeString": "uint136"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1595:109:29"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4613,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4611,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4609,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4567,
															"src": "1718:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307832",
															"id": 4610,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1728:3:29",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "0x2"
														},
														"src": "1718:13:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4612,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1735:1:29",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1718:18:29",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4623,
												"nodeType": "IfStatement",
												"src": "1714:83:29",
												"trueBody": {
													"expression": {
														"id": 4621,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4614,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4599,
															"src": "1738:5:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4620,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4617,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4615,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4599,
																			"src": "1747:5:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666663937323732333733643431333235396134363939303538306532313361",
																			"id": 4616,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1755:34:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340248342086729790484326174814286782778_by_1",
																				"typeString": "int_const 3402...(31 digits omitted)...2778"
																			},
																			"value": "0xfff97272373d413259a46990580e213a"
																		},
																		"src": "1747:42:29",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4618,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1746:44:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4619,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1794:3:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1746:51:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1738:59:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4622,
													"nodeType": "ExpressionStatement",
													"src": "1738:59:29"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4628,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4626,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4624,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4567,
															"src": "1811:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307834",
															"id": 4625,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1821:3:29",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_4_by_1",
																"typeString": "int_const 4"
															},
															"value": "0x4"
														},
														"src": "1811:13:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4627,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1828:1:29",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1811:18:29",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4638,
												"nodeType": "IfStatement",
												"src": "1807:83:29",
												"trueBody": {
													"expression": {
														"id": 4636,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4629,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4599,
															"src": "1831:5:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4635,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4632,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4630,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4599,
																			"src": "1840:5:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666663265353066356636353639333265663132333537636633633766646363",
																			"id": 4631,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1848:34:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340214320654664324051920982716015181260_by_1",
																				"typeString": "int_const 3402...(31 digits omitted)...1260"
																			},
																			"value": "0xfff2e50f5f656932ef12357cf3c7fdcc"
																		},
																		"src": "1840:42:29",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4633,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1839:44:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4634,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1887:3:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1839:51:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1831:59:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4637,
													"nodeType": "ExpressionStatement",
													"src": "1831:59:29"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4643,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4641,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4639,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4567,
															"src": "1904:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307838",
															"id": 4640,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1914:3:29",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_8_by_1",
																"typeString": "int_const 8"
															},
															"value": "0x8"
														},
														"src": "1904:13:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4642,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1921:1:29",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1904:18:29",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4653,
												"nodeType": "IfStatement",
												"src": "1900:83:29",
												"trueBody": {
													"expression": {
														"id": 4651,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4644,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4599,
															"src": "1924:5:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4650,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4647,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4645,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4599,
																			"src": "1933:5:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666653563616361376531306534653631633336323465616130393431636430",
																			"id": 4646,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1941:34:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340146287995602323631171512101879684304_by_1",
																				"typeString": "int_const 3401...(31 digits omitted)...4304"
																			},
																			"value": "0xffe5caca7e10e4e61c3624eaa0941cd0"
																		},
																		"src": "1933:42:29",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4648,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1932:44:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4649,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1980:3:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1932:51:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1924:59:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4652,
													"nodeType": "ExpressionStatement",
													"src": "1924:59:29"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4658,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4656,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4654,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4567,
															"src": "1997:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783130",
															"id": 4655,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2007:4:29",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_16_by_1",
																"typeString": "int_const 16"
															},
															"value": "0x10"
														},
														"src": "1997:14:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4657,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2015:1:29",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1997:19:29",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4668,
												"nodeType": "IfStatement",
												"src": "1993:84:29",
												"trueBody": {
													"expression": {
														"id": 4666,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4659,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4599,
															"src": "2018:5:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4665,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4662,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4660,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4599,
																			"src": "2027:5:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666636239383433643630663631353963396462353838333563393236363434",
																			"id": 4661,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2035:34:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340010263488231146823593991679159461444_by_1",
																				"typeString": "int_const 3400...(31 digits omitted)...1444"
																			},
																			"value": "0xffcb9843d60f6159c9db58835c926644"
																		},
																		"src": "2027:42:29",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4663,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2026:44:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4664,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2074:3:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2026:51:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2018:59:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4667,
													"nodeType": "ExpressionStatement",
													"src": "2018:59:29"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4673,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4671,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4669,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4567,
															"src": "2091:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783230",
															"id": 4670,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2101:4:29",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "0x20"
														},
														"src": "2091:14:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4672,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2109:1:29",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2091:19:29",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4683,
												"nodeType": "IfStatement",
												"src": "2087:84:29",
												"trueBody": {
													"expression": {
														"id": 4681,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4674,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4599,
															"src": "2112:5:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4680,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4677,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4675,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4599,
																			"src": "2121:5:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666393733623431666139386330383134373265363839366466623235346330",
																			"id": 4676,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2129:34:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_339738377640345403697157401104375502016_by_1",
																				"typeString": "int_const 3397...(31 digits omitted)...2016"
																			},
																			"value": "0xff973b41fa98c081472e6896dfb254c0"
																		},
																		"src": "2121:42:29",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4678,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2120:44:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4679,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2168:3:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2120:51:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2112:59:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4682,
													"nodeType": "ExpressionStatement",
													"src": "2112:59:29"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4688,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4686,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4684,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4567,
															"src": "2185:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783430",
															"id": 4685,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2195:4:29",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_64_by_1",
																"typeString": "int_const 64"
															},
															"value": "0x40"
														},
														"src": "2185:14:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4687,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2203:1:29",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2185:19:29",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4698,
												"nodeType": "IfStatement",
												"src": "2181:84:29",
												"trueBody": {
													"expression": {
														"id": 4696,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4689,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4599,
															"src": "2206:5:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4695,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4692,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4690,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4599,
																			"src": "2215:5:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666326561313634363663393661333834336563373862333236623532383631",
																			"id": 4691,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2223:34:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_339195258003219555707034227454543997025_by_1",
																				"typeString": "int_const 3391...(31 digits omitted)...7025"
																			},
																			"value": "0xff2ea16466c96a3843ec78b326b52861"
																		},
																		"src": "2215:42:29",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4693,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2214:44:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4694,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2262:3:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2214:51:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2206:59:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4697,
													"nodeType": "ExpressionStatement",
													"src": "2206:59:29"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4703,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4701,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4699,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4567,
															"src": "2279:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783830",
															"id": 4700,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2289:4:29",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_128_by_1",
																"typeString": "int_const 128"
															},
															"value": "0x80"
														},
														"src": "2279:14:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4702,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2297:1:29",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2279:19:29",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4713,
												"nodeType": "IfStatement",
												"src": "2275:84:29",
												"trueBody": {
													"expression": {
														"id": 4711,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4704,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4599,
															"src": "2300:5:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4710,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4707,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4705,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4599,
																			"src": "2309:5:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786665356465653034366139396132613831316334363166313936396333303533",
																			"id": 4706,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2317:34:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_338111622100601834656805679988414885971_by_1",
																				"typeString": "int_const 3381...(31 digits omitted)...5971"
																			},
																			"value": "0xfe5dee046a99a2a811c461f1969c3053"
																		},
																		"src": "2309:42:29",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4708,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2308:44:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4709,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2356:3:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2308:51:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2300:59:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4712,
													"nodeType": "ExpressionStatement",
													"src": "2300:59:29"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4718,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4716,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4714,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4567,
															"src": "2373:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078313030",
															"id": 4715,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2383:5:29",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_256_by_1",
																"typeString": "int_const 256"
															},
															"value": "0x100"
														},
														"src": "2373:15:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4717,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2392:1:29",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2373:20:29",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4728,
												"nodeType": "IfStatement",
												"src": "2369:85:29",
												"trueBody": {
													"expression": {
														"id": 4726,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4719,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4599,
															"src": "2395:5:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4725,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4722,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4720,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4599,
																			"src": "2404:5:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786663626538366337393030613838616564636666633833623437396161336134",
																			"id": 4721,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2412:34:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_335954724994790223023589805789778977700_by_1",
																				"typeString": "int_const 3359...(31 digits omitted)...7700"
																			},
																			"value": "0xfcbe86c7900a88aedcffc83b479aa3a4"
																		},
																		"src": "2404:42:29",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4723,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2403:44:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4724,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2451:3:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2403:51:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2395:59:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4727,
													"nodeType": "ExpressionStatement",
													"src": "2395:59:29"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4733,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4731,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4729,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4567,
															"src": "2468:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078323030",
															"id": 4730,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2478:5:29",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_512_by_1",
																"typeString": "int_const 512"
															},
															"value": "0x200"
														},
														"src": "2468:15:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4732,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2487:1:29",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2468:20:29",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4743,
												"nodeType": "IfStatement",
												"src": "2464:85:29",
												"trueBody": {
													"expression": {
														"id": 4741,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4734,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4599,
															"src": "2490:5:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4740,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4737,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4735,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4599,
																			"src": "2499:5:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786639383761373235336163343133313736663262303734636637383135653534",
																			"id": 4736,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2507:34:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_331682121138379247127172139078559817300_by_1",
																				"typeString": "int_const 3316...(31 digits omitted)...7300"
																			},
																			"value": "0xf987a7253ac413176f2b074cf7815e54"
																		},
																		"src": "2499:42:29",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4738,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2498:44:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4739,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2546:3:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2498:51:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2490:59:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4742,
													"nodeType": "ExpressionStatement",
													"src": "2490:59:29"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4748,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4746,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4744,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4567,
															"src": "2563:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078343030",
															"id": 4745,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2573:5:29",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1024_by_1",
																"typeString": "int_const 1024"
															},
															"value": "0x400"
														},
														"src": "2563:15:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4747,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2582:1:29",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2563:20:29",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4758,
												"nodeType": "IfStatement",
												"src": "2559:85:29",
												"trueBody": {
													"expression": {
														"id": 4756,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4749,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4599,
															"src": "2585:5:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4755,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4752,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4750,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4599,
																			"src": "2594:5:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786633333932623038323262373030303539343063376133393865346237306633",
																			"id": 4751,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2602:34:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_323299236684853023288211250268160618739_by_1",
																				"typeString": "int_const 3232...(31 digits omitted)...8739"
																			},
																			"value": "0xf3392b0822b70005940c7a398e4b70f3"
																		},
																		"src": "2594:42:29",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4753,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2593:44:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4754,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2641:3:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2593:51:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2585:59:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4757,
													"nodeType": "ExpressionStatement",
													"src": "2585:59:29"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4763,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4761,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4759,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4567,
															"src": "2658:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078383030",
															"id": 4760,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2668:5:29",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2048_by_1",
																"typeString": "int_const 2048"
															},
															"value": "0x800"
														},
														"src": "2658:15:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4762,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2677:1:29",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2658:20:29",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4773,
												"nodeType": "IfStatement",
												"src": "2654:85:29",
												"trueBody": {
													"expression": {
														"id": 4771,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4764,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4599,
															"src": "2680:5:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4770,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4767,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4765,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4599,
																			"src": "2689:5:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786537313539343735613263323962373434336232396337666136653838396439",
																			"id": 4766,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2697:34:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_307163716377032989948697243942600083929_by_1",
																				"typeString": "int_const 3071...(31 digits omitted)...3929"
																			},
																			"value": "0xe7159475a2c29b7443b29c7fa6e889d9"
																		},
																		"src": "2689:42:29",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4768,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2688:44:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4769,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2736:3:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2688:51:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2680:59:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4772,
													"nodeType": "ExpressionStatement",
													"src": "2680:59:29"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4778,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4776,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4774,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4567,
															"src": "2753:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307831303030",
															"id": 4775,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2763:6:29",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_4096_by_1",
																"typeString": "int_const 4096"
															},
															"value": "0x1000"
														},
														"src": "2753:16:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4777,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2773:1:29",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2753:21:29",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4788,
												"nodeType": "IfStatement",
												"src": "2749:86:29",
												"trueBody": {
													"expression": {
														"id": 4786,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4779,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4599,
															"src": "2776:5:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4785,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4782,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4780,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4599,
																			"src": "2785:5:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786430393766336264666432303232623838343561643866373932616135383235",
																			"id": 4781,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2793:34:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_277268403626896220162999269216087595045_by_1",
																				"typeString": "int_const 2772...(31 digits omitted)...5045"
																			},
																			"value": "0xd097f3bdfd2022b8845ad8f792aa5825"
																		},
																		"src": "2785:42:29",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4783,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2784:44:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4784,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2832:3:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2784:51:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2776:59:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4787,
													"nodeType": "ExpressionStatement",
													"src": "2776:59:29"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4793,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4791,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4789,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4567,
															"src": "2849:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307832303030",
															"id": 4790,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2859:6:29",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_8192_by_1",
																"typeString": "int_const 8192"
															},
															"value": "0x2000"
														},
														"src": "2849:16:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4792,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2869:1:29",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2849:21:29",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4803,
												"nodeType": "IfStatement",
												"src": "2845:86:29",
												"trueBody": {
													"expression": {
														"id": 4801,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4794,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4599,
															"src": "2872:5:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4800,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4797,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4795,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4599,
																			"src": "2881:5:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786139663734363436326438373066646638613635646331663930653036316535",
																			"id": 4796,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2889:34:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_225923453940442621947126027127485391333_by_1",
																				"typeString": "int_const 2259...(31 digits omitted)...1333"
																			},
																			"value": "0xa9f746462d870fdf8a65dc1f90e061e5"
																		},
																		"src": "2881:42:29",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4798,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2880:44:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4799,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2928:3:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2880:51:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2872:59:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4802,
													"nodeType": "ExpressionStatement",
													"src": "2872:59:29"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4808,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4806,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4804,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4567,
															"src": "2945:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307834303030",
															"id": 4805,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2955:6:29",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_16384_by_1",
																"typeString": "int_const 16384"
															},
															"value": "0x4000"
														},
														"src": "2945:16:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4807,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2965:1:29",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2945:21:29",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4818,
												"nodeType": "IfStatement",
												"src": "2941:86:29",
												"trueBody": {
													"expression": {
														"id": 4816,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4809,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4599,
															"src": "2968:5:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4815,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4812,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4810,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4599,
																			"src": "2977:5:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783730643836396131353664326131623839306262336466363262616633326637",
																			"id": 4811,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2985:34:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_149997214084966997727330242082538205943_by_1",
																				"typeString": "int_const 1499...(31 digits omitted)...5943"
																			},
																			"value": "0x70d869a156d2a1b890bb3df62baf32f7"
																		},
																		"src": "2977:42:29",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4813,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2976:44:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4814,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3024:3:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2976:51:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2968:59:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4817,
													"nodeType": "ExpressionStatement",
													"src": "2968:59:29"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4823,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4821,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4819,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4567,
															"src": "3041:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307838303030",
															"id": 4820,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3051:6:29",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32768_by_1",
																"typeString": "int_const 32768"
															},
															"value": "0x8000"
														},
														"src": "3041:16:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4822,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3061:1:29",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3041:21:29",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4833,
												"nodeType": "IfStatement",
												"src": "3037:86:29",
												"trueBody": {
													"expression": {
														"id": 4831,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4824,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4599,
															"src": "3064:5:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4830,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4827,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4825,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4599,
																			"src": "3073:5:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783331626531333566393764303866643938313233313530353534326663666136",
																			"id": 4826,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3081:34:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_66119101136024775622716233608466517926_by_1",
																				"typeString": "int_const 6611...(30 digits omitted)...7926"
																			},
																			"value": "0x31be135f97d08fd981231505542fcfa6"
																		},
																		"src": "3073:42:29",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4828,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3072:44:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4829,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3120:3:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3072:51:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3064:59:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4832,
													"nodeType": "ExpressionStatement",
													"src": "3064:59:29"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4838,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4836,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4834,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4567,
															"src": "3137:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783130303030",
															"id": 4835,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3147:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_65536_by_1",
																"typeString": "int_const 65536"
															},
															"value": "0x10000"
														},
														"src": "3137:17:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4837,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3158:1:29",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3137:22:29",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4848,
												"nodeType": "IfStatement",
												"src": "3133:86:29",
												"trueBody": {
													"expression": {
														"id": 4846,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4839,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4599,
															"src": "3161:5:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4845,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4842,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4840,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4599,
																			"src": "3170:5:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "307839616135303862356237613834653163363737646535346633653939626339",
																			"id": 4841,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3178:33:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_12847376061809297530290974190478138313_by_1",
																				"typeString": "int_const 1284...(30 digits omitted)...8313"
																			},
																			"value": "0x9aa508b5b7a84e1c677de54f3e99bc9"
																		},
																		"src": "3170:41:29",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4843,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3169:43:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4844,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3216:3:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3169:50:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3161:58:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4847,
													"nodeType": "ExpressionStatement",
													"src": "3161:58:29"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4853,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4851,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4849,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4567,
															"src": "3233:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783230303030",
															"id": 4850,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3243:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_131072_by_1",
																"typeString": "int_const 131072"
															},
															"value": "0x20000"
														},
														"src": "3233:17:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4852,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3254:1:29",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3233:22:29",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4863,
												"nodeType": "IfStatement",
												"src": "3229:85:29",
												"trueBody": {
													"expression": {
														"id": 4861,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4854,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4599,
															"src": "3257:5:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4860,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4857,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4855,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4599,
																			"src": "3266:5:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "3078356436616638646564623831313936363939633332393232356565363034",
																			"id": 4856,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3274:32:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_485053260817066172746253684029974020_by_1",
																				"typeString": "int_const 4850...(28 digits omitted)...4020"
																			},
																			"value": "0x5d6af8dedb81196699c329225ee604"
																		},
																		"src": "3266:40:29",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4858,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3265:42:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4859,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3311:3:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3265:49:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3257:57:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4862,
													"nodeType": "ExpressionStatement",
													"src": "3257:57:29"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4868,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4866,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4864,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4567,
															"src": "3328:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783430303030",
															"id": 4865,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3338:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_262144_by_1",
																"typeString": "int_const 262144"
															},
															"value": "0x40000"
														},
														"src": "3328:17:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4867,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3349:1:29",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3328:22:29",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4878,
												"nodeType": "IfStatement",
												"src": "3324:83:29",
												"trueBody": {
													"expression": {
														"id": 4876,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4869,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4599,
															"src": "3352:5:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4875,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4872,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4870,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4599,
																			"src": "3361:5:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "307832323136653538346635666131656139323630343162656466653938",
																			"id": 4871,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3369:30:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_691415978906521570653435304214168_by_1",
																				"typeString": "int_const 6914...(25 digits omitted)...4168"
																			},
																			"value": "0x2216e584f5fa1ea926041bedfe98"
																		},
																		"src": "3361:38:29",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4873,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3360:40:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4874,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3404:3:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3360:47:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3352:55:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4877,
													"nodeType": "ExpressionStatement",
													"src": "3352:55:29"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4883,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4881,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4879,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4567,
															"src": "3421:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783830303030",
															"id": 4880,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3431:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_524288_by_1",
																"typeString": "int_const 524288"
															},
															"value": "0x80000"
														},
														"src": "3421:17:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4882,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3442:1:29",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3421:22:29",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4893,
												"nodeType": "IfStatement",
												"src": "3417:78:29",
												"trueBody": {
													"expression": {
														"id": 4891,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4884,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4599,
															"src": "3445:5:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4890,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4887,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4885,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4599,
																			"src": "3454:5:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783438613137303339316637646334323434346538666132",
																			"id": 4886,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3462:25:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1404880482679654955896180642_by_1",
																				"typeString": "int_const 1404880482679654955896180642"
																			},
																			"value": "0x48a170391f7dc42444e8fa2"
																		},
																		"src": "3454:33:29",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4888,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3453:35:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4889,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3492:3:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3453:42:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3445:50:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4892,
													"nodeType": "ExpressionStatement",
													"src": "3445:50:29"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													},
													"id": 4896,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 4894,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4561,
														"src": "3510:4:29",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 4895,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3517:1:29",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3510:8:29",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4907,
												"nodeType": "IfStatement",
												"src": "3506:47:29",
												"trueBody": {
													"expression": {
														"id": 4905,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4897,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4599,
															"src": "3520:5:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4904,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 4900,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3533:7:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 4899,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "3533:7:29",
																				"typeDescriptions": {}
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			}
																		],
																		"id": 4898,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "3528:4:29",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 4901,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3528:13:29",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_uint256",
																		"typeString": "type(uint256)"
																	}
																},
																"id": 4902,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "max",
																"nodeType": "MemberAccess",
																"src": "3528:17:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 4903,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4599,
																"src": "3548:5:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3528:25:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3520:33:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4906,
													"nodeType": "ExpressionStatement",
													"src": "3520:33:29"
												}
											},
											{
												"expression": {
													"id": 4929,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 4908,
														"name": "sqrtPriceX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4564,
														"src": "3863:12:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 4927,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 4913,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 4911,
																				"name": "ratio",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4599,
																				"src": "3887:5:29",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">>",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 4912,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3896:2:29",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "3887:11:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 4914,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3886:13:29",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"components": [
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 4922,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 4920,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 4915,
																						"name": "ratio",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4599,
																						"src": "3903:5:29",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "%",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_rational_4294967296_by_1",
																									"typeString": "int_const 4294967296"
																								},
																								"id": 4918,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"leftExpression": {
																									"hexValue": "31",
																									"id": 4916,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "3912:1:29",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_1_by_1",
																										"typeString": "int_const 1"
																									},
																									"value": "1"
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "3332",
																									"id": 4917,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "3917:2:29",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_32_by_1",
																										"typeString": "int_const 32"
																									},
																									"value": "32"
																								},
																								"src": "3912:7:29",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_4294967296_by_1",
																									"typeString": "int_const 4294967296"
																								}
																							}
																						],
																						"id": 4919,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "3911:9:29",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_4294967296_by_1",
																							"typeString": "int_const 4294967296"
																						}
																					},
																					"src": "3903:17:29",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"hexValue": "30",
																					"id": 4921,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3924:1:29",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0"
																				},
																				"src": "3903:22:29",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseExpression": {
																				"hexValue": "31",
																				"id": 4924,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3932:1:29",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"id": 4925,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "Conditional",
																			"src": "3903:30:29",
																			"trueExpression": {
																				"hexValue": "30",
																				"id": 4923,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3928:1:29",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"id": 4926,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3902:32:29",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "3886:48:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 4910,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3878:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint160_$",
																"typeString": "type(uint160)"
															},
															"typeName": {
																"id": 4909,
																"name": "uint160",
																"nodeType": "ElementaryTypeName",
																"src": "3878:7:29",
																"typeDescriptions": {}
															}
														},
														"id": 4928,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3878:57:29",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "3863:72:29",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"id": 4930,
												"nodeType": "ExpressionStatement",
												"src": "3863:72:29"
											}
										]
									},
									"documentation": {
										"id": 4559,
										"nodeType": "StructuredDocumentation",
										"src": "1060:297:29",
										"text": "@notice Calculates sqrt(1.0001^tick) * 2^96\n @dev Throws if |tick| > max tick\n @param tick The input tick for the above formula\n @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n at the given tick"
									},
									"id": 4932,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getSqrtRatioAtTick",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4562,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4561,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 4932,
												"src": "1390:10:29",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 4560,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1390:5:29",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1389:12:29"
									},
									"returnParameters": {
										"id": 4565,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4564,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 4932,
												"src": "1425:20:29",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 4563,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1425:7:29",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1424:22:29"
									},
									"scope": 5072,
									"src": "1362:2580:29",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 5070,
										"nodeType": "Block",
										"src": "4446:4196:29",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 4947,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 4943,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 4941,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4935,
																	"src": "4563:12:29",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"id": 4942,
																	"name": "MIN_SQRT_RATIO",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4554,
																	"src": "4579:14:29",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "4563:30:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 4946,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 4944,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4935,
																	"src": "4597:12:29",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 4945,
																	"name": "MAX_SQRT_RATIO",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4558,
																	"src": "4612:14:29",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "4597:29:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "4563:63:29",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "52",
															"id": 4948,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4628:3:29",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2",
																"typeString": "literal_string \"R\""
															},
															"value": "R"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2",
																"typeString": "literal_string \"R\""
															}
														],
														"id": 4940,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4555:7:29",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 4949,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4555:77:29",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4950,
												"nodeType": "ExpressionStatement",
												"src": "4555:77:29"
											},
											{
												"assignments": [
													4952
												],
												"declarations": [
													{
														"constant": false,
														"id": 4952,
														"mutability": "mutable",
														"name": "ratio",
														"nodeType": "VariableDeclaration",
														"scope": 5070,
														"src": "4642:13:29",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 4951,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4642:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4959,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4958,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 4955,
																"name": "sqrtPriceX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4935,
																"src": "4666:12:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															],
															"id": 4954,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4658:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 4953,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "4658:7:29",
																"typeDescriptions": {}
															}
														},
														"id": 4956,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4658:21:29",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "3332",
														"id": 4957,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4683:2:29",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"src": "4658:27:29",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4642:43:29"
											},
											{
												"assignments": [
													4961
												],
												"declarations": [
													{
														"constant": false,
														"id": 4961,
														"mutability": "mutable",
														"name": "r",
														"nodeType": "VariableDeclaration",
														"scope": 5070,
														"src": "4696:9:29",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 4960,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4696:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4963,
												"initialValue": {
													"id": 4962,
													"name": "ratio",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 4952,
													"src": "4708:5:29",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4696:17:29"
											},
											{
												"assignments": [
													4965
												],
												"declarations": [
													{
														"constant": false,
														"id": 4965,
														"mutability": "mutable",
														"name": "msb",
														"nodeType": "VariableDeclaration",
														"scope": 5070,
														"src": "4723:11:29",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 4964,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4723:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4967,
												"initialValue": {
													"hexValue": "30",
													"id": 4966,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4737:1:29",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4723:15:29"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4758:139:29",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4772:58:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4785:1:29",
																		"type": "",
																		"value": "7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "4791:1:29"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4794:34:29",
																				"type": "",
																				"value": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4788:2:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4788:41:29"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "4781:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "4781:49:29"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "4776:1:29",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4843:17:29",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "4853:3:29"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4858:1:29"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "4850:2:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "4850:10:29"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "4843:3:29"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4873:14:29",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4882:1:29"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "4885:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "4878:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "4878:9:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "4873:1:29"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4965,
														"isOffset": false,
														"isSlot": false,
														"src": "4843:3:29",
														"valueSize": 1
													},
													{
														"declaration": 4965,
														"isOffset": false,
														"isSlot": false,
														"src": "4853:3:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "4791:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "4873:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "4885:1:29",
														"valueSize": 1
													}
												],
												"id": 4968,
												"nodeType": "InlineAssembly",
												"src": "4749:148:29"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4915:123:29",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4929:42:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4942:1:29",
																		"type": "",
																		"value": "6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "4948:1:29"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4951:18:29",
																				"type": "",
																				"value": "0xFFFFFFFFFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4945:2:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4945:25:29"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "4938:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "4938:33:29"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "4933:1:29",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4984:17:29",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "4994:3:29"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4999:1:29"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "4991:2:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "4991:10:29"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "4984:3:29"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5014:14:29",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5023:1:29"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5026:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5019:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "5019:9:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5014:1:29"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4965,
														"isOffset": false,
														"isSlot": false,
														"src": "4984:3:29",
														"valueSize": 1
													},
													{
														"declaration": 4965,
														"isOffset": false,
														"isSlot": false,
														"src": "4994:3:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "4948:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "5014:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "5026:1:29",
														"valueSize": 1
													}
												],
												"id": 4969,
												"nodeType": "InlineAssembly",
												"src": "4906:132:29"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5056:115:29",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5070:34:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5083:1:29",
																		"type": "",
																		"value": "5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5089:1:29"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5092:10:29",
																				"type": "",
																				"value": "0xFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5086:2:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5086:17:29"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5079:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "5079:25:29"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5074:1:29",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5117:17:29",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5127:3:29"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5132:1:29"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5124:2:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "5124:10:29"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5117:3:29"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5147:14:29",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5156:1:29"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5159:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5152:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "5152:9:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5147:1:29"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4965,
														"isOffset": false,
														"isSlot": false,
														"src": "5117:3:29",
														"valueSize": 1
													},
													{
														"declaration": 4965,
														"isOffset": false,
														"isSlot": false,
														"src": "5127:3:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "5089:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "5147:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "5159:1:29",
														"valueSize": 1
													}
												],
												"id": 4970,
												"nodeType": "InlineAssembly",
												"src": "5047:124:29"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5189:111:29",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5203:30:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5216:1:29",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5222:1:29"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5225:6:29",
																				"type": "",
																				"value": "0xFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5219:2:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5219:13:29"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5212:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "5212:21:29"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5207:1:29",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5246:17:29",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5256:3:29"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5261:1:29"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5253:2:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "5253:10:29"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5246:3:29"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5276:14:29",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5285:1:29"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5288:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5281:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "5281:9:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5276:1:29"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4965,
														"isOffset": false,
														"isSlot": false,
														"src": "5246:3:29",
														"valueSize": 1
													},
													{
														"declaration": 4965,
														"isOffset": false,
														"isSlot": false,
														"src": "5256:3:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "5222:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "5276:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "5288:1:29",
														"valueSize": 1
													}
												],
												"id": 4971,
												"nodeType": "InlineAssembly",
												"src": "5180:120:29"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5318:109:29",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5332:28:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5345:1:29",
																		"type": "",
																		"value": "3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5351:1:29"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5354:4:29",
																				"type": "",
																				"value": "0xFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5348:2:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5348:11:29"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5341:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "5341:19:29"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5336:1:29",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5373:17:29",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5383:3:29"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5388:1:29"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5380:2:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "5380:10:29"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5373:3:29"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5403:14:29",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5412:1:29"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5415:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5408:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "5408:9:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5403:1:29"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4965,
														"isOffset": false,
														"isSlot": false,
														"src": "5373:3:29",
														"valueSize": 1
													},
													{
														"declaration": 4965,
														"isOffset": false,
														"isSlot": false,
														"src": "5383:3:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "5351:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "5403:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "5415:1:29",
														"valueSize": 1
													}
												],
												"id": 4972,
												"nodeType": "InlineAssembly",
												"src": "5309:118:29"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5445:108:29",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5459:27:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5472:1:29",
																		"type": "",
																		"value": "2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5478:1:29"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5481:3:29",
																				"type": "",
																				"value": "0xF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5475:2:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5475:10:29"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5468:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "5468:18:29"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5463:1:29",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5499:17:29",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5509:3:29"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5514:1:29"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5506:2:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "5506:10:29"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5499:3:29"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5529:14:29",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5538:1:29"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5541:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5534:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "5534:9:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5529:1:29"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4965,
														"isOffset": false,
														"isSlot": false,
														"src": "5499:3:29",
														"valueSize": 1
													},
													{
														"declaration": 4965,
														"isOffset": false,
														"isSlot": false,
														"src": "5509:3:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "5478:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "5529:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "5541:1:29",
														"valueSize": 1
													}
												],
												"id": 4973,
												"nodeType": "InlineAssembly",
												"src": "5436:117:29"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5571:108:29",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5585:27:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5598:1:29",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5604:1:29"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5607:3:29",
																				"type": "",
																				"value": "0x3"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5601:2:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5601:10:29"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5594:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "5594:18:29"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5589:1:29",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5625:17:29",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5635:3:29"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5640:1:29"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5632:2:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "5632:10:29"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5625:3:29"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5655:14:29",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5664:1:29"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5667:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5660:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "5660:9:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5655:1:29"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4965,
														"isOffset": false,
														"isSlot": false,
														"src": "5625:3:29",
														"valueSize": 1
													},
													{
														"declaration": 4965,
														"isOffset": false,
														"isSlot": false,
														"src": "5635:3:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "5604:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "5655:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "5667:1:29",
														"valueSize": 1
													}
												],
												"id": 4974,
												"nodeType": "InlineAssembly",
												"src": "5562:117:29"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5697:73:29",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5711:19:29",
															"value": {
																"arguments": [
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5723:1:29"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5726:3:29",
																		"type": "",
																		"value": "0x1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5720:2:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "5720:10:29"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5715:1:29",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5743:17:29",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5753:3:29"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5758:1:29"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5750:2:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "5750:10:29"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5743:3:29"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4965,
														"isOffset": false,
														"isSlot": false,
														"src": "5743:3:29",
														"valueSize": 1
													},
													{
														"declaration": 4965,
														"isOffset": false,
														"isSlot": false,
														"src": "5753:3:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "5723:1:29",
														"valueSize": 1
													}
												],
												"id": 4975,
												"nodeType": "InlineAssembly",
												"src": "5688:82:29"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4978,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 4976,
														"name": "msb",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4965,
														"src": "5784:3:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"hexValue": "313238",
														"id": 4977,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5791:3:29",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_128_by_1",
															"typeString": "int_const 128"
														},
														"value": "128"
													},
													"src": "5784:10:29",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"expression": {
														"id": 4995,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4988,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4961,
															"src": "5835:1:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4994,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 4989,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4952,
																"src": "5839:5:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<<",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4992,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "313237",
																			"id": 4990,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5849:3:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_127_by_1",
																				"typeString": "int_const 127"
																			},
																			"value": "127"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 4991,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4965,
																			"src": "5855:3:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5849:9:29",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4993,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5848:11:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5839:20:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "5835:24:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4996,
													"nodeType": "ExpressionStatement",
													"src": "5835:24:29"
												},
												"id": 4997,
												"nodeType": "IfStatement",
												"src": "5780:79:29",
												"trueBody": {
													"expression": {
														"id": 4986,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4979,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4961,
															"src": "5796:1:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4985,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 4980,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4952,
																"src": "5800:5:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4983,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4981,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4965,
																			"src": "5810:3:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "313237",
																			"id": 4982,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5816:3:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_127_by_1",
																				"typeString": "int_const 127"
																			},
																			"value": "127"
																		},
																		"src": "5810:9:29",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4984,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5809:11:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5800:20:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "5796:24:29",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4987,
													"nodeType": "ExpressionStatement",
													"src": "5796:24:29"
												}
											},
											{
												"assignments": [
													4999
												],
												"declarations": [
													{
														"constant": false,
														"id": 4999,
														"mutability": "mutable",
														"name": "log_2",
														"nodeType": "VariableDeclaration",
														"scope": 5070,
														"src": "5870:12:29",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 4998,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "5870:6:29",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 5009,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 5008,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 5005,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 5002,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4965,
																			"src": "5893:3:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 5001,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5886:6:29",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 5000,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "5886:6:29",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 5003,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5886:11:29",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 5004,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5900:3:29",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "5886:17:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 5006,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "5885:19:29",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "3634",
														"id": 5007,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5908:2:29",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_64_by_1",
															"typeString": "int_const 64"
														},
														"value": "64"
													},
													"src": "5885:25:29",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5870:40:29"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5930:151:29",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5944:24:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5953:3:29",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5962:1:29"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5965:1:29"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "5958:3:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5958:9:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5949:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "5949:19:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5944:1:29"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5981:20:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5994:3:29",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5999:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5990:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "5990:11:29"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5985:1:29",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6014:30:29",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6026:5:29"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6037:2:29",
																				"type": "",
																				"value": "63"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6041:1:29"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6033:3:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6033:10:29"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6023:2:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "6023:21:29"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6014:5:29"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6057:14:29",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6066:1:29"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6069:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6062:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "6062:9:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6057:1:29"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4999,
														"isOffset": false,
														"isSlot": false,
														"src": "6014:5:29",
														"valueSize": 1
													},
													{
														"declaration": 4999,
														"isOffset": false,
														"isSlot": false,
														"src": "6026:5:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "5944:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "5962:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "5965:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "5999:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6057:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6069:1:29",
														"valueSize": 1
													}
												],
												"id": 5010,
												"nodeType": "InlineAssembly",
												"src": "5921:160:29"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6099:151:29",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6113:24:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6122:3:29",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6131:1:29"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6134:1:29"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6127:3:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6127:9:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6118:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "6118:19:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6113:1:29"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6150:20:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6163:3:29",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6168:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6159:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "6159:11:29"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6154:1:29",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6183:30:29",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6195:5:29"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6206:2:29",
																				"type": "",
																				"value": "62"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6210:1:29"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6202:3:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6202:10:29"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6192:2:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "6192:21:29"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6183:5:29"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6226:14:29",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6235:1:29"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6238:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6231:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "6231:9:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6226:1:29"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4999,
														"isOffset": false,
														"isSlot": false,
														"src": "6183:5:29",
														"valueSize": 1
													},
													{
														"declaration": 4999,
														"isOffset": false,
														"isSlot": false,
														"src": "6195:5:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6113:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6131:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6134:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6168:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6226:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6238:1:29",
														"valueSize": 1
													}
												],
												"id": 5011,
												"nodeType": "InlineAssembly",
												"src": "6090:160:29"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6268:151:29",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6282:24:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6291:3:29",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6300:1:29"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6303:1:29"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6296:3:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6296:9:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6287:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "6287:19:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6282:1:29"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6319:20:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6332:3:29",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6337:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6328:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "6328:11:29"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6323:1:29",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6352:30:29",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6364:5:29"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6375:2:29",
																				"type": "",
																				"value": "61"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6379:1:29"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6371:3:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6371:10:29"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6361:2:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "6361:21:29"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6352:5:29"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6395:14:29",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6404:1:29"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6407:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6400:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "6400:9:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6395:1:29"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4999,
														"isOffset": false,
														"isSlot": false,
														"src": "6352:5:29",
														"valueSize": 1
													},
													{
														"declaration": 4999,
														"isOffset": false,
														"isSlot": false,
														"src": "6364:5:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6282:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6300:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6303:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6337:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6395:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6407:1:29",
														"valueSize": 1
													}
												],
												"id": 5012,
												"nodeType": "InlineAssembly",
												"src": "6259:160:29"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6437:151:29",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6451:24:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6460:3:29",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6469:1:29"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6472:1:29"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6465:3:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6465:9:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6456:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "6456:19:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6451:1:29"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6488:20:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6501:3:29",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6506:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6497:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "6497:11:29"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6492:1:29",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6521:30:29",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6533:5:29"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6544:2:29",
																				"type": "",
																				"value": "60"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6548:1:29"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6540:3:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6540:10:29"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6530:2:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "6530:21:29"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6521:5:29"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6564:14:29",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6573:1:29"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6576:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6569:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "6569:9:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6564:1:29"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4999,
														"isOffset": false,
														"isSlot": false,
														"src": "6521:5:29",
														"valueSize": 1
													},
													{
														"declaration": 4999,
														"isOffset": false,
														"isSlot": false,
														"src": "6533:5:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6451:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6469:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6472:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6506:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6564:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6576:1:29",
														"valueSize": 1
													}
												],
												"id": 5013,
												"nodeType": "InlineAssembly",
												"src": "6428:160:29"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6606:151:29",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6620:24:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6629:3:29",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6638:1:29"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6641:1:29"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6634:3:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6634:9:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6625:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "6625:19:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6620:1:29"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6657:20:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6670:3:29",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6675:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6666:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "6666:11:29"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6661:1:29",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6690:30:29",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6702:5:29"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6713:2:29",
																				"type": "",
																				"value": "59"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6717:1:29"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6709:3:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6709:10:29"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6699:2:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "6699:21:29"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6690:5:29"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6733:14:29",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6742:1:29"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6745:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6738:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "6738:9:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6733:1:29"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4999,
														"isOffset": false,
														"isSlot": false,
														"src": "6690:5:29",
														"valueSize": 1
													},
													{
														"declaration": 4999,
														"isOffset": false,
														"isSlot": false,
														"src": "6702:5:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6620:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6638:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6641:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6675:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6733:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6745:1:29",
														"valueSize": 1
													}
												],
												"id": 5014,
												"nodeType": "InlineAssembly",
												"src": "6597:160:29"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6775:151:29",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6789:24:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6798:3:29",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6807:1:29"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6810:1:29"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6803:3:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6803:9:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6794:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "6794:19:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6789:1:29"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6826:20:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6839:3:29",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6844:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6835:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "6835:11:29"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6830:1:29",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6859:30:29",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6871:5:29"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6882:2:29",
																				"type": "",
																				"value": "58"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6886:1:29"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6878:3:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6878:10:29"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6868:2:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "6868:21:29"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6859:5:29"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6902:14:29",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6911:1:29"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6914:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6907:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "6907:9:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6902:1:29"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4999,
														"isOffset": false,
														"isSlot": false,
														"src": "6859:5:29",
														"valueSize": 1
													},
													{
														"declaration": 4999,
														"isOffset": false,
														"isSlot": false,
														"src": "6871:5:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6789:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6807:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6810:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6844:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6902:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6914:1:29",
														"valueSize": 1
													}
												],
												"id": 5015,
												"nodeType": "InlineAssembly",
												"src": "6766:160:29"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6944:151:29",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6958:24:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6967:3:29",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6976:1:29"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6979:1:29"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6972:3:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6972:9:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6963:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "6963:19:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6958:1:29"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6995:20:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7008:3:29",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7013:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7004:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "7004:11:29"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6999:1:29",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7028:30:29",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7040:5:29"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7051:2:29",
																				"type": "",
																				"value": "57"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7055:1:29"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7047:3:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7047:10:29"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7037:2:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "7037:21:29"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7028:5:29"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7071:14:29",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7080:1:29"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7083:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7076:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "7076:9:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7071:1:29"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4999,
														"isOffset": false,
														"isSlot": false,
														"src": "7028:5:29",
														"valueSize": 1
													},
													{
														"declaration": 4999,
														"isOffset": false,
														"isSlot": false,
														"src": "7040:5:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6958:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6976:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "6979:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7013:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7071:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7083:1:29",
														"valueSize": 1
													}
												],
												"id": 5016,
												"nodeType": "InlineAssembly",
												"src": "6935:160:29"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7113:151:29",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7127:24:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7136:3:29",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7145:1:29"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7148:1:29"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7141:3:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7141:9:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7132:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "7132:19:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7127:1:29"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7164:20:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7177:3:29",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7182:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7173:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "7173:11:29"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7168:1:29",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7197:30:29",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7209:5:29"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7220:2:29",
																				"type": "",
																				"value": "56"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7224:1:29"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7216:3:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7216:10:29"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7206:2:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "7206:21:29"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7197:5:29"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7240:14:29",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7249:1:29"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7252:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7245:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "7245:9:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7240:1:29"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4999,
														"isOffset": false,
														"isSlot": false,
														"src": "7197:5:29",
														"valueSize": 1
													},
													{
														"declaration": 4999,
														"isOffset": false,
														"isSlot": false,
														"src": "7209:5:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7127:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7145:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7148:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7182:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7240:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7252:1:29",
														"valueSize": 1
													}
												],
												"id": 5017,
												"nodeType": "InlineAssembly",
												"src": "7104:160:29"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7282:151:29",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7296:24:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7305:3:29",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7314:1:29"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7317:1:29"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7310:3:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7310:9:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7301:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "7301:19:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7296:1:29"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7333:20:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7346:3:29",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7351:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7342:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "7342:11:29"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7337:1:29",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7366:30:29",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7378:5:29"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7389:2:29",
																				"type": "",
																				"value": "55"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7393:1:29"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7385:3:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7385:10:29"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7375:2:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "7375:21:29"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7366:5:29"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7409:14:29",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7418:1:29"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7421:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7414:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "7414:9:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7409:1:29"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4999,
														"isOffset": false,
														"isSlot": false,
														"src": "7366:5:29",
														"valueSize": 1
													},
													{
														"declaration": 4999,
														"isOffset": false,
														"isSlot": false,
														"src": "7378:5:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7296:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7314:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7317:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7351:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7409:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7421:1:29",
														"valueSize": 1
													}
												],
												"id": 5018,
												"nodeType": "InlineAssembly",
												"src": "7273:160:29"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7451:151:29",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7465:24:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7474:3:29",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7483:1:29"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7486:1:29"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7479:3:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7479:9:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7470:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "7470:19:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7465:1:29"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7502:20:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7515:3:29",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7520:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7511:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "7511:11:29"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7506:1:29",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7535:30:29",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7547:5:29"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7558:2:29",
																				"type": "",
																				"value": "54"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7562:1:29"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7554:3:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7554:10:29"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7544:2:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "7544:21:29"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7535:5:29"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7578:14:29",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7587:1:29"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7590:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7583:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "7583:9:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7578:1:29"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4999,
														"isOffset": false,
														"isSlot": false,
														"src": "7535:5:29",
														"valueSize": 1
													},
													{
														"declaration": 4999,
														"isOffset": false,
														"isSlot": false,
														"src": "7547:5:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7465:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7483:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7486:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7520:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7578:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7590:1:29",
														"valueSize": 1
													}
												],
												"id": 5019,
												"nodeType": "InlineAssembly",
												"src": "7442:160:29"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7620:151:29",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7634:24:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7643:3:29",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7652:1:29"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7655:1:29"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7648:3:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7648:9:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7639:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "7639:19:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7634:1:29"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7671:20:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7684:3:29",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7689:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7680:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "7680:11:29"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7675:1:29",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7704:30:29",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7716:5:29"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7727:2:29",
																				"type": "",
																				"value": "53"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7731:1:29"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7723:3:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7723:10:29"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7713:2:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "7713:21:29"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7704:5:29"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7747:14:29",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7756:1:29"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7759:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7752:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "7752:9:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7747:1:29"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4999,
														"isOffset": false,
														"isSlot": false,
														"src": "7704:5:29",
														"valueSize": 1
													},
													{
														"declaration": 4999,
														"isOffset": false,
														"isSlot": false,
														"src": "7716:5:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7634:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7652:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7655:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7689:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7747:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7759:1:29",
														"valueSize": 1
													}
												],
												"id": 5020,
												"nodeType": "InlineAssembly",
												"src": "7611:160:29"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7789:151:29",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7803:24:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7812:3:29",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7821:1:29"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7824:1:29"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7817:3:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7817:9:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7808:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "7808:19:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7803:1:29"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7840:20:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7853:3:29",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7858:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7849:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "7849:11:29"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7844:1:29",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7873:30:29",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7885:5:29"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7896:2:29",
																				"type": "",
																				"value": "52"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7900:1:29"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7892:3:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7892:10:29"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7882:2:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "7882:21:29"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7873:5:29"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7916:14:29",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7925:1:29"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7928:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7921:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "7921:9:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7916:1:29"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4999,
														"isOffset": false,
														"isSlot": false,
														"src": "7873:5:29",
														"valueSize": 1
													},
													{
														"declaration": 4999,
														"isOffset": false,
														"isSlot": false,
														"src": "7885:5:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7803:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7821:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7824:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7858:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7916:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7928:1:29",
														"valueSize": 1
													}
												],
												"id": 5021,
												"nodeType": "InlineAssembly",
												"src": "7780:160:29"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7958:151:29",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7972:24:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7981:3:29",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7990:1:29"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7993:1:29"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7986:3:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7986:9:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7977:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "7977:19:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7972:1:29"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8009:20:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8022:3:29",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8027:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8018:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "8018:11:29"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "8013:1:29",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8042:30:29",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "8054:5:29"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8065:2:29",
																				"type": "",
																				"value": "51"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "8069:1:29"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "8061:3:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8061:10:29"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "8051:2:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "8051:21:29"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "8042:5:29"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8085:14:29",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "8094:1:29"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8097:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8090:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "8090:9:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "8085:1:29"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4999,
														"isOffset": false,
														"isSlot": false,
														"src": "8042:5:29",
														"valueSize": 1
													},
													{
														"declaration": 4999,
														"isOffset": false,
														"isSlot": false,
														"src": "8054:5:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7972:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7990:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "7993:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "8027:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "8085:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "8097:1:29",
														"valueSize": 1
													}
												],
												"id": 5022,
												"nodeType": "InlineAssembly",
												"src": "7949:160:29"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "8127:124:29",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8141:24:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8150:3:29",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "8159:1:29"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "8162:1:29"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "8155:3:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8155:9:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8146:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "8146:19:29"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "8141:1:29"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8178:20:29",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8191:3:29",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8196:1:29"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8187:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "8187:11:29"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "8182:1:29",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8211:30:29",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "8223:5:29"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8234:2:29",
																				"type": "",
																				"value": "50"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "8238:1:29"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "8230:3:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8230:10:29"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "8220:2:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "8220:21:29"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "8211:5:29"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4999,
														"isOffset": false,
														"isSlot": false,
														"src": "8211:5:29",
														"valueSize": 1
													},
													{
														"declaration": 4999,
														"isOffset": false,
														"isSlot": false,
														"src": "8223:5:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "8141:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "8159:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "8162:1:29",
														"valueSize": 1
													},
													{
														"declaration": 4961,
														"isOffset": false,
														"isSlot": false,
														"src": "8196:1:29",
														"valueSize": 1
													}
												],
												"id": 5023,
												"nodeType": "InlineAssembly",
												"src": "8118:133:29"
											},
											{
												"assignments": [
													5025
												],
												"declarations": [
													{
														"constant": false,
														"id": 5025,
														"mutability": "mutable",
														"name": "log_sqrt10001",
														"nodeType": "VariableDeclaration",
														"scope": 5070,
														"src": "8261:20:29",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 5024,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "8261:6:29",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 5029,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 5028,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 5026,
														"name": "log_2",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4999,
														"src": "8284:5:29",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"hexValue": "323535373338393538393939363033383236333437313431",
														"id": 5027,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8292:24:29",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_255738958999603826347141_by_1",
															"typeString": "int_const 255738958999603826347141"
														},
														"value": "255738958999603826347141"
													},
													"src": "8284:32:29",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8261:55:29"
											},
											{
												"assignments": [
													5031
												],
												"declarations": [
													{
														"constant": false,
														"id": 5031,
														"mutability": "mutable",
														"name": "tickLow",
														"nodeType": "VariableDeclaration",
														"scope": 5070,
														"src": "8345:13:29",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 5030,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8345:5:29",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 5041,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															"id": 5039,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 5036,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 5034,
																			"name": "log_sqrt10001",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 5025,
																			"src": "8368:13:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "33343032393932393536383039313332343138353936313430313030363630323437323130",
																			"id": 5035,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8384:37:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3402992956809132418596140100660247210_by_1",
																				"typeString": "int_const 3402...(29 digits omitted)...7210"
																			},
																			"value": "3402992956809132418596140100660247210"
																		},
																		"src": "8368:53:29",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"id": 5037,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8367:55:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 5038,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8426:3:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "8367:62:29",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														],
														"id": 5033,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "8361:5:29",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_int24_$",
															"typeString": "type(int24)"
														},
														"typeName": {
															"id": 5032,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8361:5:29",
															"typeDescriptions": {}
														}
													},
													"id": 5040,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8361:69:29",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8345:85:29"
											},
											{
												"assignments": [
													5043
												],
												"declarations": [
													{
														"constant": false,
														"id": 5043,
														"mutability": "mutable",
														"name": "tickHi",
														"nodeType": "VariableDeclaration",
														"scope": 5070,
														"src": "8440:12:29",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 5042,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8440:5:29",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 5053,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															"id": 5051,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 5048,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 5046,
																			"name": "log_sqrt10001",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 5025,
																			"src": "8462:13:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"hexValue": "323931333339343634373731393839363232393037303237363231313533333938303838343935",
																			"id": 5047,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8478:39:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_291339464771989622907027621153398088495_by_1",
																				"typeString": "int_const 2913...(31 digits omitted)...8495"
																			},
																			"value": "291339464771989622907027621153398088495"
																		},
																		"src": "8462:55:29",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"id": 5049,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8461:57:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 5050,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8522:3:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "8461:64:29",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														],
														"id": 5045,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "8455:5:29",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_int24_$",
															"typeString": "type(int24)"
														},
														"typeName": {
															"id": 5044,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8455:5:29",
															"typeDescriptions": {}
														}
													},
													"id": 5052,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8455:71:29",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8440:86:29"
											},
											{
												"expression": {
													"id": 5068,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 5054,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4938,
														"src": "8537:4:29",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															},
															"id": 5057,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 5055,
																"name": "tickLow",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 5031,
																"src": "8544:7:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 5056,
																"name": "tickHi",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 5043,
																"src": "8555:6:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"src": "8544:17:29",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseExpression": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 5063,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 5060,
																			"name": "tickHi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 5043,
																			"src": "8593:6:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		],
																		"id": 5059,
																		"name": "getSqrtRatioAtTick",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4932,
																		"src": "8574:18:29",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_int24_$returns$_t_uint160_$",
																			"typeString": "function (int24) pure returns (uint160)"
																		}
																	},
																	"id": 5061,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8574:26:29",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"id": 5062,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4935,
																	"src": "8604:12:29",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "8574:42:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseExpression": {
																"id": 5065,
																"name": "tickLow",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 5031,
																"src": "8628:7:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"id": 5066,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "Conditional",
															"src": "8574:61:29",
															"trueExpression": {
																"id": 5064,
																"name": "tickHi",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 5043,
																"src": "8619:6:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"id": 5067,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "Conditional",
														"src": "8544:91:29",
														"trueExpression": {
															"id": 5058,
															"name": "tickLow",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 5031,
															"src": "8564:7:29",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "8537:98:29",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"id": 5069,
												"nodeType": "ExpressionStatement",
												"src": "8537:98:29"
											}
										]
									},
									"documentation": {
										"id": 4933,
										"nodeType": "StructuredDocumentation",
										"src": "3948:408:29",
										"text": "@notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n ever return.\n @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n @return tick The greatest tick for which the ratio is less than or equal to the input ratio"
									},
									"id": 5071,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getTickAtSqrtRatio",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4936,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4935,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 5071,
												"src": "4389:20:29",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 4934,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4389:7:29",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4388:22:29"
									},
									"returnParameters": {
										"id": 4939,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4938,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 5071,
												"src": "4434:10:29",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 4937,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "4434:5:29",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4433:12:29"
									},
									"scope": 5072,
									"src": "4361:4281:29",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 5073,
							"src": "313:8331:29"
						}
					],
					"src": "45:8600:29"
				},
				"id": 29
			},
			"contracts/core/libraries/TransferHelper.sol": {
				"ast": {
					"absolutePath": "contracts/core/libraries/TransferHelper.sol",
					"exportedSymbols": {
						"IERC20Minimal": [
							1153
						],
						"TransferHelper": [
							5123
						]
					},
					"id": 5124,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 5074,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:30"
						},
						{
							"absolutePath": "contracts/core/interfaces/IERC20Minimal.sol",
							"file": "../interfaces/IERC20Minimal.sol",
							"id": 5075,
							"nodeType": "ImportDirective",
							"scope": 5124,
							"sourceUnit": 1154,
							"src": "71:41:30",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 5076,
								"nodeType": "StructuredDocumentation",
								"src": "114:139:30",
								"text": "@title TransferHelper\n @notice Contains helper methods for interacting with ERC20 tokens that do not consistently return true/false"
							},
							"fullyImplemented": true,
							"id": 5123,
							"linearizedBaseContracts": [
								5123
							],
							"name": "TransferHelper",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 5121,
										"nodeType": "Block",
										"src": "675:225:30",
										"statements": [
											{
												"assignments": [
													5087,
													5089
												],
												"declarations": [
													{
														"constant": false,
														"id": 5087,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 5121,
														"src": "686:12:30",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 5086,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "686:4:30",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 5089,
														"mutability": "mutable",
														"name": "data",
														"nodeType": "VariableDeclaration",
														"scope": 5121,
														"src": "700:17:30",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 5088,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "700:5:30",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 5101,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 5094,
																			"name": "IERC20Minimal",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1153,
																			"src": "767:13:30",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20Minimal_$1153_$",
																				"typeString": "type(contract IERC20Minimal)"
																			}
																		},
																		"id": 5095,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1102,
																		"src": "767:22:30",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function IERC20Minimal.transfer(address,uint256) returns (bool)"
																		}
																	},
																	"id": 5096,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "767:31:30",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 5097,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 5081,
																	"src": "800:2:30",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 5098,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 5083,
																	"src": "804:5:30",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 5092,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "744:3:30",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 5093,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "744:22:30",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 5099,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "744:66:30",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 5090,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 5079,
															"src": "733:5:30",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 5091,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "733:10:30",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 5100,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "733:78:30",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "685:126:30"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 5117,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 5103,
																"name": "success",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 5087,
																"src": "829:7:30",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 5115,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 5107,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 5104,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 5089,
																					"src": "841:4:30",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 5105,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "841:11:30",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "30",
																				"id": 5106,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "856:1:30",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"src": "841:16:30",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"arguments": [
																				{
																					"id": 5110,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 5089,
																					"src": "872:4:30",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				{
																					"components": [
																						{
																							"id": 5112,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "879:4:30",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_bool_$",
																								"typeString": "type(bool)"
																							},
																							"typeName": {
																								"id": 5111,
																								"name": "bool",
																								"nodeType": "ElementaryTypeName",
																								"src": "879:4:30",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"id": 5113,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "878:6:30",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					},
																					{
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				],
																				"expression": {
																					"id": 5108,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "861:3:30",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 5109,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "decode",
																				"nodeType": "MemberAccess",
																				"src": "861:10:30",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 5114,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "861:24:30",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "841:44:30",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 5116,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "840:46:30",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "829:57:30",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5446",
															"id": 5118,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "888:4:30",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cebb2b2e317200ffcf39e4291b6400d95f06e73adfd258bd495d227b7d846ff0",
																"typeString": "literal_string \"TF\""
															},
															"value": "TF"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cebb2b2e317200ffcf39e4291b6400d95f06e73adfd258bd495d227b7d846ff0",
																"typeString": "literal_string \"TF\""
															}
														],
														"id": 5102,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "821:7:30",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 5119,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "821:72:30",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 5120,
												"nodeType": "ExpressionStatement",
												"src": "821:72:30"
											}
										]
									},
									"documentation": {
										"id": 5077,
										"nodeType": "StructuredDocumentation",
										"src": "282:315:30",
										"text": "@notice Transfers tokens from msg.sender to a recipient\n @dev Calls transfer on token contract, errors with TF if transfer fails\n @param token The contract address of the token which will be transferred\n @param to The recipient of the transfer\n @param value The value of the transfer"
									},
									"id": 5122,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 5084,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5079,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 5122,
												"src": "624:13:30",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 5078,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "624:7:30",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 5081,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 5122,
												"src": "639:10:30",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 5080,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "639:7:30",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 5083,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 5122,
												"src": "651:13:30",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 5082,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "651:7:30",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "623:42:30"
									},
									"returnParameters": {
										"id": 5085,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:0:30"
									},
									"scope": 5123,
									"src": "602:298:30",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 5124,
							"src": "253:649:30"
						}
					],
					"src": "45:858:30"
				},
				"id": 30
			},
			"contracts/core/libraries/UnsafeMath.sol": {
				"ast": {
					"absolutePath": "contracts/core/libraries/UnsafeMath.sol",
					"exportedSymbols": {
						"UnsafeMath": [
							5139
						]
					},
					"id": 5140,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 5125,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:31"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 5126,
								"nodeType": "StructuredDocumentation",
								"src": "71:173:31",
								"text": "@title Math functions that do not check inputs or outputs\n @notice Contains methods that perform common math functions but do not do any overflow or underflow checks"
							},
							"fullyImplemented": true,
							"id": 5139,
							"linearizedBaseContracts": [
								5139
							],
							"name": "UnsafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 5137,
										"nodeType": "Block",
										"src": "571:86:31",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "590:61:31",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "604:37:31",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "617:1:31"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "620:1:31"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "613:3:31"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "613:9:31"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "631:1:31"
																					},
																					{
																						"name": "y",
																						"nodeType": "YulIdentifier",
																						"src": "634:1:31"
																					}
																				],
																				"functionName": {
																					"name": "mod",
																					"nodeType": "YulIdentifier",
																					"src": "627:3:31"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "627:9:31"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "638:1:31",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "624:2:31"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "624:16:31"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "609:3:31"
																},
																"nodeType": "YulFunctionCall",
																"src": "609:32:31"
															},
															"variableNames": [
																{
																	"name": "z",
																	"nodeType": "YulIdentifier",
																	"src": "604:1:31"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 5129,
														"isOffset": false,
														"isSlot": false,
														"src": "617:1:31",
														"valueSize": 1
													},
													{
														"declaration": 5129,
														"isOffset": false,
														"isSlot": false,
														"src": "631:1:31",
														"valueSize": 1
													},
													{
														"declaration": 5131,
														"isOffset": false,
														"isSlot": false,
														"src": "620:1:31",
														"valueSize": 1
													},
													{
														"declaration": 5131,
														"isOffset": false,
														"isSlot": false,
														"src": "634:1:31",
														"valueSize": 1
													},
													{
														"declaration": 5134,
														"isOffset": false,
														"isSlot": false,
														"src": "604:1:31",
														"valueSize": 1
													}
												],
												"id": 5136,
												"nodeType": "InlineAssembly",
												"src": "581:70:31"
											}
										]
									},
									"documentation": {
										"id": 5127,
										"nodeType": "StructuredDocumentation",
										"src": "269:218:31",
										"text": "@notice Returns ceil(x / y)\n @dev division by 0 has unspecified behavior, and must be checked externally\n @param x The dividend\n @param y The divisor\n @return z The quotient, ceil(x / y)"
									},
									"id": 5138,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "divRoundingUp",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 5132,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5129,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 5138,
												"src": "515:9:31",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 5128,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "515:7:31",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 5131,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 5138,
												"src": "526:9:31",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 5130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "526:7:31",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "514:22:31"
									},
									"returnParameters": {
										"id": 5135,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5134,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 5138,
												"src": "560:9:31",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 5133,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "560:7:31",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "559:11:31"
									},
									"scope": 5139,
									"src": "492:165:31",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 5140,
							"src": "244:415:31"
						}
					],
					"src": "45:615:31"
				},
				"id": 31
			},
			"contracts/libraries/VelodromeTimeLibrary.sol": {
				"ast": {
					"absolutePath": "contracts/libraries/VelodromeTimeLibrary.sol",
					"exportedSymbols": {
						"VelodromeTimeLibrary": [
							5217
						]
					},
					"id": 5218,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 5141,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:32"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"fullyImplemented": true,
							"id": 5217,
							"linearizedBaseContracts": [
								5217
							],
							"name": "VelodromeTimeLibrary",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 5144,
									"mutability": "constant",
									"name": "WEEK",
									"nodeType": "VariableDeclaration",
									"scope": 5217,
									"src": "92:39:32",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 5142,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "92:7:32",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "37",
										"id": 5143,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "125:6:32",
										"subdenomination": "days",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_604800_by_1",
											"typeString": "int_const 604800"
										},
										"value": "7"
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 5159,
										"nodeType": "Block",
										"src": "272:54:32",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 5157,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 5152,
														"name": "timestamp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 5147,
														"src": "289:9:32",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 5155,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 5153,
																	"name": "timestamp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 5147,
																	"src": "302:9:32",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "%",
																"rightExpression": {
																	"id": 5154,
																	"name": "WEEK",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 5144,
																	"src": "314:4:32",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "302:16:32",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 5156,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "301:18:32",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "289:30:32",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 5151,
												"id": 5158,
												"nodeType": "Return",
												"src": "282:37:32"
											}
										]
									},
									"documentation": {
										"id": 5145,
										"nodeType": "StructuredDocumentation",
										"src": "138:58:32",
										"text": "@dev Returns start of epoch based on current timestamp"
									},
									"id": 5160,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "epochStart",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 5148,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5147,
												"mutability": "mutable",
												"name": "timestamp",
												"nodeType": "VariableDeclaration",
												"scope": 5160,
												"src": "221:17:32",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 5146,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "221:7:32",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "220:19:32"
									},
									"returnParameters": {
										"id": 5151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5150,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 5160,
												"src": "263:7:32",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 5149,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "263:7:32",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "262:9:32"
									},
									"scope": 5217,
									"src": "201:125:32",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 5177,
										"nodeType": "Block",
										"src": "466:61:32",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 5175,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 5173,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 5168,
															"name": "timestamp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 5163,
															"src": "483:9:32",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 5171,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 5169,
																		"name": "timestamp",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 5163,
																		"src": "496:9:32",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 5170,
																		"name": "WEEK",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 5144,
																		"src": "508:4:32",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "496:16:32",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 5172,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "495:18:32",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "483:30:32",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 5174,
														"name": "WEEK",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 5144,
														"src": "516:4:32",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "483:37:32",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 5167,
												"id": 5176,
												"nodeType": "Return",
												"src": "476:44:32"
											}
										]
									},
									"documentation": {
										"id": 5161,
										"nodeType": "StructuredDocumentation",
										"src": "332:59:32",
										"text": "@dev Returns start of next epoch / end of current epoch"
									},
									"id": 5178,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "epochNext",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 5164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5163,
												"mutability": "mutable",
												"name": "timestamp",
												"nodeType": "VariableDeclaration",
												"scope": 5178,
												"src": "415:17:32",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 5162,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "415:7:32",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "414:19:32"
									},
									"returnParameters": {
										"id": 5167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5166,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 5178,
												"src": "457:7:32",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 5165,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "457:7:32",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "456:9:32"
									},
									"scope": 5217,
									"src": "396:131:32",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 5195,
										"nodeType": "Block",
										"src": "652:64:32",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 5193,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 5191,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 5186,
															"name": "timestamp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 5181,
															"src": "669:9:32",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 5189,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 5187,
																		"name": "timestamp",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 5181,
																		"src": "682:9:32",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 5188,
																		"name": "WEEK",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 5144,
																		"src": "694:4:32",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "682:16:32",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 5190,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "681:18:32",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "669:30:32",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"hexValue": "31",
														"id": 5192,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "702:7:32",
														"subdenomination": "hours",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_3600_by_1",
															"typeString": "int_const 3600"
														},
														"value": "1"
													},
													"src": "669:40:32",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 5185,
												"id": 5194,
												"nodeType": "Return",
												"src": "662:47:32"
											}
										]
									},
									"documentation": {
										"id": 5179,
										"nodeType": "StructuredDocumentation",
										"src": "533:39:32",
										"text": "@dev Returns start of voting window"
									},
									"id": 5196,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "epochVoteStart",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 5182,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5181,
												"mutability": "mutable",
												"name": "timestamp",
												"nodeType": "VariableDeclaration",
												"scope": 5196,
												"src": "601:17:32",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 5180,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "601:7:32",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "600:19:32"
									},
									"returnParameters": {
										"id": 5185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5184,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 5196,
												"src": "643:7:32",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 5183,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "643:7:32",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "642:9:32"
									},
									"scope": 5217,
									"src": "577:139:32",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 5215,
										"nodeType": "Block",
										"src": "879:71:32",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 5213,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 5211,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 5209,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 5204,
																"name": "timestamp",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 5199,
																"src": "896:9:32",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 5207,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 5205,
																			"name": "timestamp",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 5199,
																			"src": "909:9:32",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "%",
																		"rightExpression": {
																			"id": 5206,
																			"name": "WEEK",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 5144,
																			"src": "921:4:32",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "909:16:32",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 5208,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "908:18:32",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "896:30:32",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"id": 5210,
															"name": "WEEK",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 5144,
															"src": "929:4:32",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "896:37:32",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"hexValue": "31",
														"id": 5212,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "936:7:32",
														"subdenomination": "hours",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_3600_by_1",
															"typeString": "int_const 3600"
														},
														"value": "1"
													},
													"src": "896:47:32",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 5203,
												"id": 5214,
												"nodeType": "Return",
												"src": "889:54:32"
											}
										]
									},
									"documentation": {
										"id": 5197,
										"nodeType": "StructuredDocumentation",
										"src": "722:79:32",
										"text": "@dev Returns end of voting window / beginning of unrestricted voting window"
									},
									"id": 5216,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "epochVoteEnd",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 5200,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5199,
												"mutability": "mutable",
												"name": "timestamp",
												"nodeType": "VariableDeclaration",
												"scope": 5216,
												"src": "828:17:32",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 5198,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "828:7:32",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "827:19:32"
									},
									"returnParameters": {
										"id": 5203,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5202,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 5216,
												"src": "870:7:32",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 5201,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "870:7:32",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "869:9:32"
									},
									"scope": 5217,
									"src": "806:144:32",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 5218,
							"src": "57:895:32"
						}
					],
					"src": "32:921:32"
				},
				"id": 32
			}
		}
	}
}