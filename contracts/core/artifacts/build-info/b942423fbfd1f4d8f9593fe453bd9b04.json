{
	"id": "b942423fbfd1f4d8f9593fe453bd9b04",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.7.6",
	"solcLongVersion": "0.7.6+commit.7338295f",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/core/VeloBot.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.7.6;\r\npragma abicoder v2;\r\n\r\nimport \"./interfaces/ICLPool.sol\";\r\n\r\nimport \"./libraries/LowGasSafeMath.sol\";\r\nimport \"./libraries/SafeCast.sol\";\r\nimport \"./libraries/Tick.sol\";\r\nimport \"./libraries/TickBitmap.sol\";\r\nimport \"./libraries/Position.sol\";\r\n\r\nimport \"./libraries/FullMath.sol\";\r\nimport \"./libraries/FixedPoint128.sol\";\r\nimport \"./libraries/TransferHelper.sol\";\r\nimport \"./libraries/TickMath.sol\";\r\nimport \"./libraries/LiquidityMath.sol\";\r\nimport \"./libraries/SqrtPriceMath.sol\";\r\n\r\nimport \"./interfaces/ICLFactory.sol\";\r\nimport \"./interfaces/IFactoryRegistry.sol\";\r\nimport \"./interfaces/IERC20Minimal.sol\";\r\nimport \"./interfaces/callback/ICLMintCallback.sol\";\r\nimport \"./interfaces/callback/ICLSwapCallback.sol\";\r\nimport \"contracts/libraries/VelodromeTimeLibrary.sol\";\r\nimport \"./IERC721.sol\";\r\nimport \"./INonfungiblePositionManager.sol\";\r\n\r\ninterface Oracle {\r\n    function GetPrice(address pooladdress) external view returns (uint256 price);\r\n}\r\n\r\n\r\ncontract V3Bot is ICLSwapCallback {\r\n    address public pool; // token0/token1 pool address\r\n    address public token0; // token0 on Optimism\r\n    address public token1; // token1 on Optimism\r\n    address public farmNFT;\r\n    address public admin;\r\n    int24 public tickSpacing;\r\n\r\n    struct Deposit {\r\n        address owner;\r\n        uint128 liquidity;\r\n        address token0;\r\n        address token1;\r\n    }\r\n\r\n    mapping(uint256 => Deposit) public deposits;\r\n\r\n    event SwapExecuted(address indexed user, uint256 amountIn, uint256 amountOut);\r\n\r\n    constructor() {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    function _newAdmin(address newAdmin) external {\r\n        require(msg.sender == admin, \"Only owner can do this\");\r\n        admin = newAdmin;\r\n    }\r\n\r\n    function _newPool(address newPool) external {\r\n        require(msg.sender == admin, \"Only owner can do this\");\r\n        pool = newPool;\r\n        token0 = ICLPoolConstants(pool).token0();\r\n        token1 = ICLPoolConstants(pool).token1();\r\n        farmNFT = ICLPoolConstants(pool).nft();\r\n        tickSpacing = ICLPoolConstants(pool).tickSpacing();\r\n    }\r\n\r\n    function _transferToAdmin(address Token) external {\r\n        uint256 value = IERC20Minimal(Token).balanceOf(address(this));\r\n        IERC20Minimal(Token).transfer(admin, value);\r\n    }\r\n\r\n    function Swap0for1(uint256 amountIn) external {\r\n        require(amountIn > 0, \"Invalid input amount\");\r\n\r\n        // Get current sqrtPriceX96 from the pool\r\n        (uint160 sqrtPriceX96, , , , , ) = ICLPoolState(pool).slot0();\r\n        uint160 sqrtPriceLimitX96 = uint160(sqrtPriceX96 * 99 / 100); // 1% slippage\r\n\r\n        // Ensure valid range\r\n        if (sqrtPriceLimitX96 <= TickMath.MIN_SQRT_RATIO) {\r\n            sqrtPriceLimitX96 = TickMath.MIN_SQRT_RATIO + 1;\r\n        }\r\n\r\n        // Approve pool to spend token0\r\n        IERC20Minimal(token0).approve(pool, amountIn);\r\n\r\n        // Prepare data for callback (not strictly needed here, but included for completeness)\r\n        bytes memory data = abi.encode(address(this));\r\n\r\n        // Call the pool's swap function\r\n        ICLPoolActions(pool).swap(\r\n            address(this),     // recipient\r\n            true,              // zeroForOne: token0 -> token1\r\n            int256(amountIn),  // exact input\r\n            sqrtPriceLimitX96, // price limit\r\n            data               // callback data\r\n        );\r\n    }\r\n\r\n    function V3Swap1for0(uint256 amountIn) external {\r\n        require(amountIn > 0, \"Invalid input amount\");\r\n\r\n        // Get current sqrtPriceX96 from the pool\r\n        (uint160 sqrtPriceX96, , , , , ) = ICLPoolState(pool).slot0();\r\n        uint160 sqrtPriceLimitX96 = uint160(sqrtPriceX96 * 101 / 100); // 1% slippage\r\n\r\n        // Ensure valid range\r\n        if (sqrtPriceLimitX96 <= TickMath.MIN_SQRT_RATIO) {\r\n            sqrtPriceLimitX96 = TickMath.MIN_SQRT_RATIO - 1;\r\n        }\r\n\r\n        // Approve pool to spend token0\r\n        IERC20Minimal(token1).approve(pool, amountIn);\r\n\r\n        // Prepare data for callback (not strictly needed here, but included for completeness)\r\n        bytes memory data = abi.encode(address(this));\r\n\r\n        // Call the pool's swap function\r\n        ICLPoolActions(pool).swap(\r\n            address(this),     // recipient\r\n            false,              // zeroForOne: token0 -> token1\r\n            int256(amountIn),  // exact input\r\n            sqrtPriceLimitX96, // price limit\r\n            data               // callback data\r\n        );\r\n    }\r\n\r\n    // This is the required callback for the pool to call after swap\r\n    function uniswapV3SwapCallback(\r\n        int256 amount0Delta,\r\n        int256 amount1Delta,\r\n        bytes calldata /* data */\r\n    ) external override {\r\n        require(msg.sender == pool, \"Callback only from pool\");\r\n\r\n        // If amount0Delta > 0, we must pay that amount of token0 to the pool\r\n        if (amount0Delta > 0) {\r\n            IERC20Minimal(token0).transfer(pool, uint256(amount0Delta));\r\n        }\r\n        // If amount1Delta > 0, we must pay that amount of token1 to the pool (not expected in token0->token1 swap)\r\n        if (amount1Delta > 0) {\r\n            IERC20Minimal(token1).transfer(pool, uint256(amount1Delta));\r\n        }\r\n    }\r\n\r\nfunction addLiquidity(uint256 amount0ToMint, uint256 amount1ToMint) external payable returns (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1){\r\n    // Approve the position manager\r\n    //Approve Tokens\r\n        IERC20Minimal(token0).approve(farmNFT, amount0ToMint);\r\n        IERC20Minimal(token1).approve(farmNFT, amount1ToMint);\r\n        (uint160 sqrtPriceX96,,,,,) = ICLPoolState(pool).slot0();\r\n\r\n        INonfungiblePositionManager.MintParams memory params =\r\n            INonfungiblePositionManager.MintParams({\r\n                token0: token0,\r\n                token1: token1,\r\n                tickSpacing: tickSpacing,\r\n                tickLower: TickMath.MIN_TICK, //add custom logic\r\n                tickUpper: TickMath.MAX_TICK, //add custom logic\r\n                amount0Desired: amount0ToMint,\r\n                amount1Desired: amount1ToMint,\r\n                amount0Min: 0,\r\n                amount1Min: 0,\r\n                recipient: address(this),\r\n                deadline: block.timestamp,\r\n                sqrtPriceX96: sqrtPriceX96\r\n            });\r\n\r\n\r\n        (tokenId, liquidity, amount0, amount1) = INonfungiblePositionManager(farmNFT).mint(params);\r\n        \r\n\r\n        _createDeposit(address(this), tokenId);\r\n\r\n}\r\n\r\n    function onERC721Received(\r\n        address operator,\r\n        address,\r\n        uint256 tokenId,\r\n        bytes calldata\r\n    ) external returns (bytes4) {\r\n        // get position information\r\n        _createDeposit(operator, tokenId);\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n        function _createDeposit(address owner, uint256 tokenId) internal {\r\n        (, , address _token0, address _token1, , , , uint128 liquidity, , , , ) =\r\n            INonfungiblePositionManager(farmNFT).positions(tokenId);\r\n\r\n        // set the owner and data for position\r\n        // operator is msg.sender\r\n        deposits[tokenId] = Deposit({owner: owner, liquidity: liquidity, token0: _token0, token1: _token1});\r\n    }\r\n\r\n\r\n}"
			},
			"contracts/core/INonfungiblePositionManager.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.7.5;\r\npragma abicoder v2;\r\n\r\n\r\n/// @title Non-fungible token for positions\r\n/// @notice Wraps CL positions in a non-fungible token interface which allows for them to be transferred\r\n/// and authorized.\r\ninterface INonfungiblePositionManager\r\n{\r\n    /// @notice Emitted when liquidity is increased for a position NFT\r\n    /// @dev Also emitted when a token is minted\r\n    /// @param tokenId The ID of the token for which liquidity was increased\r\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\r\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\r\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\r\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\r\n    /// @notice Emitted when liquidity is decreased for a position NFT\r\n    /// @param tokenId The ID of the token for which liquidity was decreased\r\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\r\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\r\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\r\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\r\n    /// @notice Emitted when tokens are collected for a position NFT\r\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\r\n    /// @param tokenId The ID of the token for which underlying tokens were collected\r\n    /// @param recipient The address of the account that received the collected tokens\r\n    /// @param amount0 The amount of token0 owed to the position that was collected\r\n    /// @param amount1 The amount of token1 owed to the position that was collected\r\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\r\n    /// @notice Emitted when a new Token Descriptor is set\r\n    /// @param tokenDescriptor Address of the new Token Descriptor\r\n    event TokenDescriptorChanged(address indexed tokenDescriptor);\r\n    /// @notice Emitted when a new Owner is set\r\n    /// @param owner Address of the new Owner\r\n    event TransferOwnership(address indexed owner);\r\n\r\n    /// @notice Returns the position information associated with a given token ID.\r\n    /// @dev Throws if the token ID is not valid.\r\n    /// @param tokenId The ID of the token that represents the position\r\n    /// @return nonce The nonce for permits\r\n    /// @return operator The address that is approved for spending\r\n    /// @return token0 The address of the token0 for a specific pool\r\n    /// @return token1 The address of the token1 for a specific pool\r\n    /// @return tickSpacing The tick spacing associated with the pool\r\n    /// @return tickLower The lower end of the tick range for the position\r\n    /// @return tickUpper The higher end of the tick range for the position\r\n    /// @return liquidity The liquidity of the position\r\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\r\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\r\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\r\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\r\n    function positions(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (\r\n            uint96 nonce,\r\n            address operator,\r\n            address token0,\r\n            address token1,\r\n            int24 tickSpacing,\r\n            int24 tickLower,\r\n            int24 tickUpper,\r\n            uint128 liquidity,\r\n            uint256 feeGrowthInside0LastX128,\r\n            uint256 feeGrowthInside1LastX128,\r\n            uint128 tokensOwed0,\r\n            uint128 tokensOwed1\r\n        );\r\n\r\n    /// @notice Returns the address of the Token Descriptor, that handles generating token URIs for Positions\r\n    function tokenDescriptor() external view returns (address);\r\n\r\n    /// @notice Returns the address of the Owner, that is allowed to set a new TokenDescriptor\r\n    function owner() external view returns (address);\r\n\r\n    struct MintParams {\r\n        address token0;\r\n        address token1;\r\n        int24 tickSpacing;\r\n        int24 tickLower;\r\n        int24 tickUpper;\r\n        uint256 amount0Desired;\r\n        uint256 amount1Desired;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint160 sqrtPriceX96;\r\n    }\r\n\r\n    /// @notice Creates a new position wrapped in a NFT\r\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\r\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\r\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\r\n    /// @return tokenId The ID of the token that represents the minted position\r\n    /// @return liquidity The amount of liquidity for this position\r\n    /// @return amount0 The amount of token0\r\n    /// @return amount1 The amount of token1\r\n    function mint(MintParams calldata params)\r\n        external\r\n        payable\r\n        returns (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\r\n\r\n    struct IncreaseLiquidityParams {\r\n        uint256 tokenId;\r\n        uint256 amount0Desired;\r\n        uint256 amount1Desired;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        uint256 deadline;\r\n    }\r\n\r\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\r\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\r\n    /// amount0Desired The desired amount of token0 to be spent,\r\n    /// amount1Desired The desired amount of token1 to be spent,\r\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\r\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\r\n    /// deadline The time by which the transaction must be included to effect the change\r\n    /// @return liquidity The new liquidity amount as a result of the increase\r\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\r\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\r\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\r\n        external\r\n        payable\r\n        returns (uint128 liquidity, uint256 amount0, uint256 amount1);\r\n\r\n    struct DecreaseLiquidityParams {\r\n        uint256 tokenId;\r\n        uint128 liquidity;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        uint256 deadline;\r\n    }\r\n\r\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\r\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\r\n    /// amount The amount by which liquidity will be decreased,\r\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\r\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\r\n    /// deadline The time by which the transaction must be included to effect the change\r\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\r\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\r\n    /// @dev The use of this function can cause a loss to users of the NonfungiblePositionManager\r\n    /// @dev for tokens that have very high decimals.\r\n    /// @dev The amount of tokens necessary for the loss is: 3.4028237e+38.\r\n    /// @dev This is equivalent to 1e20 value with 18 decimals.\r\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\r\n        external\r\n        payable\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    struct CollectParams {\r\n        uint256 tokenId;\r\n        address recipient;\r\n        uint128 amount0Max;\r\n        uint128 amount1Max;\r\n    }\r\n\r\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\r\n    /// @notice Used to update staked positions before deposit and withdraw\r\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\r\n    /// recipient The account that should receive the tokens,\r\n    /// amount0Max The maximum amount of token0 to collect,\r\n    /// amount1Max The maximum amount of token1 to collect\r\n    /// @return amount0 The amount of fees collected in token0\r\n    /// @return amount1 The amount of fees collected in token1\r\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\r\n\r\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\r\n    /// must be collected first.\r\n    /// @param tokenId The ID of the token that is being burned\r\n    function burn(uint256 tokenId) external payable;\r\n\r\n    /// @notice Sets a new Token Descriptor\r\n    /// @param _tokenDescriptor Address of the new Token Descriptor to be chosen\r\n    function setTokenDescriptor(address _tokenDescriptor) external;\r\n\r\n    /// @notice Sets a new Owner address\r\n    /// @param _owner Address of the new Owner to be chosen\r\n    function setOwner(address _owner) external;\r\n}\r\n"
			},
			"contracts/core/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.7.6;\r\npragma abicoder v2;\r\n\r\ninterface IERC721 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\r\n     *   a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\r\n     *   {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\r\n     *   a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the address zero.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n"
			},
			"contracts/libraries/VelodromeTimeLibrary.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity =0.7.6;\n\nlibrary VelodromeTimeLibrary {\n    uint256 internal constant WEEK = 7 days;\n\n    /// @dev Returns start of epoch based on current timestamp\n    function epochStart(uint256 timestamp) internal pure returns (uint256) {\n        return timestamp - (timestamp % WEEK);\n    }\n\n    /// @dev Returns start of next epoch / end of current epoch\n    function epochNext(uint256 timestamp) internal pure returns (uint256) {\n        return timestamp - (timestamp % WEEK) + WEEK;\n    }\n\n    /// @dev Returns start of voting window\n    function epochVoteStart(uint256 timestamp) internal pure returns (uint256) {\n        return timestamp - (timestamp % WEEK) + 1 hours;\n    }\n\n    /// @dev Returns end of voting window / beginning of unrestricted voting window\n    function epochVoteEnd(uint256 timestamp) internal pure returns (uint256) {\n        return timestamp - (timestamp % WEEK) + WEEK - 1 hours;\n    }\n}\n"
			},
			"contracts/core/interfaces/callback/ICLSwapCallback.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for ICLPoolActions#swap\n/// @notice Any contract that calls ICLPoolActions#swap must implement this interface\ninterface ICLSwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via ICLPool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a CLPool deployed by the canonical CLFactory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the ICLPoolActions#swap call\n    function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external;\n}\n"
			},
			"contracts/core/interfaces/callback/ICLMintCallback.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for ICLPoolActions#mint\n/// @notice Any contract that calls ICLPoolActions#mint must implement this interface\ninterface ICLMintCallback {\n    /// @notice Called to `msg.sender` after minting liquidity to a position from ICLPool#mint.\n    /// @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\n    /// The caller of this method must be checked to be a CLPool deployed by the canonical CLFactory.\n    /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\n    /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\n    /// @param data Any data passed through by the caller via the ICLPoolActions#mint call\n    function uniswapV3MintCallback(uint256 amount0Owed, uint256 amount1Owed, bytes calldata data) external;\n}\n"
			},
			"contracts/core/interfaces/IERC20Minimal.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Minimal ERC20 interface for CL\n/// @notice Contains a subset of the full ERC20 interface that is used in CL\ninterface IERC20Minimal {\n    /// @notice Returns the balance of a token\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\n    /// @return The number of tokens held by the account\n    function balanceOf(address account) external view returns (uint256);\n\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\n    /// @param recipient The account that will receive the amount transferred\n    /// @param amount The number of tokens to send from the sender to the recipient\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /// @notice Returns the current allowance given to a spender by an owner\n    /// @param owner The account of the token owner\n    /// @param spender The account of the token spender\n    /// @return The current allowance granted by `owner` to `spender`\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\n    /// @param amount The amount of tokens allowed to be used by `spender`\n    /// @return Returns true for a successful approval, false for unsuccessful\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\n    /// @param sender The account from which the transfer will be initiated\n    /// @param recipient The recipient of the transfer\n    /// @param amount The amount of the transfer\n    /// @return Returns true for a successful transfer, false for unsuccessful\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\n    /// @param value The amount of tokens that were transferred\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\n    /// @param owner The account that approved spending of its tokens\n    /// @param spender The account for which the spending allowance was modified\n    /// @param value The new allowance from the owner to the spender\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
			},
			"contracts/core/interfaces/IFactoryRegistry.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity =0.7.6;\n\ninterface IFactoryRegistry {\n    function approve(address poolFactory, address votingRewardsFactory, address gaugeFactory) external;\n\n    function isPoolFactoryApproved(address poolFactory) external returns (bool);\n\n    function factoriesToPoolFactory(address poolFactory)\n        external\n        returns (address votingRewardsFactory, address gaugeFactory);\n}\n"
			},
			"contracts/core/interfaces/ICLFactory.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport {IVoter} from \"contracts/core/interfaces/IVoter.sol\";\nimport {IFactoryRegistry} from \"contracts/core/interfaces/IFactoryRegistry.sol\";\n\n/// @title The interface for the CL Factory\n/// @notice The CL Factory facilitates creation of CL pools and control over the protocol fees\ninterface ICLFactory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when the swapFeeManager of the factory is changed\n    /// @param oldFeeManager The swapFeeManager before the swapFeeManager was changed\n    /// @param newFeeManager The swapFeeManager after the swapFeeManager was changed\n    event SwapFeeManagerChanged(address indexed oldFeeManager, address indexed newFeeManager);\n\n    /// @notice Emitted when the swapFeeModule of the factory is changed\n    /// @param oldFeeModule The swapFeeModule before the swapFeeModule was changed\n    /// @param newFeeModule The swapFeeModule after the swapFeeModule was changed\n    event SwapFeeModuleChanged(address indexed oldFeeModule, address indexed newFeeModule);\n\n    /// @notice Emitted when the unstakedFeeManager of the factory is changed\n    /// @param oldFeeManager The unstakedFeeManager before the unstakedFeeManager was changed\n    /// @param newFeeManager The unstakedFeeManager after the unstakedFeeManager was changed\n    event UnstakedFeeManagerChanged(address indexed oldFeeManager, address indexed newFeeManager);\n\n    /// @notice Emitted when the unstakedFeeModule of the factory is changed\n    /// @param oldFeeModule The unstakedFeeModule before the unstakedFeeModule was changed\n    /// @param newFeeModule The unstakedFeeModule after the unstakedFeeModule was changed\n    event UnstakedFeeModuleChanged(address indexed oldFeeModule, address indexed newFeeModule);\n\n    /// @notice Emitted when the defaultUnstakedFee of the factory is changed\n    /// @param oldUnstakedFee The defaultUnstakedFee before the defaultUnstakedFee was changed\n    /// @param newUnstakedFee The defaultUnstakedFee after the unstakedFeeModule was changed\n    event DefaultUnstakedFeeChanged(uint24 indexed oldUnstakedFee, uint24 indexed newUnstakedFee);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(address indexed token0, address indexed token1, int24 indexed tickSpacing, address pool);\n\n    /// @notice Emitted when a new tick spacing is enabled for pool creation via the factory\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools\n    /// @param fee The default fee for a pool created with a given tickSpacing\n    event TickSpacingEnabled(int24 indexed tickSpacing, uint24 indexed fee);\n\n    /// @notice The voter contract, used to create gauges\n    /// @return The address of the voter contract\n    function voter() external view returns (IVoter);\n\n    /// @notice The address of the pool implementation contract used to deploy proxies / clones\n    /// @return The address of the pool implementation contract\n    function poolImplementation() external view returns (address);\n\n    /// @notice Factory registry for valid pool / gauge / rewards factories\n    /// @return The address of the factory registry\n    function factoryRegistry() external view returns (IFactoryRegistry);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the current swapFeeManager of the factory\n    /// @dev Can be changed by the current swap fee manager via setSwapFeeManager\n    /// @return The address of the factory swapFeeManager\n    function swapFeeManager() external view returns (address);\n\n    /// @notice Returns the current swapFeeModule of the factory\n    /// @dev Can be changed by the current swap fee manager via setSwapFeeModule\n    /// @return The address of the factory swapFeeModule\n    function swapFeeModule() external view returns (address);\n\n    /// @notice Returns the current unstakedFeeManager of the factory\n    /// @dev Can be changed by the current unstaked fee manager via setUnstakedFeeManager\n    /// @return The address of the factory unstakedFeeManager\n    function unstakedFeeManager() external view returns (address);\n\n    /// @notice Returns the current unstakedFeeModule of the factory\n    /// @dev Can be changed by the current unstaked fee manager via setUnstakedFeeModule\n    /// @return The address of the factory unstakedFeeModule\n    function unstakedFeeModule() external view returns (address);\n\n    /// @notice Returns the current defaultUnstakedFee of the factory\n    /// @dev Can be changed by the current unstaked fee manager via setDefaultUnstakedFee\n    /// @return The default Unstaked Fee of the factory\n    function defaultUnstakedFee() external view returns (uint24);\n\n    /// @notice Returns a default fee for a tick spacing.\n    /// @dev Use getFee for the most up to date fee for a given pool.\n    /// A tick spacing can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param tickSpacing The enabled tick spacing. Returns 0 if not enabled\n    /// @return fee The default fee for the given tick spacing\n    function tickSpacingToFee(int24 tickSpacing) external view returns (uint24 fee);\n\n    /// @notice Returns a list of enabled tick spacings. Used to iterate through pools created by the factory\n    /// @dev Tick spacings cannot be removed. Tick spacings are not ordered\n    /// @return List of enabled tick spacings\n    function tickSpacings() external view returns (int24[] memory);\n\n    /// @notice Returns the pool address for a given pair of tokens and a tick spacing, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param tickSpacing The tick spacing of the pool\n    /// @return pool The pool address\n    function getPool(address tokenA, address tokenB, int24 tickSpacing) external view returns (address pool);\n\n    /// @notice Return address of pool created by this factory given its `index`\n    /// @param index Index of the pool\n    /// @return The pool address in the given index\n    function allPools(uint256 index) external view returns (address);\n\n    /// @notice Returns the number of pools created from this factory\n    /// @return Number of pools created from this factory\n    function allPoolsLength() external view returns (uint256);\n\n    /// @notice Used in VotingEscrow to determine if a contract is a valid pool of the factory\n    /// @param pool The address of the pool to check\n    /// @return Whether the pool is a valid pool of the factory\n    function isPair(address pool) external view returns (bool);\n\n    /// @notice Get swap & flash fee for a given pool. Accounts for default and dynamic fees\n    /// @dev Swap & flash fee is denominated in pips. i.e. 1e-6\n    /// @param pool The pool to get the swap & flash fee for\n    /// @return The swap & flash fee for the given pool\n    function getSwapFee(address pool) external view returns (uint24);\n\n    /// @notice Get unstaked fee for a given pool. Accounts for default and dynamic fees\n    /// @dev Unstaked fee is denominated in pips. i.e. 1e-6\n    /// @param pool The pool to get the unstaked fee for\n    /// @return The unstaked fee for the given pool\n    function getUnstakedFee(address pool) external view returns (uint24);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param tickSpacing The desired tick spacing for the pool\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. The call will\n    /// revert if the pool already exists, the tick spacing is invalid, or the token arguments are invalid\n    /// @return pool The address of the newly created pool\n    function createPool(address tokenA, address tokenB, int24 tickSpacing, uint160 sqrtPriceX96)\n        external\n        returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Updates the swapFeeManager of the factory\n    /// @dev Must be called by the current swap fee manager\n    /// @param _swapFeeManager The new swapFeeManager of the factory\n    function setSwapFeeManager(address _swapFeeManager) external;\n\n    /// @notice Updates the swapFeeModule of the factory\n    /// @dev Must be called by the current swap fee manager\n    /// @param _swapFeeModule The new swapFeeModule of the factory\n    function setSwapFeeModule(address _swapFeeModule) external;\n\n    /// @notice Updates the unstakedFeeManager of the factory\n    /// @dev Must be called by the current unstaked fee manager\n    /// @param _unstakedFeeManager The new unstakedFeeManager of the factory\n    function setUnstakedFeeManager(address _unstakedFeeManager) external;\n\n    /// @notice Updates the unstakedFeeModule of the factory\n    /// @dev Must be called by the current unstaked fee manager\n    /// @param _unstakedFeeModule The new unstakedFeeModule of the factory\n    function setUnstakedFeeModule(address _unstakedFeeModule) external;\n\n    /// @notice Updates the defaultUnstakedFee of the factory\n    /// @dev Must be called by the current unstaked fee manager\n    /// @param _defaultUnstakedFee The new defaultUnstakedFee of the factory\n    function setDefaultUnstakedFee(uint24 _defaultUnstakedFee) external;\n\n    /// @notice Enables a certain tickSpacing\n    /// @dev Tick spacings may never be removed once enabled\n    /// @param tickSpacing The spacing between ticks to be enforced in the pool\n    /// @param fee The default fee associated with a given tick spacing\n    function enableTickSpacing(int24 tickSpacing, uint24 fee) external;\n}\n"
			},
			"contracts/core/libraries/SqrtPriceMath.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport \"./LowGasSafeMath.sol\";\nimport \"./SafeCast.sol\";\n\nimport \"./FullMath.sol\";\nimport \"./UnsafeMath.sol\";\nimport \"./FixedPoint96.sol\";\n\n/// @title Functions based on Q64.96 sqrt price and liquidity\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\nlibrary SqrtPriceMath {\n    using LowGasSafeMath for uint256;\n    using SafeCast for uint256;\n\n    /// @notice Gets the next sqrt price given a delta of token0\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\n    /// price less in order to not send too much output.\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\n    /// @param liquidity The amount of usable liquidity\n    /// @param amount How much of token0 to add or remove from virtual reserves\n    /// @param add Whether to add or remove the amount of token0\n    /// @return The price after adding or removing amount, depending on add\n    function getNextSqrtPriceFromAmount0RoundingUp(uint160 sqrtPX96, uint128 liquidity, uint256 amount, bool add)\n        internal\n        pure\n        returns (uint160)\n    {\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\n        if (amount == 0) return sqrtPX96;\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\n\n        if (add) {\n            uint256 product;\n            if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\n                uint256 denominator = numerator1 + product;\n                if (denominator >= numerator1) {\n                    // always fits in 160 bits\n                    return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\n                }\n            }\n\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\n        } else {\n            uint256 product;\n            // if the product overflows, we know the denominator underflows\n            // in addition, we must check that the denominator does not underflow\n            require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\n            uint256 denominator = numerator1 - product;\n            return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\n        }\n    }\n\n    /// @notice Gets the next sqrt price given a delta of token1\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\n    /// price less in order to not send too much output.\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\n    /// @param liquidity The amount of usable liquidity\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\n    /// @param add Whether to add, or remove, the amount of token1\n    /// @return The price after adding or removing `amount`\n    function getNextSqrtPriceFromAmount1RoundingDown(uint160 sqrtPX96, uint128 liquidity, uint256 amount, bool add)\n        internal\n        pure\n        returns (uint160)\n    {\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\n        // in both cases, avoid a mulDiv for most inputs\n        if (add) {\n            uint256 quotient = (\n                amount <= type(uint160).max\n                    ? (amount << FixedPoint96.RESOLUTION) / liquidity\n                    : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\n            );\n\n            return uint256(sqrtPX96).add(quotient).toUint160();\n        } else {\n            uint256 quotient = (\n                amount <= type(uint160).max\n                    ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\n                    : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\n            );\n\n            require(sqrtPX96 > quotient);\n            // always fits 160 bits\n            return uint160(sqrtPX96 - quotient);\n        }\n    }\n\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\n    /// @param liquidity The amount of usable liquidity\n    /// @param amountIn How much of token0, or token1, is being swapped in\n    /// @param zeroForOne Whether the amount in is token0 or token1\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\n    function getNextSqrtPriceFromInput(uint160 sqrtPX96, uint128 liquidity, uint256 amountIn, bool zeroForOne)\n        internal\n        pure\n        returns (uint160 sqrtQX96)\n    {\n        require(sqrtPX96 > 0);\n        require(liquidity > 0);\n\n        // round to make sure that we don't pass the target price\n        return zeroForOne\n            ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\n            : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\n    }\n\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\n    /// @param sqrtPX96 The starting price before accounting for the output amount\n    /// @param liquidity The amount of usable liquidity\n    /// @param amountOut How much of token0, or token1, is being swapped out\n    /// @param zeroForOne Whether the amount out is token0 or token1\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\n    function getNextSqrtPriceFromOutput(uint160 sqrtPX96, uint128 liquidity, uint256 amountOut, bool zeroForOne)\n        internal\n        pure\n        returns (uint160 sqrtQX96)\n    {\n        require(sqrtPX96 > 0);\n        require(liquidity > 0);\n\n        // round to make sure that we pass the target price\n        return zeroForOne\n            ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\n            : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\n    }\n\n    /// @notice Gets the amount0 delta between two prices\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The amount of usable liquidity\n    /// @param roundUp Whether to round the amount up or down\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\n    function getAmount0Delta(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity, bool roundUp)\n        internal\n        pure\n        returns (uint256 amount0)\n    {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\n\n        require(sqrtRatioAX96 > 0);\n\n        return roundUp\n            ? UnsafeMath.divRoundingUp(FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96), sqrtRatioAX96)\n            : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\n    }\n\n    /// @notice Gets the amount1 delta between two prices\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The amount of usable liquidity\n    /// @param roundUp Whether to round the amount up, or down\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\n    function getAmount1Delta(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity, bool roundUp)\n        internal\n        pure\n        returns (uint256 amount1)\n    {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        return roundUp\n            ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\n            : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\n    }\n\n    /// @notice Helper that gets signed token0 delta\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\n    function getAmount0Delta(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, int128 liquidity)\n        internal\n        pure\n        returns (int256 amount0)\n    {\n        return liquidity < 0\n            ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\n            : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\n    }\n\n    /// @notice Helper that gets signed token1 delta\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\n    function getAmount1Delta(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, int128 liquidity)\n        internal\n        pure\n        returns (int256 amount1)\n    {\n        return liquidity < 0\n            ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\n            : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\n    }\n}\n"
			},
			"contracts/core/libraries/LiquidityMath.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Math library for liquidity\nlibrary LiquidityMath {\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\n    /// @param x The liquidity before change\n    /// @param y The delta by which liquidity should be changed\n    /// @return z The liquidity delta\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\n        if (y < 0) {\n            require((z = x - uint128(-y)) < x, \"LS\");\n        } else {\n            require((z = x + uint128(y)) >= x, \"LA\");\n        }\n    }\n}\n"
			},
			"contracts/core/libraries/TickMath.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0 <0.8.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n        require(absTick <= uint256(MAX_TICK), \"T\");\n\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, \"R\");\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n    }\n}\n"
			},
			"contracts/core/libraries/TransferHelper.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport \"../interfaces/IERC20Minimal.sol\";\n\n/// @title TransferHelper\n/// @notice Contains helper methods for interacting with ERC20 tokens that do not consistently return true/false\nlibrary TransferHelper {\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Calls transfer on token contract, errors with TF if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(address token, address to, uint256 value) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20Minimal.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TF\");\n    }\n}\n"
			},
			"contracts/core/libraries/FixedPoint128.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.4.0;\n\n/// @title FixedPoint128\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\nlibrary FixedPoint128 {\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\n}\n"
			},
			"contracts/core/libraries/FullMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.0 <0.8.0;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = a * b\n        // Compute the product mod 2**256 and mod 2**256 - 1\n        // then use the Chinese Remainder Theorem to reconstruct\n        // the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2**256 + prod0\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(a, b, not(0))\n            prod0 := mul(a, b)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division\n        if (prod1 == 0) {\n            require(denominator > 0);\n            assembly {\n                result := div(prod0, denominator)\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2**256.\n        // Also prevents denominator == 0\n        require(denominator > prod1);\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0]\n        // Compute remainder using mulmod\n        uint256 remainder;\n        assembly {\n            remainder := mulmod(a, b, denominator)\n        }\n        // Subtract 256 bit number from 512 bit number\n        assembly {\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator\n        // Compute largest power of two divisor of denominator.\n        // Always >= 1.\n        uint256 twos = -denominator & denominator;\n        // Divide denominator by power of two\n        assembly {\n            denominator := div(denominator, twos)\n        }\n\n        // Divide [prod1 prod0] by the factors of two\n        assembly {\n            prod0 := div(prod0, twos)\n        }\n        // Shift in bits from prod1 into prod0. For this we need\n        // to flip `twos` such that it is 2**256 / twos.\n        // If twos is zero, then it becomes one\n        assembly {\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        prod0 |= prod1 * twos;\n\n        // Invert denominator mod 2**256\n        // Now that denominator is an odd number, it has an inverse\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n        // Compute the inverse by starting with a seed that is correct\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\n        uint256 inv = (3 * denominator) ^ 2;\n        // Now use Newton-Raphson iteration to improve the precision.\n        // Thanks to Hensel's lifting lemma, this also works in modular\n        // arithmetic, doubling the correct bits in each step.\n        inv *= 2 - denominator * inv; // inverse mod 2**8\n        inv *= 2 - denominator * inv; // inverse mod 2**16\n        inv *= 2 - denominator * inv; // inverse mod 2**32\n        inv *= 2 - denominator * inv; // inverse mod 2**64\n        inv *= 2 - denominator * inv; // inverse mod 2**128\n        inv *= 2 - denominator * inv; // inverse mod 2**256\n\n        // Because the division is now exact we can divide by multiplying\n        // with the modular inverse of denominator. This will give us the\n        // correct result modulo 2**256. Since the precoditions guarantee\n        // that the outcome is less than 2**256, this is the final result.\n        // We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inv;\n        return result;\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\n        result = mulDiv(a, b, denominator);\n        if (mulmod(a, b, denominator) > 0) {\n            require(result < type(uint256).max);\n            result++;\n        }\n    }\n}\n"
			},
			"contracts/core/libraries/Position.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0 <0.8.0;\n\nimport \"./FullMath.sol\";\nimport \"./FixedPoint128.sol\";\nimport \"./LiquidityMath.sol\";\n\n/// @title Position\n/// @notice Positions represent an owner address' liquidity between a lower and upper tick boundary\n/// @dev Positions store additional state for tracking fees owed to the position\nlibrary Position {\n    // info stored for each user's position\n    struct Info {\n        // the amount of liquidity owned by this position\n        uint128 liquidity;\n        // fee growth per unit of liquidity as of the last update to liquidity or fees owed\n        uint256 feeGrowthInside0LastX128;\n        uint256 feeGrowthInside1LastX128;\n        // the fees owed to the position owner in token0/token1\n        uint128 tokensOwed0;\n        uint128 tokensOwed1;\n    }\n\n    /// @notice Returns the Info struct of a position, given an owner and position boundaries\n    /// @param self The mapping containing all user positions\n    /// @param owner The address of the position owner\n    /// @param tickLower The lower tick boundary of the position\n    /// @param tickUpper The upper tick boundary of the position\n    /// @return position The position info struct of the given owners' position\n    function get(mapping(bytes32 => Info) storage self, address owner, int24 tickLower, int24 tickUpper)\n        internal\n        view\n        returns (Position.Info storage position)\n    {\n        position = self[keccak256(abi.encodePacked(owner, tickLower, tickUpper))];\n    }\n\n    /// @notice Credits accumulated fees to a user's position\n    /// @param self The individual position to update\n    /// @param liquidityDelta The change in pool liquidity as a result of the position update\n    /// @param feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries\n    /// @param feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries\n    /// @param staked Signifies if the position is staked in the gauge or not\n    function update(\n        Info storage self,\n        int128 liquidityDelta,\n        uint256 feeGrowthInside0X128,\n        uint256 feeGrowthInside1X128,\n        bool staked\n    ) internal {\n        Info memory _self = self;\n\n        uint128 liquidityNext;\n        if (liquidityDelta == 0) {\n            require(_self.liquidity > 0, \"NP\"); // disallow pokes for 0 liquidity positions\n            liquidityNext = _self.liquidity;\n        } else {\n            liquidityNext = LiquidityMath.addDelta(_self.liquidity, liquidityDelta);\n        }\n\n        uint128 tokensOwed0;\n        uint128 tokensOwed1;\n        if (!staked) {\n            // calculate accumulated fees\n            tokensOwed0 = uint128(\n                FullMath.mulDiv(\n                    feeGrowthInside0X128 - _self.feeGrowthInside0LastX128, _self.liquidity, FixedPoint128.Q128\n                )\n            );\n            tokensOwed1 = uint128(\n                FullMath.mulDiv(\n                    feeGrowthInside1X128 - _self.feeGrowthInside1LastX128, _self.liquidity, FixedPoint128.Q128\n                )\n            );\n        }\n\n        // update the position\n        if (liquidityDelta != 0) self.liquidity = liquidityNext;\n        self.feeGrowthInside0LastX128 = feeGrowthInside0X128;\n        self.feeGrowthInside1LastX128 = feeGrowthInside1X128;\n        if (tokensOwed0 > 0 || tokensOwed1 > 0) {\n            // overflow is acceptable, have to withdraw before you hit type(uint128).max fees\n            self.tokensOwed0 += tokensOwed0;\n            self.tokensOwed1 += tokensOwed1;\n        }\n    }\n}\n"
			},
			"contracts/core/libraries/TickBitmap.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport \"./BitMath.sol\";\n\n/// @title Packed tick initialized state library\n/// @notice Stores a packed mapping of tick index to its initialized state\n/// @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\nlibrary TickBitmap {\n    /// @notice Computes the position in the mapping where the initialized bit for a tick lives\n    /// @param tick The tick for which to compute the position\n    /// @return wordPos The key in the mapping containing the word in which the bit is stored\n    /// @return bitPos The bit position in the word where the flag is stored\n    function position(int24 tick) private pure returns (int16 wordPos, uint8 bitPos) {\n        wordPos = int16(tick >> 8);\n        bitPos = uint8(tick % 256);\n    }\n\n    /// @notice Flips the initialized state for a given tick from false to true, or vice versa\n    /// @param self The mapping in which to flip the tick\n    /// @param tick The tick to flip\n    /// @param tickSpacing The spacing between usable ticks\n    function flipTick(mapping(int16 => uint256) storage self, int24 tick, int24 tickSpacing) internal {\n        require(tick % tickSpacing == 0); // ensure that the tick is spaced\n        (int16 wordPos, uint8 bitPos) = position(tick / tickSpacing);\n        uint256 mask = 1 << bitPos;\n        self[wordPos] ^= mask;\n    }\n\n    /// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\n    /// to the left (less than or equal to) or right (greater than) of the given tick\n    /// @param self The mapping in which to compute the next initialized tick\n    /// @param tick The starting tick\n    /// @param tickSpacing The spacing between usable ticks\n    /// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\n    /// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\n    /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\n    function nextInitializedTickWithinOneWord(\n        mapping(int16 => uint256) storage self,\n        int24 tick,\n        int24 tickSpacing,\n        bool lte\n    ) internal view returns (int24 next, bool initialized) {\n        int24 compressed = tick / tickSpacing;\n        if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\n\n        if (lte) {\n            (int16 wordPos, uint8 bitPos) = position(compressed);\n            // all the 1s at or to the right of the current bitPos\n            uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\n            uint256 masked = self[wordPos] & mask;\n\n            // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\n            initialized = masked != 0;\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\n            next = initialized\n                ? (compressed - int24(bitPos - BitMath.mostSignificantBit(masked))) * tickSpacing\n                : (compressed - int24(bitPos)) * tickSpacing;\n        } else {\n            // start from the word of the next tick, since the current tick state doesn't matter\n            (int16 wordPos, uint8 bitPos) = position(compressed + 1);\n            // all the 1s at or to the left of the bitPos\n            uint256 mask = ~((1 << bitPos) - 1);\n            uint256 masked = self[wordPos] & mask;\n\n            // if there are no initialized ticks to the left of the current tick, return leftmost in the word\n            initialized = masked != 0;\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\n            next = initialized\n                ? (compressed + 1 + int24(BitMath.leastSignificantBit(masked) - bitPos)) * tickSpacing\n                : (compressed + 1 + int24(type(uint8).max - bitPos)) * tickSpacing;\n        }\n    }\n}\n"
			},
			"contracts/core/libraries/Tick.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0 <0.8.0;\n\nimport \"./LowGasSafeMath.sol\";\nimport \"./SafeCast.sol\";\n\nimport \"./TickMath.sol\";\nimport \"./LiquidityMath.sol\";\n\n/// @title Tick\n/// @notice Contains functions for managing tick processes and relevant calculations\nlibrary Tick {\n    using LowGasSafeMath for int256;\n    using SafeCast for int256;\n\n    // info stored for each initialized individual tick\n    struct Info {\n        // the total position liquidity that references this tick\n        // includes both staked and unstaked liquidity\n        uint128 liquidityGross;\n        // amount of net liquidity added (subtracted) when tick is crossed from left to right (right to left)\n        // includes both staked and unstaked liquidity\n        int128 liquidityNet;\n        // amount of net staked liquidity added (subtracted) when tick is crossed from left to right (right to left)\n        int128 stakedLiquidityNet;\n        // fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)\n        // only has relative meaning, not absolute — the value depends on when the tick is initialized\n        uint256 feeGrowthOutside0X128;\n        uint256 feeGrowthOutside1X128;\n        // reward growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)\n        // only has relative meaning, not absolute — the value depends on when the tick is initialized\n        uint256 rewardGrowthOutsideX128;\n        // the cumulative tick value on the other side of the tick\n        int56 tickCumulativeOutside;\n        // the seconds per unit of liquidity on the _other_ side of this tick (relative to the current tick)\n        // only has relative meaning, not absolute — the value depends on when the tick is initialized\n        uint160 secondsPerLiquidityOutsideX128;\n        // the seconds spent on the other side of the tick (relative to the current tick)\n        // only has relative meaning, not absolute — the value depends on when the tick is initialized\n        uint32 secondsOutside;\n        // true iff the tick is initialized, i.e. the value is exactly equivalent to the expression liquidityGross != 0\n        // these 8 bits are set to prevent fresh sstores when crossing newly initialized ticks\n        bool initialized;\n    }\n\n    struct LiquidityNets {\n        int128 liquidityNet;\n        int128 stakedLiquidityNet;\n    }\n\n    /// @notice Derives max liquidity per tick from given tick spacing\n    /// @dev Executed within the pool constructor\n    /// @param tickSpacing The amount of required tick separation, realized in multiples of `tickSpacing`\n    ///     e.g., a tickSpacing of 3 requires ticks to be initialized every 3rd tick i.e., ..., -6, -3, 0, 3, 6, ...\n    /// @return The max liquidity per tick\n    function tickSpacingToMaxLiquidityPerTick(int24 tickSpacing) internal pure returns (uint128) {\n        int24 minTick = (TickMath.MIN_TICK / tickSpacing) * tickSpacing;\n        int24 maxTick = (TickMath.MAX_TICK / tickSpacing) * tickSpacing;\n        uint24 numTicks = uint24((maxTick - minTick) / tickSpacing) + 1;\n        return type(uint128).max / numTicks;\n    }\n\n    /// @notice Retrieves fee growth data\n    /// @param self The mapping containing all tick information for initialized ticks\n    /// @param tickLower The lower tick boundary of the position\n    /// @param tickUpper The upper tick boundary of the position\n    /// @param tickCurrent The current tick\n    /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\n    /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\n    /// @return feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries\n    /// @return feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries\n    function getFeeGrowthInside(\n        mapping(int24 => Tick.Info) storage self,\n        int24 tickLower,\n        int24 tickUpper,\n        int24 tickCurrent,\n        uint256 feeGrowthGlobal0X128,\n        uint256 feeGrowthGlobal1X128\n    ) internal view returns (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) {\n        Info storage lower = self[tickLower];\n        Info storage upper = self[tickUpper];\n\n        // calculate fee growth below\n        uint256 feeGrowthBelow0X128;\n        uint256 feeGrowthBelow1X128;\n        if (tickCurrent >= tickLower) {\n            feeGrowthBelow0X128 = lower.feeGrowthOutside0X128;\n            feeGrowthBelow1X128 = lower.feeGrowthOutside1X128;\n        } else {\n            feeGrowthBelow0X128 = feeGrowthGlobal0X128 - lower.feeGrowthOutside0X128;\n            feeGrowthBelow1X128 = feeGrowthGlobal1X128 - lower.feeGrowthOutside1X128;\n        }\n\n        // calculate fee growth above\n        uint256 feeGrowthAbove0X128;\n        uint256 feeGrowthAbove1X128;\n        if (tickCurrent < tickUpper) {\n            feeGrowthAbove0X128 = upper.feeGrowthOutside0X128;\n            feeGrowthAbove1X128 = upper.feeGrowthOutside1X128;\n        } else {\n            feeGrowthAbove0X128 = feeGrowthGlobal0X128 - upper.feeGrowthOutside0X128;\n            feeGrowthAbove1X128 = feeGrowthGlobal1X128 - upper.feeGrowthOutside1X128;\n        }\n\n        feeGrowthInside0X128 = feeGrowthGlobal0X128 - feeGrowthBelow0X128 - feeGrowthAbove0X128;\n        feeGrowthInside1X128 = feeGrowthGlobal1X128 - feeGrowthBelow1X128 - feeGrowthAbove1X128;\n    }\n\n    function getRewardGrowthInside(\n        mapping(int24 => Tick.Info) storage self,\n        int24 tickLower,\n        int24 tickUpper,\n        int24 tickCurrent,\n        uint256 rewardGrowthGlobalX128\n    ) internal view returns (uint256 rewardGrowthInsideX128) {\n        Info storage lower = self[tickLower];\n        Info storage upper = self[tickUpper];\n\n        // calculate reward growth below\n        uint256 rewardGrowthBelowX128;\n        if (tickCurrent >= tickLower) {\n            rewardGrowthBelowX128 = lower.rewardGrowthOutsideX128;\n        } else {\n            rewardGrowthBelowX128 = rewardGrowthGlobalX128 - lower.rewardGrowthOutsideX128;\n        }\n\n        // calculate reward growth above\n        uint256 rewardGrowthAboveX128;\n        if (tickCurrent < tickUpper) {\n            rewardGrowthAboveX128 = upper.rewardGrowthOutsideX128;\n        } else {\n            rewardGrowthAboveX128 = rewardGrowthGlobalX128 - upper.rewardGrowthOutsideX128;\n        }\n\n        rewardGrowthInsideX128 = rewardGrowthGlobalX128 - rewardGrowthBelowX128 - rewardGrowthAboveX128;\n    }\n\n    /// @notice Updates a tick and returns true if the tick was flipped from initialized to uninitialized, or vice versa\n    /// @param self The mapping containing all tick information for initialized ticks\n    /// @param tick The tick that will be updated\n    /// @param tickCurrent The current tick\n    /// @param liquidityDelta A new amount of liquidity to be added (subtracted) when tick is crossed from left to right (right to left)\n    /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\n    /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\n    /// @param rewardGrowthGlobalX128 The all-time global reward growth, per unit of liquidity\n    /// @param secondsPerLiquidityCumulativeX128 The all-time seconds per max(1, liquidity) of the pool\n    /// @param tickCumulative The tick * time elapsed since the pool was first initialized\n    /// @param time The current block timestamp cast to a uint32\n    /// @param upper true for updating a position's upper tick, or false for updating a position's lower tick\n    /// @param maxLiquidity The maximum liquidity allocation for a single tick\n    /// @return flipped Whether the tick was flipped from initialized to uninitialized, or vice versa\n    function update(\n        mapping(int24 => Tick.Info) storage self,\n        int24 tick,\n        int24 tickCurrent,\n        int128 liquidityDelta,\n        uint256 feeGrowthGlobal0X128,\n        uint256 feeGrowthGlobal1X128,\n        uint256 rewardGrowthGlobalX128,\n        uint160 secondsPerLiquidityCumulativeX128,\n        int56 tickCumulative,\n        uint32 time,\n        bool upper,\n        uint128 maxLiquidity\n    ) internal returns (bool flipped) {\n        Tick.Info storage info = self[tick];\n\n        uint128 liquidityGrossBefore = info.liquidityGross;\n        uint128 liquidityGrossAfter = LiquidityMath.addDelta(liquidityGrossBefore, liquidityDelta);\n\n        require(liquidityGrossAfter <= maxLiquidity, \"LO\");\n\n        flipped = (liquidityGrossAfter == 0) != (liquidityGrossBefore == 0);\n\n        if (liquidityGrossBefore == 0) {\n            // by convention, we assume that all growth before a tick was initialized happened _below_ the tick\n            if (tick <= tickCurrent) {\n                info.feeGrowthOutside0X128 = feeGrowthGlobal0X128;\n                info.feeGrowthOutside1X128 = feeGrowthGlobal1X128;\n                info.rewardGrowthOutsideX128 = rewardGrowthGlobalX128;\n                info.secondsPerLiquidityOutsideX128 = secondsPerLiquidityCumulativeX128;\n                info.tickCumulativeOutside = tickCumulative;\n                info.secondsOutside = time;\n            }\n            info.initialized = true;\n        }\n\n        info.liquidityGross = liquidityGrossAfter;\n\n        // when the lower (upper) tick is crossed left to right (right to left), liquidity must be added (removed)\n        info.liquidityNet = upper\n            ? int256(info.liquidityNet).sub(liquidityDelta).toInt128()\n            : int256(info.liquidityNet).add(liquidityDelta).toInt128();\n    }\n\n    /// @notice Updates the staked liquidity component of a tick. Assumes tick is already initialized with an existing position.\n    /// @notice We reuse existing liquidity for staking, so there is no change in liquidity\n    /// @param self The mapping containing all tick information for initialized ticks\n    /// @param tick The tick that will be updated\n    /// @param stakedLiquidityDelta The amount of staked liquidity to be added (subtracted) when tick is crossed from left to right (right to left)\n    /// @param upper true for updating a position's upper tick, or false for updating a position's lower tick\n    function updateStake(mapping(int24 => Tick.Info) storage self, int24 tick, int128 stakedLiquidityDelta, bool upper)\n        internal\n    {\n        Tick.Info storage info = self[tick];\n        // when the lower (upper) tick is crossed left to right (right to left), staked liquidity must be added (removed)\n        info.stakedLiquidityNet = upper\n            ? int256(info.stakedLiquidityNet).sub(stakedLiquidityDelta).toInt128()\n            : int256(info.stakedLiquidityNet).add(stakedLiquidityDelta).toInt128();\n    }\n\n    /// @notice Clears tick data\n    /// @param self The mapping containing all initialized tick information for initialized ticks\n    /// @param tick The tick that will be cleared\n    function clear(mapping(int24 => Tick.Info) storage self, int24 tick) internal {\n        delete self[tick];\n    }\n\n    /// @notice Transitions to next tick as needed by price movement\n    /// @param self The mapping containing all tick information for initialized ticks\n    /// @param tick The destination tick of the transition\n    /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\n    /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\n    /// @param secondsPerLiquidityCumulativeX128 The current seconds per liquidity\n    /// @param tickCumulative The tick * time elapsed since the pool was first initialized\n    /// @param time The current block.timestamp\n    /// @param rewardGrowthGlobalX128 The all-time global reward growth, per unit of liquidity\n    /// @return nets The amount of liquidity and staked liquidity added (subtracted) when tick is crossed from left to right (right to left)\n    function cross(\n        mapping(int24 => Tick.Info) storage self,\n        int24 tick,\n        uint256 feeGrowthGlobal0X128,\n        uint256 feeGrowthGlobal1X128,\n        uint160 secondsPerLiquidityCumulativeX128,\n        int56 tickCumulative,\n        uint32 time,\n        uint256 rewardGrowthGlobalX128\n    ) internal returns (LiquidityNets memory nets) {\n        Tick.Info storage info = self[tick];\n        info.feeGrowthOutside0X128 = feeGrowthGlobal0X128 - info.feeGrowthOutside0X128;\n        info.feeGrowthOutside1X128 = feeGrowthGlobal1X128 - info.feeGrowthOutside1X128;\n        info.rewardGrowthOutsideX128 = rewardGrowthGlobalX128 - info.rewardGrowthOutsideX128;\n        info.secondsPerLiquidityOutsideX128 = secondsPerLiquidityCumulativeX128 - info.secondsPerLiquidityOutsideX128;\n        info.tickCumulativeOutside = tickCumulative - info.tickCumulativeOutside;\n        info.secondsOutside = time - info.secondsOutside;\n        nets.liquidityNet = info.liquidityNet;\n        nets.stakedLiquidityNet = info.stakedLiquidityNet;\n    }\n}\n"
			},
			"contracts/core/libraries/SafeCast.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Safe casting methods\n/// @notice Contains methods for safely casting between types\nlibrary SafeCast {\n    /// @notice Cast a uint256 to a uint160, revert on overflow\n    /// @param y The uint256 to be downcasted\n    /// @return z The downcasted integer, now type uint160\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\n        require((z = uint160(y)) == y);\n    }\n\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\n    /// @param y The int256 to be downcasted\n    /// @return z The downcasted integer, now type int128\n    function toInt128(int256 y) internal pure returns (int128 z) {\n        require((z = int128(y)) == y);\n    }\n\n    /// @notice Cast a uint256 to a int256, revert on overflow\n    /// @param y The uint256 to be casted\n    /// @return z The casted integer, now type int256\n    function toInt256(uint256 y) internal pure returns (int256 z) {\n        require(y < 2 ** 255);\n        z = int256(y);\n    }\n}\n"
			},
			"contracts/core/libraries/LowGasSafeMath.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.0;\n\n/// @title Optimized overflow and underflow safe math operations\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\nlibrary LowGasSafeMath {\n    /// @notice Returns x + y, reverts if sum overflows uint256\n    /// @param x The augend\n    /// @param y The addend\n    /// @return z The sum of x and y\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x);\n    }\n\n    /// @notice Returns x - y, reverts if underflows\n    /// @param x The minuend\n    /// @param y The subtrahend\n    /// @return z The difference of x and y\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x);\n    }\n\n    /// @notice Returns x * y, reverts if overflows\n    /// @param x The multiplicand\n    /// @param y The multiplier\n    /// @return z The product of x and y\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(x == 0 || (z = x * y) / x == y);\n    }\n\n    /// @notice Returns x + y, reverts if overflows or underflows\n    /// @param x The augend\n    /// @param y The addend\n    /// @return z The sum of x and y\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\n        require((z = x + y) >= x == (y >= 0));\n    }\n\n    /// @notice Returns x - y, reverts if overflows or underflows\n    /// @param x The minuend\n    /// @param y The subtrahend\n    /// @return z The difference of x and y\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\n        require((z = x - y) <= x == (y >= 0));\n    }\n}\n"
			},
			"contracts/core/interfaces/ICLPool.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport \"./pool/ICLPoolConstants.sol\";\nimport \"./pool/ICLPoolState.sol\";\nimport \"./pool/ICLPoolDerivedState.sol\";\nimport \"./pool/ICLPoolActions.sol\";\nimport \"./pool/ICLPoolOwnerActions.sol\";\nimport \"./pool/ICLPoolEvents.sol\";\n\n/// @title The interface for a CL Pool\n/// @notice A CL pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface ICLPool is\n    ICLPoolConstants,\n    ICLPoolState,\n    ICLPoolDerivedState,\n    ICLPoolActions,\n    ICLPoolEvents,\n    ICLPoolOwnerActions\n{}\n"
			},
			"contracts/core/libraries/BitMath.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title BitMath\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\nlibrary BitMath {\n    /// @notice Returns the index of the most significant bit of the number,\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\n    /// @dev The function satisfies the property:\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\n    /// @return r the index of the most significant bit\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\n        require(x > 0);\n\n        if (x >= 0x100000000000000000000000000000000) {\n            x >>= 128;\n            r += 128;\n        }\n        if (x >= 0x10000000000000000) {\n            x >>= 64;\n            r += 64;\n        }\n        if (x >= 0x100000000) {\n            x >>= 32;\n            r += 32;\n        }\n        if (x >= 0x10000) {\n            x >>= 16;\n            r += 16;\n        }\n        if (x >= 0x100) {\n            x >>= 8;\n            r += 8;\n        }\n        if (x >= 0x10) {\n            x >>= 4;\n            r += 4;\n        }\n        if (x >= 0x4) {\n            x >>= 2;\n            r += 2;\n        }\n        if (x >= 0x2) r += 1;\n    }\n\n    /// @notice Returns the index of the least significant bit of the number,\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\n    /// @dev The function satisfies the property:\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\n    /// @return r the index of the least significant bit\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\n        require(x > 0);\n\n        r = 255;\n        if (x & type(uint128).max > 0) {\n            r -= 128;\n        } else {\n            x >>= 128;\n        }\n        if (x & type(uint64).max > 0) {\n            r -= 64;\n        } else {\n            x >>= 64;\n        }\n        if (x & type(uint32).max > 0) {\n            r -= 32;\n        } else {\n            x >>= 32;\n        }\n        if (x & type(uint16).max > 0) {\n            r -= 16;\n        } else {\n            x >>= 16;\n        }\n        if (x & type(uint8).max > 0) {\n            r -= 8;\n        } else {\n            x >>= 8;\n        }\n        if (x & 0xf > 0) {\n            r -= 4;\n        } else {\n            x >>= 4;\n        }\n        if (x & 0x3 > 0) {\n            r -= 2;\n        } else {\n            x >>= 2;\n        }\n        if (x & 0x1 > 0) r -= 1;\n    }\n}\n"
			},
			"contracts/core/libraries/FixedPoint96.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.4.0;\n\n/// @title FixedPoint96\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\n/// @dev Used in SqrtPriceMath.sol\nlibrary FixedPoint96 {\n    uint8 internal constant RESOLUTION = 96;\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\n}\n"
			},
			"contracts/core/libraries/UnsafeMath.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Math functions that do not check inputs or outputs\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\nlibrary UnsafeMath {\n    /// @notice Returns ceil(x / y)\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\n    /// @param x The dividend\n    /// @param y The divisor\n    /// @return z The quotient, ceil(x / y)\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        assembly {\n            z := add(div(x, y), gt(mod(x, y), 0))\n        }\n    }\n}\n"
			},
			"contracts/core/interfaces/pool/ICLPoolEvents.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface ICLPoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld, uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the gauge\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectFees(address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
			},
			"contracts/core/interfaces/pool/ICLPoolOwnerActions.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface ICLPoolOwnerActions {\n    /// @notice Collect the gauge fee accrued to the pool\n    /// @return amount0 The gauge fee collected in token0\n    /// @return amount1 The gauge fee collected in token1\n    function collectFees() external returns (uint128 amount0, uint128 amount1);\n}\n"
			},
			"contracts/core/interfaces/pool/ICLPoolActions.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface ICLPoolActions {\n    /// @notice Initialize function used in proxy deployment\n    /// @dev Can be called once only\n    /// Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @dev not locked because it initializes unlocked\n    /// @param _factory The CL factory contract address\n    /// @param _token0 The first token of the pool by address sort order\n    /// @param _token1 The second token of the pool by address sort order\n    /// @param _tickSpacing The pool tick spacing\n    /// @param _factoryRegistry The address of the factory registry managing the pool factory\n    /// @param _sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    function initialize(\n        address _factory,\n        address _token0,\n        address _token1,\n        int24 _tickSpacing,\n        address _factoryRegistry,\n        uint160 _sqrtPriceX96\n    ) external;\n\n    /// @notice Initialize gauge and nft manager\n    /// @dev Callable only once, by the gauge factory\n    /// @param _gauge The gauge corresponding to this pool\n    /// @param _nft The position manager used for position management\n    function setGaugeAndPositionManager(address _gauge, address _nft) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of ICLMintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(address recipient, int24 tickLower, int24 tickUpper, uint128 amount, bytes calldata data)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @param owner Owner of the position in the pool (nft manager or gauge)\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested,\n        address owner\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(int24 tickLower, int24 tickUpper, uint128 amount)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Burn liquidity from the supplied owner and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @param owner Owner of the position in the pool (nft manager or gauge)\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(int24 tickLower, int24 tickUpper, uint128 amount, address owner)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Convert existing liquidity into staked liquidity\n    /// @notice Only callable by the gauge associated with this pool\n    /// @param stakedLiquidityDelta The amount by which to increase or decrease the staked liquidity\n    /// @param tickLower The lower tick of the position for which to stake liquidity\n    /// @param tickUpper The upper tick of the position for which to stake liquidity\n    /// @param positionUpdate If the nft and gauge position should be updated\n    function stake(int128 stakedLiquidityDelta, int24 tickLower, int24 tickUpper, bool positionUpdate) external;\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of ICLSwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of ICLFlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(address recipient, uint256 amount0, uint256 amount1, bytes calldata data) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n\n    /// @notice Updates rewardGrowthGlobalX128 every time when any tick is crossed,\n    /// or when any position is staked/unstaked from the gauge\n    function updateRewardsGrowthGlobal() external;\n\n    /// @notice Syncs rewards with gauge\n    /// @param rewardRate the rate rewards being distributed during the epoch\n    /// @param rewardReserve the available rewards to be distributed during the epoch\n    /// @param periodFinish the end of the current period of rewards, updated once per epoch\n    function syncReward(uint256 rewardRate, uint256 rewardReserve, uint256 periodFinish) external;\n}\n"
			},
			"contracts/core/interfaces/pool/ICLPoolDerivedState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface ICLPoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (int56 tickCumulativeInside, uint160 secondsPerLiquidityInsideX128, uint32 secondsInside);\n}\n"
			},
			"contracts/core/interfaces/pool/ICLPoolState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface ICLPoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            bool unlocked\n        );\n\n    /// @notice The pool's swap & flash fee in pips, i.e. 1e-6\n    /// @dev Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.\n    /// @return The swap & flash fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool's unstaked fee in pips, i.e. 1e-6\n    /// @dev Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.\n    /// @return The unstaked fee\n    function unstakedFee() external view returns (uint24);\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The reward growth as a Q128.128 rewards of emission collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function rewardGrowthGlobalX128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the gauge\n    /// @dev Gauge fees will never exceed uint128 max in either token\n    function gaugeFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice the emission rate of time-based farming\n    function rewardRate() external view returns (uint256);\n\n    /// @notice acts as a virtual reserve that holds information on how many rewards are yet to be distributed\n    function rewardReserve() external view returns (uint256);\n\n    /// @notice timestamp of the end of the current epoch's rewards\n    function periodFinish() external view returns (uint256);\n\n    /// @notice last time the rewardReserve and rewardRate were updated\n    function lastUpdated() external view returns (uint32);\n\n    /// @notice tracks total rewards distributed when no staked liquidity in active tick for epoch ending at periodFinish\n    /// @notice this amount is rolled over on the next call to notifyRewardAmount\n    /// @dev rollover will always be smaller than the rewards distributed that epoch\n    function rollover() external view returns (uint256);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    /// @dev This value includes staked liquidity\n    function liquidity() external view returns (uint128);\n\n    /// @notice The currently in range staked liquidity available to the pool\n    /// @dev This value has no relationship to the total staked liquidity across all ticks\n    function stakedLiquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// stakedLiquidityNet how much staked liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// rewardGrowthOutsideX128 the reward growth on the other side of the tick from the current tick in emission token\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            int128 stakedLiquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            uint256 rewardGrowthOutsideX128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n\n    /// @notice Returns data about reward growth within a tick range.\n    /// RewardGrowthGlobalX128 can be supplied as a parameter for claimable reward calculations.\n    /// @dev Used in gauge reward/earned calculations\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @param _rewardGrowthGlobalX128 a calculated rewardGrowthGlobalX128 or 0 (in case of 0 it means we use the rewardGrowthGlobalX128 from state)\n    /// @return rewardGrowthInsideX128 The reward growth in the range\n    function getRewardGrowthInside(int24 tickLower, int24 tickUpper, uint256 _rewardGrowthGlobalX128)\n        external\n        view\n        returns (uint256 rewardGrowthInsideX128);\n}\n"
			},
			"contracts/core/interfaces/pool/ICLPoolConstants.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are not defined as immutable (due to proxy pattern) but are effectively immutable.\n/// @notice i.e., the methods will always return the same values\ninterface ICLPoolConstants {\n    /// @notice The contract that deployed the pool, which must adhere to the ICLFactory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The gauge corresponding to this pool\n    /// @return The gauge contract address\n    function gauge() external view returns (address);\n\n    /// @notice The nft manager\n    /// @return The nft manager contract address\n    function nft() external view returns (address);\n\n    /// @notice The factory registry that manages pool <> gauge <> reward factory relationships\n    /// @return The factory registry contract address\n    function factoryRegistry() external view returns (address);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
			},
			"contracts/core/interfaces/IVoter.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity =0.7.6;\npragma abicoder v2;\n\nimport {IVotingEscrow} from \"contracts/core/interfaces/IVotingEscrow.sol\";\nimport {IFactoryRegistry} from \"contracts/core/interfaces/IFactoryRegistry.sol\";\n\ninterface IVoter {\n    function ve() external view returns (IVotingEscrow);\n\n    function vote(uint256 _tokenId, address[] calldata _poolVote, uint256[] calldata _weights) external;\n\n    function gauges(address _pool) external view returns (address);\n\n    function gaugeToFees(address _gauge) external view returns (address);\n\n    function gaugeToBribes(address _gauge) external view returns (address);\n\n    function createGauge(address _poolFactory, address _pool) external returns (address);\n\n    function distribute(address gauge) external;\n\n    function factoryRegistry() external view returns (IFactoryRegistry);\n\n    /// @dev Utility to distribute to gauges of pools in array.\n    /// @param _gauges Array of gauges to distribute to.\n    function distribute(address[] memory _gauges) external;\n\n    function isAlive(address _gauge) external view returns (bool);\n\n    function killGauge(address _gauge) external;\n\n    function emergencyCouncil() external view returns (address);\n\n    /// @notice Claim emissions from gauges.\n    /// @param _gauges Array of gauges to collect emissions from.\n    function claimRewards(address[] memory _gauges) external;\n\n    /// @notice Claim fees for a given NFT.\n    /// @dev Utility to help batch fee claims.\n    /// @param _fees    Array of FeesVotingReward contracts to collect from.\n    /// @param _tokens  Array of tokens that are used as fees.\n    /// @param _tokenId Id of veNFT that you wish to claim fees for.\n    function claimFees(address[] memory _fees, address[][] memory _tokens, uint256 _tokenId) external;\n}\n"
			},
			"contracts/core/interfaces/IVotingEscrow.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity =0.7.6;\n\ninterface IVotingEscrow {\n    function team() external returns (address);\n\n    /// @notice Deposit `_value` tokens for `msg.sender` and lock for `_lockDuration`\n    /// @param _value Amount to deposit\n    /// @param _lockDuration Number of seconds to lock tokens for (rounded down to nearest week)\n    /// @return TokenId of created veNFT\n    function createLock(uint256 _value, uint256 _lockDuration) external returns (uint256);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"contracts/core/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC-721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC-721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/IERC721.sol\":{\"keccak256\":\"0xa5d0054dd7767bd5a6b897102ce1ec058a8d36b0c34f49a394e2b9d302f4700d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://852f1c467f89daa70d729231e543b11c47e2f125202ed123fe9ac9410868fd64\",\"dweb:/ipfs/QmeaFw32FQ9QAXen9EKZkafK4jfXogcEGex4R446DQjJ5i\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/core/INonfungiblePositionManager.sol": {
				"INonfungiblePositionManager": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "DecreaseLiquidity",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "IncreaseLiquidity",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "tokenDescriptor",
									"type": "address"
								}
							],
							"name": "TokenDescriptorChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "TransferOwnership",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint128",
											"name": "amount0Max",
											"type": "uint128"
										},
										{
											"internalType": "uint128",
											"name": "amount1Max",
											"type": "uint128"
										}
									],
									"internalType": "struct INonfungiblePositionManager.CollectParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "uint128",
											"name": "liquidity",
											"type": "uint128"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct INonfungiblePositionManager.DecreaseLiquidityParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "decreaseLiquidity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct INonfungiblePositionManager.IncreaseLiquidityParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "increaseLiquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "token0",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "token1",
											"type": "address"
										},
										{
											"internalType": "int24",
											"name": "tickSpacing",
											"type": "int24"
										},
										{
											"internalType": "int24",
											"name": "tickLower",
											"type": "int24"
										},
										{
											"internalType": "int24",
											"name": "tickUpper",
											"type": "int24"
										},
										{
											"internalType": "uint256",
											"name": "amount0Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint160",
											"name": "sqrtPriceX96",
											"type": "uint160"
										}
									],
									"internalType": "struct INonfungiblePositionManager.MintParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint96",
									"name": "nonce",
									"type": "uint96"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								}
							],
							"name": "setOwner",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_tokenDescriptor",
									"type": "address"
								}
							],
							"name": "setTokenDescriptor",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tokenDescriptor",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Collect(uint256,address,uint256,uint256)": {
								"details": "The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior",
								"params": {
									"amount0": "The amount of token0 owed to the position that was collected",
									"amount1": "The amount of token1 owed to the position that was collected",
									"recipient": "The address of the account that received the collected tokens",
									"tokenId": "The ID of the token for which underlying tokens were collected"
								}
							},
							"DecreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"params": {
									"amount0": "The amount of token0 that was accounted for the decrease in liquidity",
									"amount1": "The amount of token1 that was accounted for the decrease in liquidity",
									"liquidity": "The amount by which liquidity for the NFT position was decreased",
									"tokenId": "The ID of the token for which liquidity was decreased"
								}
							},
							"IncreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"details": "Also emitted when a token is minted",
								"params": {
									"amount0": "The amount of token0 that was paid for the increase in liquidity",
									"amount1": "The amount of token1 that was paid for the increase in liquidity",
									"liquidity": "The amount by which liquidity for the NFT position was increased",
									"tokenId": "The ID of the token for which liquidity was increased"
								}
							},
							"TokenDescriptorChanged(address)": {
								"params": {
									"tokenDescriptor": "Address of the new Token Descriptor"
								}
							},
							"TransferOwnership(address)": {
								"params": {
									"owner": "Address of the new Owner"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"burn(uint256)": {
								"params": {
									"tokenId": "The ID of the token that is being burned"
								}
							},
							"collect((uint256,address,uint128,uint128))": {
								"params": {
									"params": "tokenId The ID of the NFT for which tokens are being collected, recipient The account that should receive the tokens, amount0Max The maximum amount of token0 to collect, amount1Max The maximum amount of token1 to collect"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": {
								"details": "The use of this function can cause a loss to users of the NonfungiblePositionManagerfor tokens that have very high decimals.The amount of tokens necessary for the loss is: 3.4028237e+38.This is equivalent to 1e20 value with 18 decimals.",
								"params": {
									"params": "tokenId The ID of the token for which liquidity is being decreased, amount The amount by which liquidity will be decreased, amount0Min The minimum amount of token0 that should be accounted for the burned liquidity, amount1Min The minimum amount of token1 that should be accounted for the burned liquidity, deadline The time by which the transaction must be included to effect the change"
								},
								"returns": {
									"amount0": "The amount of token0 accounted to the position's tokens owed",
									"amount1": "The amount of token1 accounted to the position's tokens owed"
								}
							},
							"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": {
								"params": {
									"params": "tokenId The ID of the token for which liquidity is being increased, amount0Desired The desired amount of token0 to be spent, amount1Desired The desired amount of token1 to be spent, amount0Min The minimum amount of token0 to spend, which serves as a slippage check, amount1Min The minimum amount of token1 to spend, which serves as a slippage check, deadline The time by which the transaction must be included to effect the change"
								},
								"returns": {
									"amount0": "The amount of token0 to acheive resulting liquidity",
									"amount1": "The amount of token1 to acheive resulting liquidity",
									"liquidity": "The new liquidity amount as a result of the increase"
								}
							},
							"mint((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160))": {
								"details": "Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized a method does not exist, i.e. the pool is assumed to be initialized.",
								"params": {
									"params": "The params necessary to mint a position, encoded as `MintParams` in calldata"
								},
								"returns": {
									"amount0": "The amount of token0",
									"amount1": "The amount of token1",
									"liquidity": "The amount of liquidity for this position",
									"tokenId": "The ID of the token that represents the minted position"
								}
							},
							"positions(uint256)": {
								"details": "Throws if the token ID is not valid.",
								"params": {
									"tokenId": "The ID of the token that represents the position"
								},
								"returns": {
									"feeGrowthInside0LastX128": "The fee growth of token0 as of the last action on the individual position",
									"feeGrowthInside1LastX128": "The fee growth of token1 as of the last action on the individual position",
									"liquidity": "The liquidity of the position",
									"nonce": "The nonce for permits",
									"operator": "The address that is approved for spending",
									"tickLower": "The lower end of the tick range for the position",
									"tickSpacing": "The tick spacing associated with the pool",
									"tickUpper": "The higher end of the tick range for the position",
									"token0": "The address of the token0 for a specific pool",
									"token1": "The address of the token1 for a specific pool",
									"tokensOwed0": "The uncollected amount of token0 owed to the position as of the last computation",
									"tokensOwed1": "The uncollected amount of token1 owed to the position as of the last computation"
								}
							},
							"setOwner(address)": {
								"params": {
									"_owner": "Address of the new Owner to be chosen"
								}
							},
							"setTokenDescriptor(address)": {
								"params": {
									"_tokenDescriptor": "Address of the new Token Descriptor to be chosen"
								}
							}
						},
						"title": "Non-fungible token for positions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"burn(uint256)": "42966c68",
							"collect((uint256,address,uint128,uint128))": "fc6f7865",
							"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": "0c49ccbe",
							"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": "219f5d17",
							"mint((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160))": "b5007d1f",
							"owner()": "8da5cb5b",
							"positions(uint256)": "99fbab88",
							"setOwner(address)": "13af4035",
							"setTokenDescriptor(address)": "b6dc7ea3",
							"tokenDescriptor()": "5a9d7a68"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"DecreaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"IncreaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenDescriptor\",\"type\":\"address\"}],\"name\":\"TokenDescriptorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Max\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Max\",\"type\":\"uint128\"}],\"internalType\":\"struct INonfungiblePositionManager.CollectParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.DecreaseLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"decreaseLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.IncreaseLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"increaseLiquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"internalType\":\"struct INonfungiblePositionManager.MintParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenDescriptor\",\"type\":\"address\"}],\"name\":\"setTokenDescriptor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDescriptor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Collect(uint256,address,uint256,uint256)\":{\"details\":\"The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\",\"params\":{\"amount0\":\"The amount of token0 owed to the position that was collected\",\"amount1\":\"The amount of token1 owed to the position that was collected\",\"recipient\":\"The address of the account that received the collected tokens\",\"tokenId\":\"The ID of the token for which underlying tokens were collected\"}},\"DecreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was accounted for the decrease in liquidity\",\"amount1\":\"The amount of token1 that was accounted for the decrease in liquidity\",\"liquidity\":\"The amount by which liquidity for the NFT position was decreased\",\"tokenId\":\"The ID of the token for which liquidity was decreased\"}},\"IncreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"details\":\"Also emitted when a token is minted\",\"params\":{\"amount0\":\"The amount of token0 that was paid for the increase in liquidity\",\"amount1\":\"The amount of token1 that was paid for the increase in liquidity\",\"liquidity\":\"The amount by which liquidity for the NFT position was increased\",\"tokenId\":\"The ID of the token for which liquidity was increased\"}},\"TokenDescriptorChanged(address)\":{\"params\":{\"tokenDescriptor\":\"Address of the new Token Descriptor\"}},\"TransferOwnership(address)\":{\"params\":{\"owner\":\"Address of the new Owner\"}}},\"kind\":\"dev\",\"methods\":{\"burn(uint256)\":{\"params\":{\"tokenId\":\"The ID of the token that is being burned\"}},\"collect((uint256,address,uint128,uint128))\":{\"params\":{\"params\":\"tokenId The ID of the NFT for which tokens are being collected, recipient The account that should receive the tokens, amount0Max The maximum amount of token0 to collect, amount1Max The maximum amount of token1 to collect\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))\":{\"details\":\"The use of this function can cause a loss to users of the NonfungiblePositionManagerfor tokens that have very high decimals.The amount of tokens necessary for the loss is: 3.4028237e+38.This is equivalent to 1e20 value with 18 decimals.\",\"params\":{\"params\":\"tokenId The ID of the token for which liquidity is being decreased, amount The amount by which liquidity will be decreased, amount0Min The minimum amount of token0 that should be accounted for the burned liquidity, amount1Min The minimum amount of token1 that should be accounted for the burned liquidity, deadline The time by which the transaction must be included to effect the change\"},\"returns\":{\"amount0\":\"The amount of token0 accounted to the position's tokens owed\",\"amount1\":\"The amount of token1 accounted to the position's tokens owed\"}},\"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))\":{\"params\":{\"params\":\"tokenId The ID of the token for which liquidity is being increased, amount0Desired The desired amount of token0 to be spent, amount1Desired The desired amount of token1 to be spent, amount0Min The minimum amount of token0 to spend, which serves as a slippage check, amount1Min The minimum amount of token1 to spend, which serves as a slippage check, deadline The time by which the transaction must be included to effect the change\"},\"returns\":{\"amount0\":\"The amount of token0 to acheive resulting liquidity\",\"amount1\":\"The amount of token1 to acheive resulting liquidity\",\"liquidity\":\"The new liquidity amount as a result of the increase\"}},\"mint((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160))\":{\"details\":\"Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized a method does not exist, i.e. the pool is assumed to be initialized.\",\"params\":{\"params\":\"The params necessary to mint a position, encoded as `MintParams` in calldata\"},\"returns\":{\"amount0\":\"The amount of token0\",\"amount1\":\"The amount of token1\",\"liquidity\":\"The amount of liquidity for this position\",\"tokenId\":\"The ID of the token that represents the minted position\"}},\"positions(uint256)\":{\"details\":\"Throws if the token ID is not valid.\",\"params\":{\"tokenId\":\"The ID of the token that represents the position\"},\"returns\":{\"feeGrowthInside0LastX128\":\"The fee growth of token0 as of the last action on the individual position\",\"feeGrowthInside1LastX128\":\"The fee growth of token1 as of the last action on the individual position\",\"liquidity\":\"The liquidity of the position\",\"nonce\":\"The nonce for permits\",\"operator\":\"The address that is approved for spending\",\"tickLower\":\"The lower end of the tick range for the position\",\"tickSpacing\":\"The tick spacing associated with the pool\",\"tickUpper\":\"The higher end of the tick range for the position\",\"token0\":\"The address of the token0 for a specific pool\",\"token1\":\"The address of the token1 for a specific pool\",\"tokensOwed0\":\"The uncollected amount of token0 owed to the position as of the last computation\",\"tokensOwed1\":\"The uncollected amount of token1 owed to the position as of the last computation\"}},\"setOwner(address)\":{\"params\":{\"_owner\":\"Address of the new Owner to be chosen\"}},\"setTokenDescriptor(address)\":{\"params\":{\"_tokenDescriptor\":\"Address of the new Token Descriptor to be chosen\"}}},\"title\":\"Non-fungible token for positions\",\"version\":1},\"userdoc\":{\"events\":{\"Collect(uint256,address,uint256,uint256)\":{\"notice\":\"Emitted when tokens are collected for a position NFT\"},\"DecreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is decreased for a position NFT\"},\"IncreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is increased for a position NFT\"},\"TokenDescriptorChanged(address)\":{\"notice\":\"Emitted when a new Token Descriptor is set\"},\"TransferOwnership(address)\":{\"notice\":\"Emitted when a new Owner is set\"}},\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens must be collected first.\"},\"collect((uint256,address,uint128,uint128))\":{\"notice\":\"Collects up to a maximum amount of fees owed to a specific position to the recipientUsed to update staked positions before deposit and withdraw\"},\"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))\":{\"notice\":\"Decreases the amount of liquidity in a position and accounts it to the position\"},\"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\"},\"mint((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160))\":{\"notice\":\"Creates a new position wrapped in a NFT\"},\"owner()\":{\"notice\":\"Returns the address of the Owner, that is allowed to set a new TokenDescriptor\"},\"positions(uint256)\":{\"notice\":\"Returns the position information associated with a given token ID.\"},\"setOwner(address)\":{\"notice\":\"Sets a new Owner address\"},\"setTokenDescriptor(address)\":{\"notice\":\"Sets a new Token Descriptor\"},\"tokenDescriptor()\":{\"notice\":\"Returns the address of the Token Descriptor, that handles generating token URIs for Positions\"}},\"notice\":\"Wraps CL positions in a non-fungible token interface which allows for them to be transferred and authorized.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/INonfungiblePositionManager.sol\":\"INonfungiblePositionManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/INonfungiblePositionManager.sol\":{\"keccak256\":\"0xfe7d9ee66050cd945f09f5a54bada3d8eb3b024aedc37b9c521703c61e3ac892\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f5d4cc3b9d41b44b2419a72bc3cd27bc0608e0b488196348b4a2e342d2114467\",\"dweb:/ipfs/QmYKKT5uccPQQSBT54wN2yZV5phs4kPYr76WvUerYiKbWp\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Collect(uint256,address,uint256,uint256)": {
								"notice": "Emitted when tokens are collected for a position NFT"
							},
							"DecreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is decreased for a position NFT"
							},
							"IncreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is increased for a position NFT"
							},
							"TokenDescriptorChanged(address)": {
								"notice": "Emitted when a new Token Descriptor is set"
							},
							"TransferOwnership(address)": {
								"notice": "Emitted when a new Owner is set"
							}
						},
						"kind": "user",
						"methods": {
							"burn(uint256)": {
								"notice": "Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens must be collected first."
							},
							"collect((uint256,address,uint128,uint128))": {
								"notice": "Collects up to a maximum amount of fees owed to a specific position to the recipientUsed to update staked positions before deposit and withdraw"
							},
							"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": {
								"notice": "Decreases the amount of liquidity in a position and accounts it to the position"
							},
							"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": {
								"notice": "Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`"
							},
							"mint((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160))": {
								"notice": "Creates a new position wrapped in a NFT"
							},
							"owner()": {
								"notice": "Returns the address of the Owner, that is allowed to set a new TokenDescriptor"
							},
							"positions(uint256)": {
								"notice": "Returns the position information associated with a given token ID."
							},
							"setOwner(address)": {
								"notice": "Sets a new Owner address"
							},
							"setTokenDescriptor(address)": {
								"notice": "Sets a new Token Descriptor"
							},
							"tokenDescriptor()": {
								"notice": "Returns the address of the Token Descriptor, that handles generating token URIs for Positions"
							}
						},
						"notice": "Wraps CL positions in a non-fungible token interface which allows for them to be transferred and authorized.",
						"version": 1
					}
				}
			},
			"contracts/core/VeloBot.sol": {
				"Oracle": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "pooladdress",
									"type": "address"
								}
							],
							"name": "GetPrice",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "price",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"GetPrice(address)": "f29d0040"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pooladdress\",\"type\":\"address\"}],\"name\":\"GetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/VeloBot.sol\":\"Oracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/IERC721.sol\":{\"keccak256\":\"0xa5d0054dd7767bd5a6b897102ce1ec058a8d36b0c34f49a394e2b9d302f4700d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://852f1c467f89daa70d729231e543b11c47e2f125202ed123fe9ac9410868fd64\",\"dweb:/ipfs/QmeaFw32FQ9QAXen9EKZkafK4jfXogcEGex4R446DQjJ5i\"]},\"contracts/core/INonfungiblePositionManager.sol\":{\"keccak256\":\"0xfe7d9ee66050cd945f09f5a54bada3d8eb3b024aedc37b9c521703c61e3ac892\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f5d4cc3b9d41b44b2419a72bc3cd27bc0608e0b488196348b4a2e342d2114467\",\"dweb:/ipfs/QmYKKT5uccPQQSBT54wN2yZV5phs4kPYr76WvUerYiKbWp\"]},\"contracts/core/VeloBot.sol\":{\"keccak256\":\"0x6e7200a6a1c4ffc726461a8195709a54eb8c62f9fb259c0ee6a43115db155f90\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://620e1d04cd2390bb30d7b9a87caf9126d5784ed6cfd943b1c64a84f7cb1debdd\",\"dweb:/ipfs/QmTijo9nJKfp82b5TY8MSBTofuKr4NRrwquDMjFftiHg5g\"]},\"contracts/core/interfaces/ICLFactory.sol\":{\"keccak256\":\"0x2b8dda4776bd095c900e408b2cb21324f72694bed75c69972cd0cb3b16b1bff0\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d37ae64eabec6197ef78c9fd1d4c699398937ca5f3e9f852b11b32082ab2e680\",\"dweb:/ipfs/QmWLLA5bV17Q3fS5fDdukXsaquZ5sNoP8KvBAEfYQHfK3Z\"]},\"contracts/core/interfaces/ICLPool.sol\":{\"keccak256\":\"0x0a11e1392c4b5ef4e47a3415a9b1a2118e9370d52a253dbd1c910bbbb615e91f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://0c04e689e0589f3d67961fd5febcdc0f39c0700aeebef2537ccfb29ddba29de1\",\"dweb:/ipfs/QmbuthGhVJsx45dpgF7p71VSuLshREAsaLJu34HQNgRJoz\"]},\"contracts/core/interfaces/IERC20Minimal.sol\":{\"keccak256\":\"0xa7d3b1fd5f9b9d8848a3ed9d1137eb9c79fa1fa4484347e0f75e285a2e51ea40\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://0a3f7e24d48048a87d541cc014fd51ff4cc3c54aeb78b559d17d75884671fb43\",\"dweb:/ipfs/QmWQC2DiaLXaj3QnwUgvZrKP3xvWVxUjxXDfTMmq6aziYc\"]},\"contracts/core/interfaces/IFactoryRegistry.sol\":{\"keccak256\":\"0xa2dbe19a5c9e221ffd8e4612ee8a4aa1233ab0ad059d4b7d91a8dca1153bcea0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://47a01d481d3a1f5172b8601d267439e24662849d7ebb3e1e66ec46d541e57831\",\"dweb:/ipfs/QmYG56TEtS8dwHrNaHxGrTp8r6cDzRkuGKsHBbiToUVEvX\"]},\"contracts/core/interfaces/IVoter.sol\":{\"keccak256\":\"0x029239646ad77a70b26a702b7e286521a03d5b89d148ff7c13d9bf56f6203187\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://eccfb9403ee8f5e7f604eccb0cafcbd047c1f73371537227011e6d557895fa68\",\"dweb:/ipfs/QmTjDHzzKTzkYhTeiWA1po8YL3USKkkMZSxZixVgsSQcXK\"]},\"contracts/core/interfaces/IVotingEscrow.sol\":{\"keccak256\":\"0x17ee815f29f7bc6a1528203976ed5bfdd945354dd72a7d322e8b092e331beb3d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9845c5056470191730c8a8688663bc9808172e57395c1c6053b5145bf9fd5098\",\"dweb:/ipfs/QmXyoRGbDe6KPngPsKXWZCyLLdmRTFKdhVD5Gf1Y15rG7a\"]},\"contracts/core/interfaces/callback/ICLMintCallback.sol\":{\"keccak256\":\"0x22d4ed43f7d7313e676e80f7ae3315f53c3a84fbf256efae5116ef0aba32c1e8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a21d9618b9a9c2fe2cf35d9d6d608dd02a112bd05e6020fbe71e7e09064c2be7\",\"dweb:/ipfs/QmeBQiyVmxVTPT3ftVFDkiDVgZLMar6SQegryLC7A3jmLr\"]},\"contracts/core/interfaces/callback/ICLSwapCallback.sol\":{\"keccak256\":\"0xb93e1ef2be3090a64b3b024f60253aef64b875f61dffaef8b9231351f8054948\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b16ccd544a6a551c977b7a7d6b6b9704c68e86624d66ecb16d945d3b88239458\",\"dweb:/ipfs/QmPBP5K81AFfHazhbbVb9ZXh6hzKeLqZcEUxnrkKNY7z2L\"]},\"contracts/core/interfaces/pool/ICLPoolActions.sol\":{\"keccak256\":\"0x7699f31261ab40982e34febe16128f1edfdad39075969195301352ea66bcac40\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://074f1c470e11f30d0fae8b95b963c9d19dcbd2c5bd17ad4ebba95c5f0f073044\",\"dweb:/ipfs/QmdDWMUspgBXfLhcxqESez9rSwA8JYNRycmhkhuKoDCWqJ\"]},\"contracts/core/interfaces/pool/ICLPoolConstants.sol\":{\"keccak256\":\"0xfad00d4ca1a40ef27d9614a98483ca67c4491b6f19e376901745c57a6949b512\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://2b5ea522565efb803d146673ff9e37aa090a5abff334fea587da62f4fb5d6647\",\"dweb:/ipfs/QmVRPscHFVjYFvRbJf41zVLtA2jVLbEUH66KGtEzspXnWS\"]},\"contracts/core/interfaces/pool/ICLPoolDerivedState.sol\":{\"keccak256\":\"0xc15e4192a1b7b756cababb994341dc8e78627e1341465e47b1dcb66e9ed54af8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ee4b9269244f6b7ac57cba3b8966ac188220596d16cef71d186f0a6446593b4e\",\"dweb:/ipfs/QmQjyc5ggDgoAv4YbL5uKpNxRDoTvVYw6vePFgu4aNigmQ\"]},\"contracts/core/interfaces/pool/ICLPoolEvents.sol\":{\"keccak256\":\"0x32fbcac8952f1c5c44b466b0e1c28634ce71372c0f65242aa0d821cebdddcc2b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://19f22382292967f97640f84a7edfa01cf7deb303bf882344b9985007f1dcbef2\",\"dweb:/ipfs/Qmej7vWwun9fRBCrcvzPHdZP1jtLSCxJtjTSdkVTcgWeAE\"]},\"contracts/core/interfaces/pool/ICLPoolOwnerActions.sol\":{\"keccak256\":\"0xeafd14ae3e15c9f663507e004c599618bfd5d2a90d58b3b450f9372f9e3f54f8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://49472c8cf06dc7084e22fc57ffdce860aa7a9ff77f12e4bef0c13a078bbc5831\",\"dweb:/ipfs/Qmd29vWULezsJJzhw3wZxsU6Hsng5949v2TiVCbdga4Vqe\"]},\"contracts/core/interfaces/pool/ICLPoolState.sol\":{\"keccak256\":\"0xe57d65825a097d6f0ab55d7ae39b528695b3df65320ed524124fbb55949bfcf9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b63b25beebe612acfd564f40b0d95b3844ee71bf969a3357419e7a54f1ece961\",\"dweb:/ipfs/Qmdk3mNLz3cSZscbXFsJp69gjgxFcBv6K5mdc6tjnmtFSR\"]},\"contracts/core/libraries/BitMath.sol\":{\"keccak256\":\"0x82e425066110aac05ed8a9fc90f9ee85142b6f434769447e49d4438a8d9fcd82\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://77a97078bc992c18c59cb61e07fa4632c8a26b6babf00f3b16eabb5dcaa953b4\",\"dweb:/ipfs/QmTj15ufLWk6AxedSVXBcLp5cYf2DCJAeDi94cVemCkm54\"]},\"contracts/core/libraries/FixedPoint128.sol\":{\"keccak256\":\"0x2d1f4f73ae0d8f0a210b8d30084659b57c56ac8f2f96011fca36f00a6d417178\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://2ba88933f16cd2df398e19c6ad227268f83c03081b70d243c97116d2ed9bc241\",\"dweb:/ipfs/QmTUGxdh8snzEM9VrTSS47StCg9VVWvvLJtJeNnMTFY4xb\"]},\"contracts/core/libraries/FixedPoint96.sol\":{\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://186d3b528866065a5856f96d2aeec698efa99f8da913e9adf34f8cc296cc993d\",\"dweb:/ipfs/QmUAiMvtAQp8c9dy57bqJYzG7hkb1uChiPaQmt264skoqP\"]},\"contracts/core/libraries/FullMath.sol\":{\"keccak256\":\"0x5340256039418f5d03512a44173d3dcf1da277a73a461e06fb5668f49cfc46f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75dee99795d1125875233a7f1d356935099cc97b4085c0e451060d77db85d144\",\"dweb:/ipfs/QmTGqyrxVLQd8TBaarqSQDiYvq1QFutCdmTyXk6JpxzKTN\"]},\"contracts/core/libraries/LiquidityMath.sol\":{\"keccak256\":\"0xd1059ccc904c8752cec175e8d99e31921c6cd7f3a9c2dd315ce34ac486172ac9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f3630a49e62fa056e2cc4e0278b6f17c5f7e1c9ad2190540cf84c152b58cdef8\",\"dweb:/ipfs/QmdGjKRTNY2qLXJtR2rXU8Nxk4pZwXfbzZYNn3F472QEn6\"]},\"contracts/core/libraries/LowGasSafeMath.sol\":{\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bfc1d5d58e59015086b0e65a6c3a2ddad312e2350480510f6c0c8167f3d71a37\",\"dweb:/ipfs/QmQndULYjFsHKHjMAKLMfc12vWbVB5FawtioHtvwcWRJZp\"]},\"contracts/core/libraries/Position.sol\":{\"keccak256\":\"0xcf1e701e3fae35be8b77ff1217cfdd23d33eb16fd3cec70be8ea6888f87af285\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://c8c89746dd30e76cc029d4e090e402b28aae0659cc71800758b99137dfe85f55\",\"dweb:/ipfs/QmY4Ft1YBLqzqwTgNdpCyRd7WrY78zKgg4Ddv2zqZiBEiE\"]},\"contracts/core/libraries/SafeCast.sol\":{\"keccak256\":\"0xd4c1c1b67f946b077d7c52a158113763a89a210fc2927b8491055a962ecd18c0\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://5344400c74320ca8dbe19241db7ff49babbd6c875c1b561c79d6e4315a9fb5f9\",\"dweb:/ipfs/QmRKCNTbkovxK1WvejXZr3iAHhGN97ZT1yWGsWCJFkrT5X\"]},\"contracts/core/libraries/SqrtPriceMath.sol\":{\"keccak256\":\"0xefd51a282ca9fbc89394776e7f5c6f96fa084ca26b71d99727780332c87d1843\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1f09b719eff523f65d0d11fc476b9735e1390018d5ff585991d0fc644e913ecf\",\"dweb:/ipfs/QmNiZxxQhqteYgJdhCQ3cZ4S7bTQf2AQRUJqMVvPY3doot\"]},\"contracts/core/libraries/Tick.sol\":{\"keccak256\":\"0xb5ebd80c667f4501dba65f4e39e51ff36e5334480849e0ed8604222d20b4ed1e\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://246f590513441ac0f307170f5099e4a0c0b1f579406fc30b909b249858dbd099\",\"dweb:/ipfs/QmaA5uC3eck7nMqyJbpSPEhmXmAXaKLNBSS1Lfnzzzjc95\"]},\"contracts/core/libraries/TickBitmap.sol\":{\"keccak256\":\"0xd829fadfca3f8f5870c877c7eeceb4a692603c16b711174526129987e8745f5b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1d2cbf3802f7e611708a45bc390ee9307d947e49b348294591659444b9989c05\",\"dweb:/ipfs/Qmcny7JNyVYCtcZG3b1BL4ThuKREmAkE9ZKaC3i32pnt7X\"]},\"contracts/core/libraries/TickMath.sol\":{\"keccak256\":\"0x2aa3180a8a59b34a513b948d3f2207b5376de7a2c37065853b7c9fbf0cd3d43f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://c4d46ca5384037f14497c6268342b15becf8bbe1a8fecbcd89ca5b80f41fabc2\",\"dweb:/ipfs/QmanLcdh7EppV4yJ1CdWfPB67es3nEjrDiByAYwgkSE58D\"]},\"contracts/core/libraries/TransferHelper.sol\":{\"keccak256\":\"0x3bbe07a0684d98efe73f7012e446873494e74983e1f75a16d42c25b956d61651\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://78ac9659c70ba3253a6e526ba5a144994fb3d32df2e9537787eeb45aae320aec\",\"dweb:/ipfs/QmbaZRbPP2wFZ9coJd2iyPM37hm3kXzPLuRtL6KKr1MCSL\"]},\"contracts/core/libraries/UnsafeMath.sol\":{\"keccak256\":\"0x5f36d7d16348d8c37fe64fda932018d6e5e8acecd054f0f97d32db62d20c6c88\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://4bd4e817ea3d2c26bb2be7e58db3eaa403119562c18d4c09cc92fb31aa231496\",\"dweb:/ipfs/QmbpjgL8Hf1mhmUyf9hpuPk4noGAggCdTqaRBFKqNF3AQw\"]},\"contracts/libraries/VelodromeTimeLibrary.sol\":{\"keccak256\":\"0x53d5f0b1b864a7dc552ef0291526938a36b1936517d17f62515bb6ba51c1260d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bbc80fd3b18f04224a2a813d6c20a305c7e0479d6414a78d482b45635bc97dba\",\"dweb:/ipfs/QmQFbXCkjzeFgY5M8DyeKZjxeuN8xGdmUmjNH7FNMkLi8T\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"V3Bot": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"name": "SwapExecuted",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"name": "Swap0for1",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"name": "V3Swap1for0",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newAdmin",
									"type": "address"
								}
							],
							"name": "_newAdmin",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newPool",
									"type": "address"
								}
							],
							"name": "_newPool",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "Token",
									"type": "address"
								}
							],
							"name": "_transferToAdmin",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount0ToMint",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1ToMint",
									"type": "uint256"
								}
							],
							"name": "addLiquidity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "admin",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "deposits",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "farmNFT",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "",
									"type": "bytes"
								}
							],
							"name": "onERC721Received",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "pool",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/core/VeloBot.sol\":1014:7259  contract V3Bot is ICLSwapCallback {\r... */\n  mstore(0x40, 0x80)\n    /* \"contracts/core/VeloBot.sol\":1571:1622  constructor() {\r... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"contracts/core/VeloBot.sol\":1596:1601  admin */\n  0x04\n    /* \"contracts/core/VeloBot.sol\":1596:1614  admin = msg.sender */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n    /* \"contracts/core/VeloBot.sol\":1604:1614  msg.sender */\n  caller\n    /* \"contracts/core/VeloBot.sol\":1596:1614  admin = msg.sender */\n  or\n  swap1\n  sstore\n    /* \"contracts/core/VeloBot.sol\":1014:7259  contract V3Bot is ICLSwapCallback {\r... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/core/VeloBot.sol\":1014:7259  contract V3Bot is ICLSwapCallback {\r... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xd21220a7\n      gt\n      tag_17\n      jumpi\n      dup1\n      0xe6f4d0aa\n      gt\n      tag_18\n      jumpi\n      dup1\n      0xe6f4d0aa\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xf851a440\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xfa461e33\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xfdde416f\n      eq\n      tag_16\n      jumpi\n      jump(tag_1)\n    tag_18:\n      dup1\n      0xd21220a7\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xd2aca8cd\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xda802f80\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xdb638298\n      eq\n      tag_12\n      jumpi\n      jump(tag_1)\n    tag_17:\n      dup1\n      0x7210468a\n      gt\n      tag_19\n      jumpi\n      dup1\n      0x7210468a\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x9cd441da\n      eq\n      tag_6\n      jumpi\n      dup1\n      0xb02c43d0\n      eq\n      tag_7\n      jumpi\n      dup1\n      0xd0c93a7c\n      eq\n      tag_8\n      jumpi\n      jump(tag_1)\n    tag_19:\n      dup1\n      0x0dfe1681\n      eq\n      tag_2\n      jumpi\n      dup1\n      0x150b7a02\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x16f0115b\n      eq\n      tag_4\n      jumpi\n    tag_1:\n      0x00\n      dup1\n      revert\n        /* \"contracts/core/VeloBot.sol\":1111:1132  address public token0 */\n    tag_2:\n      callvalue\n      dup1\n      iszero\n      tag_20\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_20:\n      pop\n      tag_21\n      tag_22\n      jump\t// in\n    tag_21:\n      mload(0x40)\n      tag_23\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_23:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/core/VeloBot.sol\":6527:6819  function onERC721Received(\r... */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_25\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_25:\n      pop\n      tag_26\n      tag_27\n      calldatasize\n      0x04\n      tag_28\n      jump\t// in\n    tag_27:\n      tag_29\n      jump\t// in\n    tag_26:\n      mload(0x40)\n      tag_23\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n        /* \"contracts/core/VeloBot.sol\":1055:1074  address public pool */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_32\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_32:\n      pop\n      tag_21\n      tag_34\n      jump\t// in\n        /* \"contracts/core/VeloBot.sol\":2146:2330  function _transferToAdmin(address Token) external {\r... */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_36\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_36:\n      pop\n      tag_37\n      tag_38\n      calldatasize\n      0x04\n      tag_39\n      jump\t// in\n    tag_38:\n      tag_40\n      jump\t// in\n    tag_37:\n      stop\n        /* \"contracts/core/VeloBot.sol\":5261:6519  function addLiquidity(uint256 amount0ToMint, uint256 amount1ToMint) external payable returns (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1){\r... */\n    tag_6:\n      tag_41\n      tag_42\n      calldatasize\n      0x04\n      tag_43\n      jump\t// in\n    tag_42:\n      tag_44\n      jump\t// in\n    tag_41:\n      mload(0x40)\n      tag_23\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_46\n      jump\t// in\n        /* \"contracts/core/VeloBot.sol\":1433:1476  mapping(uint256 => Deposit) public deposits */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_47\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_47:\n      pop\n      tag_48\n      tag_49\n      calldatasize\n      0x04\n      tag_50\n      jump\t// in\n    tag_49:\n      tag_51\n      jump\t// in\n    tag_48:\n      mload(0x40)\n      tag_23\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_53\n      jump\t// in\n        /* \"contracts/core/VeloBot.sol\":1267:1291  int24 public tickSpacing */\n    tag_8:\n      callvalue\n      dup1\n      iszero\n      tag_54\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_54:\n      pop\n      tag_55\n      tag_56\n      jump\t// in\n    tag_55:\n      mload(0x40)\n      tag_23\n      swap2\n      swap1\n      tag_58\n      jump\t// in\n        /* \"contracts/core/VeloBot.sol\":1161:1182  address public token1 */\n    tag_9:\n      callvalue\n      dup1\n      iszero\n      tag_59\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_59:\n      pop\n      tag_21\n      tag_61\n      jump\t// in\n        /* \"contracts/core/VeloBot.sol\":1784:2138  function _newPool(address newPool) external {\r... */\n    tag_10:\n      callvalue\n      dup1\n      iszero\n      tag_63\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_63:\n      pop\n      tag_37\n      tag_65\n      calldatasize\n      0x04\n      tag_39\n      jump\t// in\n    tag_65:\n      tag_66\n      jump\t// in\n        /* \"contracts/core/VeloBot.sol\":1211:1233  address public farmNFT */\n    tag_11:\n      callvalue\n      dup1\n      iszero\n      tag_67\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_67:\n      pop\n      tag_21\n      tag_69\n      jump\t// in\n        /* \"contracts/core/VeloBot.sol\":2338:3423  function Swap0for1(uint256 amountIn) external {\r... */\n    tag_12:\n      callvalue\n      dup1\n      iszero\n      tag_71\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_71:\n      pop\n      tag_37\n      tag_73\n      calldatasize\n      0x04\n      tag_50\n      jump\t// in\n    tag_73:\n      tag_74\n      jump\t// in\n        /* \"contracts/core/VeloBot.sol\":1630:1776  function _newAdmin(address newAdmin) external {\r... */\n    tag_13:\n      callvalue\n      dup1\n      iszero\n      tag_75\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_75:\n      pop\n      tag_37\n      tag_77\n      calldatasize\n      0x04\n      tag_39\n      jump\t// in\n    tag_77:\n      tag_78\n      jump\t// in\n        /* \"contracts/core/VeloBot.sol\":1240:1260  address public admin */\n    tag_14:\n      callvalue\n      dup1\n      iszero\n      tag_79\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_79:\n      pop\n      tag_21\n      tag_81\n      jump\t// in\n        /* \"contracts/core/VeloBot.sol\":4598:5257  function uniswapV3SwapCallback(\r... */\n    tag_15:\n      callvalue\n      dup1\n      iszero\n      tag_83\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_83:\n      pop\n      tag_37\n      tag_85\n      calldatasize\n      0x04\n      tag_86\n      jump\t// in\n    tag_85:\n      tag_87\n      jump\t// in\n        /* \"contracts/core/VeloBot.sol\":3431:4520  function V3Swap1for0(uint256 amountIn) external {\r... */\n    tag_16:\n      callvalue\n      dup1\n      iszero\n      tag_88\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_88:\n      pop\n      tag_37\n      tag_90\n      calldatasize\n      0x04\n      tag_50\n      jump\t// in\n    tag_90:\n      tag_91\n      jump\t// in\n        /* \"contracts/core/VeloBot.sol\":1111:1132  address public token0 */\n    tag_22:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n      dup2\n      jump\t// out\n        /* \"contracts/core/VeloBot.sol\":6527:6819  function onERC721Received(\r... */\n    tag_29:\n        /* \"contracts/core/VeloBot.sol\":6674:6680  bytes4 */\n      0x00\n        /* \"contracts/core/VeloBot.sol\":6730:6763  _createDeposit(operator, tokenId) */\n      tag_93\n        /* \"contracts/core/VeloBot.sol\":6745:6753  operator */\n      dup7\n        /* \"contracts/core/VeloBot.sol\":6755:6762  tokenId */\n      dup6\n        /* \"contracts/core/VeloBot.sol\":6730:6744  _createDeposit */\n      tag_94\n        /* \"contracts/core/VeloBot.sol\":6730:6763  _createDeposit(operator, tokenId) */\n      jump\t// in\n    tag_93:\n      pop\n      shl(0xe1, 0x0a85bd01)\n        /* \"contracts/core/VeloBot.sol\":6527:6819  function onERC721Received(\r... */\n      swap6\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/core/VeloBot.sol\":1055:1074  address public pool */\n    tag_34:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x00))\n      dup2\n      jump\t// out\n        /* \"contracts/core/VeloBot.sol\":2146:2330  function _transferToAdmin(address Token) external {\r... */\n    tag_40:\n        /* \"contracts/core/VeloBot.sol\":2223:2268  IERC20Minimal(Token).balanceOf(address(this)) */\n      mload(0x40)\n      shl(0xe0, 0x70a08231)\n      dup2\n      mstore\n        /* \"contracts/core/VeloBot.sol\":2207:2220  uint256 value */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloBot.sol\":2223:2253  IERC20Minimal(Token).balanceOf */\n      dup4\n      and\n      swap1\n      0x70a08231\n      swap1\n        /* \"contracts/core/VeloBot.sol\":2223:2268  IERC20Minimal(Token).balanceOf(address(this)) */\n      tag_96\n      swap1\n        /* \"contracts/core/VeloBot.sol\":2262:2266  this */\n      address\n      swap1\n        /* \"contracts/core/VeloBot.sol\":2223:2268  IERC20Minimal(Token).balanceOf(address(this)) */\n      0x04\n      add\n      tag_24\n      jump\t// in\n    tag_96:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_97\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_97:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_99\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_99:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_100\n      swap2\n      swap1\n      tag_101\n      jump\t// in\n    tag_100:\n        /* \"contracts/core/VeloBot.sol\":2309:2314  admin */\n      0x04\n      dup1\n      sload\n        /* \"contracts/core/VeloBot.sol\":2279:2322  IERC20Minimal(Token).transfer(admin, value) */\n      mload(0x40)\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n        /* \"contracts/core/VeloBot.sol\":2207:2268  uint256 value = IERC20Minimal(Token).balanceOf(address(this)) */\n      swap3\n      swap4\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloBot.sol\":2279:2308  IERC20Minimal(Token).transfer */\n      dup1\n      dup7\n      and\n      swap4\n      0xa9059cbb\n      swap4\n        /* \"contracts/core/VeloBot.sol\":2279:2322  IERC20Minimal(Token).transfer(admin, value) */\n      tag_102\n      swap4\n        /* \"contracts/core/VeloBot.sol\":2309:2314  admin */\n      swap1\n      swap3\n      and\n      swap2\n        /* \"contracts/core/VeloBot.sol\":2207:2268  uint256 value = IERC20Minimal(Token).balanceOf(address(this)) */\n      dup7\n      swap2\n        /* \"contracts/core/VeloBot.sol\":2279:2322  IERC20Minimal(Token).transfer(admin, value) */\n      add\n      tag_103\n      jump\t// in\n    tag_102:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_104\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_104:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_106\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_106:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_107\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_107:\n      pop\n        /* \"contracts/core/VeloBot.sol\":2146:2330  function _transferToAdmin(address Token) external {\r... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/core/VeloBot.sol\":5261:6519  function addLiquidity(uint256 amount0ToMint, uint256 amount1ToMint) external payable returns (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1){\r... */\n    tag_44:\n        /* \"contracts/core/VeloBot.sol\":5508:5514  token0 */\n      sload(0x01)\n        /* \"contracts/core/VeloBot.sol\":5524:5531  farmNFT */\n      sload(0x03)\n        /* \"contracts/core/VeloBot.sol\":5494:5547  IERC20Minimal(token0).approve(farmNFT, amount0ToMint) */\n      mload(0x40)\n      shl(0xe0, 0x095ea7b3)\n      dup2\n      mstore\n        /* \"contracts/core/VeloBot.sol\":5355:5370  uint256 tokenId */\n      0x00\n      swap3\n      dup4\n      swap3\n      dup4\n      swap3\n      dup4\n      swap3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloBot.sol\":5508:5514  token0 */\n      swap1\n      dup2\n      and\n      swap3\n        /* \"contracts/core/VeloBot.sol\":5494:5523  IERC20Minimal(token0).approve */\n      0x095ea7b3\n      swap3\n        /* \"contracts/core/VeloBot.sol\":5494:5547  IERC20Minimal(token0).approve(farmNFT, amount0ToMint) */\n      tag_110\n      swap3\n        /* \"contracts/core/VeloBot.sol\":5524:5531  farmNFT */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/core/VeloBot.sol\":5533:5546  amount0ToMint */\n      dup11\n      swap1\n        /* \"contracts/core/VeloBot.sol\":5494:5547  IERC20Minimal(token0).approve(farmNFT, amount0ToMint) */\n      0x04\n      add\n      tag_103\n      jump\t// in\n    tag_110:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_111\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_111:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_113\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_113:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_114\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_114:\n      pop\n        /* \"contracts/core/VeloBot.sol\":5572:5578  token1 */\n      sload(0x02)\n        /* \"contracts/core/VeloBot.sol\":5588:5595  farmNFT */\n      sload(0x03)\n        /* \"contracts/core/VeloBot.sol\":5558:5611  IERC20Minimal(token1).approve(farmNFT, amount1ToMint) */\n      mload(0x40)\n      shl(0xe0, 0x095ea7b3)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloBot.sol\":5572:5578  token1 */\n      swap3\n      dup4\n      and\n      swap3\n        /* \"contracts/core/VeloBot.sol\":5558:5587  IERC20Minimal(token1).approve */\n      0x095ea7b3\n      swap3\n        /* \"contracts/core/VeloBot.sol\":5558:5611  IERC20Minimal(token1).approve(farmNFT, amount1ToMint) */\n      tag_115\n      swap3\n        /* \"contracts/core/VeloBot.sol\":5588:5595  farmNFT */\n      swap2\n      and\n      swap1\n        /* \"contracts/core/VeloBot.sol\":5597:5610  amount1ToMint */\n      dup10\n      swap1\n        /* \"contracts/core/VeloBot.sol\":5558:5611  IERC20Minimal(token1).approve(farmNFT, amount1ToMint) */\n      0x04\n      add\n      tag_103\n      jump\t// in\n    tag_115:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_116\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_116:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_118\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_118:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_119\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_119:\n      pop\n        /* \"contracts/core/VeloBot.sol\":5623:5643  uint160 sqrtPriceX96 */\n      0x00\n        /* \"contracts/core/VeloBot.sol\":5665:5669  pool */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloBot.sol\":5652:5676  ICLPoolState(pool).slot0 */\n      and\n      0x3850c7bd\n        /* \"contracts/core/VeloBot.sol\":5652:5678  ICLPoolState(pool).slot0() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0xc0\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_120\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_120:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_122\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_122:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_123\n      swap2\n      swap1\n      tag_124\n      jump\t// in\n    tag_123:\n      pop\n      pop\n        /* \"contracts/core/VeloBot.sol\":5759:6347  INonfungiblePositionManager.MintParams({\r... */\n      0x40\n      dup1\n      mload\n      0x0180\n      dup2\n      add\n      dup3\n      mstore\n        /* \"contracts/core/VeloBot.sol\":5825:5831  token0 */\n      sload(0x01)\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      dup2\n      and\n        /* \"contracts/core/VeloBot.sol\":5759:6347  INonfungiblePositionManager.MintParams({\r... */\n      dup3\n      mstore\n        /* \"contracts/core/VeloBot.sol\":5858:5864  token1 */\n      0x02\n      dup1\n      sload\n      dup3\n      and\n        /* \"contracts/core/VeloBot.sol\":5759:6347  INonfungiblePositionManager.MintParams({\r... */\n      0x20\n      dup5\n      add\n      mstore\n        /* \"contracts/core/VeloBot.sol\":5896:5907  tickSpacing */\n      0x04\n      dup1\n      sload\n      shl(0xa0, 0x01)\n      swap1\n      div\n      dup3\n      signextend\n        /* \"contracts/core/VeloBot.sol\":5759:6347  INonfungiblePositionManager.MintParams({\r... */\n      swap1\n      swap2\n      signextend\n      dup4\n      dup6\n      add\n      mstore\n      not(0x0d89e7)\n      0x60\n      dup5\n      add\n      mstore\n        /* \"contracts/core/libraries/TickMath.sol\":644:653  -MIN_TICK */\n      0x0d89e8\n        /* \"contracts/core/VeloBot.sol\":5759:6347  INonfungiblePositionManager.MintParams({\r... */\n      0x80\n      dup5\n      add\n      mstore\n      0xa0\n      dup4\n      add\n      dup16\n      swap1\n      mstore\n      0xc0\n      dup4\n      add\n      dup15\n      swap1\n      mstore\n        /* \"contracts/core/VeloBot.sol\":5691:5743  INonfungiblePositionManager.MintParams memory params */\n      0x00\n        /* \"contracts/core/VeloBot.sol\":5759:6347  INonfungiblePositionManager.MintParams({\r... */\n      0xe0\n      dup5\n      add\n      dup2\n      swap1\n      mstore\n        /* \"contracts/core/VeloBot.sol\":5825:5831  token0 */\n      0x0100\n        /* \"contracts/core/VeloBot.sol\":5759:6347  INonfungiblePositionManager.MintParams({\r... */\n      dup5\n      add\n      mstore\n        /* \"contracts/core/VeloBot.sol\":6237:6241  this */\n      address\n        /* \"contracts/core/VeloBot.sol\":5759:6347  INonfungiblePositionManager.MintParams({\r... */\n      0x0120\n      dup5\n      add\n      mstore\n        /* \"contracts/core/VeloBot.sol\":6271:6286  block.timestamp */\n      timestamp\n        /* \"contracts/core/VeloBot.sol\":5759:6347  INonfungiblePositionManager.MintParams({\r... */\n      0x0140\n      dup5\n      add\n      mstore\n      dup2\n      dup9\n      and\n      0x0160\n      dup5\n      add\n      mstore\n        /* \"contracts/core/VeloBot.sol\":6431:6438  farmNFT */\n      sload(0x03)\n        /* \"contracts/core/VeloBot.sol\":6403:6452  INonfungiblePositionManager(farmNFT).mint(params) */\n      swap4\n      mload\n      shl(0xe0, 0xb5007d1f)\n      dup2\n      mstore\n        /* \"contracts/core/VeloBot.sol\":5622:5678  (uint160 sqrtPriceX96,,,,,) = ICLPoolState(pool).slot0() */\n      swap8\n      swap9\n      pop\n        /* \"contracts/core/VeloBot.sol\":5759:6347  INonfungiblePositionManager.MintParams({\r... */\n      swap2\n      swap7\n        /* \"contracts/core/VeloBot.sol\":6431:6438  farmNFT */\n      swap3\n      and\n      swap5\n      pop\n        /* \"contracts/core/VeloBot.sol\":6403:6444  INonfungiblePositionManager(farmNFT).mint */\n      0xb5007d1f\n      swap4\n      pop\n        /* \"contracts/core/VeloBot.sol\":6403:6452  INonfungiblePositionManager(farmNFT).mint(params) */\n      tag_125\n      swap3\n      pop\n        /* \"contracts/core/VeloBot.sol\":5759:6347  INonfungiblePositionManager.MintParams({\r... */\n      dup6\n      swap2\n        /* \"contracts/core/VeloBot.sol\":6403:6452  INonfungiblePositionManager(farmNFT).mint(params) */\n      add\n      tag_126\n      jump\t// in\n    tag_125:\n      0x80\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_127\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_127:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_129\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_129:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_130\n      swap2\n      swap1\n      tag_131\n      jump\t// in\n    tag_130:\n        /* \"contracts/core/VeloBot.sol\":6362:6452  (tokenId, liquidity, amount0, amount1) = INonfungiblePositionManager(farmNFT).mint(params) */\n      swap3\n      swap9\n      pop\n      swap1\n      swap7\n      pop\n      swap5\n      pop\n      swap3\n      pop\n        /* \"contracts/core/VeloBot.sol\":6475:6513  _createDeposit(address(this), tokenId) */\n      tag_132\n        /* \"contracts/core/VeloBot.sol\":6498:6502  this */\n      address\n        /* \"contracts/core/VeloBot.sol\":6362:6452  (tokenId, liquidity, amount0, amount1) = INonfungiblePositionManager(farmNFT).mint(params) */\n      dup8\n        /* \"contracts/core/VeloBot.sol\":6475:6489  _createDeposit */\n      tag_94\n        /* \"contracts/core/VeloBot.sol\":6475:6513  _createDeposit(address(this), tokenId) */\n      jump\t// in\n    tag_132:\n        /* \"contracts/core/VeloBot.sol\":5261:6519  function addLiquidity(uint256 amount0ToMint, uint256 amount1ToMint) external payable returns (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1){\r... */\n      pop\n      pop\n      swap3\n      swap6\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      jump\t// out\n        /* \"contracts/core/VeloBot.sol\":1433:1476  mapping(uint256 => Deposit) public deposits */\n    tag_51:\n      mstore(0x20, 0x05)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      dup1\n      sload\n      0x01\n      dup3\n      add\n      sload\n      0x02\n      dup4\n      add\n      sload\n      0x03\n      swap1\n      swap4\n      add\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      dup4\n      and\n      swap4\n      sub(shl(0x80, 0x01), 0x01)\n      swap1\n      swap3\n      and\n      swap3\n      swap2\n      dup3\n      and\n      swap2\n      and\n      dup5\n      jump\t// out\n        /* \"contracts/core/VeloBot.sol\":1267:1291  int24 public tickSpacing */\n    tag_56:\n      sload(0x04)\n      shl(0xa0, 0x01)\n      swap1\n      div\n      0x02\n      signextend\n      dup2\n      jump\t// out\n        /* \"contracts/core/VeloBot.sol\":1161:1182  address public token1 */\n    tag_61:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n      dup2\n      jump\t// out\n        /* \"contracts/core/VeloBot.sol\":1784:2138  function _newPool(address newPool) external {\r... */\n    tag_66:\n        /* \"contracts/core/VeloBot.sol\":1861:1866  admin */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x04))\n        /* \"contracts/core/VeloBot.sol\":1847:1857  msg.sender */\n      caller\n        /* \"contracts/core/VeloBot.sol\":1847:1866  msg.sender == admin */\n      eq\n        /* \"contracts/core/VeloBot.sol\":1839:1893  require(msg.sender == admin, \"Only owner can do this\") */\n      tag_134\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_135\n      swap1\n      tag_136\n      jump\t// in\n    tag_135:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_134:\n        /* \"contracts/core/VeloBot.sol\":1904:1908  pool */\n      0x00\n        /* \"contracts/core/VeloBot.sol\":1904:1918  pool = newPool */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup4\n      dup2\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap2\n      dup3\n      swap1\n      sstore\n        /* \"contracts/core/VeloBot.sol\":1938:1969  ICLPoolConstants(pool).token0() */\n      0x40\n      dup1\n      mload\n      shl(0xe0, 0x0dfe1681)\n      dup2\n      mstore\n      swap1\n      mload\n        /* \"contracts/core/VeloBot.sol\":1955:1959  pool */\n      swap3\n      swap1\n      swap2\n      and\n      swap2\n        /* \"contracts/core/VeloBot.sol\":1938:1967  ICLPoolConstants(pool).token0 */\n      0x0dfe1681\n      swap2\n        /* \"contracts/core/VeloBot.sol\":1938:1969  ICLPoolConstants(pool).token0() */\n      0x04\n      dup1\n      dup3\n      add\n      swap3\n      0x20\n      swap3\n      swap1\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"contracts/core/VeloBot.sol\":1955:1959  pool */\n      dup7\n        /* \"contracts/core/VeloBot.sol\":1938:1969  ICLPoolConstants(pool).token0() */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_137\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_137:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_139\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_139:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_140\n      swap2\n      swap1\n      tag_141\n      jump\t// in\n    tag_140:\n        /* \"contracts/core/VeloBot.sol\":1929:1935  token0 */\n      0x01\n        /* \"contracts/core/VeloBot.sol\":1929:1969  token0 = ICLPoolConstants(pool).token0() */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      dup4\n      and\n      or\n      swap1\n      sstore\n      0x00\n        /* \"contracts/core/VeloBot.sol\":2006:2010  pool */\n      sload\n        /* \"contracts/core/VeloBot.sol\":1989:2020  ICLPoolConstants(pool).token1() */\n      0x40\n      dup1\n      mload\n      shl(0xe0, 0xd21220a7)\n      dup2\n      mstore\n      swap1\n      mload\n        /* \"contracts/core/VeloBot.sol\":2006:2010  pool */\n      swap2\n      swap1\n      swap3\n      and\n      swap2\n        /* \"contracts/core/VeloBot.sol\":1989:2018  ICLPoolConstants(pool).token1 */\n      0xd21220a7\n      swap2\n        /* \"contracts/core/VeloBot.sol\":1989:2020  ICLPoolConstants(pool).token1() */\n      0x04\n      dup1\n      dup4\n      add\n      swap3\n      0x20\n      swap3\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"contracts/core/VeloBot.sol\":2006:2010  pool */\n      dup7\n        /* \"contracts/core/VeloBot.sol\":1989:2020  ICLPoolConstants(pool).token1() */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_142\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_142:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_144\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_144:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_145\n      swap2\n      swap1\n      tag_141\n      jump\t// in\n    tag_145:\n        /* \"contracts/core/VeloBot.sol\":1980:1986  token1 */\n      0x02\n        /* \"contracts/core/VeloBot.sol\":1980:2020  token1 = ICLPoolConstants(pool).token1() */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      dup4\n      and\n      or\n      swap1\n      sstore\n      0x00\n        /* \"contracts/core/VeloBot.sol\":2058:2062  pool */\n      sload\n        /* \"contracts/core/VeloBot.sol\":2041:2069  ICLPoolConstants(pool).nft() */\n      0x40\n      dup1\n      mload\n      shl(0xe1, 0x23e66501)\n      dup2\n      mstore\n      swap1\n      mload\n        /* \"contracts/core/VeloBot.sol\":2058:2062  pool */\n      swap2\n      swap1\n      swap3\n      and\n      swap2\n        /* \"contracts/core/VeloBot.sol\":2041:2067  ICLPoolConstants(pool).nft */\n      0x47ccca02\n      swap2\n        /* \"contracts/core/VeloBot.sol\":2041:2069  ICLPoolConstants(pool).nft() */\n      0x04\n      dup1\n      dup4\n      add\n      swap3\n      0x20\n      swap3\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"contracts/core/VeloBot.sol\":2058:2062  pool */\n      dup7\n        /* \"contracts/core/VeloBot.sol\":2041:2069  ICLPoolConstants(pool).nft() */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_146\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_146:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_148\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_148:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_149\n      swap2\n      swap1\n      tag_141\n      jump\t// in\n    tag_149:\n        /* \"contracts/core/VeloBot.sol\":2031:2038  farmNFT */\n      0x03\n        /* \"contracts/core/VeloBot.sol\":2031:2069  farmNFT = ICLPoolConstants(pool).nft() */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      dup4\n      and\n      or\n      swap1\n      sstore\n      0x00\n        /* \"contracts/core/VeloBot.sol\":2111:2115  pool */\n      sload\n        /* \"contracts/core/VeloBot.sol\":2094:2130  ICLPoolConstants(pool).tickSpacing() */\n      0x40\n      dup1\n      mload\n      shl(0xe2, 0x34324e9f)\n      dup2\n      mstore\n      swap1\n      mload\n        /* \"contracts/core/VeloBot.sol\":2111:2115  pool */\n      swap2\n      swap1\n      swap3\n      and\n      swap2\n        /* \"contracts/core/VeloBot.sol\":2094:2128  ICLPoolConstants(pool).tickSpacing */\n      0xd0c93a7c\n      swap2\n        /* \"contracts/core/VeloBot.sol\":2094:2130  ICLPoolConstants(pool).tickSpacing() */\n      0x04\n      dup1\n      dup4\n      add\n      swap3\n      0x20\n      swap3\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"contracts/core/VeloBot.sol\":2111:2115  pool */\n      dup7\n        /* \"contracts/core/VeloBot.sol\":2094:2130  ICLPoolConstants(pool).tickSpacing() */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_150\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_150:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_152\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_152:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_153\n      swap2\n      swap1\n      tag_154\n      jump\t// in\n    tag_153:\n        /* \"contracts/core/VeloBot.sol\":2080:2091  tickSpacing */\n      0x04\n      0x14\n        /* \"contracts/core/VeloBot.sol\":2080:2130  tickSpacing = ICLPoolConstants(pool).tickSpacing() */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0x02\n      signextend\n      0xffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/core/VeloBot.sol\":1784:2138  function _newPool(address newPool) external {\r... */\n      pop\n      jump\t// out\n        /* \"contracts/core/VeloBot.sol\":1211:1233  address public farmNFT */\n    tag_69:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x03))\n      dup2\n      jump\t// out\n        /* \"contracts/core/VeloBot.sol\":2338:3423  function Swap0for1(uint256 amountIn) external {\r... */\n    tag_74:\n        /* \"contracts/core/VeloBot.sol\":2414:2415  0 */\n      0x00\n        /* \"contracts/core/VeloBot.sol\":2403:2411  amountIn */\n      dup2\n        /* \"contracts/core/VeloBot.sol\":2403:2415  amountIn > 0 */\n      gt\n        /* \"contracts/core/VeloBot.sol\":2395:2440  require(amountIn > 0, \"Invalid input amount\") */\n      tag_156\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_135\n      swap1\n      tag_158\n      jump\t// in\n    tag_156:\n        /* \"contracts/core/VeloBot.sol\":2505:2525  uint160 sqrtPriceX96 */\n      0x00\n        /* \"contracts/core/VeloBot.sol\":2552:2556  pool */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloBot.sol\":2539:2563  ICLPoolState(pool).slot0 */\n      and\n      0x3850c7bd\n        /* \"contracts/core/VeloBot.sol\":2539:2565  ICLPoolState(pool).slot0() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0xc0\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_159\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_159:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_161\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_161:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_162\n      swap2\n      swap1\n      tag_124\n      jump\t// in\n    tag_162:\n        /* \"contracts/core/VeloBot.sol\":2504:2565  (uint160 sqrtPriceX96, , , , , ) = ICLPoolState(pool).slot0() */\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"contracts/core/VeloBot.sol\":2576:2601  uint160 sqrtPriceLimitX96 */\n      0x00\n        /* \"contracts/core/VeloBot.sol\":2632:2635  100 */\n      0x64\n        /* \"contracts/core/VeloBot.sol\":2612:2624  sqrtPriceX96 */\n      dup3\n        /* \"contracts/core/VeloBot.sol\":2627:2629  99 */\n      0x63\n        /* \"contracts/core/VeloBot.sol\":2612:2629  sqrtPriceX96 * 99 */\n      mul\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloBot.sol\":2612:2635  sqrtPriceX96 * 99 / 100 */\n      and\n      dup2\n      tag_163\n      jumpi\n      invalid\n    tag_163:\n      div\n      swap1\n      pop\n        /* \"contracts/core/libraries/TickMath.sol\":824:834  4295128739 */\n      0x01000276a3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloBot.sol\":2699:2743  sqrtPriceLimitX96 <= TickMath.MIN_SQRT_RATIO */\n      dup3\n      and\n      gt\n        /* \"contracts/core/VeloBot.sol\":2695:2819  if (sqrtPriceLimitX96 <= TickMath.MIN_SQRT_RATIO) {\r... */\n      tag_164\n      jumpi\n      pop\n        /* \"contracts/core/VeloBot.sol\":2780:2807  TickMath.MIN_SQRT_RATIO + 1 */\n      0x01000276a4\n        /* \"contracts/core/VeloBot.sol\":2695:2819  if (sqrtPriceLimitX96 <= TickMath.MIN_SQRT_RATIO) {\r... */\n    tag_164:\n        /* \"contracts/core/VeloBot.sol\":2886:2892  token0 */\n      sload(0x01)\n      0x00\n        /* \"contracts/core/VeloBot.sol\":2902:2906  pool */\n      sload\n        /* \"contracts/core/VeloBot.sol\":2872:2917  IERC20Minimal(token0).approve(pool, amountIn) */\n      mload(0x40)\n      shl(0xe0, 0x095ea7b3)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloBot.sol\":2886:2892  token0 */\n      swap3\n      dup4\n      and\n      swap3\n        /* \"contracts/core/VeloBot.sol\":2872:2901  IERC20Minimal(token0).approve */\n      0x095ea7b3\n      swap3\n        /* \"contracts/core/VeloBot.sol\":2872:2917  IERC20Minimal(token0).approve(pool, amountIn) */\n      tag_165\n      swap3\n        /* \"contracts/core/VeloBot.sol\":2902:2906  pool */\n      swap2\n      and\n      swap1\n        /* \"contracts/core/VeloBot.sol\":2908:2916  amountIn */\n      dup8\n      swap1\n        /* \"contracts/core/VeloBot.sol\":2872:2917  IERC20Minimal(token0).approve(pool, amountIn) */\n      0x04\n      add\n      tag_103\n      jump\t// in\n    tag_165:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_166\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_166:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_168\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_168:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_169\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_169:\n      pop\n        /* \"contracts/core/VeloBot.sol\":3026:3043  bytes memory data */\n      0x00\n        /* \"contracts/core/VeloBot.sol\":3065:3069  this */\n      address\n        /* \"contracts/core/VeloBot.sol\":3046:3071  abi.encode(address(this)) */\n      add(0x20, mload(0x40))\n      tag_170\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_170:\n      0x40\n      dup1\n      mload\n      not(0x1f)\n      dup2\n      dup5\n      sub\n      add\n      dup2\n      mstore\n      swap1\n      dup3\n      swap1\n      mstore\n        /* \"contracts/core/VeloBot.sol\":3141:3145  pool */\n      sload(0x00)\n      shl(0xe3, 0x02515961)\n        /* \"contracts/core/VeloBot.sol\":3126:3415  ICLPoolActions(pool).swap(\r... */\n      dup4\n      mstore\n        /* \"contracts/core/VeloBot.sol\":3046:3071  abi.encode(address(this)) */\n      swap1\n      swap3\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloBot.sol\":3141:3145  pool */\n      and\n      swap1\n        /* \"contracts/core/VeloBot.sol\":3126:3151  ICLPoolActions(pool).swap */\n      0x128acb08\n      swap1\n        /* \"contracts/core/VeloBot.sol\":3126:3415  ICLPoolActions(pool).swap(\r... */\n      tag_171\n      swap1\n        /* \"contracts/core/VeloBot.sol\":3174:3178  this */\n      address\n      swap1\n        /* \"contracts/core/VeloBot.sol\":3141:3145  pool */\n      0x01\n      swap1\n        /* \"contracts/core/VeloBot.sol\":3282:3290  amountIn */\n      dup10\n      swap1\n        /* \"contracts/core/VeloBot.sol\":3322:3339  sqrtPriceLimitX96 */\n      dup9\n      swap1\n        /* \"contracts/core/VeloBot.sol\":3046:3071  abi.encode(address(this)) */\n      dup9\n      swap1\n        /* \"contracts/core/VeloBot.sol\":3126:3415  ICLPoolActions(pool).swap(\r... */\n      0x04\n      add\n      tag_172\n      jump\t// in\n    tag_171:\n      0x40\n      dup1\n      mload\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_173\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_173:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_175\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_175:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_176\n      swap2\n      swap1\n      tag_177\n      jump\t// in\n    tag_176:\n      pop\n      pop\n        /* \"contracts/core/VeloBot.sol\":2338:3423  function Swap0for1(uint256 amountIn) external {\r... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/core/VeloBot.sol\":1630:1776  function _newAdmin(address newAdmin) external {\r... */\n    tag_78:\n        /* \"contracts/core/VeloBot.sol\":1709:1714  admin */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x04))\n        /* \"contracts/core/VeloBot.sol\":1695:1705  msg.sender */\n      caller\n        /* \"contracts/core/VeloBot.sol\":1695:1714  msg.sender == admin */\n      eq\n        /* \"contracts/core/VeloBot.sol\":1687:1741  require(msg.sender == admin, \"Only owner can do this\") */\n      tag_179\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_135\n      swap1\n      tag_136\n      jump\t// in\n    tag_179:\n        /* \"contracts/core/VeloBot.sol\":1752:1757  admin */\n      0x04\n        /* \"contracts/core/VeloBot.sol\":1752:1768  admin = newAdmin */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/core/VeloBot.sol\":1630:1776  function _newAdmin(address newAdmin) external {\r... */\n      jump\t// out\n        /* \"contracts/core/VeloBot.sol\":1240:1260  address public admin */\n    tag_81:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x04))\n      dup2\n      jump\t// out\n        /* \"contracts/core/VeloBot.sol\":4598:5257  function uniswapV3SwapCallback(\r... */\n    tag_87:\n        /* \"contracts/core/VeloBot.sol\":4783:4787  pool */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x00))\n        /* \"contracts/core/VeloBot.sol\":4769:4779  msg.sender */\n      caller\n        /* \"contracts/core/VeloBot.sol\":4769:4787  msg.sender == pool */\n      eq\n        /* \"contracts/core/VeloBot.sol\":4761:4815  require(msg.sender == pool, \"Callback only from pool\") */\n      tag_182\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_135\n      swap1\n      tag_184\n      jump\t// in\n    tag_182:\n        /* \"contracts/core/VeloBot.sol\":4926:4927  0 */\n      0x00\n        /* \"contracts/core/VeloBot.sol\":4911:4923  amount0Delta */\n      dup5\n        /* \"contracts/core/VeloBot.sol\":4911:4927  amount0Delta > 0 */\n      sgt\n        /* \"contracts/core/VeloBot.sol\":4907:5015  if (amount0Delta > 0) {\r... */\n      iszero\n      tag_185\n      jumpi\n        /* \"contracts/core/VeloBot.sol\":4958:4964  token0 */\n      sload(0x01)\n      0x00\n        /* \"contracts/core/VeloBot.sol\":4975:4979  pool */\n      sload\n        /* \"contracts/core/VeloBot.sol\":4944:5003  IERC20Minimal(token0).transfer(pool, uint256(amount0Delta)) */\n      mload(0x40)\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloBot.sol\":4958:4964  token0 */\n      swap3\n      dup4\n      and\n      swap3\n        /* \"contracts/core/VeloBot.sol\":4944:4974  IERC20Minimal(token0).transfer */\n      0xa9059cbb\n      swap3\n        /* \"contracts/core/VeloBot.sol\":4944:5003  IERC20Minimal(token0).transfer(pool, uint256(amount0Delta)) */\n      tag_186\n      swap3\n        /* \"contracts/core/VeloBot.sol\":4975:4979  pool */\n      swap2\n      and\n      swap1\n        /* \"contracts/core/VeloBot.sol\":4989:5001  amount0Delta */\n      dup9\n      swap1\n        /* \"contracts/core/VeloBot.sol\":4944:5003  IERC20Minimal(token0).transfer(pool, uint256(amount0Delta)) */\n      0x04\n      add\n      tag_103\n      jump\t// in\n    tag_186:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_187\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_187:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_189\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_189:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_190\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_190:\n      pop\n        /* \"contracts/core/VeloBot.sol\":4907:5015  if (amount0Delta > 0) {\r... */\n    tag_185:\n        /* \"contracts/core/VeloBot.sol\":5161:5162  0 */\n      0x00\n        /* \"contracts/core/VeloBot.sol\":5146:5158  amount1Delta */\n      dup4\n        /* \"contracts/core/VeloBot.sol\":5146:5162  amount1Delta > 0 */\n      sgt\n        /* \"contracts/core/VeloBot.sol\":5142:5250  if (amount1Delta > 0) {\r... */\n      iszero\n      tag_191\n      jumpi\n        /* \"contracts/core/VeloBot.sol\":5193:5199  token1 */\n      sload(0x02)\n      0x00\n        /* \"contracts/core/VeloBot.sol\":5210:5214  pool */\n      sload\n        /* \"contracts/core/VeloBot.sol\":5179:5238  IERC20Minimal(token1).transfer(pool, uint256(amount1Delta)) */\n      mload(0x40)\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloBot.sol\":5193:5199  token1 */\n      swap3\n      dup4\n      and\n      swap3\n        /* \"contracts/core/VeloBot.sol\":5179:5209  IERC20Minimal(token1).transfer */\n      0xa9059cbb\n      swap3\n        /* \"contracts/core/VeloBot.sol\":5179:5238  IERC20Minimal(token1).transfer(pool, uint256(amount1Delta)) */\n      tag_192\n      swap3\n        /* \"contracts/core/VeloBot.sol\":5210:5214  pool */\n      swap2\n      and\n      swap1\n        /* \"contracts/core/VeloBot.sol\":5224:5236  amount1Delta */\n      dup8\n      swap1\n        /* \"contracts/core/VeloBot.sol\":5179:5238  IERC20Minimal(token1).transfer(pool, uint256(amount1Delta)) */\n      0x04\n      add\n      tag_103\n      jump\t// in\n    tag_192:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_193\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_193:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_195\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_195:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_196\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_196:\n      pop\n        /* \"contracts/core/VeloBot.sol\":5142:5250  if (amount1Delta > 0) {\r... */\n    tag_191:\n        /* \"contracts/core/VeloBot.sol\":4598:5257  function uniswapV3SwapCallback(\r... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/core/VeloBot.sol\":3431:4520  function V3Swap1for0(uint256 amountIn) external {\r... */\n    tag_91:\n        /* \"contracts/core/VeloBot.sol\":3509:3510  0 */\n      0x00\n        /* \"contracts/core/VeloBot.sol\":3498:3506  amountIn */\n      dup2\n        /* \"contracts/core/VeloBot.sol\":3498:3510  amountIn > 0 */\n      gt\n        /* \"contracts/core/VeloBot.sol\":3490:3535  require(amountIn > 0, \"Invalid input amount\") */\n      tag_198\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_135\n      swap1\n      tag_158\n      jump\t// in\n    tag_198:\n        /* \"contracts/core/VeloBot.sol\":3600:3620  uint160 sqrtPriceX96 */\n      0x00\n        /* \"contracts/core/VeloBot.sol\":3647:3651  pool */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloBot.sol\":3634:3658  ICLPoolState(pool).slot0 */\n      and\n      0x3850c7bd\n        /* \"contracts/core/VeloBot.sol\":3634:3660  ICLPoolState(pool).slot0() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0xc0\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_200\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_200:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_202\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_202:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_203\n      swap2\n      swap1\n      tag_124\n      jump\t// in\n    tag_203:\n        /* \"contracts/core/VeloBot.sol\":3599:3660  (uint160 sqrtPriceX96, , , , , ) = ICLPoolState(pool).slot0() */\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"contracts/core/VeloBot.sol\":3671:3696  uint160 sqrtPriceLimitX96 */\n      0x00\n        /* \"contracts/core/VeloBot.sol\":3728:3731  100 */\n      0x64\n        /* \"contracts/core/VeloBot.sol\":3707:3719  sqrtPriceX96 */\n      dup3\n        /* \"contracts/core/VeloBot.sol\":3722:3725  101 */\n      0x65\n        /* \"contracts/core/VeloBot.sol\":3707:3725  sqrtPriceX96 * 101 */\n      mul\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloBot.sol\":3707:3731  sqrtPriceX96 * 101 / 100 */\n      and\n      dup2\n      tag_204\n      jumpi\n      invalid\n    tag_204:\n      div\n      swap1\n      pop\n        /* \"contracts/core/libraries/TickMath.sol\":824:834  4295128739 */\n      0x01000276a3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloBot.sol\":3795:3839  sqrtPriceLimitX96 <= TickMath.MIN_SQRT_RATIO */\n      dup3\n      and\n      gt\n        /* \"contracts/core/VeloBot.sol\":3791:3915  if (sqrtPriceLimitX96 <= TickMath.MIN_SQRT_RATIO) {\r... */\n      tag_205\n      jumpi\n      pop\n        /* \"contracts/core/VeloBot.sol\":3876:3903  TickMath.MIN_SQRT_RATIO - 1 */\n      0x01000276a2\n        /* \"contracts/core/VeloBot.sol\":3791:3915  if (sqrtPriceLimitX96 <= TickMath.MIN_SQRT_RATIO) {\r... */\n    tag_205:\n        /* \"contracts/core/VeloBot.sol\":3982:3988  token1 */\n      sload(0x02)\n      0x00\n        /* \"contracts/core/VeloBot.sol\":3998:4002  pool */\n      sload\n        /* \"contracts/core/VeloBot.sol\":3968:4013  IERC20Minimal(token1).approve(pool, amountIn) */\n      mload(0x40)\n      shl(0xe0, 0x095ea7b3)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloBot.sol\":3982:3988  token1 */\n      swap3\n      dup4\n      and\n      swap3\n        /* \"contracts/core/VeloBot.sol\":3968:3997  IERC20Minimal(token1).approve */\n      0x095ea7b3\n      swap3\n        /* \"contracts/core/VeloBot.sol\":3968:4013  IERC20Minimal(token1).approve(pool, amountIn) */\n      tag_206\n      swap3\n        /* \"contracts/core/VeloBot.sol\":3998:4002  pool */\n      swap2\n      and\n      swap1\n        /* \"contracts/core/VeloBot.sol\":4004:4012  amountIn */\n      dup8\n      swap1\n        /* \"contracts/core/VeloBot.sol\":3968:4013  IERC20Minimal(token1).approve(pool, amountIn) */\n      0x04\n      add\n      tag_103\n      jump\t// in\n    tag_206:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_207\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_207:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_209\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_209:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_210\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_210:\n      pop\n        /* \"contracts/core/VeloBot.sol\":4122:4139  bytes memory data */\n      0x00\n        /* \"contracts/core/VeloBot.sol\":4161:4165  this */\n      address\n        /* \"contracts/core/VeloBot.sol\":4142:4167  abi.encode(address(this)) */\n      add(0x20, mload(0x40))\n      tag_211\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_211:\n      0x40\n      dup1\n      mload\n      not(0x1f)\n      dup2\n      dup5\n      sub\n      add\n      dup2\n      mstore\n      swap1\n      dup3\n      swap1\n      mstore\n        /* \"contracts/core/VeloBot.sol\":4237:4241  pool */\n      0x00\n      dup1\n      sload\n      shl(0xe3, 0x02515961)\n        /* \"contracts/core/VeloBot.sol\":4222:4512  ICLPoolActions(pool).swap(\r... */\n      dup5\n      mstore\n        /* \"contracts/core/VeloBot.sol\":4142:4167  abi.encode(address(this)) */\n      swap2\n      swap4\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloBot.sol\":4237:4241  pool */\n      swap1\n      swap2\n      and\n      swap2\n        /* \"contracts/core/VeloBot.sol\":4222:4247  ICLPoolActions(pool).swap */\n      0x128acb08\n      swap2\n        /* \"contracts/core/VeloBot.sol\":4222:4512  ICLPoolActions(pool).swap(\r... */\n      tag_171\n      swap2\n        /* \"contracts/core/VeloBot.sol\":4270:4274  this */\n      address\n      swap2\n        /* \"contracts/core/VeloBot.sol\":4237:4241  pool */\n      swap1\n        /* \"contracts/core/VeloBot.sol\":4379:4387  amountIn */\n      dup10\n      swap1\n        /* \"contracts/core/VeloBot.sol\":4419:4436  sqrtPriceLimitX96 */\n      dup9\n      swap1\n        /* \"contracts/core/VeloBot.sol\":4142:4167  abi.encode(address(this)) */\n      dup9\n      swap1\n        /* \"contracts/core/VeloBot.sol\":4222:4512  ICLPoolActions(pool).swap(\r... */\n      0x04\n      add\n      tag_172\n      jump\t// in\n        /* \"contracts/core/VeloBot.sol\":6831:7252  function _createDeposit(address owner, uint256 tokenId) internal {\r... */\n    tag_94:\n        /* \"contracts/core/VeloBot.sol\":7022:7029  farmNFT */\n      sload(0x03)\n        /* \"contracts/core/VeloBot.sol\":6994:7049  INonfungiblePositionManager(farmNFT).positions(tokenId) */\n      mload(0x40)\n      shl(0xe3, 0x133f7571)\n      dup2\n      mstore\n        /* \"contracts/core/VeloBot.sol\":6912:6927  address _token0 */\n      0x00\n      swap2\n      dup3\n      swap2\n      dup3\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloBot.sol\":7022:7029  farmNFT */\n      and\n      swap1\n        /* \"contracts/core/VeloBot.sol\":6994:7040  INonfungiblePositionManager(farmNFT).positions */\n      0x99fbab88\n      swap1\n        /* \"contracts/core/VeloBot.sol\":6994:7049  INonfungiblePositionManager(farmNFT).positions(tokenId) */\n      tag_218\n      swap1\n        /* \"contracts/core/VeloBot.sol\":7041:7048  tokenId */\n      dup8\n      swap1\n        /* \"contracts/core/VeloBot.sol\":6994:7049  INonfungiblePositionManager(farmNFT).positions(tokenId) */\n      0x04\n      add\n      tag_219\n      jump\t// in\n    tag_218:\n      0x0180\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_220\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_220:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_222\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_222:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_223\n      swap2\n      swap1\n      tag_224\n      jump\t// in\n    tag_223:\n        /* \"contracts/core/VeloBot.sol\":6907:7049  (, , address _token0, address _token1, , , , uint128 liquidity, , , , ) =\r... */\n      pop\n      pop\n      pop\n      pop\n      swap8\n      pop\n      pop\n      pop\n      pop\n      swap5\n      pop\n      swap5\n      pop\n      pop\n      pop\n        /* \"contracts/core/VeloBot.sol\":7165:7244  Deposit({owner: owner, liquidity: liquidity, token0: _token0, token1: _token1}) */\n      mload(0x40)\n      dup1\n      0x80\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/core/VeloBot.sol\":7181:7186  owner */\n      dup7\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloBot.sol\":7165:7244  Deposit({owner: owner, liquidity: liquidity, token0: _token0, token1: _token1}) */\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/core/VeloBot.sol\":7199:7208  liquidity */\n      dup3\n      sub(shl(0x80, 0x01), 0x01)\n        /* \"contracts/core/VeloBot.sol\":7165:7244  Deposit({owner: owner, liquidity: liquidity, token0: _token0, token1: _token1}) */\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/core/VeloBot.sol\":7218:7225  _token0 */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloBot.sol\":7165:7244  Deposit({owner: owner, liquidity: liquidity, token0: _token0, token1: _token1}) */\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/core/VeloBot.sol\":7235:7242  _token1 */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/core/VeloBot.sol\":7165:7244  Deposit({owner: owner, liquidity: liquidity, token0: _token0, token1: _token1}) */\n      and\n      dup2\n      mstore\n      pop\n        /* \"contracts/core/VeloBot.sol\":7145:7153  deposits */\n      0x05\n        /* \"contracts/core/VeloBot.sol\":7145:7162  deposits[tokenId] */\n      0x00\n        /* \"contracts/core/VeloBot.sol\":7154:7161  tokenId */\n      dup7\n        /* \"contracts/core/VeloBot.sol\":7145:7162  deposits[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/core/VeloBot.sol\":7145:7244  deposits[tokenId] = Deposit({owner: owner, liquidity: liquidity, token0: _token0, token1: _token1}) */\n      0x00\n      dup3\n      add\n      mload\n      dup2\n      0x00\n      add\n      exp(0x0100, 0x00)\n      dup2\n      sload\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n      mul\n      not\n      and\n      swap1\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0x20\n      dup3\n      add\n      mload\n      dup2\n      0x01\n      add\n      exp(0x0100, 0x00)\n      dup2\n      sload\n      dup2\n      sub(shl(0x80, 0x01), 0x01)\n      mul\n      not\n      and\n      swap1\n      dup4\n      sub(shl(0x80, 0x01), 0x01)\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0x40\n      dup3\n      add\n      mload\n      dup2\n      0x02\n      add\n      exp(0x0100, 0x00)\n      dup2\n      sload\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n      mul\n      not\n      and\n      swap1\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0x60\n      dup3\n      add\n      mload\n      dup2\n      0x03\n      add\n      exp(0x0100, 0x00)\n      dup2\n      sload\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n      mul\n      not\n      and\n      swap1\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      swap1\n      pop\n      pop\n        /* \"contracts/core/VeloBot.sol\":6831:7252  function _createDeposit(address owner, uint256 tokenId) internal {\r... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14:156   */\n    tag_226:\n        /* \"#utility.yul\":95:108   */\n      dup1\n      mload\n        /* \"#utility.yul\":117:150   */\n      tag_228\n        /* \"#utility.yul\":95:108   */\n      dup2\n        /* \"#utility.yul\":117:150   */\n      tag_229\n      jump\t// in\n    tag_228:\n        /* \"#utility.yul\":76:156   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":161:327   */\n    tag_230:\n        /* \"#utility.yul\":239:252   */\n      dup1\n      mload\n        /* \"#utility.yul\":288:301   */\n      dup1\n      iszero\n        /* \"#utility.yul\":281:302   */\n      iszero\n        /* \"#utility.yul\":271:303   */\n      dup2\n      eq\n        /* \"#utility.yul\":261:263   */\n      tag_228\n      jumpi\n        /* \"#utility.yul\":317:318   */\n      0x00\n        /* \"#utility.yul\":314:315   */\n      dup1\n        /* \"#utility.yul\":307:319   */\n      revert\n        /* \"#utility.yul\":332:709   */\n    tag_233:\n      0x00\n      dup1\n        /* \"#utility.yul\":449:452   */\n      dup4\n        /* \"#utility.yul\":442:446   */\n      0x1f\n        /* \"#utility.yul\":434:440   */\n      dup5\n        /* \"#utility.yul\":430:447   */\n      add\n        /* \"#utility.yul\":426:453   */\n      slt\n        /* \"#utility.yul\":416:418   */\n      tag_235\n      jumpi\n        /* \"#utility.yul\":474:482   */\n      dup2\n        /* \"#utility.yul\":464:472   */\n      dup3\n        /* \"#utility.yul\":457:483   */\n      revert\n        /* \"#utility.yul\":416:418   */\n    tag_235:\n      pop\n        /* \"#utility.yul\":504:524   */\n      dup2\n      calldataload\n        /* \"#utility.yul\":547:565   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":536:566   */\n      dup2\n      gt\n        /* \"#utility.yul\":533:535   */\n      iszero\n      tag_236\n      jumpi\n        /* \"#utility.yul\":586:594   */\n      dup2\n        /* \"#utility.yul\":576:584   */\n      dup3\n        /* \"#utility.yul\":569:595   */\n      revert\n        /* \"#utility.yul\":533:535   */\n    tag_236:\n        /* \"#utility.yul\":630:634   */\n      0x20\n        /* \"#utility.yul\":622:628   */\n      dup4\n        /* \"#utility.yul\":618:635   */\n      add\n        /* \"#utility.yul\":606:635   */\n      swap2\n      pop\n        /* \"#utility.yul\":682:685   */\n      dup4\n        /* \"#utility.yul\":675:679   */\n      0x20\n        /* \"#utility.yul\":666:672   */\n      dup3\n        /* \"#utility.yul\":658:664   */\n      dup6\n        /* \"#utility.yul\":654:673   */\n      add\n        /* \"#utility.yul\":650:680   */\n      add\n        /* \"#utility.yul\":647:686   */\n      gt\n        /* \"#utility.yul\":644:646   */\n      iszero\n      tag_237\n      jumpi\n        /* \"#utility.yul\":699:700   */\n      0x00\n        /* \"#utility.yul\":696:697   */\n      dup1\n        /* \"#utility.yul\":689:701   */\n      revert\n        /* \"#utility.yul\":644:646   */\n    tag_237:\n        /* \"#utility.yul\":406:709   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":714:880   */\n    tag_238:\n        /* \"#utility.yul\":793:806   */\n      dup1\n      mload\n        /* \"#utility.yul\":846:847   */\n      0x02\n        /* \"#utility.yul\":835:855   */\n      dup2\n      swap1\n      signextend\n        /* \"#utility.yul\":825:856   */\n      dup2\n      eq\n        /* \"#utility.yul\":815:817   */\n      tag_228\n      jumpi\n        /* \"#utility.yul\":870:871   */\n      0x00\n        /* \"#utility.yul\":867:868   */\n      dup1\n        /* \"#utility.yul\":860:872   */\n      revert\n        /* \"#utility.yul\":885:1079   */\n    tag_241:\n        /* \"#utility.yul\":966:979   */\n      dup1\n      mload\n      sub(shl(0x80, 0x01), 0x01)\n        /* \"#utility.yul\":1008:1054   */\n      dup2\n      and\n        /* \"#utility.yul\":998:1055   */\n      dup2\n      eq\n        /* \"#utility.yul\":988:990   */\n      tag_228\n      jumpi\n        /* \"#utility.yul\":1069:1070   */\n      0x00\n        /* \"#utility.yul\":1066:1067   */\n      dup1\n        /* \"#utility.yul\":1059:1071   */\n      revert\n        /* \"#utility.yul\":1084:1249   */\n    tag_244:\n        /* \"#utility.yul\":1164:1177   */\n      dup1\n      mload\n        /* \"#utility.yul\":1217:1223   */\n      0xffff\n        /* \"#utility.yul\":1206:1224   */\n      dup2\n      and\n        /* \"#utility.yul\":1196:1225   */\n      dup2\n      eq\n        /* \"#utility.yul\":1186:1188   */\n      tag_228\n      jumpi\n        /* \"#utility.yul\":1239:1240   */\n      0x00\n        /* \"#utility.yul\":1236:1237   */\n      dup1\n        /* \"#utility.yul\":1229:1241   */\n      revert\n        /* \"#utility.yul\":1254:1513   */\n    tag_39:\n      0x00\n        /* \"#utility.yul\":1366:1368   */\n      0x20\n        /* \"#utility.yul\":1354:1363   */\n      dup3\n        /* \"#utility.yul\":1345:1352   */\n      dup5\n        /* \"#utility.yul\":1341:1364   */\n      sub\n        /* \"#utility.yul\":1337:1369   */\n      slt\n        /* \"#utility.yul\":1334:1336   */\n      iszero\n      tag_248\n      jumpi\n        /* \"#utility.yul\":1387:1393   */\n      dup1\n        /* \"#utility.yul\":1379:1385   */\n      dup2\n        /* \"#utility.yul\":1372:1394   */\n      revert\n        /* \"#utility.yul\":1334:1336   */\n    tag_248:\n        /* \"#utility.yul\":1431:1440   */\n      dup2\n        /* \"#utility.yul\":1418:1441   */\n      calldataload\n        /* \"#utility.yul\":1450:1483   */\n      tag_249\n        /* \"#utility.yul\":1477:1482   */\n      dup2\n        /* \"#utility.yul\":1450:1483   */\n      tag_229\n      jump\t// in\n    tag_249:\n        /* \"#utility.yul\":1502:1507   */\n      swap4\n        /* \"#utility.yul\":1324:1513   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1518:1781   */\n    tag_141:\n      0x00\n        /* \"#utility.yul\":1641:1643   */\n      0x20\n        /* \"#utility.yul\":1629:1638   */\n      dup3\n        /* \"#utility.yul\":1620:1627   */\n      dup5\n        /* \"#utility.yul\":1616:1639   */\n      sub\n        /* \"#utility.yul\":1612:1644   */\n      slt\n        /* \"#utility.yul\":1609:1611   */\n      iszero\n      tag_251\n      jumpi\n        /* \"#utility.yul\":1662:1668   */\n      dup1\n        /* \"#utility.yul\":1654:1660   */\n      dup2\n        /* \"#utility.yul\":1647:1669   */\n      revert\n        /* \"#utility.yul\":1609:1611   */\n    tag_251:\n        /* \"#utility.yul\":1699:1708   */\n      dup2\n        /* \"#utility.yul\":1693:1709   */\n      mload\n        /* \"#utility.yul\":1718:1751   */\n      tag_249\n        /* \"#utility.yul\":1745:1750   */\n      dup2\n        /* \"#utility.yul\":1718:1751   */\n      tag_229\n      jump\t// in\n        /* \"#utility.yul\":1786:2566   */\n    tag_28:\n      0x00\n      dup1\n      0x00\n      dup1\n      0x00\n        /* \"#utility.yul\":1968:1971   */\n      0x80\n        /* \"#utility.yul\":1956:1965   */\n      dup7\n        /* \"#utility.yul\":1947:1954   */\n      dup9\n        /* \"#utility.yul\":1943:1966   */\n      sub\n        /* \"#utility.yul\":1939:1972   */\n      slt\n        /* \"#utility.yul\":1936:1938   */\n      iszero\n      tag_254\n      jumpi\n        /* \"#utility.yul\":1990:1996   */\n      dup1\n        /* \"#utility.yul\":1982:1988   */\n      dup2\n        /* \"#utility.yul\":1975:1997   */\n      revert\n        /* \"#utility.yul\":1936:1938   */\n    tag_254:\n        /* \"#utility.yul\":2034:2043   */\n      dup6\n        /* \"#utility.yul\":2021:2044   */\n      calldataload\n        /* \"#utility.yul\":2053:2086   */\n      tag_255\n        /* \"#utility.yul\":2080:2085   */\n      dup2\n        /* \"#utility.yul\":2053:2086   */\n      tag_229\n      jump\t// in\n    tag_255:\n        /* \"#utility.yul\":2105:2110   */\n      swap5\n      pop\n        /* \"#utility.yul\":2162:2164   */\n      0x20\n        /* \"#utility.yul\":2147:2165   */\n      dup7\n      add\n        /* \"#utility.yul\":2134:2166   */\n      calldataload\n        /* \"#utility.yul\":2175:2210   */\n      tag_256\n        /* \"#utility.yul\":2134:2166   */\n      dup2\n        /* \"#utility.yul\":2175:2210   */\n      tag_229\n      jump\t// in\n    tag_256:\n        /* \"#utility.yul\":2229:2236   */\n      swap4\n      pop\n        /* \"#utility.yul\":2283:2285   */\n      0x40\n        /* \"#utility.yul\":2268:2286   */\n      dup7\n      add\n        /* \"#utility.yul\":2255:2287   */\n      calldataload\n      swap3\n      pop\n        /* \"#utility.yul\":2338:2340   */\n      0x60\n        /* \"#utility.yul\":2323:2341   */\n      dup7\n      add\n        /* \"#utility.yul\":2310:2342   */\n      calldataload\n        /* \"#utility.yul\":2365:2383   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":2354:2384   */\n      dup2\n      gt\n        /* \"#utility.yul\":2351:2353   */\n      iszero\n      tag_257\n      jumpi\n        /* \"#utility.yul\":2402:2408   */\n      dup2\n        /* \"#utility.yul\":2394:2400   */\n      dup3\n        /* \"#utility.yul\":2387:2409   */\n      revert\n        /* \"#utility.yul\":2351:2353   */\n    tag_257:\n        /* \"#utility.yul\":2446:2506   */\n      tag_258\n        /* \"#utility.yul\":2498:2505   */\n      dup9\n        /* \"#utility.yul\":2489:2495   */\n      dup3\n        /* \"#utility.yul\":2478:2487   */\n      dup10\n        /* \"#utility.yul\":2474:2496   */\n      add\n        /* \"#utility.yul\":2446:2506   */\n      tag_233\n      jump\t// in\n    tag_258:\n        /* \"#utility.yul\":1926:2566   */\n      swap7\n      swap10\n      swap6\n      swap9\n      pop\n      swap4\n      swap7\n      pop\n        /* \"#utility.yul\":2525:2533   */\n      swap3\n      swap5\n        /* \"#utility.yul\":2420:2506   */\n      swap4\n        /* \"#utility.yul\":1926:2566   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2571:2785   */\n    tag_108:\n      0x00\n        /* \"#utility.yul\":2691:2693   */\n      0x20\n        /* \"#utility.yul\":2679:2688   */\n      dup3\n        /* \"#utility.yul\":2670:2677   */\n      dup5\n        /* \"#utility.yul\":2666:2689   */\n      sub\n        /* \"#utility.yul\":2662:2694   */\n      slt\n        /* \"#utility.yul\":2659:2661   */\n      iszero\n      tag_260\n      jumpi\n        /* \"#utility.yul\":2712:2718   */\n      dup1\n        /* \"#utility.yul\":2704:2710   */\n      dup2\n        /* \"#utility.yul\":2697:2719   */\n      revert\n        /* \"#utility.yul\":2659:2661   */\n    tag_260:\n        /* \"#utility.yul\":2740:2779   */\n      tag_249\n        /* \"#utility.yul\":2769:2778   */\n      dup3\n        /* \"#utility.yul\":2740:2779   */\n      tag_230\n      jump\t// in\n        /* \"#utility.yul\":2790:3006   */\n    tag_154:\n      0x00\n        /* \"#utility.yul\":2911:2913   */\n      0x20\n        /* \"#utility.yul\":2899:2908   */\n      dup3\n        /* \"#utility.yul\":2890:2897   */\n      dup5\n        /* \"#utility.yul\":2886:2909   */\n      sub\n        /* \"#utility.yul\":2882:2914   */\n      slt\n        /* \"#utility.yul\":2879:2881   */\n      iszero\n      tag_263\n      jumpi\n        /* \"#utility.yul\":2932:2938   */\n      dup1\n        /* \"#utility.yul\":2924:2930   */\n      dup2\n        /* \"#utility.yul\":2917:2939   */\n      revert\n        /* \"#utility.yul\":2879:2881   */\n    tag_263:\n        /* \"#utility.yul\":2960:3000   */\n      tag_249\n        /* \"#utility.yul\":2990:2999   */\n      dup3\n        /* \"#utility.yul\":2960:3000   */\n      tag_238\n      jump\t// in\n        /* \"#utility.yul\":3011:3264   */\n    tag_177:\n      0x00\n      dup1\n        /* \"#utility.yul\":3149:3151   */\n      0x40\n        /* \"#utility.yul\":3137:3146   */\n      dup4\n        /* \"#utility.yul\":3128:3135   */\n      dup6\n        /* \"#utility.yul\":3124:3147   */\n      sub\n        /* \"#utility.yul\":3120:3152   */\n      slt\n        /* \"#utility.yul\":3117:3119   */\n      iszero\n      tag_266\n      jumpi\n        /* \"#utility.yul\":3170:3176   */\n      dup2\n        /* \"#utility.yul\":3162:3168   */\n      dup3\n        /* \"#utility.yul\":3155:3177   */\n      revert\n        /* \"#utility.yul\":3117:3119   */\n    tag_266:\n      pop\n      pop\n        /* \"#utility.yul\":3198:3214   */\n      dup1\n      mload\n        /* \"#utility.yul\":3254:3256   */\n      0x20\n        /* \"#utility.yul\":3239:3257   */\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":3233:3258   */\n      mload\n        /* \"#utility.yul\":3198:3214   */\n      swap1\n      swap3\n        /* \"#utility.yul\":3233:3258   */\n      swap1\n      swap2\n      pop\n        /* \"#utility.yul\":3107:3264   */\n      jump\t// out\n        /* \"#utility.yul\":3269:3834   */\n    tag_86:\n      0x00\n      dup1\n      0x00\n      dup1\n        /* \"#utility.yul\":3432:3434   */\n      0x60\n        /* \"#utility.yul\":3420:3429   */\n      dup6\n        /* \"#utility.yul\":3411:3418   */\n      dup8\n        /* \"#utility.yul\":3407:3430   */\n      sub\n        /* \"#utility.yul\":3403:3435   */\n      slt\n        /* \"#utility.yul\":3400:3402   */\n      iszero\n      tag_268\n      jumpi\n        /* \"#utility.yul\":3453:3459   */\n      dup4\n        /* \"#utility.yul\":3445:3451   */\n      dup5\n        /* \"#utility.yul\":3438:3460   */\n      revert\n        /* \"#utility.yul\":3400:3402   */\n    tag_268:\n        /* \"#utility.yul\":3494:3503   */\n      dup5\n        /* \"#utility.yul\":3481:3504   */\n      calldataload\n        /* \"#utility.yul\":3471:3504   */\n      swap4\n      pop\n        /* \"#utility.yul\":3551:3553   */\n      0x20\n        /* \"#utility.yul\":3540:3549   */\n      dup6\n        /* \"#utility.yul\":3536:3554   */\n      add\n        /* \"#utility.yul\":3523:3555   */\n      calldataload\n        /* \"#utility.yul\":3513:3555   */\n      swap3\n      pop\n        /* \"#utility.yul\":3606:3608   */\n      0x40\n        /* \"#utility.yul\":3595:3604   */\n      dup6\n        /* \"#utility.yul\":3591:3609   */\n      add\n        /* \"#utility.yul\":3578:3610   */\n      calldataload\n        /* \"#utility.yul\":3633:3651   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":3625:3631   */\n      dup2\n        /* \"#utility.yul\":3622:3652   */\n      gt\n        /* \"#utility.yul\":3619:3621   */\n      iszero\n      tag_269\n      jumpi\n        /* \"#utility.yul\":3670:3676   */\n      dup3\n        /* \"#utility.yul\":3662:3668   */\n      dup4\n        /* \"#utility.yul\":3655:3677   */\n      revert\n        /* \"#utility.yul\":3619:3621   */\n    tag_269:\n        /* \"#utility.yul\":3714:3774   */\n      tag_270\n        /* \"#utility.yul\":3766:3773   */\n      dup8\n        /* \"#utility.yul\":3757:3763   */\n      dup3\n        /* \"#utility.yul\":3746:3755   */\n      dup9\n        /* \"#utility.yul\":3742:3764   */\n      add\n        /* \"#utility.yul\":3714:3774   */\n      tag_233\n      jump\t// in\n    tag_270:\n        /* \"#utility.yul\":3390:3834   */\n      swap6\n      swap9\n      swap5\n      swap8\n      pop\n        /* \"#utility.yul\":3793:3801   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":3390:3834   */\n      jump\t// out\n        /* \"#utility.yul\":3839:4524   */\n    tag_124:\n      0x00\n      dup1\n      0x00\n      dup1\n      0x00\n      dup1\n        /* \"#utility.yul\":4039:4042   */\n      0xc0\n        /* \"#utility.yul\":4027:4036   */\n      dup8\n        /* \"#utility.yul\":4018:4025   */\n      dup10\n        /* \"#utility.yul\":4014:4037   */\n      sub\n        /* \"#utility.yul\":4010:4043   */\n      slt\n        /* \"#utility.yul\":4007:4009   */\n      iszero\n      tag_272\n      jumpi\n        /* \"#utility.yul\":4061:4067   */\n      dup1\n        /* \"#utility.yul\":4053:4059   */\n      dup2\n        /* \"#utility.yul\":4046:4068   */\n      revert\n        /* \"#utility.yul\":4007:4009   */\n    tag_272:\n        /* \"#utility.yul\":4098:4107   */\n      dup7\n        /* \"#utility.yul\":4092:4108   */\n      mload\n        /* \"#utility.yul\":4117:4150   */\n      tag_273\n        /* \"#utility.yul\":4144:4149   */\n      dup2\n        /* \"#utility.yul\":4117:4150   */\n      tag_229\n      jump\t// in\n    tag_273:\n        /* \"#utility.yul\":4169:4174   */\n      swap6\n      pop\n        /* \"#utility.yul\":4193:4242   */\n      tag_274\n        /* \"#utility.yul\":4238:4240   */\n      0x20\n        /* \"#utility.yul\":4223:4241   */\n      dup9\n      add\n        /* \"#utility.yul\":4193:4242   */\n      tag_238\n      jump\t// in\n    tag_274:\n        /* \"#utility.yul\":4183:4242   */\n      swap5\n      pop\n        /* \"#utility.yul\":4261:4311   */\n      tag_275\n        /* \"#utility.yul\":4307:4309   */\n      0x40\n        /* \"#utility.yul\":4296:4305   */\n      dup9\n        /* \"#utility.yul\":4292:4310   */\n      add\n        /* \"#utility.yul\":4261:4311   */\n      tag_244\n      jump\t// in\n    tag_275:\n        /* \"#utility.yul\":4251:4311   */\n      swap4\n      pop\n        /* \"#utility.yul\":4330:4380   */\n      tag_276\n        /* \"#utility.yul\":4376:4378   */\n      0x60\n        /* \"#utility.yul\":4365:4374   */\n      dup9\n        /* \"#utility.yul\":4361:4379   */\n      add\n        /* \"#utility.yul\":4330:4380   */\n      tag_244\n      jump\t// in\n    tag_276:\n        /* \"#utility.yul\":4320:4380   */\n      swap3\n      pop\n        /* \"#utility.yul\":4399:4450   */\n      tag_277\n        /* \"#utility.yul\":4445:4448   */\n      0x80\n        /* \"#utility.yul\":4434:4443   */\n      dup9\n        /* \"#utility.yul\":4430:4449   */\n      add\n        /* \"#utility.yul\":4399:4450   */\n      tag_244\n      jump\t// in\n    tag_277:\n        /* \"#utility.yul\":4389:4450   */\n      swap2\n      pop\n        /* \"#utility.yul\":4469:4518   */\n      tag_278\n        /* \"#utility.yul\":4513:4516   */\n      0xa0\n        /* \"#utility.yul\":4502:4511   */\n      dup9\n        /* \"#utility.yul\":4498:4517   */\n      add\n        /* \"#utility.yul\":4469:4518   */\n      tag_230\n      jump\t// in\n    tag_278:\n        /* \"#utility.yul\":4459:4518   */\n      swap1\n      pop\n        /* \"#utility.yul\":3997:4524   */\n      swap3\n      swap6\n      pop\n      swap3\n      swap6\n      pop\n      swap3\n      swap6\n      jump\t// out\n        /* \"#utility.yul\":4529:4719   */\n    tag_50:\n      0x00\n        /* \"#utility.yul\":4641:4643   */\n      0x20\n        /* \"#utility.yul\":4629:4638   */\n      dup3\n        /* \"#utility.yul\":4620:4627   */\n      dup5\n        /* \"#utility.yul\":4616:4639   */\n      sub\n        /* \"#utility.yul\":4612:4644   */\n      slt\n        /* \"#utility.yul\":4609:4611   */\n      iszero\n      tag_280\n      jumpi\n        /* \"#utility.yul\":4662:4668   */\n      dup1\n        /* \"#utility.yul\":4654:4660   */\n      dup2\n        /* \"#utility.yul\":4647:4669   */\n      revert\n        /* \"#utility.yul\":4609:4611   */\n    tag_280:\n      pop\n        /* \"#utility.yul\":4690:4713   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":4599:4719   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4724:4918   */\n    tag_101:\n      0x00\n        /* \"#utility.yul\":4847:4849   */\n      0x20\n        /* \"#utility.yul\":4835:4844   */\n      dup3\n        /* \"#utility.yul\":4826:4833   */\n      dup5\n        /* \"#utility.yul\":4822:4845   */\n      sub\n        /* \"#utility.yul\":4818:4850   */\n      slt\n        /* \"#utility.yul\":4815:4817   */\n      iszero\n      tag_282\n      jumpi\n        /* \"#utility.yul\":4868:4874   */\n      dup1\n        /* \"#utility.yul\":4860:4866   */\n      dup2\n        /* \"#utility.yul\":4853:4875   */\n      revert\n        /* \"#utility.yul\":4815:4817   */\n    tag_282:\n      pop\n        /* \"#utility.yul\":4896:4912   */\n      mload\n      swap2\n        /* \"#utility.yul\":4805:4918   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4923:5327   */\n    tag_131:\n      0x00\n      dup1\n      0x00\n      dup1\n        /* \"#utility.yul\":5097:5100   */\n      0x80\n        /* \"#utility.yul\":5085:5094   */\n      dup6\n        /* \"#utility.yul\":5076:5083   */\n      dup8\n        /* \"#utility.yul\":5072:5095   */\n      sub\n        /* \"#utility.yul\":5068:5101   */\n      slt\n        /* \"#utility.yul\":5065:5067   */\n      iszero\n      tag_284\n      jumpi\n        /* \"#utility.yul\":5119:5125   */\n      dup4\n        /* \"#utility.yul\":5111:5117   */\n      dup5\n        /* \"#utility.yul\":5104:5126   */\n      revert\n        /* \"#utility.yul\":5065:5067   */\n    tag_284:\n        /* \"#utility.yul\":5153:5162   */\n      dup5\n        /* \"#utility.yul\":5147:5163   */\n      mload\n        /* \"#utility.yul\":5137:5163   */\n      swap4\n      pop\n        /* \"#utility.yul\":5182:5233   */\n      tag_285\n        /* \"#utility.yul\":5229:5231   */\n      0x20\n        /* \"#utility.yul\":5218:5227   */\n      dup7\n        /* \"#utility.yul\":5214:5232   */\n      add\n        /* \"#utility.yul\":5182:5233   */\n      tag_241\n      jump\t// in\n    tag_285:\n        /* \"#utility.yul\":5273:5275   */\n      0x40\n        /* \"#utility.yul\":5258:5276   */\n      dup7\n      add\n        /* \"#utility.yul\":5252:5277   */\n      mload\n        /* \"#utility.yul\":5317:5319   */\n      0x60\n        /* \"#utility.yul\":5302:5320   */\n      swap1\n      swap7\n      add\n        /* \"#utility.yul\":5296:5321   */\n      mload\n        /* \"#utility.yul\":5055:5327   */\n      swap5\n      swap8\n        /* \"#utility.yul\":5172:5233   */\n      swap1\n      swap7\n      pop\n        /* \"#utility.yul\":5055:5327   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5332:5590   */\n    tag_43:\n      0x00\n      dup1\n        /* \"#utility.yul\":5461:5463   */\n      0x40\n        /* \"#utility.yul\":5449:5458   */\n      dup4\n        /* \"#utility.yul\":5440:5447   */\n      dup6\n        /* \"#utility.yul\":5436:5459   */\n      sub\n        /* \"#utility.yul\":5432:5464   */\n      slt\n        /* \"#utility.yul\":5429:5431   */\n      iszero\n      tag_287\n      jumpi\n        /* \"#utility.yul\":5482:5488   */\n      dup2\n        /* \"#utility.yul\":5474:5480   */\n      dup3\n        /* \"#utility.yul\":5467:5489   */\n      revert\n        /* \"#utility.yul\":5429:5431   */\n    tag_287:\n      pop\n      pop\n        /* \"#utility.yul\":5510:5533   */\n      dup1\n      calldataload\n      swap3\n        /* \"#utility.yul\":5580:5582   */\n      0x20\n        /* \"#utility.yul\":5565:5583   */\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":5552:5584   */\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":5419:5590   */\n      jump\t// out\n        /* \"#utility.yul\":5595:6817   */\n    tag_224:\n      0x00\n      dup1\n      0x00\n      dup1\n      0x00\n      dup1\n      0x00\n      dup1\n      0x00\n      dup1\n      0x00\n      dup1\n        /* \"#utility.yul\":5900:5903   */\n      0x0180\n        /* \"#utility.yul\":5888:5897   */\n      dup14\n        /* \"#utility.yul\":5879:5886   */\n      dup16\n        /* \"#utility.yul\":5875:5898   */\n      sub\n        /* \"#utility.yul\":5871:5904   */\n      slt\n        /* \"#utility.yul\":5868:5870   */\n      iszero\n      tag_289\n      jumpi\n        /* \"#utility.yul\":5922:5928   */\n      dup10\n        /* \"#utility.yul\":5914:5920   */\n      dup11\n        /* \"#utility.yul\":5907:5929   */\n      revert\n        /* \"#utility.yul\":5868:5870   */\n    tag_289:\n        /* \"#utility.yul\":5959:5968   */\n      dup13\n        /* \"#utility.yul\":5953:5969   */\n      mload\n        /* \"#utility.yul\":6009:6035   */\n      0xffffffffffffffffffffffff\n        /* \"#utility.yul\":6002:6007   */\n      dup2\n        /* \"#utility.yul\":5998:6036   */\n      and\n        /* \"#utility.yul\":5991:5996   */\n      dup2\n        /* \"#utility.yul\":5988:6037   */\n      eq\n        /* \"#utility.yul\":5978:5980   */\n      tag_290\n      jumpi\n        /* \"#utility.yul\":6056:6062   */\n      dup11\n        /* \"#utility.yul\":6048:6054   */\n      dup12\n        /* \"#utility.yul\":6041:6063   */\n      revert\n        /* \"#utility.yul\":5978:5980   */\n    tag_290:\n        /* \"#utility.yul\":6084:6089   */\n      swap12\n      pop\n        /* \"#utility.yul\":6108:6159   */\n      tag_291\n        /* \"#utility.yul\":6155:6157   */\n      0x20\n        /* \"#utility.yul\":6140:6158   */\n      dup15\n      add\n        /* \"#utility.yul\":6108:6159   */\n      tag_226\n      jump\t// in\n    tag_291:\n        /* \"#utility.yul\":6098:6159   */\n      swap11\n      pop\n        /* \"#utility.yul\":6178:6229   */\n      tag_292\n        /* \"#utility.yul\":6225:6227   */\n      0x40\n        /* \"#utility.yul\":6214:6223   */\n      dup15\n        /* \"#utility.yul\":6210:6228   */\n      add\n        /* \"#utility.yul\":6178:6229   */\n      tag_226\n      jump\t// in\n    tag_292:\n        /* \"#utility.yul\":6168:6229   */\n      swap10\n      pop\n        /* \"#utility.yul\":6248:6299   */\n      tag_293\n        /* \"#utility.yul\":6295:6297   */\n      0x60\n        /* \"#utility.yul\":6284:6293   */\n      dup15\n        /* \"#utility.yul\":6280:6298   */\n      add\n        /* \"#utility.yul\":6248:6299   */\n      tag_226\n      jump\t// in\n    tag_293:\n        /* \"#utility.yul\":6238:6299   */\n      swap9\n      pop\n        /* \"#utility.yul\":6318:6368   */\n      tag_294\n        /* \"#utility.yul\":6363:6366   */\n      0x80\n        /* \"#utility.yul\":6352:6361   */\n      dup15\n        /* \"#utility.yul\":6348:6367   */\n      add\n        /* \"#utility.yul\":6318:6368   */\n      tag_238\n      jump\t// in\n    tag_294:\n        /* \"#utility.yul\":6308:6368   */\n      swap8\n      pop\n        /* \"#utility.yul\":6387:6437   */\n      tag_295\n        /* \"#utility.yul\":6432:6435   */\n      0xa0\n        /* \"#utility.yul\":6421:6430   */\n      dup15\n        /* \"#utility.yul\":6417:6436   */\n      add\n        /* \"#utility.yul\":6387:6437   */\n      tag_238\n      jump\t// in\n    tag_295:\n        /* \"#utility.yul\":6377:6437   */\n      swap7\n      pop\n        /* \"#utility.yul\":6456:6506   */\n      tag_296\n        /* \"#utility.yul\":6501:6504   */\n      0xc0\n        /* \"#utility.yul\":6490:6499   */\n      dup15\n        /* \"#utility.yul\":6486:6505   */\n      add\n        /* \"#utility.yul\":6456:6506   */\n      tag_238\n      jump\t// in\n    tag_296:\n        /* \"#utility.yul\":6446:6506   */\n      swap6\n      pop\n        /* \"#utility.yul\":6525:6577   */\n      tag_297\n        /* \"#utility.yul\":6572:6575   */\n      0xe0\n        /* \"#utility.yul\":6561:6570   */\n      dup15\n        /* \"#utility.yul\":6557:6576   */\n      add\n        /* \"#utility.yul\":6525:6577   */\n      tag_241\n      jump\t// in\n    tag_297:\n        /* \"#utility.yul\":6515:6577   */\n      swap5\n      pop\n        /* \"#utility.yul\":6617:6620   */\n      0x0100\n        /* \"#utility.yul\":6606:6615   */\n      dup14\n        /* \"#utility.yul\":6602:6621   */\n      add\n        /* \"#utility.yul\":6596:6622   */\n      mload\n        /* \"#utility.yul\":6586:6622   */\n      swap4\n      pop\n        /* \"#utility.yul\":6662:6665   */\n      0x0120\n        /* \"#utility.yul\":6651:6660   */\n      dup14\n        /* \"#utility.yul\":6647:6666   */\n      add\n        /* \"#utility.yul\":6641:6667   */\n      mload\n        /* \"#utility.yul\":6631:6667   */\n      swap3\n      pop\n        /* \"#utility.yul\":6687:6739   */\n      tag_298\n        /* \"#utility.yul\":6734:6737   */\n      0x0140\n        /* \"#utility.yul\":6723:6732   */\n      dup15\n        /* \"#utility.yul\":6719:6738   */\n      add\n        /* \"#utility.yul\":6687:6739   */\n      tag_241\n      jump\t// in\n    tag_298:\n        /* \"#utility.yul\":6676:6739   */\n      swap2\n      pop\n        /* \"#utility.yul\":6759:6811   */\n      tag_299\n        /* \"#utility.yul\":6806:6809   */\n      0x0160\n        /* \"#utility.yul\":6795:6804   */\n      dup15\n        /* \"#utility.yul\":6791:6810   */\n      add\n        /* \"#utility.yul\":6759:6811   */\n      tag_241\n      jump\t// in\n    tag_299:\n        /* \"#utility.yul\":6748:6811   */\n      swap1\n      pop\n        /* \"#utility.yul\":5858:6817   */\n      swap3\n      swap6\n      swap9\n      swap12\n      pop\n      swap3\n      swap6\n      swap9\n      swap12\n      pop\n      swap3\n      swap6\n      swap9\n      swap12\n      jump\t// out\n        /* \"#utility.yul\":6822:6928   */\n    tag_300:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":6890:6921   */\n      and\n        /* \"#utility.yul\":6878:6922   */\n      swap1\n      mstore\n        /* \"#utility.yul\":6868:6928   */\n      jump\t// out\n        /* \"#utility.yul\":6933:7026   */\n    tag_302:\n        /* \"#utility.yul\":7010:7011   */\n      0x02\n        /* \"#utility.yul\":6999:7019   */\n      signextend\n        /* \"#utility.yul\":6987:7020   */\n      swap1\n      mstore\n        /* \"#utility.yul\":6977:7026   */\n      jump\t// out\n        /* \"#utility.yul\":7031:7234   */\n    tag_24:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":7195:7227   */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":7177:7228   */\n      dup2\n      mstore\n        /* \"#utility.yul\":7165:7167   */\n      0x20\n        /* \"#utility.yul\":7150:7168   */\n      add\n      swap1\n        /* \"#utility.yul\":7132:7234   */\n      jump\t// out\n        /* \"#utility.yul\":7239:8194   */\n    tag_172:\n      0x00\n        /* \"#utility.yul\":7499:7500   */\n      0x01\n        /* \"#utility.yul\":7495:7496   */\n      dup1\n        /* \"#utility.yul\":7490:7493   */\n      0xa0\n        /* \"#utility.yul\":7486:7497   */\n      shl\n        /* \"#utility.yul\":7482:7501   */\n      sub\n        /* \"#utility.yul\":7540:7542   */\n      dup1\n        /* \"#utility.yul\":7532:7538   */\n      dup9\n        /* \"#utility.yul\":7528:7543   */\n      and\n        /* \"#utility.yul\":7517:7526   */\n      dup4\n        /* \"#utility.yul\":7510:7544   */\n      mstore\n        /* \"#utility.yul\":7563:7565   */\n      0x20\n        /* \"#utility.yul\":7615:7621   */\n      dup8\n        /* \"#utility.yul\":7608:7622   */\n      iszero\n        /* \"#utility.yul\":7601:7623   */\n      iszero\n        /* \"#utility.yul\":7596:7598   */\n      dup2\n        /* \"#utility.yul\":7585:7594   */\n      dup6\n        /* \"#utility.yul\":7581:7599   */\n      add\n        /* \"#utility.yul\":7574:7624   */\n      mstore\n        /* \"#utility.yul\":7660:7666   */\n      dup7\n        /* \"#utility.yul\":7655:7657   */\n      0x40\n        /* \"#utility.yul\":7644:7653   */\n      dup6\n        /* \"#utility.yul\":7640:7658   */\n      add\n        /* \"#utility.yul\":7633:7667   */\n      mstore\n        /* \"#utility.yul\":7715:7717   */\n      dup2\n        /* \"#utility.yul\":7707:7713   */\n      dup7\n        /* \"#utility.yul\":7703:7718   */\n      and\n        /* \"#utility.yul\":7698:7700   */\n      0x60\n        /* \"#utility.yul\":7687:7696   */\n      dup6\n        /* \"#utility.yul\":7683:7701   */\n      add\n        /* \"#utility.yul\":7676:7719   */\n      mstore\n        /* \"#utility.yul\":7756:7759   */\n      0xa0\n        /* \"#utility.yul\":7750:7753   */\n      0x80\n        /* \"#utility.yul\":7739:7748   */\n      dup6\n        /* \"#utility.yul\":7735:7754   */\n      add\n        /* \"#utility.yul\":7728:7760   */\n      mstore\n        /* \"#utility.yul\":7789:7795   */\n      dup5\n        /* \"#utility.yul\":7783:7796   */\n      mload\n        /* \"#utility.yul\":7769:7796   */\n      swap2\n      pop\n        /* \"#utility.yul\":7833:7839   */\n      dup2\n        /* \"#utility.yul\":7827:7830   */\n      0xa0\n        /* \"#utility.yul\":7816:7825   */\n      dup6\n        /* \"#utility.yul\":7812:7831   */\n      add\n        /* \"#utility.yul\":7805:7840   */\n      mstore\n        /* \"#utility.yul\":7858:7862   */\n      dup3\n        /* \"#utility.yul\":7871:8012   */\n    tag_306:\n        /* \"#utility.yul\":7885:7891   */\n      dup3\n        /* \"#utility.yul\":7882:7883   */\n      dup2\n        /* \"#utility.yul\":7879:7892   */\n      lt\n        /* \"#utility.yul\":7871:8012   */\n      iszero\n      tag_308\n      jumpi\n        /* \"#utility.yul\":7981:7995   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":7977:8000   */\n      dup3\n      add\n        /* \"#utility.yul\":7971:8001   */\n      mload\n        /* \"#utility.yul\":7946:7963   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":7965:7968   */\n      0xc0\n        /* \"#utility.yul\":7942:7969   */\n      add\n        /* \"#utility.yul\":7935:8002   */\n      mstore\n        /* \"#utility.yul\":7900:7910   */\n      dup2\n      add\n        /* \"#utility.yul\":7871:8012   */\n      jump(tag_306)\n    tag_308:\n        /* \"#utility.yul\":8030:8036   */\n      dup3\n        /* \"#utility.yul\":8027:8028   */\n      dup2\n        /* \"#utility.yul\":8024:8037   */\n      gt\n        /* \"#utility.yul\":8021:8023   */\n      iszero\n      tag_309\n      jumpi\n        /* \"#utility.yul\":8101:8105   */\n      dup4\n        /* \"#utility.yul\":8095:8098   */\n      0xc0\n        /* \"#utility.yul\":8086:8092   */\n      dup5\n        /* \"#utility.yul\":8075:8084   */\n      dup8\n        /* \"#utility.yul\":8071:8093   */\n      add\n        /* \"#utility.yul\":8067:8099   */\n      add\n        /* \"#utility.yul\":8060:8106   */\n      mstore\n        /* \"#utility.yul\":8021:8023   */\n    tag_309:\n      pop\n      pop\n        /* \"#utility.yul\":8177:8179   */\n      0x1f\n        /* \"#utility.yul\":8156:8171   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":8152:8181   */\n      and\n        /* \"#utility.yul\":8137:8182   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":8184:8187   */\n      0xc0\n        /* \"#utility.yul\":8133:8188   */\n      add\n      swap7\n        /* \"#utility.yul\":7462:8194   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8199:8696   */\n    tag_53:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":8486:8501   */\n      swap5\n      dup6\n      and\n        /* \"#utility.yul\":8468:8502   */\n      dup2\n      mstore\n      sub(shl(0x80, 0x01), 0x01)\n        /* \"#utility.yul\":8538:8585   */\n      swap4\n      swap1\n      swap4\n      and\n        /* \"#utility.yul\":8533:8535   */\n      0x20\n        /* \"#utility.yul\":8518:8536   */\n      dup5\n      add\n        /* \"#utility.yul\":8511:8586   */\n      mstore\n        /* \"#utility.yul\":8622:8637   */\n      swap1\n      dup4\n      and\n        /* \"#utility.yul\":8617:8619   */\n      0x40\n        /* \"#utility.yul\":8602:8620   */\n      dup4\n      add\n        /* \"#utility.yul\":8595:8638   */\n      mstore\n        /* \"#utility.yul\":8674:8689   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":8669:8671   */\n      0x60\n        /* \"#utility.yul\":8654:8672   */\n      dup3\n      add\n        /* \"#utility.yul\":8647:8690   */\n      mstore\n        /* \"#utility.yul\":8417:8420   */\n      0x80\n        /* \"#utility.yul\":8402:8421   */\n      add\n      swap1\n        /* \"#utility.yul\":8384:8696   */\n      jump\t// out\n        /* \"#utility.yul\":8701:8975   */\n    tag_103:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":8893:8925   */\n      swap3\n      swap1\n      swap3\n      and\n        /* \"#utility.yul\":8875:8926   */\n      dup3\n      mstore\n        /* \"#utility.yul\":8957:8959   */\n      0x20\n        /* \"#utility.yul\":8942:8960   */\n      dup3\n      add\n        /* \"#utility.yul\":8935:8969   */\n      mstore\n        /* \"#utility.yul\":8863:8865   */\n      0x40\n        /* \"#utility.yul\":8848:8866   */\n      add\n      swap1\n        /* \"#utility.yul\":8830:8975   */\n      jump\t// out\n        /* \"#utility.yul\":8980:9182   */\n    tag_31:\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"#utility.yul\":9142:9175   */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":9124:9176   */\n      dup2\n      mstore\n        /* \"#utility.yul\":9112:9114   */\n      0x20\n        /* \"#utility.yul\":9097:9115   */\n      add\n      swap1\n        /* \"#utility.yul\":9079:9182   */\n      jump\t// out\n        /* \"#utility.yul\":9187:9375   */\n    tag_58:\n        /* \"#utility.yul\":9358:9359   */\n      0x02\n        /* \"#utility.yul\":9347:9368   */\n      swap2\n      swap1\n      swap2\n      signextend\n        /* \"#utility.yul\":9329:9369   */\n      dup2\n      mstore\n        /* \"#utility.yul\":9317:9319   */\n      0x20\n        /* \"#utility.yul\":9302:9320   */\n      add\n      swap1\n        /* \"#utility.yul\":9284:9375   */\n      jump\t// out\n        /* \"#utility.yul\":9380:9726   */\n    tag_136:\n        /* \"#utility.yul\":9582:9584   */\n      0x20\n        /* \"#utility.yul\":9564:9585   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":9621:9623   */\n      0x16\n        /* \"#utility.yul\":9601:9619   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":9594:9624   */\n      mstore\n      shl(0x50, 0x4f6e6c79206f776e65722063616e20646f2074686973)\n        /* \"#utility.yul\":9655:9657   */\n      0x40\n        /* \"#utility.yul\":9640:9658   */\n      dup3\n      add\n        /* \"#utility.yul\":9633:9685   */\n      mstore\n        /* \"#utility.yul\":9717:9719   */\n      0x60\n        /* \"#utility.yul\":9702:9720   */\n      add\n      swap1\n        /* \"#utility.yul\":9554:9726   */\n      jump\t// out\n        /* \"#utility.yul\":9731:10075   */\n    tag_158:\n        /* \"#utility.yul\":9933:9935   */\n      0x20\n        /* \"#utility.yul\":9915:9936   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":9972:9974   */\n      0x14\n        /* \"#utility.yul\":9952:9970   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":9945:9975   */\n      mstore\n      shl(0x62, 0x125b9d985b1a59081a5b9c1d5d08185b5bdd5b9d)\n        /* \"#utility.yul\":10006:10008   */\n      0x40\n        /* \"#utility.yul\":9991:10009   */\n      dup3\n      add\n        /* \"#utility.yul\":9984:10034   */\n      mstore\n        /* \"#utility.yul\":10066:10068   */\n      0x60\n        /* \"#utility.yul\":10051:10069   */\n      add\n      swap1\n        /* \"#utility.yul\":9905:10075   */\n      jump\t// out\n        /* \"#utility.yul\":10080:10427   */\n    tag_184:\n        /* \"#utility.yul\":10282:10284   */\n      0x20\n        /* \"#utility.yul\":10264:10285   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":10321:10323   */\n      0x17\n        /* \"#utility.yul\":10301:10319   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":10294:10324   */\n      mstore\n        /* \"#utility.yul\":10360:10385   */\n      0x43616c6c6261636b206f6e6c792066726f6d20706f6f6c000000000000000000\n        /* \"#utility.yul\":10355:10357   */\n      0x40\n        /* \"#utility.yul\":10340:10358   */\n      dup3\n      add\n        /* \"#utility.yul\":10333:10386   */\n      mstore\n        /* \"#utility.yul\":10418:10420   */\n      0x60\n        /* \"#utility.yul\":10403:10421   */\n      add\n      swap1\n        /* \"#utility.yul\":10254:10427   */\n      jump\t// out\n        /* \"#utility.yul\":10432:11806   */\n    tag_126:\n      0x00\n        /* \"#utility.yul\":10620:10623   */\n      0x0180\n        /* \"#utility.yul\":10609:10618   */\n      dup3\n        /* \"#utility.yul\":10605:10624   */\n      add\n        /* \"#utility.yul\":10597:10624   */\n      swap1\n      pop\n        /* \"#utility.yul\":10633:10679   */\n      tag_318\n        /* \"#utility.yul\":10669:10678   */\n      dup3\n        /* \"#utility.yul\":10660:10666   */\n      dup5\n        /* \"#utility.yul\":10654:10667   */\n      mload\n        /* \"#utility.yul\":10633:10679   */\n      tag_300\n      jump\t// in\n    tag_318:\n        /* \"#utility.yul\":10726:10730   */\n      0x20\n        /* \"#utility.yul\":10718:10724   */\n      dup4\n        /* \"#utility.yul\":10714:10731   */\n      add\n        /* \"#utility.yul\":10708:10732   */\n      mload\n        /* \"#utility.yul\":10741:10797   */\n      tag_319\n        /* \"#utility.yul\":10791:10795   */\n      0x20\n        /* \"#utility.yul\":10780:10789   */\n      dup5\n        /* \"#utility.yul\":10776:10796   */\n      add\n        /* \"#utility.yul\":10762:10774   */\n      dup3\n        /* \"#utility.yul\":10741:10797   */\n      tag_300\n      jump\t// in\n    tag_319:\n      pop\n        /* \"#utility.yul\":10846:10850   */\n      0x40\n        /* \"#utility.yul\":10838:10844   */\n      dup4\n        /* \"#utility.yul\":10834:10851   */\n      add\n        /* \"#utility.yul\":10828:10852   */\n      mload\n        /* \"#utility.yul\":10861:10917   */\n      tag_320\n        /* \"#utility.yul\":10911:10915   */\n      0x40\n        /* \"#utility.yul\":10900:10909   */\n      dup5\n        /* \"#utility.yul\":10896:10916   */\n      add\n        /* \"#utility.yul\":10880:10894   */\n      dup3\n        /* \"#utility.yul\":10861:10917   */\n      tag_302\n      jump\t// in\n    tag_320:\n      pop\n        /* \"#utility.yul\":10966:10970   */\n      0x60\n        /* \"#utility.yul\":10958:10964   */\n      dup4\n        /* \"#utility.yul\":10954:10971   */\n      add\n        /* \"#utility.yul\":10948:10972   */\n      mload\n        /* \"#utility.yul\":10981:11037   */\n      tag_321\n        /* \"#utility.yul\":11031:11035   */\n      0x60\n        /* \"#utility.yul\":11020:11029   */\n      dup5\n        /* \"#utility.yul\":11016:11036   */\n      add\n        /* \"#utility.yul\":11000:11014   */\n      dup3\n        /* \"#utility.yul\":10981:11037   */\n      tag_302\n      jump\t// in\n    tag_321:\n      pop\n        /* \"#utility.yul\":11086:11090   */\n      0x80\n        /* \"#utility.yul\":11078:11084   */\n      dup4\n        /* \"#utility.yul\":11074:11091   */\n      add\n        /* \"#utility.yul\":11068:11092   */\n      mload\n        /* \"#utility.yul\":11101:11157   */\n      tag_322\n        /* \"#utility.yul\":11151:11155   */\n      0x80\n        /* \"#utility.yul\":11140:11149   */\n      dup5\n        /* \"#utility.yul\":11136:11156   */\n      add\n        /* \"#utility.yul\":11120:11134   */\n      dup3\n        /* \"#utility.yul\":11101:11157   */\n      tag_302\n      jump\t// in\n    tag_322:\n      pop\n        /* \"#utility.yul\":11213:11217   */\n      0xa0\n        /* \"#utility.yul\":11205:11211   */\n      dup4\n        /* \"#utility.yul\":11201:11218   */\n      add\n        /* \"#utility.yul\":11195:11219   */\n      mload\n        /* \"#utility.yul\":11188:11192   */\n      0xa0\n        /* \"#utility.yul\":11177:11186   */\n      dup4\n        /* \"#utility.yul\":11173:11193   */\n      add\n        /* \"#utility.yul\":11166:11220   */\n      mstore\n        /* \"#utility.yul\":11276:11280   */\n      0xc0\n        /* \"#utility.yul\":11268:11274   */\n      dup4\n        /* \"#utility.yul\":11264:11281   */\n      add\n        /* \"#utility.yul\":11258:11282   */\n      mload\n        /* \"#utility.yul\":11251:11255   */\n      0xc0\n        /* \"#utility.yul\":11240:11249   */\n      dup4\n        /* \"#utility.yul\":11236:11256   */\n      add\n        /* \"#utility.yul\":11229:11283   */\n      mstore\n        /* \"#utility.yul\":11339:11343   */\n      0xe0\n        /* \"#utility.yul\":11331:11337   */\n      dup4\n        /* \"#utility.yul\":11327:11344   */\n      add\n        /* \"#utility.yul\":11321:11345   */\n      mload\n        /* \"#utility.yul\":11314:11318   */\n      0xe0\n        /* \"#utility.yul\":11303:11312   */\n      dup4\n        /* \"#utility.yul\":11299:11319   */\n      add\n        /* \"#utility.yul\":11292:11346   */\n      mstore\n        /* \"#utility.yul\":11365:11371   */\n      0x0100\n        /* \"#utility.yul\":11425:11427   */\n      dup1\n        /* \"#utility.yul\":11417:11423   */\n      dup5\n        /* \"#utility.yul\":11413:11428   */\n      add\n        /* \"#utility.yul\":11407:11429   */\n      mload\n        /* \"#utility.yul\":11402:11404   */\n      dup2\n        /* \"#utility.yul\":11391:11400   */\n      dup5\n        /* \"#utility.yul\":11387:11405   */\n      add\n        /* \"#utility.yul\":11380:11430   */\n      mstore\n      pop\n        /* \"#utility.yul\":11449:11455   */\n      0x0120\n        /* \"#utility.yul\":11504:11506   */\n      dup1\n        /* \"#utility.yul\":11496:11502   */\n      dup5\n        /* \"#utility.yul\":11492:11507   */\n      add\n        /* \"#utility.yul\":11486:11508   */\n      mload\n        /* \"#utility.yul\":11517:11573   */\n      tag_323\n        /* \"#utility.yul\":11569:11571   */\n      dup3\n        /* \"#utility.yul\":11558:11567   */\n      dup6\n        /* \"#utility.yul\":11554:11572   */\n      add\n        /* \"#utility.yul\":11538:11552   */\n      dup3\n        /* \"#utility.yul\":11517:11573   */\n      tag_300\n      jump\t// in\n    tag_323:\n      pop\n      pop\n        /* \"#utility.yul\":11592:11598   */\n      0x0140\n        /* \"#utility.yul\":11640:11655   */\n      dup4\n      dup2\n      add\n        /* \"#utility.yul\":11634:11656   */\n      mload\n        /* \"#utility.yul\":11614:11632   */\n      swap1\n      dup4\n      add\n        /* \"#utility.yul\":11607:11657   */\n      mstore\n        /* \"#utility.yul\":11676:11682   */\n      0x0160\n        /* \"#utility.yul\":11719:11734   */\n      dup1\n      dup5\n      add\n        /* \"#utility.yul\":11713:11735   */\n      mload\n        /* \"#utility.yul\":11744:11800   */\n      tag_324\n        /* \"#utility.yul\":11781:11799   */\n      dup3\n      dup6\n      add\n        /* \"#utility.yul\":11713:11735   */\n      dup3\n        /* \"#utility.yul\":11744:11800   */\n      tag_300\n      jump\t// in\n    tag_324:\n      pop\n      pop\n        /* \"#utility.yul\":10587:11806   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11811:11988   */\n    tag_219:\n        /* \"#utility.yul\":11957:11982   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":11945:11947   */\n      0x20\n        /* \"#utility.yul\":11930:11948   */\n      add\n      swap1\n        /* \"#utility.yul\":11912:11988   */\n      jump\t// out\n        /* \"#utility.yul\":11993:12425   */\n    tag_46:\n        /* \"#utility.yul\":12224:12249   */\n      swap4\n      dup5\n      mstore\n      sub(shl(0x80, 0x01), 0x01)\n        /* \"#utility.yul\":12285:12332   */\n      swap3\n      swap1\n      swap3\n      and\n        /* \"#utility.yul\":12280:12282   */\n      0x20\n        /* \"#utility.yul\":12265:12283   */\n      dup5\n      add\n        /* \"#utility.yul\":12258:12333   */\n      mstore\n        /* \"#utility.yul\":12364:12366   */\n      0x40\n        /* \"#utility.yul\":12349:12367   */\n      dup4\n      add\n        /* \"#utility.yul\":12342:12376   */\n      mstore\n        /* \"#utility.yul\":12407:12409   */\n      0x60\n        /* \"#utility.yul\":12392:12410   */\n      dup3\n      add\n        /* \"#utility.yul\":12385:12419   */\n      mstore\n        /* \"#utility.yul\":12211:12214   */\n      0x80\n        /* \"#utility.yul\":12196:12215   */\n      add\n      swap1\n        /* \"#utility.yul\":12178:12425   */\n      jump\t// out\n        /* \"#utility.yul\":12430:12563   */\n    tag_229:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":12507:12538   */\n      dup2\n      and\n        /* \"#utility.yul\":12497:12539   */\n      dup2\n      eq\n        /* \"#utility.yul\":12487:12489   */\n      tag_328\n      jumpi\n        /* \"#utility.yul\":12553:12554   */\n      0x00\n        /* \"#utility.yul\":12550:12551   */\n      dup1\n        /* \"#utility.yul\":12543:12555   */\n      revert\n        /* \"#utility.yul\":12487:12489   */\n    tag_328:\n        /* \"#utility.yul\":12477:12563   */\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220b6fd4252aa5b807a1a50029340de3b25f3c1ad69c72bb1303ce164122fbad75564736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600480546001600160a01b031916331790556117f7806100326000396000f3fe6080604052600436106100e85760003560e01c8063d21220a71161008a578063e6f4d0aa11610059578063e6f4d0aa1461025b578063f851a4401461027b578063fa461e3314610290578063fdde416f146102b0576100e8565b8063d21220a7146101f1578063d2aca8cd14610206578063da802f8014610226578063db6382981461023b576100e8565b80637210468a116100c65780637210468a1461015a5780639cd441da1461017c578063b02c43d01461019f578063d0c93a7c146101cf576100e8565b80630dfe1681146100ed578063150b7a021461011857806316f0115b14610145575b600080fd5b3480156100f957600080fd5b506101026102d0565b60405161010f919061151f565b60405180910390f35b34801561012457600080fd5b50610138610133366004611212565b6102df565b60405161010f91906115ff565b34801561015157600080fd5b506101026102fd565b34801561016657600080fd5b5061017a6101753660046111d3565b61030c565b005b61018f61018a36600461140b565b610418565b60405161010f9493929190611785565b3480156101ab57600080fd5b506101bf6101ba3660046113a0565b6106db565b60405161010f94939291906115b2565b3480156101db57600080fd5b506101e461071b565b60405161010f9190611614565b3480156101fd57600080fd5b5061010261072b565b34801561021257600080fd5b5061017a6102213660046111d3565b61073a565b34801561023257600080fd5b506101026109d8565b34801561024757600080fd5b5061017a6102563660046113a0565b6109e7565b34801561026757600080fd5b5061017a6102763660046111d3565b610c0a565b34801561028757600080fd5b50610102610c56565b34801561029c57600080fd5b5061017a6102ab3660046112da565b610c65565b3480156102bc57600080fd5b5061017a6102cb3660046113a0565b610dbb565b6001546001600160a01b031681565b60006102eb8685610f86565b50630a85bd0160e11b95945050505050565b6000546001600160a01b031681565b6040516370a0823160e01b81526000906001600160a01b038316906370a082319061033b90309060040161151f565b60206040518083038186803b15801561035357600080fd5b505afa158015610367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038b91906113b8565b6004805460405163a9059cbb60e01b81529293506001600160a01b038086169363a9059cbb936103c193909216918691016115e6565b602060405180830381600087803b1580156103db57600080fd5b505af11580156103ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104139190611283565b505050565b60015460035460405163095ea7b360e01b81526000928392839283926001600160a01b039081169263095ea7b39261045892909116908a906004016115e6565b602060405180830381600087803b15801561047257600080fd5b505af1158015610486573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104aa9190611283565b5060025460035460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926104e19291169089906004016115e6565b602060405180830381600087803b1580156104fb57600080fd5b505af115801561050f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105339190611283565b5060008060009054906101000a90046001600160a01b03166001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160c06040518083038186803b15801561058357600080fd5b505afa158015610597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bb919061132b565b505060408051610180810182526001546001600160a01b039081168252600280548216602084015260048054600160a01b9004820b90910b83850152620d89e7196060840152620d89e8608084015260a083018f905260c083018e9052600060e084018190526101008401523061012084015242610140840152818816610160840152600354935163b5007d1f60e01b815297985091969216945063b5007d1f935061066a92508591016116b7565b608060405180830381600087803b15801561068457600080fd5b505af1158015610698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bc91906113d0565b929850909650945092506106d03087610f86565b505092959194509250565b60056020526000908152604090208054600182015460028301546003909301546001600160a01b03928316936001600160801b0390921692918216911684565b600454600160a01b900460020b81565b6002546001600160a01b031681565b6004546001600160a01b0316331461076d5760405162461bcd60e51b815260040161076490611622565b60405180910390fd5b600080546001600160a01b0319166001600160a01b03838116919091179182905560408051630dfe168160e01b815290519290911691630dfe168191600480820192602092909190829003018186803b1580156107c957600080fd5b505afa1580156107dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080191906111f6565b600180546001600160a01b0319166001600160a01b039283161790556000546040805163d21220a760e01b81529051919092169163d21220a7916004808301926020929190829003018186803b15801561085a57600080fd5b505afa15801561086e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089291906111f6565b600280546001600160a01b0319166001600160a01b03928316179055600054604080516323e6650160e11b8152905191909216916347ccca02916004808301926020929190829003018186803b1580156108eb57600080fd5b505afa1580156108ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092391906111f6565b600380546001600160a01b0319166001600160a01b03928316179055600054604080516334324e9f60e21b81529051919092169163d0c93a7c916004808301926020929190829003018186803b15801561097c57600080fd5b505afa158015610990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b4919061129d565b600460146101000a81548162ffffff021916908360020b62ffffff16021790555050565b6003546001600160a01b031681565b60008111610a075760405162461bcd60e51b815260040161076490611652565b60008060009054906101000a90046001600160a01b03166001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160c06040518083038186803b158015610a5657600080fd5b505afa158015610a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8e919061132b565b5050505050905060006064826063026001600160a01b031681610aad57fe5b0490506401000276a36001600160a01b03821611610acd57506401000276a45b60015460005460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392610b039291169087906004016115e6565b602060405180830381600087803b158015610b1d57600080fd5b505af1158015610b31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b559190611283565b50600030604051602001610b69919061151f565b60408051601f1981840301815290829052600054630251596160e31b83529092506001600160a01b03169063128acb0890610bb1903090600190899088908890600401611533565b6040805180830381600087803b158015610bca57600080fd5b505af1158015610bde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0291906112b7565b505050505050565b6004546001600160a01b03163314610c345760405162461bcd60e51b815260040161076490611622565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b031681565b6000546001600160a01b03163314610c8f5760405162461bcd60e51b815260040161076490611680565b6000841315610d225760015460005460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92610cce9291169088906004016115e6565b602060405180830381600087803b158015610ce857600080fd5b505af1158015610cfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d209190611283565b505b6000831315610db55760025460005460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92610d619291169087906004016115e6565b602060405180830381600087803b158015610d7b57600080fd5b505af1158015610d8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db39190611283565b505b50505050565b60008111610ddb5760405162461bcd60e51b815260040161076490611652565b60008060009054906101000a90046001600160a01b03166001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160c06040518083038186803b158015610e2a57600080fd5b505afa158015610e3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e62919061132b565b5050505050905060006064826065026001600160a01b031681610e8157fe5b0490506401000276a36001600160a01b03821611610ea157506401000276a25b60025460005460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392610ed79291169087906004016115e6565b602060405180830381600087803b158015610ef157600080fd5b505af1158015610f05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f299190611283565b50600030604051602001610f3d919061151f565b60408051601f198184030181529082905260008054630251596160e31b84529193506001600160a01b039091169163128acb0891610bb191309190899088908890600401611533565b60035460405163133f757160e31b8152600091829182916001600160a01b0316906399fbab8890610fbb90879060040161177c565b6101806040518083038186803b158015610fd457600080fd5b505afa158015610fe8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100c919061142c565b5050505097505050509450945050506040518060800160405280866001600160a01b03168152602001826001600160801b03168152602001846001600160a01b03168152602001836001600160a01b03168152506005600086815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160801b0302191690836001600160801b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055509050505050505050565b805161113c816117a9565b919050565b8051801515811461113c57600080fd5b60008083601f840112611162578182fd5b50813567ffffffffffffffff811115611179578182fd5b60208301915083602082850101111561119157600080fd5b9250929050565b8051600281900b811461113c57600080fd5b80516001600160801b038116811461113c57600080fd5b805161ffff8116811461113c57600080fd5b6000602082840312156111e4578081fd5b81356111ef816117a9565b9392505050565b600060208284031215611207578081fd5b81516111ef816117a9565b600080600080600060808688031215611229578081fd5b8535611234816117a9565b94506020860135611244816117a9565b935060408601359250606086013567ffffffffffffffff811115611266578182fd5b61127288828901611151565b969995985093965092949392505050565b600060208284031215611294578081fd5b6111ef82611141565b6000602082840312156112ae578081fd5b6111ef82611198565b600080604083850312156112c9578182fd5b505080516020909101519092909150565b600080600080606085870312156112ef578384fd5b8435935060208501359250604085013567ffffffffffffffff811115611313578283fd5b61131f87828801611151565b95989497509550505050565b60008060008060008060c08789031215611343578081fd5b865161134e816117a9565b955061135c60208801611198565b945061136a604088016111c1565b9350611378606088016111c1565b9250611386608088016111c1565b915061139460a08801611141565b90509295509295509295565b6000602082840312156113b1578081fd5b5035919050565b6000602082840312156113c9578081fd5b5051919050565b600080600080608085870312156113e5578384fd5b845193506113f5602086016111aa565b6040860151606090960151949790965092505050565b6000806040838503121561141d578182fd5b50508035926020909101359150565b6000806000806000806000806000806000806101808d8f03121561144e57898afd5b8c516bffffffffffffffffffffffff81168114611469578a8bfd5b9b5061147760208e01611131565b9a5061148560408e01611131565b995061149360608e01611131565b98506114a160808e01611198565b97506114af60a08e01611198565b96506114bd60c08e01611198565b95506114cb60e08e016111aa565b94506101008d015193506101208d015192506114ea6101408e016111aa565b91506114f96101608e016111aa565b90509295989b509295989b509295989b565b6001600160a01b03169052565b60020b9052565b6001600160a01b0391909116815260200190565b600060018060a01b038088168352602087151581850152866040850152818616606085015260a06080850152845191508160a0850152825b828110156115875785810182015185820160c00152810161156b565b82811115611598578360c084870101525b5050601f01601f19169190910160c0019695505050505050565b6001600160a01b0394851681526001600160801b039390931660208401529083166040830152909116606082015260800190565b6001600160a01b03929092168252602082015260400190565b6001600160e01b031991909116815260200190565b60029190910b815260200190565b6020808252601690820152754f6e6c79206f776e65722063616e20646f207468697360501b604082015260600190565b602080825260149082015273125b9d985b1a59081a5b9c1d5d08185b5bdd5b9d60621b604082015260600190565b60208082526017908201527f43616c6c6261636b206f6e6c792066726f6d20706f6f6c000000000000000000604082015260600190565b6000610180820190506116cb82845161150b565b60208301516116dd602084018261150b565b5060408301516116f06040840182611518565b5060608301516117036060840182611518565b5060808301516117166080840182611518565b5060a083015160a083015260c083015160c083015260e083015160e0830152610100808401518184015250610120808401516117548285018261150b565b50506101408381015190830152610160808401516117748285018261150b565b505092915050565b90815260200190565b9384526001600160801b039290921660208401526040830152606082015260800190565b6001600160a01b03811681146117be57600080fd5b5056fea2646970667358221220b6fd4252aa5b807a1a50029340de3b25f3c1ad69c72bb1303ce164122fbad75564736f6c63430007060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0x17F7 DUP1 PUSH2 0x32 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xE8 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xD21220A7 GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xE6F4D0AA GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xE6F4D0AA EQ PUSH2 0x25B JUMPI DUP1 PUSH4 0xF851A440 EQ PUSH2 0x27B JUMPI DUP1 PUSH4 0xFA461E33 EQ PUSH2 0x290 JUMPI DUP1 PUSH4 0xFDDE416F EQ PUSH2 0x2B0 JUMPI PUSH2 0xE8 JUMP JUMPDEST DUP1 PUSH4 0xD21220A7 EQ PUSH2 0x1F1 JUMPI DUP1 PUSH4 0xD2ACA8CD EQ PUSH2 0x206 JUMPI DUP1 PUSH4 0xDA802F80 EQ PUSH2 0x226 JUMPI DUP1 PUSH4 0xDB638298 EQ PUSH2 0x23B JUMPI PUSH2 0xE8 JUMP JUMPDEST DUP1 PUSH4 0x7210468A GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x7210468A EQ PUSH2 0x15A JUMPI DUP1 PUSH4 0x9CD441DA EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0xB02C43D0 EQ PUSH2 0x19F JUMPI DUP1 PUSH4 0xD0C93A7C EQ PUSH2 0x1CF JUMPI PUSH2 0xE8 JUMP JUMPDEST DUP1 PUSH4 0xDFE1681 EQ PUSH2 0xED JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x118 JUMPI DUP1 PUSH4 0x16F0115B EQ PUSH2 0x145 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x2D0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP2 SWAP1 PUSH2 0x151F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x124 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x138 PUSH2 0x133 CALLDATASIZE PUSH1 0x4 PUSH2 0x1212 JUMP JUMPDEST PUSH2 0x2DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP2 SWAP1 PUSH2 0x15FF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x151 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x2FD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x166 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x11D3 JUMP JUMPDEST PUSH2 0x30C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x18F PUSH2 0x18A CALLDATASIZE PUSH1 0x4 PUSH2 0x140B JUMP JUMPDEST PUSH2 0x418 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1785 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BF PUSH2 0x1BA CALLDATASIZE PUSH1 0x4 PUSH2 0x13A0 JUMP JUMPDEST PUSH2 0x6DB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x15B2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E4 PUSH2 0x71B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP2 SWAP1 PUSH2 0x1614 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x72B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH2 0x221 CALLDATASIZE PUSH1 0x4 PUSH2 0x11D3 JUMP JUMPDEST PUSH2 0x73A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x232 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x9D8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x247 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH2 0x256 CALLDATASIZE PUSH1 0x4 PUSH2 0x13A0 JUMP JUMPDEST PUSH2 0x9E7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH2 0x276 CALLDATASIZE PUSH1 0x4 PUSH2 0x11D3 JUMP JUMPDEST PUSH2 0xC0A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x287 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0xC56 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH2 0x2AB CALLDATASIZE PUSH1 0x4 PUSH2 0x12DA JUMP JUMPDEST PUSH2 0xC65 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH2 0x2CB CALLDATASIZE PUSH1 0x4 PUSH2 0x13A0 JUMP JUMPDEST PUSH2 0xDBB JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EB DUP7 DUP6 PUSH2 0xF86 JUMP JUMPDEST POP PUSH4 0xA85BD01 PUSH1 0xE1 SHL SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x33B SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x151F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x367 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x38B SWAP2 SWAP1 PUSH2 0x13B8 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND SWAP4 PUSH4 0xA9059CBB SWAP4 PUSH2 0x3C1 SWAP4 SWAP1 SWAP3 AND SWAP2 DUP7 SWAP2 ADD PUSH2 0x15E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3EF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x413 SWAP2 SWAP1 PUSH2 0x1283 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 SWAP3 DUP4 SWAP3 DUP4 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP3 PUSH4 0x95EA7B3 SWAP3 PUSH2 0x458 SWAP3 SWAP1 SWAP2 AND SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x15E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x472 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x486 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4AA SWAP2 SWAP1 PUSH2 0x1283 JUMP JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0x95EA7B3 SWAP3 PUSH2 0x4E1 SWAP3 SWAP2 AND SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x15E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x50F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x533 SWAP2 SWAP1 PUSH2 0x1283 JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xC0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x583 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x597 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5BB SWAP2 SWAP1 PUSH2 0x132B JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x180 DUP2 ADD DUP3 MSTORE PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x2 DUP1 SLOAD DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV DUP3 SIGNEXTEND SWAP1 SWAP2 SIGNEXTEND DUP4 DUP6 ADD MSTORE PUSH3 0xD89E7 NOT PUSH1 0x60 DUP5 ADD MSTORE PUSH3 0xD89E8 PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 ADD DUP16 SWAP1 MSTORE PUSH1 0xC0 DUP4 ADD DUP15 SWAP1 MSTORE PUSH1 0x0 PUSH1 0xE0 DUP5 ADD DUP2 SWAP1 MSTORE PUSH2 0x100 DUP5 ADD MSTORE ADDRESS PUSH2 0x120 DUP5 ADD MSTORE TIMESTAMP PUSH2 0x140 DUP5 ADD MSTORE DUP2 DUP9 AND PUSH2 0x160 DUP5 ADD MSTORE PUSH1 0x3 SLOAD SWAP4 MLOAD PUSH4 0xB5007D1F PUSH1 0xE0 SHL DUP2 MSTORE SWAP8 SWAP9 POP SWAP2 SWAP7 SWAP3 AND SWAP5 POP PUSH4 0xB5007D1F SWAP4 POP PUSH2 0x66A SWAP3 POP DUP6 SWAP2 ADD PUSH2 0x16B7 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x684 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x698 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6BC SWAP2 SWAP1 PUSH2 0x13D0 JUMP JUMPDEST SWAP3 SWAP9 POP SWAP1 SWAP7 POP SWAP5 POP SWAP3 POP PUSH2 0x6D0 ADDRESS DUP8 PUSH2 0xF86 JUMP JUMPDEST POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 SWAP1 SWAP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP1 SWAP3 AND SWAP3 SWAP2 DUP3 AND SWAP2 AND DUP5 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0x2 SIGNEXTEND DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x76D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x764 SWAP1 PUSH2 0x1622 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP2 DUP3 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH4 0xDFE1681 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP1 SWAP2 AND SWAP2 PUSH4 0xDFE1681 SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7DD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x801 SWAP2 SWAP1 PUSH2 0x11F6 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xD21220A7 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0xD21220A7 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x85A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x86E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x892 SWAP2 SWAP1 PUSH2 0x11F6 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x23E66501 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0x47CCCA02 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8FF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x923 SWAP2 SWAP1 PUSH2 0x11F6 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x34324E9F PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0xD0C93A7C SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x97C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x990 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9B4 SWAP2 SWAP1 PUSH2 0x129D JUMP JUMPDEST PUSH1 0x4 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH3 0xFFFFFF MUL NOT AND SWAP1 DUP4 PUSH1 0x2 SIGNEXTEND PUSH3 0xFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0xA07 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x764 SWAP1 PUSH2 0x1652 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xC0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA6A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA8E SWAP2 SWAP1 PUSH2 0x132B JUMP JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x64 DUP3 PUSH1 0x63 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH2 0xAAD JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND GT PUSH2 0xACD JUMPI POP PUSH5 0x1000276A4 JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0x95EA7B3 SWAP3 PUSH2 0xB03 SWAP3 SWAP2 AND SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x15E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB31 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB55 SWAP2 SWAP1 PUSH2 0x1283 JUMP JUMPDEST POP PUSH1 0x0 ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xB69 SWAP2 SWAP1 PUSH2 0x151F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH1 0x0 SLOAD PUSH4 0x2515961 PUSH1 0xE3 SHL DUP4 MSTORE SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x128ACB08 SWAP1 PUSH2 0xBB1 SWAP1 ADDRESS SWAP1 PUSH1 0x1 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1533 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBDE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC02 SWAP2 SWAP1 PUSH2 0x12B7 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xC34 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x764 SWAP1 PUSH2 0x1622 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xC8F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x764 SWAP1 PUSH2 0x1680 JUMP JUMPDEST PUSH1 0x0 DUP5 SGT ISZERO PUSH2 0xD22 JUMPI PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0xA9059CBB SWAP3 PUSH2 0xCCE SWAP3 SWAP2 AND SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x15E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xCFC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD20 SWAP2 SWAP1 PUSH2 0x1283 JUMP JUMPDEST POP JUMPDEST PUSH1 0x0 DUP4 SGT ISZERO PUSH2 0xDB5 JUMPI PUSH1 0x2 SLOAD PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0xA9059CBB SWAP3 PUSH2 0xD61 SWAP3 SWAP2 AND SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x15E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD8F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDB3 SWAP2 SWAP1 PUSH2 0x1283 JUMP JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0xDDB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x764 SWAP1 PUSH2 0x1652 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xC0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE3E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE62 SWAP2 SWAP1 PUSH2 0x132B JUMP JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x64 DUP3 PUSH1 0x65 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH2 0xE81 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND GT PUSH2 0xEA1 JUMPI POP PUSH5 0x1000276A2 JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0x95EA7B3 SWAP3 PUSH2 0xED7 SWAP3 SWAP2 AND SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x15E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF05 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF29 SWAP2 SWAP1 PUSH2 0x1283 JUMP JUMPDEST POP PUSH1 0x0 ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF3D SWAP2 SWAP1 PUSH2 0x151F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH4 0x2515961 PUSH1 0xE3 SHL DUP5 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH4 0x128ACB08 SWAP2 PUSH2 0xBB1 SWAP2 ADDRESS SWAP2 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1533 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x133F7571 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x99FBAB88 SWAP1 PUSH2 0xFBB SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x177C JUMP JUMPDEST PUSH2 0x180 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFE8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x100C SWAP2 SWAP1 PUSH2 0x142C JUMP JUMPDEST POP POP POP POP SWAP8 POP POP POP POP SWAP5 POP SWAP5 POP POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH1 0x5 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0x113C DUP2 PUSH2 0x17A9 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x113C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1162 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1179 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1191 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x2 DUP2 SWAP1 SIGNEXTEND DUP2 EQ PUSH2 0x113C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x113C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x113C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11E4 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x11EF DUP2 PUSH2 0x17A9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1207 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x11EF DUP2 PUSH2 0x17A9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1229 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1234 DUP2 PUSH2 0x17A9 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x1244 DUP2 PUSH2 0x17A9 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1266 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1272 DUP9 DUP3 DUP10 ADD PUSH2 0x1151 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1294 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x11EF DUP3 PUSH2 0x1141 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12AE JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x11EF DUP3 PUSH2 0x1198 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x12C9 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x12EF JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1313 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x131F DUP8 DUP3 DUP9 ADD PUSH2 0x1151 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1343 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP7 MLOAD PUSH2 0x134E DUP2 PUSH2 0x17A9 JUMP JUMPDEST SWAP6 POP PUSH2 0x135C PUSH1 0x20 DUP9 ADD PUSH2 0x1198 JUMP JUMPDEST SWAP5 POP PUSH2 0x136A PUSH1 0x40 DUP9 ADD PUSH2 0x11C1 JUMP JUMPDEST SWAP4 POP PUSH2 0x1378 PUSH1 0x60 DUP9 ADD PUSH2 0x11C1 JUMP JUMPDEST SWAP3 POP PUSH2 0x1386 PUSH1 0x80 DUP9 ADD PUSH2 0x11C1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1394 PUSH1 0xA0 DUP9 ADD PUSH2 0x1141 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13B1 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13C9 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x13E5 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 MLOAD SWAP4 POP PUSH2 0x13F5 PUSH1 0x20 DUP7 ADD PUSH2 0x11AA JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0x60 SWAP1 SWAP7 ADD MLOAD SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x141D JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x180 DUP14 DUP16 SUB SLT ISZERO PUSH2 0x144E JUMPI DUP10 DUP11 REVERT JUMPDEST DUP13 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1469 JUMPI DUP11 DUP12 REVERT JUMPDEST SWAP12 POP PUSH2 0x1477 PUSH1 0x20 DUP15 ADD PUSH2 0x1131 JUMP JUMPDEST SWAP11 POP PUSH2 0x1485 PUSH1 0x40 DUP15 ADD PUSH2 0x1131 JUMP JUMPDEST SWAP10 POP PUSH2 0x1493 PUSH1 0x60 DUP15 ADD PUSH2 0x1131 JUMP JUMPDEST SWAP9 POP PUSH2 0x14A1 PUSH1 0x80 DUP15 ADD PUSH2 0x1198 JUMP JUMPDEST SWAP8 POP PUSH2 0x14AF PUSH1 0xA0 DUP15 ADD PUSH2 0x1198 JUMP JUMPDEST SWAP7 POP PUSH2 0x14BD PUSH1 0xC0 DUP15 ADD PUSH2 0x1198 JUMP JUMPDEST SWAP6 POP PUSH2 0x14CB PUSH1 0xE0 DUP15 ADD PUSH2 0x11AA JUMP JUMPDEST SWAP5 POP PUSH2 0x100 DUP14 ADD MLOAD SWAP4 POP PUSH2 0x120 DUP14 ADD MLOAD SWAP3 POP PUSH2 0x14EA PUSH2 0x140 DUP15 ADD PUSH2 0x11AA JUMP JUMPDEST SWAP2 POP PUSH2 0x14F9 PUSH2 0x160 DUP15 ADD PUSH2 0x11AA JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP12 POP SWAP3 SWAP6 SWAP9 SWAP12 POP SWAP3 SWAP6 SWAP9 SWAP12 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x2 SIGNEXTEND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND DUP4 MSTORE PUSH1 0x20 DUP8 ISZERO ISZERO DUP2 DUP6 ADD MSTORE DUP7 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP7 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE DUP5 MLOAD SWAP2 POP DUP2 PUSH1 0xA0 DUP6 ADD MSTORE DUP3 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1587 JUMPI DUP6 DUP2 ADD DUP3 ADD MLOAD DUP6 DUP3 ADD PUSH1 0xC0 ADD MSTORE DUP2 ADD PUSH2 0x156B JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1598 JUMPI DUP4 PUSH1 0xC0 DUP5 DUP8 ADD ADD MSTORE JUMPDEST POP POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0xC0 ADD SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP4 SWAP1 SWAP4 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x2 SWAP2 SWAP1 SWAP2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x4F6E6C79206F776E65722063616E20646F2074686973 PUSH1 0x50 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x125B9D985B1A59081A5B9C1D5D08185B5BDD5B9D PUSH1 0x62 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x43616C6C6261636B206F6E6C792066726F6D20706F6F6C000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 ADD SWAP1 POP PUSH2 0x16CB DUP3 DUP5 MLOAD PUSH2 0x150B JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x16DD PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x150B JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x16F0 PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x1518 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x1703 PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x1518 JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x1716 PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x1518 JUMP JUMPDEST POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x100 DUP1 DUP5 ADD MLOAD DUP2 DUP5 ADD MSTORE POP PUSH2 0x120 DUP1 DUP5 ADD MLOAD PUSH2 0x1754 DUP3 DUP6 ADD DUP3 PUSH2 0x150B JUMP JUMPDEST POP POP PUSH2 0x140 DUP4 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x160 DUP1 DUP5 ADD MLOAD PUSH2 0x1774 DUP3 DUP6 ADD DUP3 PUSH2 0x150B JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x17BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB6 REVERT TIMESTAMP MSTORE 0xAA JUMPDEST DUP1 PUSH27 0x1A50029340DE3B25F3C1AD69C72BB1303CE164122FBAD75564736F PUSH13 0x63430007060033000000000000 ",
							"sourceMap": "1014:6245:2:-:0;;;1571:51;;;;;;;;;-1:-1:-1;1596:5:2;:18;;-1:-1:-1;;;;;;1596:18:2;1604:10;1596:18;;;1014:6245;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:12565:32",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:32",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "76:80:32",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "86:22:32",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "101:6:32"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "95:5:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "95:13:32"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "86:5:32"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "144:5:32"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "117:26:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "117:33:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "117:33:32"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "55:6:32",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "66:5:32",
														"type": ""
													}
												],
												"src": "14:142:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "220:107:32",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "230:22:32",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "245:6:32"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "239:5:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "239:13:32"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "230:5:32"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "305:16:32",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "314:1:32",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "317:1:32",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "307:6:32"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "307:12:32"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "307:12:32"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "274:5:32"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "295:5:32"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "288:6:32"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "288:13:32"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "281:6:32"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "281:21:32"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "271:2:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "271:32:32"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "264:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "264:40:32"
															},
															"nodeType": "YulIf",
															"src": "261:2:32"
														}
													]
												},
												"name": "abi_decode_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "199:6:32",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "210:5:32",
														"type": ""
													}
												],
												"src": "161:166:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "406:303:32",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "455:30:32",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "arrayPos",
																					"nodeType": "YulIdentifier",
																					"src": "464:8:32"
																				},
																				{
																					"name": "arrayPos",
																					"nodeType": "YulIdentifier",
																					"src": "474:8:32"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "457:6:32"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "457:26:32"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "457:26:32"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "434:6:32"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "442:4:32",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "430:3:32"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "430:17:32"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "449:3:32"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "426:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "426:27:32"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "419:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "419:35:32"
															},
															"nodeType": "YulIf",
															"src": "416:2:32"
														},
														{
															"nodeType": "YulAssignment",
															"src": "494:30:32",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "517:6:32"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "504:12:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "504:20:32"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "494:6:32"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "567:30:32",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "arrayPos",
																					"nodeType": "YulIdentifier",
																					"src": "576:8:32"
																				},
																				{
																					"name": "arrayPos",
																					"nodeType": "YulIdentifier",
																					"src": "586:8:32"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "569:6:32"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "569:26:32"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "569:26:32"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "539:6:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "547:18:32",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "536:2:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "536:30:32"
															},
															"nodeType": "YulIf",
															"src": "533:2:32"
														},
														{
															"nodeType": "YulAssignment",
															"src": "606:29:32",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "622:6:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "630:4:32",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "618:3:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "618:17:32"
															},
															"variableNames": [
																{
																	"name": "arrayPos",
																	"nodeType": "YulIdentifier",
																	"src": "606:8:32"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "687:16:32",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "696:1:32",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "699:1:32",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "689:6:32"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "689:12:32"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "689:12:32"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "658:6:32"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "666:6:32"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "654:3:32"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "654:19:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "675:4:32",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "650:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "650:30:32"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "682:3:32"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "647:2:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "647:39:32"
															},
															"nodeType": "YulIf",
															"src": "644:2:32"
														}
													]
												},
												"name": "abi_decode_t_bytes_calldata",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "369:6:32",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "377:3:32",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "arrayPos",
														"nodeType": "YulTypedName",
														"src": "385:8:32",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "395:6:32",
														"type": ""
													}
												],
												"src": "332:377:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "774:106:32",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "784:22:32",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "799:6:32"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "793:5:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "793:13:32"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "784:5:32"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "858:16:32",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "867:1:32",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "870:1:32",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "860:6:32"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "860:12:32"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "860:12:32"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "828:5:32"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "846:1:32",
																						"type": "",
																						"value": "2"
																					},
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "849:5:32"
																					}
																				],
																				"functionName": {
																					"name": "signextend",
																					"nodeType": "YulIdentifier",
																					"src": "835:10:32"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "835:20:32"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "825:2:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "825:31:32"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "818:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "818:39:32"
															},
															"nodeType": "YulIf",
															"src": "815:2:32"
														}
													]
												},
												"name": "abi_decode_t_int24_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "753:6:32",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "764:5:32",
														"type": ""
													}
												],
												"src": "714:166:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "947:132:32",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "957:22:32",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "972:6:32"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "966:5:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "966:13:32"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "957:5:32"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1057:16:32",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1066:1:32",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1069:1:32",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1059:6:32"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1059:12:32"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1059:12:32"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1001:5:32"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1012:5:32"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1019:34:32",
																						"type": "",
																						"value": "0xffffffffffffffffffffffffffffffff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1008:3:32"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1008:46:32"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "998:2:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "998:57:32"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "991:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "991:65:32"
															},
															"nodeType": "YulIf",
															"src": "988:2:32"
														}
													]
												},
												"name": "abi_decode_t_uint128_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "926:6:32",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "937:5:32",
														"type": ""
													}
												],
												"src": "885:194:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1145:104:32",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1155:22:32",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1170:6:32"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1164:5:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "1164:13:32"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1155:5:32"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1227:16:32",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1236:1:32",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1239:1:32",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1229:6:32"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1229:12:32"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1229:12:32"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1199:5:32"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1210:5:32"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1217:6:32",
																						"type": "",
																						"value": "0xffff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1206:3:32"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1206:18:32"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1196:2:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1196:29:32"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1189:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "1189:37:32"
															},
															"nodeType": "YulIf",
															"src": "1186:2:32"
														}
													]
												},
												"name": "abi_decode_t_uint16_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1124:6:32",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1135:5:32",
														"type": ""
													}
												],
												"src": "1084:165:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1324:189:32",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1370:26:32",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1379:6:32"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1387:6:32"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1372:6:32"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1372:22:32"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1372:22:32"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1345:7:32"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1354:9:32"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1341:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1341:23:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1366:2:32",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1337:3:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "1337:32:32"
															},
															"nodeType": "YulIf",
															"src": "1334:2:32"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1405:36:32",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1431:9:32"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1418:12:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "1418:23:32"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1409:5:32",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1477:5:32"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "1450:26:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "1450:33:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1450:33:32"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1492:15:32",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1502:5:32"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1492:6:32"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1290:9:32",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1301:7:32",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1313:6:32",
														"type": ""
													}
												],
												"src": "1254:259:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1599:182:32",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1645:26:32",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1654:6:32"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1662:6:32"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1647:6:32"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1647:22:32"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1647:22:32"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1620:7:32"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1629:9:32"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1616:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1616:23:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1641:2:32",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1612:3:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "1612:32:32"
															},
															"nodeType": "YulIf",
															"src": "1609:2:32"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1680:29:32",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1699:9:32"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1693:5:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "1693:16:32"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1684:5:32",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1745:5:32"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "1718:26:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "1718:33:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1718:33:32"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1760:15:32",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1770:5:32"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1760:6:32"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1565:9:32",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1576:7:32",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1588:6:32",
														"type": ""
													}
												],
												"src": "1518:263:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1926:640:32",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1973:26:32",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "1982:6:32"
																				},
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "1990:6:32"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1975:6:32"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1975:22:32"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1975:22:32"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1947:7:32"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1956:9:32"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1943:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1943:23:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1968:3:32",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1939:3:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "1939:33:32"
															},
															"nodeType": "YulIf",
															"src": "1936:2:32"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2008:36:32",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2034:9:32"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2021:12:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "2021:23:32"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "2012:5:32",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2080:5:32"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "2053:26:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "2053:33:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2053:33:32"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2095:15:32",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2105:5:32"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2095:6:32"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2119:47:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2151:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2162:2:32",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2147:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2147:18:32"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2134:12:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "2134:32:32"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "2123:7:32",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "2202:7:32"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "2175:26:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "2175:35:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2175:35:32"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2219:17:32",
															"value": {
																"name": "value_1",
																"nodeType": "YulIdentifier",
																"src": "2229:7:32"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2219:6:32"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2245:42:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2272:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2283:2:32",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2268:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2268:18:32"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2255:12:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "2255:32:32"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "2245:6:32"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2296:46:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2327:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2338:2:32",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2323:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2323:18:32"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2310:12:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "2310:32:32"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "2300:6:32",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2385:26:32",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "2394:6:32"
																				},
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "2402:6:32"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2387:6:32"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2387:22:32"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2387:22:32"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2357:6:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2365:18:32",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2354:2:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "2354:30:32"
															},
															"nodeType": "YulIf",
															"src": "2351:2:32"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2420:86:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2478:9:32"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "2489:6:32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2474:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2474:22:32"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "2498:7:32"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_bytes_calldata",
																	"nodeType": "YulIdentifier",
																	"src": "2446:27:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "2446:60:32"
															},
															"variables": [
																{
																	"name": "value3_1",
																	"nodeType": "YulTypedName",
																	"src": "2424:8:32",
																	"type": ""
																},
																{
																	"name": "value4_1",
																	"nodeType": "YulTypedName",
																	"src": "2434:8:32",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2515:18:32",
															"value": {
																"name": "value3_1",
																"nodeType": "YulIdentifier",
																"src": "2525:8:32"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "2515:6:32"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2542:18:32",
															"value": {
																"name": "value4_1",
																"nodeType": "YulIdentifier",
																"src": "2552:8:32"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nodeType": "YulIdentifier",
																	"src": "2542:6:32"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1860:9:32",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1871:7:32",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1883:6:32",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1891:6:32",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1899:6:32",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "1907:6:32",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "1915:6:32",
														"type": ""
													}
												],
												"src": "1786:780:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2649:136:32",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2695:26:32",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2704:6:32"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2712:6:32"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2697:6:32"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2697:22:32"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2697:22:32"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2670:7:32"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2679:9:32"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2666:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2666:23:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2691:2:32",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2662:3:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "2662:32:32"
															},
															"nodeType": "YulIf",
															"src": "2659:2:32"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2730:49:32",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2769:9:32"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_bool_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "2740:28:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "2740:39:32"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2730:6:32"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2615:9:32",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2626:7:32",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2638:6:32",
														"type": ""
													}
												],
												"src": "2571:214:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2869:137:32",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2915:26:32",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2924:6:32"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2932:6:32"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2917:6:32"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2917:22:32"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2917:22:32"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2890:7:32"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2899:9:32"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2886:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2886:23:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2911:2:32",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2882:3:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "2882:32:32"
															},
															"nodeType": "YulIf",
															"src": "2879:2:32"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2950:50:32",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2990:9:32"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_int24_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "2960:29:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "2960:40:32"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2950:6:32"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_int24_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2835:9:32",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2846:7:32",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2858:6:32",
														"type": ""
													}
												],
												"src": "2790:216:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3107:157:32",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3153:26:32",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3162:6:32"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3170:6:32"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3155:6:32"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3155:22:32"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3155:22:32"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3128:7:32"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3137:9:32"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3124:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3124:23:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3149:2:32",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3120:3:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "3120:32:32"
															},
															"nodeType": "YulIf",
															"src": "3117:2:32"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3188:26:32",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3204:9:32"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3198:5:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "3198:16:32"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3188:6:32"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3223:35:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3243:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3254:2:32",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3239:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3239:18:32"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3233:5:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "3233:25:32"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3223:6:32"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_int256t_int256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3065:9:32",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3076:7:32",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3088:6:32",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3096:6:32",
														"type": ""
													}
												],
												"src": "3011:253:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3390:444:32",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3436:26:32",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3445:6:32"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3453:6:32"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3438:6:32"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3438:22:32"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3438:22:32"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3411:7:32"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3420:9:32"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3407:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3407:23:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3432:2:32",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3403:3:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "3403:32:32"
															},
															"nodeType": "YulIf",
															"src": "3400:2:32"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3471:33:32",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3494:9:32"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3481:12:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "3481:23:32"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3471:6:32"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3513:42:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3540:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3551:2:32",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3536:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3536:18:32"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3523:12:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "3523:32:32"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3513:6:32"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3564:46:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3595:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3606:2:32",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3591:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3591:18:32"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3578:12:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "3578:32:32"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "3568:6:32",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3653:26:32",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "3662:6:32"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "3670:6:32"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3655:6:32"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3655:22:32"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3655:22:32"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3625:6:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3633:18:32",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3622:2:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "3622:30:32"
															},
															"nodeType": "YulIf",
															"src": "3619:2:32"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3688:86:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3746:9:32"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "3757:6:32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3742:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3742:22:32"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "3766:7:32"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_bytes_calldata",
																	"nodeType": "YulIdentifier",
																	"src": "3714:27:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "3714:60:32"
															},
															"variables": [
																{
																	"name": "value2_1",
																	"nodeType": "YulTypedName",
																	"src": "3692:8:32",
																	"type": ""
																},
																{
																	"name": "value3_1",
																	"nodeType": "YulTypedName",
																	"src": "3702:8:32",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3783:18:32",
															"value": {
																"name": "value2_1",
																"nodeType": "YulIdentifier",
																"src": "3793:8:32"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "3783:6:32"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3810:18:32",
															"value": {
																"name": "value3_1",
																"nodeType": "YulIdentifier",
																"src": "3820:8:32"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "3810:6:32"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_int256t_int256t_bytes_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3332:9:32",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3343:7:32",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3355:6:32",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3363:6:32",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "3371:6:32",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "3379:6:32",
														"type": ""
													}
												],
												"src": "3269:565:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3997:527:32",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4044:26:32",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value5",
																					"nodeType": "YulIdentifier",
																					"src": "4053:6:32"
																				},
																				{
																					"name": "value5",
																					"nodeType": "YulIdentifier",
																					"src": "4061:6:32"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4046:6:32"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4046:22:32"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4046:22:32"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4018:7:32"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4027:9:32"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4014:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4014:23:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4039:3:32",
																		"type": "",
																		"value": "192"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4010:3:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "4010:33:32"
															},
															"nodeType": "YulIf",
															"src": "4007:2:32"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4079:29:32",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4098:9:32"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4092:5:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "4092:16:32"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "4083:5:32",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4144:5:32"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "4117:26:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "4117:33:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4117:33:32"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4159:15:32",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "4169:5:32"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4159:6:32"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4183:59:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4227:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4238:2:32",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4223:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4223:18:32"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_int24_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "4193:29:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "4193:49:32"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "4183:6:32"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4251:60:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4296:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4307:2:32",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4292:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4292:18:32"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_uint16_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "4261:30:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "4261:50:32"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "4251:6:32"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4320:60:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4365:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4376:2:32",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4361:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4361:18:32"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_uint16_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "4330:30:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "4330:50:32"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "4320:6:32"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4389:61:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4434:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4445:3:32",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4430:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4430:19:32"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_uint16_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "4399:30:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "4399:51:32"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nodeType": "YulIdentifier",
																	"src": "4389:6:32"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4459:59:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4502:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4513:3:32",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4498:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4498:19:32"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_bool_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "4469:28:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "4469:49:32"
															},
															"variableNames": [
																{
																	"name": "value5",
																	"nodeType": "YulIdentifier",
																	"src": "4459:6:32"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint160t_int24t_uint16t_uint16t_uint16t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3923:9:32",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3934:7:32",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3946:6:32",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3954:6:32",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "3962:6:32",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "3970:6:32",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "3978:6:32",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "3986:6:32",
														"type": ""
													}
												],
												"src": "3839:685:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4599:120:32",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4645:26:32",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "4654:6:32"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "4662:6:32"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4647:6:32"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4647:22:32"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4647:22:32"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4620:7:32"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4629:9:32"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4616:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4616:23:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4641:2:32",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4612:3:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "4612:32:32"
															},
															"nodeType": "YulIf",
															"src": "4609:2:32"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4680:33:32",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4703:9:32"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4690:12:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "4690:23:32"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4680:6:32"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4565:9:32",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4576:7:32",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4588:6:32",
														"type": ""
													}
												],
												"src": "4529:190:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4805:113:32",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4851:26:32",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "4860:6:32"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "4868:6:32"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4853:6:32"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4853:22:32"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4853:22:32"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4826:7:32"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4835:9:32"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4822:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4822:23:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4847:2:32",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4818:3:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "4818:32:32"
															},
															"nodeType": "YulIf",
															"src": "4815:2:32"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4886:26:32",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4902:9:32"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4896:5:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "4896:16:32"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4886:6:32"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4771:9:32",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4782:7:32",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4794:6:32",
														"type": ""
													}
												],
												"src": "4724:194:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5055:272:32",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5102:26:32",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5111:6:32"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5119:6:32"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5104:6:32"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5104:22:32"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5104:22:32"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5076:7:32"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5085:9:32"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5072:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5072:23:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5097:3:32",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5068:3:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "5068:33:32"
															},
															"nodeType": "YulIf",
															"src": "5065:2:32"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5137:26:32",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5153:9:32"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5147:5:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "5147:16:32"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "5137:6:32"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5172:61:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5218:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5229:2:32",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5214:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5214:18:32"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_uint128_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "5182:31:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "5182:51:32"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "5172:6:32"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5242:35:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5262:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5273:2:32",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5258:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5258:18:32"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5252:5:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "5252:25:32"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "5242:6:32"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5286:35:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5306:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5317:2:32",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5302:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5302:18:32"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5296:5:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "5296:25:32"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "5286:6:32"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint128t_uint256t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4997:9:32",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5008:7:32",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5020:6:32",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5028:6:32",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "5036:6:32",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "5044:6:32",
														"type": ""
													}
												],
												"src": "4923:404:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5419:171:32",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5465:26:32",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5474:6:32"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5482:6:32"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5467:6:32"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5467:22:32"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5467:22:32"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5440:7:32"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5449:9:32"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5436:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5436:23:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5461:2:32",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5432:3:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "5432:32:32"
															},
															"nodeType": "YulIf",
															"src": "5429:2:32"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5500:33:32",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5523:9:32"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5510:12:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "5510:23:32"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "5500:6:32"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5542:42:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5569:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5580:2:32",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5565:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5565:18:32"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5552:12:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "5552:32:32"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "5542:6:32"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5377:9:32",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5388:7:32",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5400:6:32",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5408:6:32",
														"type": ""
													}
												],
												"src": "5332:258:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5858:959:32",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5905:26:32",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "5914:6:32"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "5922:6:32"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5907:6:32"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5907:22:32"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5907:22:32"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5879:7:32"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5888:9:32"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5875:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5875:23:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5900:3:32",
																		"type": "",
																		"value": "384"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5871:3:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "5871:33:32"
															},
															"nodeType": "YulIf",
															"src": "5868:2:32"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5940:29:32",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5959:9:32"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5953:5:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "5953:16:32"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "5944:5:32",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6039:26:32",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "6048:6:32"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "6056:6:32"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6041:6:32"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6041:22:32"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6041:22:32"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5991:5:32"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "6002:5:32"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6009:26:32",
																						"type": "",
																						"value": "0xffffffffffffffffffffffff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "5998:3:32"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5998:38:32"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "5988:2:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5988:49:32"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5981:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "5981:57:32"
															},
															"nodeType": "YulIf",
															"src": "5978:2:32"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6074:15:32",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "6084:5:32"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "6074:6:32"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6098:61:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6144:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6155:2:32",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6140:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6140:18:32"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "6108:31:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "6108:51:32"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "6098:6:32"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6168:61:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6214:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6225:2:32",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6210:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6210:18:32"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "6178:31:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "6178:51:32"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "6168:6:32"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6238:61:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6284:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6295:2:32",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6280:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6280:18:32"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "6248:31:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "6248:51:32"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "6238:6:32"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6308:60:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6352:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6363:3:32",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6348:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6348:19:32"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_int24_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "6318:29:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "6318:50:32"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nodeType": "YulIdentifier",
																	"src": "6308:6:32"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6377:60:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6421:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6432:3:32",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6417:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6417:19:32"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_int24_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "6387:29:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "6387:50:32"
															},
															"variableNames": [
																{
																	"name": "value5",
																	"nodeType": "YulIdentifier",
																	"src": "6377:6:32"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6446:60:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6490:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6501:3:32",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6486:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6486:19:32"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_int24_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "6456:29:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "6456:50:32"
															},
															"variableNames": [
																{
																	"name": "value6",
																	"nodeType": "YulIdentifier",
																	"src": "6446:6:32"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6515:62:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6561:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6572:3:32",
																				"type": "",
																				"value": "224"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6557:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6557:19:32"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_uint128_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "6525:31:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "6525:52:32"
															},
															"variableNames": [
																{
																	"name": "value7",
																	"nodeType": "YulIdentifier",
																	"src": "6515:6:32"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6586:36:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6606:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6617:3:32",
																				"type": "",
																				"value": "256"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6602:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6602:19:32"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "6596:5:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "6596:26:32"
															},
															"variableNames": [
																{
																	"name": "value8",
																	"nodeType": "YulIdentifier",
																	"src": "6586:6:32"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6631:36:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6651:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6662:3:32",
																				"type": "",
																				"value": "288"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6647:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6647:19:32"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "6641:5:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "6641:26:32"
															},
															"variableNames": [
																{
																	"name": "value9",
																	"nodeType": "YulIdentifier",
																	"src": "6631:6:32"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6676:63:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6723:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6734:3:32",
																				"type": "",
																				"value": "320"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6719:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6719:19:32"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_uint128_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "6687:31:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "6687:52:32"
															},
															"variableNames": [
																{
																	"name": "value10",
																	"nodeType": "YulIdentifier",
																	"src": "6676:7:32"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6748:63:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6795:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6806:3:32",
																				"type": "",
																				"value": "352"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6791:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6791:19:32"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_uint128_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "6759:31:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "6759:52:32"
															},
															"variableNames": [
																{
																	"name": "value11",
																	"nodeType": "YulIdentifier",
																	"src": "6748:7:32"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint96t_addresst_addresst_addresst_int24t_int24t_int24t_uint128t_uint256t_uint256t_uint128t_uint128_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5734:9:32",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5745:7:32",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5757:6:32",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5765:6:32",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "5773:6:32",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "5781:6:32",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "5789:6:32",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "5797:6:32",
														"type": ""
													},
													{
														"name": "value6",
														"nodeType": "YulTypedName",
														"src": "5805:6:32",
														"type": ""
													},
													{
														"name": "value7",
														"nodeType": "YulTypedName",
														"src": "5813:6:32",
														"type": ""
													},
													{
														"name": "value8",
														"nodeType": "YulTypedName",
														"src": "5821:6:32",
														"type": ""
													},
													{
														"name": "value9",
														"nodeType": "YulTypedName",
														"src": "5829:6:32",
														"type": ""
													},
													{
														"name": "value10",
														"nodeType": "YulTypedName",
														"src": "5837:7:32",
														"type": ""
													},
													{
														"name": "value11",
														"nodeType": "YulTypedName",
														"src": "5846:7:32",
														"type": ""
													}
												],
												"src": "5595:1222:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6868:60:32",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6885:3:32"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "6894:5:32"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "6909:3:32",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "6914:1:32",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "6905:3:32"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6905:11:32"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6918:1:32",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "6901:3:32"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6901:19:32"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "6890:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6890:31:32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6878:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "6878:44:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6878:44:32"
														}
													]
												},
												"name": "abi_encode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6852:5:32",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6859:3:32",
														"type": ""
													}
												],
												"src": "6822:106:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6977:49:32",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6994:3:32"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7010:1:32",
																				"type": "",
																				"value": "2"
																			},
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "7013:5:32"
																			}
																		],
																		"functionName": {
																			"name": "signextend",
																			"nodeType": "YulIdentifier",
																			"src": "6999:10:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6999:20:32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6987:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "6987:33:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6987:33:32"
														}
													]
												},
												"name": "abi_encode_t_int24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6961:5:32",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6968:3:32",
														"type": ""
													}
												],
												"src": "6933:93:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7132:102:32",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7142:26:32",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7154:9:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7165:2:32",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7150:3:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "7150:18:32"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7142:4:32"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7184:9:32"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "7199:6:32"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "7215:3:32",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "7220:1:32",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "7211:3:32"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7211:11:32"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7224:1:32",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "7207:3:32"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7207:19:32"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "7195:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7195:32:32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7177:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "7177:51:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7177:51:32"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7101:9:32",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7112:6:32",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7123:4:32",
														"type": ""
													}
												],
												"src": "7031:203:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7462:732:32",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7472:29:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7490:3:32",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7495:1:32",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7486:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7486:11:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7499:1:32",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "7482:3:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "7482:19:32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "7476:2:32",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7517:9:32"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "7532:6:32"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "7540:2:32"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "7528:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7528:15:32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7510:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "7510:34:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7510:34:32"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7553:12:32",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "7563:2:32",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "7557:2:32",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7585:9:32"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "7596:2:32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7581:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7581:18:32"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value1",
																						"nodeType": "YulIdentifier",
																						"src": "7615:6:32"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "7608:6:32"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7608:14:32"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "7601:6:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7601:22:32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7574:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "7574:50:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7574:50:32"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7644:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7655:2:32",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7640:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7640:18:32"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "7660:6:32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7633:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "7633:34:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7633:34:32"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7687:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7698:2:32",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7683:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7683:18:32"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value3",
																				"nodeType": "YulIdentifier",
																				"src": "7707:6:32"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "7715:2:32"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "7703:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7703:15:32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7676:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "7676:43:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7676:43:32"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7739:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7750:3:32",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7735:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7735:19:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7756:3:32",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7728:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "7728:32:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7728:32:32"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7769:27:32",
															"value": {
																"arguments": [
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "7789:6:32"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "7783:5:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "7783:13:32"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "7773:6:32",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7816:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7827:3:32",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7812:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7812:19:32"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7833:6:32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7805:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "7805:35:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7805:35:32"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7849:13:32",
															"value": {
																"name": "tail",
																"nodeType": "YulIdentifier",
																"src": "7858:4:32"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "7853:1:32",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7921:91:32",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "7950:9:32"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "7961:1:32"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "7946:3:32"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "7946:17:32"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "7965:3:32",
																							"type": "",
																							"value": "192"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "7942:3:32"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "7942:27:32"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value4",
																											"nodeType": "YulIdentifier",
																											"src": "7985:6:32"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "7993:1:32"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "7981:3:32"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "7981:14:32"
																								},
																								{
																									"name": "_2",
																									"nodeType": "YulIdentifier",
																									"src": "7997:2:32"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "7977:3:32"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "7977:23:32"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "7971:5:32"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "7971:30:32"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "7935:6:32"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7935:67:32"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7935:67:32"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "7882:1:32"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7885:6:32"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "7879:2:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "7879:13:32"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "7893:19:32",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "7895:15:32",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "7904:1:32"
																				},
																				{
																					"name": "_2",
																					"nodeType": "YulIdentifier",
																					"src": "7907:2:32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "7900:3:32"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7900:10:32"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "7895:1:32"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "7875:3:32",
																"statements": []
															},
															"src": "7871:141:32"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8046:70:32",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "8075:9:32"
																								},
																								{
																									"name": "length",
																									"nodeType": "YulIdentifier",
																									"src": "8086:6:32"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "8071:3:32"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "8071:22:32"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "8095:3:32",
																							"type": "",
																							"value": "192"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "8067:3:32"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8067:32:32"
																				},
																				{
																					"name": "tail",
																					"nodeType": "YulIdentifier",
																					"src": "8101:4:32"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "8060:6:32"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8060:46:32"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8060:46:32"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "8027:1:32"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "8030:6:32"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "8024:2:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "8024:13:32"
															},
															"nodeType": "YulIf",
															"src": "8021:2:32"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8125:63:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8141:9:32"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "8160:6:32"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "8168:2:32",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "8156:3:32"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8156:15:32"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "8177:2:32",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "8173:3:32"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8173:7:32"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "8152:3:32"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8152:29:32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8137:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8137:45:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8184:3:32",
																		"type": "",
																		"value": "192"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8133:3:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "8133:55:32"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8125:4:32"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_bool_t_int256_t_uint160_t_bytes_memory_ptr__to_t_address_t_bool_t_int256_t_uint160_t_bytes_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7399:9:32",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "7410:6:32",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "7418:6:32",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "7426:6:32",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "7434:6:32",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7442:6:32",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7453:4:32",
														"type": ""
													}
												],
												"src": "7239:955:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8384:312:32",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8394:27:32",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8406:9:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8417:3:32",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8402:3:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "8402:19:32"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8394:4:32"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8430:29:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8448:3:32",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8453:1:32",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "8444:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8444:11:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8457:1:32",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "8440:3:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "8440:19:32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "8434:2:32",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8475:9:32"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "8490:6:32"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "8498:2:32"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "8486:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8486:15:32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8468:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "8468:34:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8468:34:32"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8522:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8533:2:32",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8518:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8518:18:32"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "8542:6:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8550:34:32",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "8538:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8538:47:32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8511:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "8511:75:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8511:75:32"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8606:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8617:2:32",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8602:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8602:18:32"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value2",
																				"nodeType": "YulIdentifier",
																				"src": "8626:6:32"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "8634:2:32"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "8622:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8622:15:32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8595:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "8595:43:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8595:43:32"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8658:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8669:2:32",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8654:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8654:18:32"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value3",
																				"nodeType": "YulIdentifier",
																				"src": "8678:6:32"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "8686:2:32"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "8674:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8674:15:32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8647:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "8647:43:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8647:43:32"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint128_t_address_t_address__to_t_address_t_uint128_t_address_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8329:9:32",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "8340:6:32",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "8348:6:32",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "8356:6:32",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8364:6:32",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8375:4:32",
														"type": ""
													}
												],
												"src": "8199:497:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8830:145:32",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8840:26:32",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8852:9:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8863:2:32",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8848:3:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "8848:18:32"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8840:4:32"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8882:9:32"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "8897:6:32"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "8913:3:32",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "8918:1:32",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "8909:3:32"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8909:11:32"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8922:1:32",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "8905:3:32"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8905:19:32"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "8893:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8893:32:32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8875:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "8875:51:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8875:51:32"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8946:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8957:2:32",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8942:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8942:18:32"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "8962:6:32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8935:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "8935:34:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8935:34:32"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8791:9:32",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "8802:6:32",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8810:6:32",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8821:4:32",
														"type": ""
													}
												],
												"src": "8701:274:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9079:103:32",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9089:26:32",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9101:9:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9112:2:32",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9097:3:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "9097:18:32"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9089:4:32"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9131:9:32"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "9146:6:32"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "9158:3:32",
																						"type": "",
																						"value": "224"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "9163:10:32",
																						"type": "",
																						"value": "0xffffffff"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "9154:3:32"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9154:20:32"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "9142:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9142:33:32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9124:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "9124:52:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9124:52:32"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9048:9:32",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9059:6:32",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9070:4:32",
														"type": ""
													}
												],
												"src": "8980:202:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9284:91:32",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9294:26:32",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9306:9:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9317:2:32",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9302:3:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "9302:18:32"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9294:4:32"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9336:9:32"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9358:1:32",
																				"type": "",
																				"value": "2"
																			},
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "9361:6:32"
																			}
																		],
																		"functionName": {
																			"name": "signextend",
																			"nodeType": "YulIdentifier",
																			"src": "9347:10:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9347:21:32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9329:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "9329:40:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9329:40:32"
														}
													]
												},
												"name": "abi_encode_tuple_t_int24__to_t_int24__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9253:9:32",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9264:6:32",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9275:4:32",
														"type": ""
													}
												],
												"src": "9187:188:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9554:172:32",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9571:9:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9582:2:32",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9564:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "9564:21:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9564:21:32"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9605:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9616:2:32",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9601:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9601:18:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9621:2:32",
																		"type": "",
																		"value": "22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9594:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "9594:30:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9594:30:32"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9644:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9655:2:32",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9640:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9640:18:32"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9660:24:32",
																		"type": "",
																		"value": "Only owner can do this"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9633:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "9633:52:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9633:52:32"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9694:26:32",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9706:9:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9717:2:32",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9702:3:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "9702:18:32"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9694:4:32"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_6fd24def08b0888543800c4127fd6d1aa58919ac12b49d8f20efd315c642cdfa__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9531:9:32",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9545:4:32",
														"type": ""
													}
												],
												"src": "9380:346:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9905:170:32",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9922:9:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9933:2:32",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9915:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "9915:21:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9915:21:32"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9956:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9967:2:32",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9952:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9952:18:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9972:2:32",
																		"type": "",
																		"value": "20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9945:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "9945:30:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9945:30:32"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9995:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10006:2:32",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9991:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9991:18:32"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10011:22:32",
																		"type": "",
																		"value": "Invalid input amount"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9984:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "9984:50:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9984:50:32"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10043:26:32",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10055:9:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10066:2:32",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10051:3:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "10051:18:32"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10043:4:32"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_71128eeb4fd76da6a8355c9d10e3d97be1d2b0195b0030a1450235b9a3ac80cf__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9882:9:32",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9896:4:32",
														"type": ""
													}
												],
												"src": "9731:344:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10254:173:32",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10271:9:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10282:2:32",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10264:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "10264:21:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10264:21:32"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10305:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10316:2:32",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10301:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10301:18:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10321:2:32",
																		"type": "",
																		"value": "23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10294:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "10294:30:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10294:30:32"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10344:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10355:2:32",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10340:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10340:18:32"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10360:25:32",
																		"type": "",
																		"value": "Callback only from pool"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10333:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "10333:53:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10333:53:32"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10395:26:32",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10407:9:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10418:2:32",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10403:3:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "10403:18:32"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10395:4:32"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_bff4c104f39e47a163d0cb9a612fb38cc6d016a74062770b58bcdc30c5de72ee__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10231:9:32",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10245:4:32",
														"type": ""
													}
												],
												"src": "10080:347:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10587:1219:32",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10597:27:32",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10609:9:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10620:3:32",
																		"type": "",
																		"value": "384"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10605:3:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "10605:19:32"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10597:4:32"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "10660:6:32"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "10654:5:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10654:13:32"
																	},
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10669:9:32"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "10633:20:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "10633:46:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10633:46:32"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10688:44:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "10718:6:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10726:4:32",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10714:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10714:17:32"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "10708:5:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "10708:24:32"
															},
															"variables": [
																{
																	"name": "memberValue0",
																	"nodeType": "YulTypedName",
																	"src": "10692:12:32",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memberValue0",
																		"nodeType": "YulIdentifier",
																		"src": "10762:12:32"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10780:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10791:4:32",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10776:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10776:20:32"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "10741:20:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "10741:56:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10741:56:32"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10806:46:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "10838:6:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10846:4:32",
																				"type": "",
																				"value": "0x40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10834:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10834:17:32"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "10828:5:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "10828:24:32"
															},
															"variables": [
																{
																	"name": "memberValue0_1",
																	"nodeType": "YulTypedName",
																	"src": "10810:14:32",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memberValue0_1",
																		"nodeType": "YulIdentifier",
																		"src": "10880:14:32"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10900:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10911:4:32",
																				"type": "",
																				"value": "0x40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10896:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10896:20:32"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_int24",
																	"nodeType": "YulIdentifier",
																	"src": "10861:18:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "10861:56:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10861:56:32"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10926:46:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "10958:6:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10966:4:32",
																				"type": "",
																				"value": "0x60"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10954:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10954:17:32"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "10948:5:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "10948:24:32"
															},
															"variables": [
																{
																	"name": "memberValue0_2",
																	"nodeType": "YulTypedName",
																	"src": "10930:14:32",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memberValue0_2",
																		"nodeType": "YulIdentifier",
																		"src": "11000:14:32"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11020:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11031:4:32",
																				"type": "",
																				"value": "0x60"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11016:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11016:20:32"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_int24",
																	"nodeType": "YulIdentifier",
																	"src": "10981:18:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "10981:56:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10981:56:32"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11046:46:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "11078:6:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11086:4:32",
																				"type": "",
																				"value": "0x80"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11074:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11074:17:32"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "11068:5:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "11068:24:32"
															},
															"variables": [
																{
																	"name": "memberValue0_3",
																	"nodeType": "YulTypedName",
																	"src": "11050:14:32",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memberValue0_3",
																		"nodeType": "YulIdentifier",
																		"src": "11120:14:32"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11140:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11151:4:32",
																				"type": "",
																				"value": "0x80"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11136:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11136:20:32"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_int24",
																	"nodeType": "YulIdentifier",
																	"src": "11101:18:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "11101:56:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11101:56:32"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11177:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11188:4:32",
																				"type": "",
																				"value": "0xa0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11173:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11173:20:32"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "11205:6:32"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "11213:4:32",
																						"type": "",
																						"value": "0xa0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "11201:3:32"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11201:17:32"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "11195:5:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11195:24:32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11166:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "11166:54:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11166:54:32"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11240:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11251:4:32",
																				"type": "",
																				"value": "0xc0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11236:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11236:20:32"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "11268:6:32"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "11276:4:32",
																						"type": "",
																						"value": "0xc0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "11264:3:32"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11264:17:32"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "11258:5:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11258:24:32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11229:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "11229:54:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11229:54:32"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11303:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11314:4:32",
																				"type": "",
																				"value": "0xe0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11299:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11299:20:32"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "11331:6:32"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "11339:4:32",
																						"type": "",
																						"value": "0xe0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "11327:3:32"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11327:17:32"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "11321:5:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11321:24:32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11292:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "11292:54:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11292:54:32"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11355:16:32",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "11365:6:32",
																"type": "",
																"value": "0x0100"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "11359:2:32",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11391:9:32"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "11402:2:32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11387:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11387:18:32"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "11417:6:32"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "11425:2:32"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "11413:3:32"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11413:15:32"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "11407:5:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11407:22:32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11380:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "11380:50:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11380:50:32"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11439:16:32",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "11449:6:32",
																"type": "",
																"value": "0x0120"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "11443:2:32",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11464:44:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "11496:6:32"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "11504:2:32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11492:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11492:15:32"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "11486:5:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "11486:22:32"
															},
															"variables": [
																{
																	"name": "memberValue0_4",
																	"nodeType": "YulTypedName",
																	"src": "11468:14:32",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memberValue0_4",
																		"nodeType": "YulIdentifier",
																		"src": "11538:14:32"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11558:9:32"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "11569:2:32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11554:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11554:18:32"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "11517:20:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "11517:56:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11517:56:32"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11582:16:32",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "11592:6:32",
																"type": "",
																"value": "0x0140"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "11586:2:32",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11618:9:32"
																			},
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "11629:2:32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11614:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11614:18:32"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "11644:6:32"
																					},
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "11652:2:32"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "11640:3:32"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11640:15:32"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "11634:5:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11634:22:32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11607:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "11607:50:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11607:50:32"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11666:16:32",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "11676:6:32",
																"type": "",
																"value": "0x0160"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "11670:2:32",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11691:44:32",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "11723:6:32"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "11731:2:32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11719:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11719:15:32"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "11713:5:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "11713:22:32"
															},
															"variables": [
																{
																	"name": "memberValue0_5",
																	"nodeType": "YulTypedName",
																	"src": "11695:14:32",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memberValue0_5",
																		"nodeType": "YulIdentifier",
																		"src": "11765:14:32"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11785:9:32"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "11796:2:32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11781:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11781:18:32"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "11744:20:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "11744:56:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11744:56:32"
														}
													]
												},
												"name": "abi_encode_tuple_t_struct$_MintParams_$226_memory_ptr__to_t_struct$_MintParams_$226_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10556:9:32",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10567:6:32",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10578:4:32",
														"type": ""
													}
												],
												"src": "10432:1374:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11912:76:32",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11922:26:32",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11934:9:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11945:2:32",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11930:3:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "11930:18:32"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11922:4:32"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11964:9:32"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "11975:6:32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11957:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "11957:25:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11957:25:32"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11881:9:32",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11892:6:32",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11903:4:32",
														"type": ""
													}
												],
												"src": "11811:177:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12178:247:32",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12188:27:32",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12200:9:32"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12211:3:32",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12196:3:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "12196:19:32"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12188:4:32"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12231:9:32"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "12242:6:32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12224:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "12224:25:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12224:25:32"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12269:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12280:2:32",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12265:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12265:18:32"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "12289:6:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12297:34:32",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "12285:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12285:47:32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12258:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "12258:75:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12258:75:32"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12353:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12364:2:32",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12349:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12349:18:32"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "12369:6:32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12342:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "12342:34:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12342:34:32"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12396:9:32"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12407:2:32",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12392:3:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12392:18:32"
																	},
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "12412:6:32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12385:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "12385:34:32"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12385:34:32"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint128_t_uint256_t_uint256__to_t_uint256_t_uint128_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12123:9:32",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "12134:6:32",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "12142:6:32",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "12150:6:32",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "12158:6:32",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12169:4:32",
														"type": ""
													}
												],
												"src": "11993:432:32"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12477:86:32",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12541:16:32",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12550:1:32",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12553:1:32",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "12543:6:32"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12543:12:32"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12543:12:32"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "12500:5:32"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "12511:5:32"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "12526:3:32",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "12531:1:32",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "12522:3:32"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "12522:11:32"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "12535:1:32",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "12518:3:32"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "12518:19:32"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "12507:3:32"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "12507:31:32"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "12497:2:32"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12497:42:32"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "12490:6:32"
																},
																"nodeType": "YulFunctionCall",
																"src": "12490:50:32"
															},
															"nodeType": "YulIf",
															"src": "12487:2:32"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12466:5:32",
														"type": ""
													}
												],
												"src": "12430:133:32"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_t_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n    function abi_decode_t_bool_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_t_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(arrayPos, arrayPos) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(arrayPos, arrayPos) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_t_int24_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, signextend(2, value))) { revert(0, 0) }\n    }\n    function abi_decode_t_uint128_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_t_uint16_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, 0xffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value4, value4) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_t_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(value4, value4) }\n        let value3_1, value4_1 := abi_decode_t_bytes_calldata(add(headStart, offset), dataEnd)\n        value3 := value3_1\n        value4 := value4_1\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_t_bool_fromMemory(headStart)\n    }\n    function abi_decode_tuple_t_int24_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_t_int24_fromMemory(headStart)\n    }\n    function abi_decode_tuple_t_int256t_int256_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_int256t_int256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(value2, value2) }\n        let value2_1, value3_1 := abi_decode_t_bytes_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_decode_tuple_t_uint160t_int24t_uint16t_uint16t_uint16t_bool_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(value5, value5) }\n        let value := mload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        value1 := abi_decode_t_int24_fromMemory(add(headStart, 32))\n        value2 := abi_decode_t_uint16_fromMemory(add(headStart, 64))\n        value3 := abi_decode_t_uint16_fromMemory(add(headStart, 96))\n        value4 := abi_decode_t_uint16_fromMemory(add(headStart, 128))\n        value5 := abi_decode_t_bool_fromMemory(add(headStart, 160))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_uint128t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value0, value0) }\n        value0 := mload(headStart)\n        value1 := abi_decode_t_uint128_fromMemory(add(headStart, 32))\n        value2 := mload(add(headStart, 64))\n        value3 := mload(add(headStart, 96))\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint96t_addresst_addresst_addresst_int24t_int24t_int24t_uint128t_uint256t_uint256t_uint128t_uint128_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11\n    {\n        if slt(sub(dataEnd, headStart), 384) { revert(value2, value2) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffff))) { revert(value2, value2) }\n        value0 := value\n        value1 := abi_decode_t_address_fromMemory(add(headStart, 32))\n        value2 := abi_decode_t_address_fromMemory(add(headStart, 64))\n        value3 := abi_decode_t_address_fromMemory(add(headStart, 96))\n        value4 := abi_decode_t_int24_fromMemory(add(headStart, 128))\n        value5 := abi_decode_t_int24_fromMemory(add(headStart, 160))\n        value6 := abi_decode_t_int24_fromMemory(add(headStart, 192))\n        value7 := abi_decode_t_uint128_fromMemory(add(headStart, 224))\n        value8 := mload(add(headStart, 256))\n        value9 := mload(add(headStart, 288))\n        value10 := abi_decode_t_uint128_fromMemory(add(headStart, 320))\n        value11 := abi_decode_t_uint128_fromMemory(add(headStart, 352))\n    }\n    function abi_encode_t_address(value, pos)\n    {\n        mstore(pos, and(value, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_t_int24(value, pos)\n    {\n        mstore(pos, signextend(2, value))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_bool_t_int256_t_uint160_t_bytes_memory_ptr__to_t_address_t_bool_t_int256_t_uint160_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        let _2 := 32\n        mstore(add(headStart, _2), iszero(iszero(value1)))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), and(value3, _1))\n        mstore(add(headStart, 128), 160)\n        let length := mload(value4)\n        mstore(add(headStart, 160), length)\n        let i := tail\n        for { } lt(i, length) { i := add(i, _2) }\n        {\n            mstore(add(add(headStart, i), 192), mload(add(add(value4, i), _2)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 192), tail)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 192)\n    }\n    function abi_encode_tuple_t_address_t_uint128_t_address_t_address__to_t_address_t_uint128_t_address_t_address__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), and(value3, _1))\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, shl(224, 0xffffffff)))\n    }\n    function abi_encode_tuple_t_int24__to_t_int24__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, signextend(2, value0))\n    }\n    function abi_encode_tuple_t_stringliteral_6fd24def08b0888543800c4127fd6d1aa58919ac12b49d8f20efd315c642cdfa__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Only owner can do this\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_71128eeb4fd76da6a8355c9d10e3d97be1d2b0195b0030a1450235b9a3ac80cf__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Invalid input amount\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_bff4c104f39e47a163d0cb9a612fb38cc6d016a74062770b58bcdc30c5de72ee__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Callback only from pool\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_struct$_MintParams_$226_memory_ptr__to_t_struct$_MintParams_$226_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 384)\n        abi_encode_t_address(mload(value0), headStart)\n        let memberValue0 := mload(add(value0, 0x20))\n        abi_encode_t_address(memberValue0, add(headStart, 0x20))\n        let memberValue0_1 := mload(add(value0, 0x40))\n        abi_encode_t_int24(memberValue0_1, add(headStart, 0x40))\n        let memberValue0_2 := mload(add(value0, 0x60))\n        abi_encode_t_int24(memberValue0_2, add(headStart, 0x60))\n        let memberValue0_3 := mload(add(value0, 0x80))\n        abi_encode_t_int24(memberValue0_3, add(headStart, 0x80))\n        mstore(add(headStart, 0xa0), mload(add(value0, 0xa0)))\n        mstore(add(headStart, 0xc0), mload(add(value0, 0xc0)))\n        mstore(add(headStart, 0xe0), mload(add(value0, 0xe0)))\n        let _1 := 0x0100\n        mstore(add(headStart, _1), mload(add(value0, _1)))\n        let _2 := 0x0120\n        let memberValue0_4 := mload(add(value0, _2))\n        abi_encode_t_address(memberValue0_4, add(headStart, _2))\n        let _3 := 0x0140\n        mstore(add(headStart, _3), mload(add(value0, _3)))\n        let _4 := 0x0160\n        let memberValue0_5 := mload(add(value0, _4))\n        abi_encode_t_address(memberValue0_5, add(headStart, _4))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint128_t_uint256_t_uint256__to_t_uint256_t_uint128_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function validator_revert_t_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n}",
									"id": 32,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xE8 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xD21220A7 GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xE6F4D0AA GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xE6F4D0AA EQ PUSH2 0x25B JUMPI DUP1 PUSH4 0xF851A440 EQ PUSH2 0x27B JUMPI DUP1 PUSH4 0xFA461E33 EQ PUSH2 0x290 JUMPI DUP1 PUSH4 0xFDDE416F EQ PUSH2 0x2B0 JUMPI PUSH2 0xE8 JUMP JUMPDEST DUP1 PUSH4 0xD21220A7 EQ PUSH2 0x1F1 JUMPI DUP1 PUSH4 0xD2ACA8CD EQ PUSH2 0x206 JUMPI DUP1 PUSH4 0xDA802F80 EQ PUSH2 0x226 JUMPI DUP1 PUSH4 0xDB638298 EQ PUSH2 0x23B JUMPI PUSH2 0xE8 JUMP JUMPDEST DUP1 PUSH4 0x7210468A GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x7210468A EQ PUSH2 0x15A JUMPI DUP1 PUSH4 0x9CD441DA EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0xB02C43D0 EQ PUSH2 0x19F JUMPI DUP1 PUSH4 0xD0C93A7C EQ PUSH2 0x1CF JUMPI PUSH2 0xE8 JUMP JUMPDEST DUP1 PUSH4 0xDFE1681 EQ PUSH2 0xED JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x118 JUMPI DUP1 PUSH4 0x16F0115B EQ PUSH2 0x145 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x2D0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP2 SWAP1 PUSH2 0x151F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x124 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x138 PUSH2 0x133 CALLDATASIZE PUSH1 0x4 PUSH2 0x1212 JUMP JUMPDEST PUSH2 0x2DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP2 SWAP1 PUSH2 0x15FF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x151 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x2FD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x166 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x11D3 JUMP JUMPDEST PUSH2 0x30C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x18F PUSH2 0x18A CALLDATASIZE PUSH1 0x4 PUSH2 0x140B JUMP JUMPDEST PUSH2 0x418 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1785 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BF PUSH2 0x1BA CALLDATASIZE PUSH1 0x4 PUSH2 0x13A0 JUMP JUMPDEST PUSH2 0x6DB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x15B2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E4 PUSH2 0x71B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP2 SWAP1 PUSH2 0x1614 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x72B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH2 0x221 CALLDATASIZE PUSH1 0x4 PUSH2 0x11D3 JUMP JUMPDEST PUSH2 0x73A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x232 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x9D8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x247 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH2 0x256 CALLDATASIZE PUSH1 0x4 PUSH2 0x13A0 JUMP JUMPDEST PUSH2 0x9E7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH2 0x276 CALLDATASIZE PUSH1 0x4 PUSH2 0x11D3 JUMP JUMPDEST PUSH2 0xC0A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x287 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0xC56 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH2 0x2AB CALLDATASIZE PUSH1 0x4 PUSH2 0x12DA JUMP JUMPDEST PUSH2 0xC65 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH2 0x2CB CALLDATASIZE PUSH1 0x4 PUSH2 0x13A0 JUMP JUMPDEST PUSH2 0xDBB JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EB DUP7 DUP6 PUSH2 0xF86 JUMP JUMPDEST POP PUSH4 0xA85BD01 PUSH1 0xE1 SHL SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x33B SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x151F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x367 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x38B SWAP2 SWAP1 PUSH2 0x13B8 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND SWAP4 PUSH4 0xA9059CBB SWAP4 PUSH2 0x3C1 SWAP4 SWAP1 SWAP3 AND SWAP2 DUP7 SWAP2 ADD PUSH2 0x15E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3EF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x413 SWAP2 SWAP1 PUSH2 0x1283 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 SWAP3 DUP4 SWAP3 DUP4 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP3 PUSH4 0x95EA7B3 SWAP3 PUSH2 0x458 SWAP3 SWAP1 SWAP2 AND SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x15E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x472 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x486 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4AA SWAP2 SWAP1 PUSH2 0x1283 JUMP JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0x95EA7B3 SWAP3 PUSH2 0x4E1 SWAP3 SWAP2 AND SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x15E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x50F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x533 SWAP2 SWAP1 PUSH2 0x1283 JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xC0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x583 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x597 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5BB SWAP2 SWAP1 PUSH2 0x132B JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x180 DUP2 ADD DUP3 MSTORE PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x2 DUP1 SLOAD DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV DUP3 SIGNEXTEND SWAP1 SWAP2 SIGNEXTEND DUP4 DUP6 ADD MSTORE PUSH3 0xD89E7 NOT PUSH1 0x60 DUP5 ADD MSTORE PUSH3 0xD89E8 PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 ADD DUP16 SWAP1 MSTORE PUSH1 0xC0 DUP4 ADD DUP15 SWAP1 MSTORE PUSH1 0x0 PUSH1 0xE0 DUP5 ADD DUP2 SWAP1 MSTORE PUSH2 0x100 DUP5 ADD MSTORE ADDRESS PUSH2 0x120 DUP5 ADD MSTORE TIMESTAMP PUSH2 0x140 DUP5 ADD MSTORE DUP2 DUP9 AND PUSH2 0x160 DUP5 ADD MSTORE PUSH1 0x3 SLOAD SWAP4 MLOAD PUSH4 0xB5007D1F PUSH1 0xE0 SHL DUP2 MSTORE SWAP8 SWAP9 POP SWAP2 SWAP7 SWAP3 AND SWAP5 POP PUSH4 0xB5007D1F SWAP4 POP PUSH2 0x66A SWAP3 POP DUP6 SWAP2 ADD PUSH2 0x16B7 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x684 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x698 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6BC SWAP2 SWAP1 PUSH2 0x13D0 JUMP JUMPDEST SWAP3 SWAP9 POP SWAP1 SWAP7 POP SWAP5 POP SWAP3 POP PUSH2 0x6D0 ADDRESS DUP8 PUSH2 0xF86 JUMP JUMPDEST POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 SWAP1 SWAP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP1 SWAP3 AND SWAP3 SWAP2 DUP3 AND SWAP2 AND DUP5 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0x2 SIGNEXTEND DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x76D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x764 SWAP1 PUSH2 0x1622 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP2 DUP3 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH4 0xDFE1681 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP1 SWAP2 AND SWAP2 PUSH4 0xDFE1681 SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7DD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x801 SWAP2 SWAP1 PUSH2 0x11F6 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xD21220A7 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0xD21220A7 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x85A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x86E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x892 SWAP2 SWAP1 PUSH2 0x11F6 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x23E66501 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0x47CCCA02 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8FF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x923 SWAP2 SWAP1 PUSH2 0x11F6 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x34324E9F PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0xD0C93A7C SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x97C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x990 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9B4 SWAP2 SWAP1 PUSH2 0x129D JUMP JUMPDEST PUSH1 0x4 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH3 0xFFFFFF MUL NOT AND SWAP1 DUP4 PUSH1 0x2 SIGNEXTEND PUSH3 0xFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0xA07 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x764 SWAP1 PUSH2 0x1652 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xC0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA6A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA8E SWAP2 SWAP1 PUSH2 0x132B JUMP JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x64 DUP3 PUSH1 0x63 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH2 0xAAD JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND GT PUSH2 0xACD JUMPI POP PUSH5 0x1000276A4 JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0x95EA7B3 SWAP3 PUSH2 0xB03 SWAP3 SWAP2 AND SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x15E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB31 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB55 SWAP2 SWAP1 PUSH2 0x1283 JUMP JUMPDEST POP PUSH1 0x0 ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xB69 SWAP2 SWAP1 PUSH2 0x151F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH1 0x0 SLOAD PUSH4 0x2515961 PUSH1 0xE3 SHL DUP4 MSTORE SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x128ACB08 SWAP1 PUSH2 0xBB1 SWAP1 ADDRESS SWAP1 PUSH1 0x1 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1533 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBDE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC02 SWAP2 SWAP1 PUSH2 0x12B7 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xC34 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x764 SWAP1 PUSH2 0x1622 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xC8F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x764 SWAP1 PUSH2 0x1680 JUMP JUMPDEST PUSH1 0x0 DUP5 SGT ISZERO PUSH2 0xD22 JUMPI PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0xA9059CBB SWAP3 PUSH2 0xCCE SWAP3 SWAP2 AND SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x15E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xCFC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD20 SWAP2 SWAP1 PUSH2 0x1283 JUMP JUMPDEST POP JUMPDEST PUSH1 0x0 DUP4 SGT ISZERO PUSH2 0xDB5 JUMPI PUSH1 0x2 SLOAD PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0xA9059CBB SWAP3 PUSH2 0xD61 SWAP3 SWAP2 AND SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x15E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD8F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDB3 SWAP2 SWAP1 PUSH2 0x1283 JUMP JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0xDDB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x764 SWAP1 PUSH2 0x1652 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xC0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE3E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE62 SWAP2 SWAP1 PUSH2 0x132B JUMP JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x64 DUP3 PUSH1 0x65 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH2 0xE81 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND GT PUSH2 0xEA1 JUMPI POP PUSH5 0x1000276A2 JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0x95EA7B3 SWAP3 PUSH2 0xED7 SWAP3 SWAP2 AND SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x15E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF05 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF29 SWAP2 SWAP1 PUSH2 0x1283 JUMP JUMPDEST POP PUSH1 0x0 ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF3D SWAP2 SWAP1 PUSH2 0x151F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH4 0x2515961 PUSH1 0xE3 SHL DUP5 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH4 0x128ACB08 SWAP2 PUSH2 0xBB1 SWAP2 ADDRESS SWAP2 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1533 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x133F7571 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x99FBAB88 SWAP1 PUSH2 0xFBB SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x177C JUMP JUMPDEST PUSH2 0x180 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFE8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x100C SWAP2 SWAP1 PUSH2 0x142C JUMP JUMPDEST POP POP POP POP SWAP8 POP POP POP POP SWAP5 POP SWAP5 POP POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH1 0x5 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0x113C DUP2 PUSH2 0x17A9 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x113C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1162 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1179 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1191 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x2 DUP2 SWAP1 SIGNEXTEND DUP2 EQ PUSH2 0x113C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x113C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x113C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11E4 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x11EF DUP2 PUSH2 0x17A9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1207 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x11EF DUP2 PUSH2 0x17A9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1229 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1234 DUP2 PUSH2 0x17A9 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x1244 DUP2 PUSH2 0x17A9 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1266 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1272 DUP9 DUP3 DUP10 ADD PUSH2 0x1151 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1294 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x11EF DUP3 PUSH2 0x1141 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12AE JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x11EF DUP3 PUSH2 0x1198 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x12C9 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x12EF JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1313 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x131F DUP8 DUP3 DUP9 ADD PUSH2 0x1151 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1343 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP7 MLOAD PUSH2 0x134E DUP2 PUSH2 0x17A9 JUMP JUMPDEST SWAP6 POP PUSH2 0x135C PUSH1 0x20 DUP9 ADD PUSH2 0x1198 JUMP JUMPDEST SWAP5 POP PUSH2 0x136A PUSH1 0x40 DUP9 ADD PUSH2 0x11C1 JUMP JUMPDEST SWAP4 POP PUSH2 0x1378 PUSH1 0x60 DUP9 ADD PUSH2 0x11C1 JUMP JUMPDEST SWAP3 POP PUSH2 0x1386 PUSH1 0x80 DUP9 ADD PUSH2 0x11C1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1394 PUSH1 0xA0 DUP9 ADD PUSH2 0x1141 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13B1 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13C9 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x13E5 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 MLOAD SWAP4 POP PUSH2 0x13F5 PUSH1 0x20 DUP7 ADD PUSH2 0x11AA JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0x60 SWAP1 SWAP7 ADD MLOAD SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x141D JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x180 DUP14 DUP16 SUB SLT ISZERO PUSH2 0x144E JUMPI DUP10 DUP11 REVERT JUMPDEST DUP13 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1469 JUMPI DUP11 DUP12 REVERT JUMPDEST SWAP12 POP PUSH2 0x1477 PUSH1 0x20 DUP15 ADD PUSH2 0x1131 JUMP JUMPDEST SWAP11 POP PUSH2 0x1485 PUSH1 0x40 DUP15 ADD PUSH2 0x1131 JUMP JUMPDEST SWAP10 POP PUSH2 0x1493 PUSH1 0x60 DUP15 ADD PUSH2 0x1131 JUMP JUMPDEST SWAP9 POP PUSH2 0x14A1 PUSH1 0x80 DUP15 ADD PUSH2 0x1198 JUMP JUMPDEST SWAP8 POP PUSH2 0x14AF PUSH1 0xA0 DUP15 ADD PUSH2 0x1198 JUMP JUMPDEST SWAP7 POP PUSH2 0x14BD PUSH1 0xC0 DUP15 ADD PUSH2 0x1198 JUMP JUMPDEST SWAP6 POP PUSH2 0x14CB PUSH1 0xE0 DUP15 ADD PUSH2 0x11AA JUMP JUMPDEST SWAP5 POP PUSH2 0x100 DUP14 ADD MLOAD SWAP4 POP PUSH2 0x120 DUP14 ADD MLOAD SWAP3 POP PUSH2 0x14EA PUSH2 0x140 DUP15 ADD PUSH2 0x11AA JUMP JUMPDEST SWAP2 POP PUSH2 0x14F9 PUSH2 0x160 DUP15 ADD PUSH2 0x11AA JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP12 POP SWAP3 SWAP6 SWAP9 SWAP12 POP SWAP3 SWAP6 SWAP9 SWAP12 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x2 SIGNEXTEND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND DUP4 MSTORE PUSH1 0x20 DUP8 ISZERO ISZERO DUP2 DUP6 ADD MSTORE DUP7 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP7 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE DUP5 MLOAD SWAP2 POP DUP2 PUSH1 0xA0 DUP6 ADD MSTORE DUP3 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1587 JUMPI DUP6 DUP2 ADD DUP3 ADD MLOAD DUP6 DUP3 ADD PUSH1 0xC0 ADD MSTORE DUP2 ADD PUSH2 0x156B JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1598 JUMPI DUP4 PUSH1 0xC0 DUP5 DUP8 ADD ADD MSTORE JUMPDEST POP POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0xC0 ADD SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP4 SWAP1 SWAP4 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x2 SWAP2 SWAP1 SWAP2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x4F6E6C79206F776E65722063616E20646F2074686973 PUSH1 0x50 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x125B9D985B1A59081A5B9C1D5D08185B5BDD5B9D PUSH1 0x62 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x43616C6C6261636B206F6E6C792066726F6D20706F6F6C000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 ADD SWAP1 POP PUSH2 0x16CB DUP3 DUP5 MLOAD PUSH2 0x150B JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x16DD PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x150B JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x16F0 PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x1518 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x1703 PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x1518 JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x1716 PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x1518 JUMP JUMPDEST POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x100 DUP1 DUP5 ADD MLOAD DUP2 DUP5 ADD MSTORE POP PUSH2 0x120 DUP1 DUP5 ADD MLOAD PUSH2 0x1754 DUP3 DUP6 ADD DUP3 PUSH2 0x150B JUMP JUMPDEST POP POP PUSH2 0x140 DUP4 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x160 DUP1 DUP5 ADD MLOAD PUSH2 0x1774 DUP3 DUP6 ADD DUP3 PUSH2 0x150B JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x17BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB6 REVERT TIMESTAMP MSTORE 0xAA JUMPDEST DUP1 PUSH27 0x1A50029340DE3B25F3C1AD69C72BB1303CE164122FBAD75564736F PUSH13 0x63430007060033000000000000 ",
							"sourceMap": "1014:6245:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1111:21;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6527:292;;;;;;;;;;-1:-1:-1;6527:292:2;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1055:19::-;;;;;;;;;;;;;:::i;2146:184::-;;;;;;;;;;-1:-1:-1;2146:184:2;;;;;:::i;:::-;;:::i;:::-;;5261:1258;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;1433:43::-;;;;;;;;;;-1:-1:-1;1433:43:2;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;1267:24::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;1161:21::-;;;;;;;;;;;;;:::i;1784:354::-;;;;;;;;;;-1:-1:-1;1784:354:2;;;;;:::i;:::-;;:::i;1211:22::-;;;;;;;;;;;;;:::i;2338:1085::-;;;;;;;;;;-1:-1:-1;2338:1085:2;;;;;:::i;:::-;;:::i;1630:146::-;;;;;;;;;;-1:-1:-1;1630:146:2;;;;;:::i;:::-;;:::i;1240:20::-;;;;;;;;;;;;;:::i;4598:659::-;;;;;;;;;;-1:-1:-1;4598:659:2;;;;;:::i;:::-;;:::i;3431:1089::-;;;;;;;;;;-1:-1:-1;3431:1089:2;;;;;:::i;:::-;;:::i;1111:21::-;;;-1:-1:-1;;;;;1111:21:2;;:::o;6527:292::-;6674:6;6730:33;6745:8;6755:7;6730:14;:33::i;:::-;-1:-1:-1;;;;6527:292:2;;;;;;;:::o;1055:19::-;;;-1:-1:-1;;;;;1055:19:2;;:::o;2146:184::-;2223:45;;-1:-1:-1;;;2223:45:2;;2207:13;;-1:-1:-1;;;;;2223:30:2;;;;;:45;;2262:4;;2223:45;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2309:5;;;2279:43;;-1:-1:-1;;;2279:43:2;;2207:61;;-1:-1:-1;;;;;;2279:29:2;;;;;;:43;;2309:5;;;;2207:61;;2279:43;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2146:184;;:::o;5261:1258::-;5508:6;;5524:7;;5494:53;;-1:-1:-1;;;5494:53:2;;5355:15;;;;;;;;-1:-1:-1;;;;;5508:6:2;;;;5494:29;;:53;;5524:7;;;;5533:13;;5494:53;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;5572:6:2;;5588:7;;5558:53;;-1:-1:-1;;;5558:53:2;;-1:-1:-1;;;;;5572:6:2;;;;5558:29;;:53;;5588:7;;;5597:13;;5558:53;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5623:20;5665:4;;;;;;;;;-1:-1:-1;;;;;5665:4:2;-1:-1:-1;;;;;5652:24:2;;:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;5759:588:2;;;;;;;;5825:6;;-1:-1:-1;;;;;5825:6:2;;;5759:588;;5858:6;;;;;5759:588;;;;5896:11;;;-1:-1:-1;;;5896:11:2;;;;5759:588;;;;;;;-1:-1:-1;;5759:588:2;;;;644:9:28;5759:588:2;;;;;;;;;;;;;;;;5691:52;5759:588;;;;;;5825:6;5759:588;;;6237:4;5759:588;;;;6271:15;5759:588;;;;;;;;;;;6431:7;;6403:49;;-1:-1:-1;;;6403:49:2;;5622:56;;-1:-1:-1;5759:588:2;;6431:7;;;-1:-1:-1;6403:41:2;;-1:-1:-1;6403:49:2;;-1:-1:-1;5759:588:2;;6403:49;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6362:90;;-1:-1:-1;6362:90:2;;-1:-1:-1;6362:90:2;-1:-1:-1;6362:90:2;-1:-1:-1;6475:38:2;6498:4;6362:90;6475:14;:38::i;:::-;5261:1258;;;;;;;;;:::o;1433:43::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1433:43:2;;;;-1:-1:-1;;;;;1433:43:2;;;;;;;;;;:::o;1267:24::-;;;-1:-1:-1;;;1267:24:2;;;;;:::o;1161:21::-;;;-1:-1:-1;;;;;1161:21:2;;:::o;1784:354::-;1861:5;;-1:-1:-1;;;;;1861:5:2;1847:10;:19;1839:54;;;;-1:-1:-1;;;1839:54:2;;;;;;;:::i;:::-;;;;;;;;;1904:4;:14;;-1:-1:-1;;;;;;1904:14:2;-1:-1:-1;;;;;1904:14:2;;;;;;;;;;;1938:31;;;-1:-1:-1;;;1938:31:2;;;;1955:4;;;;;1938:29;;:31;;;;;;;;;;;;;;;1955:4;1938:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1929:6;:40;;-1:-1:-1;;;;;;1929:40:2;-1:-1:-1;;;;;1929:40:2;;;;;;-1:-1:-1;2006:4:2;1989:31;;;-1:-1:-1;;;1989:31:2;;;;2006:4;;;;;1989:29;;:31;;;;;;;;;;;;;;2006:4;1989:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1980:6;:40;;-1:-1:-1;;;;;;1980:40:2;-1:-1:-1;;;;;1980:40:2;;;;;;-1:-1:-1;2058:4:2;2041:28;;;-1:-1:-1;;;2041:28:2;;;;2058:4;;;;;2041:26;;:28;;;;;;;;;;;;;;2058:4;2041:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2031:7;:38;;-1:-1:-1;;;;;;2031:38:2;-1:-1:-1;;;;;2031:38:2;;;;;;-1:-1:-1;2111:4:2;2094:36;;;-1:-1:-1;;;2094:36:2;;;;2111:4;;;;;2094:34;;:36;;;;;;;;;;;;;;2111:4;2094:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2080:11;;:50;;;;;;;;;;;;;;;;;;;;1784:354;:::o;1211:22::-;;;-1:-1:-1;;;;;1211:22:2;;:::o;2338:1085::-;2414:1;2403:8;:12;2395:45;;;;-1:-1:-1;;;2395:45:2;;;;;;;:::i;:::-;2505:20;2552:4;;;;;;;;;-1:-1:-1;;;;;2552:4:2;-1:-1:-1;;;;;2539:24:2;;:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2504:61;;;;;;;2576:25;2632:3;2612:12;2627:2;2612:17;-1:-1:-1;;;;;2612:23:2;;;;;;;;-1:-1:-1;824:10:28;-1:-1:-1;;;;;2699:44:2;;;2695:124;;-1:-1:-1;2780:27:2;2695:124;2886:6;;;2902:4;2872:45;;-1:-1:-1;;;2872:45:2;;-1:-1:-1;;;;;2886:6:2;;;;2872:29;;:45;;2902:4;;;2908:8;;2872:45;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3026:17;3065:4;3046:25;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3046:25:2;;;;;;;;;;3141:4;;-1:-1:-1;;;3126:289:2;;3046:25;;-1:-1:-1;;;;;;3141:4:2;;3126:25;;:289;;3174:4;;3141;;3282:8;;3322:17;;3046:25;;3126:289;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;2338:1085;;;;:::o;1630:146::-;1709:5;;-1:-1:-1;;;;;1709:5:2;1695:10;:19;1687:54;;;;-1:-1:-1;;;1687:54:2;;;;;;;:::i;:::-;1752:5;:16;;-1:-1:-1;;;;;;1752:16:2;-1:-1:-1;;;;;1752:16:2;;;;;;;;;;1630:146::o;1240:20::-;;;-1:-1:-1;;;;;1240:20:2;;:::o;4598:659::-;4783:4;;-1:-1:-1;;;;;4783:4:2;4769:10;:18;4761:54;;;;-1:-1:-1;;;4761:54:2;;;;;;;:::i;:::-;4926:1;4911:12;:16;4907:108;;;4958:6;;;4975:4;4944:59;;-1:-1:-1;;;4944:59:2;;-1:-1:-1;;;;;4958:6:2;;;;4944:30;;:59;;4975:4;;;4989:12;;4944:59;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4907:108;5161:1;5146:12;:16;5142:108;;;5193:6;;;5210:4;5179:59;;-1:-1:-1;;;5179:59:2;;-1:-1:-1;;;;;5193:6:2;;;;5179:30;;:59;;5210:4;;;5224:12;;5179:59;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5142:108;4598:659;;;;:::o;3431:1089::-;3509:1;3498:8;:12;3490:45;;;;-1:-1:-1;;;3490:45:2;;;;;;;:::i;:::-;3600:20;3647:4;;;;;;;;;-1:-1:-1;;;;;3647:4:2;-1:-1:-1;;;;;3634:24:2;;:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3599:61;;;;;;;3671:25;3728:3;3707:12;3722:3;3707:18;-1:-1:-1;;;;;3707:24:2;;;;;;;;-1:-1:-1;824:10:28;-1:-1:-1;;;;;3795:44:2;;;3791:124;;-1:-1:-1;3876:27:2;3791:124;3982:6;;;3998:4;3968:45;;-1:-1:-1;;;3968:45:2;;-1:-1:-1;;;;;3982:6:2;;;;3968:29;;:45;;3998:4;;;4004:8;;3968:45;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4122:17;4161:4;4142:25;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4142:25:2;;;;;;;;;;4237:4;;;-1:-1:-1;;;4222:290:2;;4142:25;;-1:-1:-1;;;;;;4237:4:2;;;;4222:25;;:290;;4270:4;;4237;4379:8;;4419:17;;4142:25;;4222:290;;;:::i;6831:421::-;7022:7;;6994:55;;-1:-1:-1;;;6994:55:2;;6912:15;;;;;;-1:-1:-1;;;;;7022:7:2;;6994:46;;:55;;7041:7;;6994:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6907:142;;;;;;;;;;;;;;;7165:79;;;;;;;;7181:5;-1:-1:-1;;;;;7165:79:2;;;;;7199:9;-1:-1:-1;;;;;7165:79:2;;;;;7218:7;-1:-1:-1;;;;;7165:79:2;;;;;7235:7;-1:-1:-1;;;;;7165:79:2;;;;7145:8;:17;7154:7;7145:17;;;;;;;;;;;:99;;;;;;;;;;;;;-1:-1:-1;;;;;7145:99:2;;;;;-1:-1:-1;;;;;7145:99:2;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7145:99:2;;;;;-1:-1:-1;;;;;7145:99:2;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7145:99:2;;;;;-1:-1:-1;;;;;7145:99:2;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7145:99:2;;;;;-1:-1:-1;;;;;7145:99:2;;;;;;;;;6831:421;;;;;:::o;14:142:32:-;95:13;;117:33;95:13;117:33;:::i;:::-;76:80;;;:::o;161:166::-;239:13;;288;;281:21;271:32;;261:2;;317:1;314;307:12;332:377;;;449:3;442:4;434:6;430:17;426:27;416:2;;474:8;464;457:26;416:2;-1:-1:-1;504:20:32;;547:18;536:30;;533:2;;;586:8;576;569:26;533:2;630:4;622:6;618:17;606:29;;682:3;675:4;666:6;658;654:19;650:30;647:39;644:2;;;699:1;696;689:12;644:2;406:303;;;;;:::o;714:166::-;793:13;;846:1;835:20;;;825:31;;815:2;;870:1;867;860:12;885:194;966:13;;-1:-1:-1;;;;;1008:46:32;;998:57;;988:2;;1069:1;1066;1059:12;1084:165;1164:13;;1217:6;1206:18;;1196:29;;1186:2;;1239:1;1236;1229:12;1254:259;;1366:2;1354:9;1345:7;1341:23;1337:32;1334:2;;;1387:6;1379;1372:22;1334:2;1431:9;1418:23;1450:33;1477:5;1450:33;:::i;:::-;1502:5;1324:189;-1:-1:-1;;;1324:189:32:o;1518:263::-;;1641:2;1629:9;1620:7;1616:23;1612:32;1609:2;;;1662:6;1654;1647:22;1609:2;1699:9;1693:16;1718:33;1745:5;1718:33;:::i;1786:780::-;;;;;;1968:3;1956:9;1947:7;1943:23;1939:33;1936:2;;;1990:6;1982;1975:22;1936:2;2034:9;2021:23;2053:33;2080:5;2053:33;:::i;:::-;2105:5;-1:-1:-1;2162:2:32;2147:18;;2134:32;2175:35;2134:32;2175:35;:::i;:::-;2229:7;-1:-1:-1;2283:2:32;2268:18;;2255:32;;-1:-1:-1;2338:2:32;2323:18;;2310:32;2365:18;2354:30;;2351:2;;;2402:6;2394;2387:22;2351:2;2446:60;2498:7;2489:6;2478:9;2474:22;2446:60;:::i;:::-;1926:640;;;;-1:-1:-1;1926:640:32;;-1:-1:-1;2525:8:32;;2420:86;1926:640;-1:-1:-1;;;1926:640:32:o;2571:214::-;;2691:2;2679:9;2670:7;2666:23;2662:32;2659:2;;;2712:6;2704;2697:22;2659:2;2740:39;2769:9;2740:39;:::i;2790:216::-;;2911:2;2899:9;2890:7;2886:23;2882:32;2879:2;;;2932:6;2924;2917:22;2879:2;2960:40;2990:9;2960:40;:::i;3011:253::-;;;3149:2;3137:9;3128:7;3124:23;3120:32;3117:2;;;3170:6;3162;3155:22;3117:2;-1:-1:-1;;3198:16:32;;3254:2;3239:18;;;3233:25;3198:16;;3233:25;;-1:-1:-1;3107:157:32:o;3269:565::-;;;;;3432:2;3420:9;3411:7;3407:23;3403:32;3400:2;;;3453:6;3445;3438:22;3400:2;3494:9;3481:23;3471:33;;3551:2;3540:9;3536:18;3523:32;3513:42;;3606:2;3595:9;3591:18;3578:32;3633:18;3625:6;3622:30;3619:2;;;3670:6;3662;3655:22;3619:2;3714:60;3766:7;3757:6;3746:9;3742:22;3714:60;:::i;:::-;3390:444;;;;-1:-1:-1;3793:8:32;-1:-1:-1;;;;3390:444:32:o;3839:685::-;;;;;;;4039:3;4027:9;4018:7;4014:23;4010:33;4007:2;;;4061:6;4053;4046:22;4007:2;4098:9;4092:16;4117:33;4144:5;4117:33;:::i;:::-;4169:5;-1:-1:-1;4193:49:32;4238:2;4223:18;;4193:49;:::i;:::-;4183:59;;4261:50;4307:2;4296:9;4292:18;4261:50;:::i;:::-;4251:60;;4330:50;4376:2;4365:9;4361:18;4330:50;:::i;:::-;4320:60;;4399:51;4445:3;4434:9;4430:19;4399:51;:::i;:::-;4389:61;;4469:49;4513:3;4502:9;4498:19;4469:49;:::i;:::-;4459:59;;3997:527;;;;;;;;:::o;4529:190::-;;4641:2;4629:9;4620:7;4616:23;4612:32;4609:2;;;4662:6;4654;4647:22;4609:2;-1:-1:-1;4690:23:32;;4599:120;-1:-1:-1;4599:120:32:o;4724:194::-;;4847:2;4835:9;4826:7;4822:23;4818:32;4815:2;;;4868:6;4860;4853:22;4815:2;-1:-1:-1;4896:16:32;;4805:113;-1:-1:-1;4805:113:32:o;4923:404::-;;;;;5097:3;5085:9;5076:7;5072:23;5068:33;5065:2;;;5119:6;5111;5104:22;5065:2;5153:9;5147:16;5137:26;;5182:51;5229:2;5218:9;5214:18;5182:51;:::i;:::-;5273:2;5258:18;;5252:25;5317:2;5302:18;;;5296:25;5055:272;;5172:61;;-1:-1:-1;5055:272:32;-1:-1:-1;;;5055:272:32:o;5332:258::-;;;5461:2;5449:9;5440:7;5436:23;5432:32;5429:2;;;5482:6;5474;5467:22;5429:2;-1:-1:-1;;5510:23:32;;;5580:2;5565:18;;;5552:32;;-1:-1:-1;5419:171:32:o;5595:1222::-;;;;;;;;;;;;;5900:3;5888:9;5879:7;5875:23;5871:33;5868:2;;;5922:6;5914;5907:22;5868:2;5959:9;5953:16;6009:26;6002:5;5998:38;5991:5;5988:49;5978:2;;6056:6;6048;6041:22;5978:2;6084:5;-1:-1:-1;6108:51:32;6155:2;6140:18;;6108:51;:::i;:::-;6098:61;;6178:51;6225:2;6214:9;6210:18;6178:51;:::i;:::-;6168:61;;6248:51;6295:2;6284:9;6280:18;6248:51;:::i;:::-;6238:61;;6318:50;6363:3;6352:9;6348:19;6318:50;:::i;:::-;6308:60;;6387:50;6432:3;6421:9;6417:19;6387:50;:::i;:::-;6377:60;;6456:50;6501:3;6490:9;6486:19;6456:50;:::i;:::-;6446:60;;6525:52;6572:3;6561:9;6557:19;6525:52;:::i;:::-;6515:62;;6617:3;6606:9;6602:19;6596:26;6586:36;;6662:3;6651:9;6647:19;6641:26;6631:36;;6687:52;6734:3;6723:9;6719:19;6687:52;:::i;:::-;6676:63;;6759:52;6806:3;6795:9;6791:19;6759:52;:::i;:::-;6748:63;;5858:959;;;;;;;;;;;;;;:::o;6822:106::-;-1:-1:-1;;;;;6890:31:32;6878:44;;6868:60::o;6933:93::-;7010:1;6999:20;6987:33;;6977:49::o;7031:203::-;-1:-1:-1;;;;;7195:32:32;;;;7177:51;;7165:2;7150:18;;7132:102::o;7239:955::-;;7499:1;7495;7490:3;7486:11;7482:19;7540:2;7532:6;7528:15;7517:9;7510:34;7563:2;7615:6;7608:14;7601:22;7596:2;7585:9;7581:18;7574:50;7660:6;7655:2;7644:9;7640:18;7633:34;7715:2;7707:6;7703:15;7698:2;7687:9;7683:18;7676:43;7756:3;7750;7739:9;7735:19;7728:32;7789:6;7783:13;7769:27;;7833:6;7827:3;7816:9;7812:19;7805:35;7858:4;7871:141;7885:6;7882:1;7879:13;7871:141;;;7981:14;;;7977:23;;7971:30;7946:17;;;7965:3;7942:27;7935:67;7900:10;;7871:141;;;8030:6;8027:1;8024:13;8021:2;;;8101:4;8095:3;8086:6;8075:9;8071:22;8067:32;8060:46;8021:2;-1:-1:-1;;8177:2:32;8156:15;-1:-1:-1;;8152:29:32;8137:45;;;;8184:3;8133:55;;7462:732;-1:-1:-1;;;;;;7462:732:32:o;8199:497::-;-1:-1:-1;;;;;8486:15:32;;;8468:34;;-1:-1:-1;;;;;8538:47:32;;;;8533:2;8518:18;;8511:75;8622:15;;;8617:2;8602:18;;8595:43;8674:15;;;8669:2;8654:18;;8647:43;8417:3;8402:19;;8384:312::o;8701:274::-;-1:-1:-1;;;;;8893:32:32;;;;8875:51;;8957:2;8942:18;;8935:34;8863:2;8848:18;;8830:145::o;8980:202::-;-1:-1:-1;;;;;;9142:33:32;;;;9124:52;;9112:2;9097:18;;9079:103::o;9187:188::-;9358:1;9347:21;;;;9329:40;;9317:2;9302:18;;9284:91::o;9380:346::-;9582:2;9564:21;;;9621:2;9601:18;;;9594:30;-1:-1:-1;;;9655:2:32;9640:18;;9633:52;9717:2;9702:18;;9554:172::o;9731:344::-;9933:2;9915:21;;;9972:2;9952:18;;;9945:30;-1:-1:-1;;;10006:2:32;9991:18;;9984:50;10066:2;10051:18;;9905:170::o;10080:347::-;10282:2;10264:21;;;10321:2;10301:18;;;10294:30;10360:25;10355:2;10340:18;;10333:53;10418:2;10403:18;;10254:173::o;10432:1374::-;;10620:3;10609:9;10605:19;10597:27;;10633:46;10669:9;10660:6;10654:13;10633:46;:::i;:::-;10726:4;10718:6;10714:17;10708:24;10741:56;10791:4;10780:9;10776:20;10762:12;10741:56;:::i;:::-;;10846:4;10838:6;10834:17;10828:24;10861:56;10911:4;10900:9;10896:20;10880:14;10861:56;:::i;:::-;;10966:4;10958:6;10954:17;10948:24;10981:56;11031:4;11020:9;11016:20;11000:14;10981:56;:::i;:::-;;11086:4;11078:6;11074:17;11068:24;11101:56;11151:4;11140:9;11136:20;11120:14;11101:56;:::i;:::-;;11213:4;11205:6;11201:17;11195:24;11188:4;11177:9;11173:20;11166:54;11276:4;11268:6;11264:17;11258:24;11251:4;11240:9;11236:20;11229:54;11339:4;11331:6;11327:17;11321:24;11314:4;11303:9;11299:20;11292:54;11365:6;11425:2;11417:6;11413:15;11407:22;11402:2;11391:9;11387:18;11380:50;;11449:6;11504:2;11496:6;11492:15;11486:22;11517:56;11569:2;11558:9;11554:18;11538:14;11517:56;:::i;:::-;-1:-1:-1;;11592:6:32;11640:15;;;11634:22;11614:18;;;11607:50;11676:6;11719:15;;;11713:22;11744:56;11781:18;;;11713:22;11744:56;:::i;:::-;;;10587:1219;;;;:::o;11811:177::-;11957:25;;;11945:2;11930:18;;11912:76::o;11993:432::-;12224:25;;;-1:-1:-1;;;;;12285:47:32;;;;12280:2;12265:18;;12258:75;12364:2;12349:18;;12342:34;12407:2;12392:18;;12385:34;12211:3;12196:19;;12178:247::o;12430:133::-;-1:-1:-1;;;;;12507:31:32;;12497:42;;12487:2;;12553:1;12550;12543:12;12487:2;12477:86;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1227000",
								"executionCost": "22110",
								"totalCost": "1249110"
							},
							"external": {
								"Swap0for1(uint256)": "infinite",
								"V3Swap1for0(uint256)": "infinite",
								"_newAdmin(address)": "22027",
								"_newPool(address)": "infinite",
								"_transferToAdmin(address)": "infinite",
								"addLiquidity(uint256,uint256)": "infinite",
								"admin()": "1114",
								"deposits(uint256)": "3860",
								"farmNFT()": "1137",
								"onERC721Received(address,address,uint256,bytes)": "infinite",
								"pool()": "1138",
								"tickSpacing()": "1156",
								"token0()": "1094",
								"token1()": "1093",
								"uniswapV3SwapCallback(int256,int256,bytes)": "infinite"
							},
							"internal": {
								"_createDeposit(address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1014,
									"end": 7259,
									"name": "PUSH",
									"source": 2,
									"value": "80"
								},
								{
									"begin": 1014,
									"end": 7259,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1014,
									"end": 7259,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1571,
									"end": 1622,
									"name": "CALLVALUE",
									"source": 2
								},
								{
									"begin": 1571,
									"end": 1622,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1571,
									"end": 1622,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1571,
									"end": 1622,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1571,
									"end": 1622,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1571,
									"end": 1622,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1571,
									"end": 1622,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1571,
									"end": 1622,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 1571,
									"end": 1622,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1571,
									"end": 1622,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1596,
									"end": 1601,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 1596,
									"end": 1614,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1596,
									"end": 1614,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1596,
									"end": 1614,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1604,
									"end": 1614,
									"name": "CALLER",
									"source": 2
								},
								{
									"begin": 1596,
									"end": 1614,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 1596,
									"end": 1614,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1596,
									"end": 1614,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1014,
									"end": 7259,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1014,
									"end": 7259,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1014,
									"end": 7259,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1014,
									"end": 7259,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1014,
									"end": 7259,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 1014,
									"end": 7259,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1014,
									"end": 7259,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220b6fd4252aa5b807a1a50029340de3b25f3c1ad69c72bb1303ce164122fbad75564736f6c63430007060033",
									".code": [
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "SHR",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH",
											"source": 2,
											"value": "D21220A7"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH",
											"source": 2,
											"value": "E6F4D0AA"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH",
											"source": 2,
											"value": "E6F4D0AA"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH",
											"source": 2,
											"value": "F851A440"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH",
											"source": 2,
											"value": "FA461E33"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH",
											"source": 2,
											"value": "FDDE416F"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "tag",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH",
											"source": 2,
											"value": "D21220A7"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH",
											"source": 2,
											"value": "D2ACA8CD"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH",
											"source": 2,
											"value": "DA802F80"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH",
											"source": 2,
											"value": "DB638298"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "tag",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH",
											"source": 2,
											"value": "7210468A"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH",
											"source": 2,
											"value": "7210468A"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH",
											"source": 2,
											"value": "9CD441DA"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH",
											"source": 2,
											"value": "B02C43D0"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH",
											"source": 2,
											"value": "D0C93A7C"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "tag",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH",
											"source": 2,
											"value": "DFE1681"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH",
											"source": 2,
											"value": "150B7A02"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH",
											"source": 2,
											"value": "16F0115B"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "tag",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1014,
											"end": 7259,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "tag",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "tag",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "tag",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "tag",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "tag",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "tag",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "tag",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1055,
											"end": 1074,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1055,
											"end": 1074,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1055,
											"end": 1074,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1055,
											"end": 1074,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1055,
											"end": 1074,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1055,
											"end": 1074,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 1055,
											"end": 1074,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1055,
											"end": 1074,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1055,
											"end": 1074,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1055,
											"end": 1074,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1055,
											"end": 1074,
											"name": "tag",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 1055,
											"end": 1074,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1055,
											"end": 1074,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1055,
											"end": 1074,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 1055,
											"end": 1074,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 1055,
											"end": 1074,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2146,
											"end": 2330,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 2146,
											"end": 2330,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2146,
											"end": 2330,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 2146,
											"end": 2330,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2146,
											"end": 2330,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2146,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 2146,
											"end": 2330,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2146,
											"end": 2330,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2146,
											"end": 2330,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2146,
											"end": 2330,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2146,
											"end": 2330,
											"name": "tag",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 2146,
											"end": 2330,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2146,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 2146,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 2146,
											"end": 2330,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 2146,
											"end": 2330,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2146,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 2146,
											"end": 2330,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2146,
											"end": 2330,
											"name": "tag",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 2146,
											"end": 2330,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2146,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2146,
											"end": 2330,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2146,
											"end": 2330,
											"name": "tag",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 2146,
											"end": 2330,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2146,
											"end": 2330,
											"name": "STOP",
											"source": 2
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "tag",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "tag",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "tag",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "49"
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "tag",
											"source": 2,
											"value": "49"
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "tag",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "53"
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "tag",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "54"
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "tag",
											"source": 2,
											"value": "54"
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "tag",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1161,
											"end": 1182,
											"name": "tag",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 1161,
											"end": 1182,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1161,
											"end": 1182,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1161,
											"end": 1182,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1161,
											"end": 1182,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1161,
											"end": 1182,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 1161,
											"end": 1182,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1161,
											"end": 1182,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1161,
											"end": 1182,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1161,
											"end": 1182,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1161,
											"end": 1182,
											"name": "tag",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 1161,
											"end": 1182,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1161,
											"end": 1182,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1161,
											"end": 1182,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 1161,
											"end": 1182,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 1161,
											"end": 1182,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1784,
											"end": 2138,
											"name": "tag",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 1784,
											"end": 2138,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1784,
											"end": 2138,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1784,
											"end": 2138,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1784,
											"end": 2138,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1784,
											"end": 2138,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 1784,
											"end": 2138,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1784,
											"end": 2138,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1784,
											"end": 2138,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1784,
											"end": 2138,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1784,
											"end": 2138,
											"name": "tag",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 1784,
											"end": 2138,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1784,
											"end": 2138,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 1784,
											"end": 2138,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 1784,
											"end": 2138,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1784,
											"end": 2138,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1784,
											"end": 2138,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 1784,
											"end": 2138,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1784,
											"end": 2138,
											"name": "tag",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 1784,
											"end": 2138,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1784,
											"end": 2138,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 1784,
											"end": 2138,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "tag",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "tag",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2338,
											"end": 3423,
											"name": "tag",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 2338,
											"end": 3423,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2338,
											"end": 3423,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 2338,
											"end": 3423,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2338,
											"end": 3423,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2338,
											"end": 3423,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "71"
										},
										{
											"begin": 2338,
											"end": 3423,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2338,
											"end": 3423,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2338,
											"end": 3423,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2338,
											"end": 3423,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2338,
											"end": 3423,
											"name": "tag",
											"source": 2,
											"value": "71"
										},
										{
											"begin": 2338,
											"end": 3423,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2338,
											"end": 3423,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 2338,
											"end": 3423,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 2338,
											"end": 3423,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 2338,
											"end": 3423,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2338,
											"end": 3423,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 2338,
											"end": 3423,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2338,
											"end": 3423,
											"name": "tag",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 2338,
											"end": 3423,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2338,
											"end": 3423,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 2338,
											"end": 3423,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1630,
											"end": 1776,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 1630,
											"end": 1776,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1630,
											"end": 1776,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1630,
											"end": 1776,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1630,
											"end": 1776,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1630,
											"end": 1776,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "75"
										},
										{
											"begin": 1630,
											"end": 1776,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1630,
											"end": 1776,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1630,
											"end": 1776,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1630,
											"end": 1776,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1630,
											"end": 1776,
											"name": "tag",
											"source": 2,
											"value": "75"
										},
										{
											"begin": 1630,
											"end": 1776,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1630,
											"end": 1776,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 1630,
											"end": 1776,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "77"
										},
										{
											"begin": 1630,
											"end": 1776,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1630,
											"end": 1776,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1630,
											"end": 1776,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 1630,
											"end": 1776,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1630,
											"end": 1776,
											"name": "tag",
											"source": 2,
											"value": "77"
										},
										{
											"begin": 1630,
											"end": 1776,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1630,
											"end": 1776,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 1630,
											"end": 1776,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1260,
											"name": "tag",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 1240,
											"end": 1260,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1240,
											"end": 1260,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1240,
											"end": 1260,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1240,
											"end": 1260,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1240,
											"end": 1260,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 1240,
											"end": 1260,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1240,
											"end": 1260,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1240,
											"end": 1260,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1240,
											"end": 1260,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1240,
											"end": 1260,
											"name": "tag",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 1240,
											"end": 1260,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1240,
											"end": 1260,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1240,
											"end": 1260,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 1240,
											"end": 1260,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 1240,
											"end": 1260,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4598,
											"end": 5257,
											"name": "tag",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 4598,
											"end": 5257,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 5257,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 5257,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 5257,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 5257,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 4598,
											"end": 5257,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 5257,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4598,
											"end": 5257,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 5257,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 5257,
											"name": "tag",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 4598,
											"end": 5257,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4598,
											"end": 5257,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 4598,
											"end": 5257,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "85"
										},
										{
											"begin": 4598,
											"end": 5257,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 5257,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4598,
											"end": 5257,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 4598,
											"end": 5257,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4598,
											"end": 5257,
											"name": "tag",
											"source": 2,
											"value": "85"
										},
										{
											"begin": 4598,
											"end": 5257,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 5257,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 4598,
											"end": 5257,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3431,
											"end": 4520,
											"name": "tag",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 3431,
											"end": 4520,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3431,
											"end": 4520,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 3431,
											"end": 4520,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3431,
											"end": 4520,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3431,
											"end": 4520,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 3431,
											"end": 4520,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3431,
											"end": 4520,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3431,
											"end": 4520,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3431,
											"end": 4520,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3431,
											"end": 4520,
											"name": "tag",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 3431,
											"end": 4520,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3431,
											"end": 4520,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 3431,
											"end": 4520,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 3431,
											"end": 4520,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3431,
											"end": 4520,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3431,
											"end": 4520,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 3431,
											"end": 4520,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3431,
											"end": 4520,
											"name": "tag",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 3431,
											"end": 4520,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3431,
											"end": 4520,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 3431,
											"end": 4520,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "tag",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1111,
											"end": 1132,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "tag",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6674,
											"end": 6680,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6730,
											"end": 6763,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "93"
										},
										{
											"begin": 6745,
											"end": 6753,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 6755,
											"end": 6762,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6730,
											"end": 6744,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 6730,
											"end": 6763,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6730,
											"end": 6763,
											"name": "tag",
											"source": 2,
											"value": "93"
										},
										{
											"begin": 6730,
											"end": 6763,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A85BD01"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6527,
											"end": 6819,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1055,
											"end": 1074,
											"name": "tag",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 1055,
											"end": 1074,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1055,
											"end": 1074,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1055,
											"end": 1074,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1055,
											"end": 1074,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1055,
											"end": 1074,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1055,
											"end": 1074,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2146,
											"end": 2330,
											"name": "tag",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2146,
											"end": 2330,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2207,
											"end": 2220,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2207,
											"end": 2220,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2223,
											"end": 2253,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2253,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2253,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2253,
											"name": "PUSH",
											"source": 2,
											"value": "70A08231"
										},
										{
											"begin": 2223,
											"end": 2253,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "96"
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2262,
											"end": 2266,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 2262,
											"end": 2266,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "tag",
											"source": 2,
											"value": "96"
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "tag",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "STATICCALL",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "tag",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "101"
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "tag",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2223,
											"end": 2268,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2309,
											"end": 2314,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2309,
											"end": 2314,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2309,
											"end": 2314,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2207,
											"end": 2268,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2207,
											"end": 2268,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2279,
											"end": 2308,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2308,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2308,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2308,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2308,
											"name": "PUSH",
											"source": 2,
											"value": "A9059CBB"
										},
										{
											"begin": 2279,
											"end": 2308,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "102"
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 2309,
											"end": 2314,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2309,
											"end": 2314,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2309,
											"end": 2314,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2309,
											"end": 2314,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2207,
											"end": 2268,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 2207,
											"end": 2268,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "103"
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "tag",
											"source": 2,
											"value": "102"
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "104"
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "tag",
											"source": 2,
											"value": "104"
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "106"
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "tag",
											"source": 2,
											"value": "106"
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "107"
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "tag",
											"source": 2,
											"value": "107"
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2279,
											"end": 2322,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2146,
											"end": 2330,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2146,
											"end": 2330,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2146,
											"end": 2330,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "tag",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5508,
											"end": 5514,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5508,
											"end": 5514,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 5524,
											"end": 5531,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 5524,
											"end": 5531,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "95EA7B3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5355,
											"end": 5370,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5355,
											"end": 5370,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5355,
											"end": 5370,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5355,
											"end": 5370,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5355,
											"end": 5370,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5355,
											"end": 5370,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5355,
											"end": 5370,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5355,
											"end": 5370,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5508,
											"end": 5514,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5508,
											"end": 5514,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5508,
											"end": 5514,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5508,
											"end": 5514,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5523,
											"name": "PUSH",
											"source": 2,
											"value": "95EA7B3"
										},
										{
											"begin": 5494,
											"end": 5523,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "110"
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5524,
											"end": 5531,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5524,
											"end": 5531,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5524,
											"end": 5531,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5524,
											"end": 5531,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5533,
											"end": 5546,
											"name": "DUP11",
											"source": 2
										},
										{
											"begin": 5533,
											"end": 5546,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "103"
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "tag",
											"source": 2,
											"value": "110"
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "tag",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "113"
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "tag",
											"source": 2,
											"value": "113"
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "114"
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "tag",
											"source": 2,
											"value": "114"
										},
										{
											"begin": 5494,
											"end": 5547,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5572,
											"end": 5578,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 5572,
											"end": 5578,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 5588,
											"end": 5595,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 5588,
											"end": 5595,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "95EA7B3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5572,
											"end": 5578,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5572,
											"end": 5578,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5572,
											"end": 5578,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5572,
											"end": 5578,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5587,
											"name": "PUSH",
											"source": 2,
											"value": "95EA7B3"
										},
										{
											"begin": 5558,
											"end": 5587,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "115"
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5588,
											"end": 5595,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5588,
											"end": 5595,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5588,
											"end": 5595,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5597,
											"end": 5610,
											"name": "DUP10",
											"source": 2
										},
										{
											"begin": 5597,
											"end": 5610,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "103"
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "tag",
											"source": 2,
											"value": "115"
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "tag",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "118"
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "tag",
											"source": 2,
											"value": "118"
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "119"
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "tag",
											"source": 2,
											"value": "119"
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5558,
											"end": 5611,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5623,
											"end": 5643,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5665,
											"end": 5669,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5665,
											"end": 5669,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5665,
											"end": 5669,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5665,
											"end": 5669,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 5665,
											"end": 5669,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5665,
											"end": 5669,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 5665,
											"end": 5669,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 5665,
											"end": 5669,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5665,
											"end": 5669,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5665,
											"end": 5669,
											"name": "AND",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5652,
											"end": 5676,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5676,
											"name": "PUSH",
											"source": 2,
											"value": "3850C7BD"
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "PUSH",
											"source": 2,
											"value": "C0"
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "120"
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "tag",
											"source": 2,
											"value": "120"
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "STATICCALL",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "tag",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "123"
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "124"
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "tag",
											"source": 2,
											"value": "123"
										},
										{
											"begin": 5652,
											"end": 5678,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "PUSH",
											"source": 2,
											"value": "180"
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5825,
											"end": 5831,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5825,
											"end": 5831,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5825,
											"end": 5831,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5825,
											"end": 5831,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5825,
											"end": 5831,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5858,
											"end": 5864,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 5858,
											"end": 5864,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5858,
											"end": 5864,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 5858,
											"end": 5864,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5858,
											"end": 5864,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5896,
											"end": 5907,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5896,
											"end": 5907,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5896,
											"end": 5907,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5896,
											"end": 5907,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5896,
											"end": 5907,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 5896,
											"end": 5907,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5896,
											"end": 5907,
											"name": "SIGNEXTEND",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "SIGNEXTEND",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D89E7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 644,
											"end": 653,
											"name": "PUSH",
											"source": 28,
											"value": "D89E8"
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "PUSH",
											"source": 2,
											"value": "A0"
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "DUP16",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "PUSH",
											"source": 2,
											"value": "C0"
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "DUP15",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5691,
											"end": 5743,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5825,
											"end": 5831,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6237,
											"end": 6241,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "PUSH",
											"source": 2,
											"value": "120"
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6271,
											"end": 6286,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "PUSH",
											"source": 2,
											"value": "140"
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "PUSH",
											"source": 2,
											"value": "160"
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6431,
											"end": 6438,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 6431,
											"end": 6438,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B5007D1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5622,
											"end": 5678,
											"name": "SWAP8",
											"source": 2
										},
										{
											"begin": 5622,
											"end": 5678,
											"name": "SWAP9",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "SWAP7",
											"source": 2
										},
										{
											"begin": 6431,
											"end": 6438,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6431,
											"end": 6438,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6431,
											"end": 6438,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6403,
											"end": 6444,
											"name": "PUSH",
											"source": 2,
											"value": "B5007D1F"
										},
										{
											"begin": 6403,
											"end": 6444,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "125"
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5759,
											"end": 6347,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "126"
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "tag",
											"source": 2,
											"value": "125"
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "tag",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "129"
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "tag",
											"source": 2,
											"value": "129"
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "130"
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "131"
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "tag",
											"source": 2,
											"value": "130"
										},
										{
											"begin": 6403,
											"end": 6452,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6362,
											"end": 6452,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6362,
											"end": 6452,
											"name": "SWAP9",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6362,
											"end": 6452,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6362,
											"end": 6452,
											"name": "SWAP7",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6362,
											"end": 6452,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6362,
											"end": 6452,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6475,
											"end": 6513,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "132"
										},
										{
											"begin": 6498,
											"end": 6502,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 6362,
											"end": 6452,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 6475,
											"end": 6489,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 6475,
											"end": 6513,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6475,
											"end": 6513,
											"name": "tag",
											"source": 2,
											"value": "132"
										},
										{
											"begin": 6475,
											"end": 6513,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5261,
											"end": 6519,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "tag",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1433,
											"end": 1476,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "tag",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "SIGNEXTEND",
											"source": 2
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1267,
											"end": 1291,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1161,
											"end": 1182,
											"name": "tag",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 1161,
											"end": 1182,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1161,
											"end": 1182,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1161,
											"end": 1182,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1161,
											"end": 1182,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1161,
											"end": 1182,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1161,
											"end": 1182,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1784,
											"end": 2138,
											"name": "tag",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 1784,
											"end": 2138,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1861,
											"end": 1866,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1861,
											"end": 1866,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1861,
											"end": 1866,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1847,
											"end": 1857,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 1847,
											"end": 1866,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1839,
											"end": 1893,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "134"
										},
										{
											"begin": 1839,
											"end": 1893,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1839,
											"end": 1893,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1839,
											"end": 1893,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1839,
											"end": 1893,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1839,
											"end": 1893,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1839,
											"end": 1893,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1839,
											"end": 1893,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1839,
											"end": 1893,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 1839,
											"end": 1893,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1839,
											"end": 1893,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "136"
										},
										{
											"begin": 1839,
											"end": 1893,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1839,
											"end": 1893,
											"name": "tag",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 1839,
											"end": 1893,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1839,
											"end": 1893,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1839,
											"end": 1893,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1839,
											"end": 1893,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1839,
											"end": 1893,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1839,
											"end": 1893,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1839,
											"end": 1893,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1839,
											"end": 1893,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1839,
											"end": 1893,
											"name": "tag",
											"source": 2,
											"value": "134"
										},
										{
											"begin": 1839,
											"end": 1893,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1904,
											"end": 1908,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1904,
											"end": 1918,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1904,
											"end": 1918,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1904,
											"end": 1918,
											"name": "AND",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1904,
											"end": 1918,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1904,
											"end": 1918,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1904,
											"end": 1918,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1904,
											"end": 1918,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1904,
											"end": 1918,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1904,
											"end": 1918,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1904,
											"end": 1918,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 1904,
											"end": 1918,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1904,
											"end": 1918,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1904,
											"end": 1918,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1904,
											"end": 1918,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "DFE1681"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1955,
											"end": 1959,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1955,
											"end": 1959,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1955,
											"end": 1959,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1955,
											"end": 1959,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1955,
											"end": 1959,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1967,
											"name": "PUSH",
											"source": 2,
											"value": "DFE1681"
										},
										{
											"begin": 1938,
											"end": 1967,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1955,
											"end": 1959,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "137"
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "tag",
											"source": 2,
											"value": "137"
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "STATICCALL",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "139"
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "tag",
											"source": 2,
											"value": "139"
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "140"
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "141"
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "tag",
											"source": 2,
											"value": "140"
										},
										{
											"begin": 1938,
											"end": 1969,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1929,
											"end": 1935,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1929,
											"end": 1969,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1929,
											"end": 1969,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1929,
											"end": 1969,
											"name": "AND",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1929,
											"end": 1969,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1929,
											"end": 1969,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1929,
											"end": 1969,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1929,
											"end": 1969,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 1929,
											"end": 1969,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1929,
											"end": 1969,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 2006,
											"end": 2010,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D21220A7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2006,
											"end": 2010,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2006,
											"end": 2010,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2006,
											"end": 2010,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2006,
											"end": 2010,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2006,
											"end": 2010,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2018,
											"name": "PUSH",
											"source": 2,
											"value": "D21220A7"
										},
										{
											"begin": 1989,
											"end": 2018,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2006,
											"end": 2010,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "142"
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "tag",
											"source": 2,
											"value": "142"
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "STATICCALL",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "144"
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "tag",
											"source": 2,
											"value": "144"
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "145"
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "141"
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "tag",
											"source": 2,
											"value": "145"
										},
										{
											"begin": 1989,
											"end": 2020,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1980,
											"end": 1986,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1980,
											"end": 2020,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1980,
											"end": 2020,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1980,
											"end": 2020,
											"name": "AND",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1980,
											"end": 2020,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1980,
											"end": 2020,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1980,
											"end": 2020,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1980,
											"end": 2020,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 1980,
											"end": 2020,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1980,
											"end": 2020,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 2058,
											"end": 2062,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23E66501"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2058,
											"end": 2062,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2058,
											"end": 2062,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2058,
											"end": 2062,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2058,
											"end": 2062,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2058,
											"end": 2062,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2067,
											"name": "PUSH",
											"source": 2,
											"value": "47CCCA02"
										},
										{
											"begin": 2041,
											"end": 2067,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2058,
											"end": 2062,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "146"
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "tag",
											"source": 2,
											"value": "146"
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "STATICCALL",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "148"
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "tag",
											"source": 2,
											"value": "148"
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "149"
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "141"
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "tag",
											"source": 2,
											"value": "149"
										},
										{
											"begin": 2041,
											"end": 2069,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2031,
											"end": 2038,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 2031,
											"end": 2069,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2031,
											"end": 2069,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2031,
											"end": 2069,
											"name": "AND",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2031,
											"end": 2069,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2031,
											"end": 2069,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2031,
											"end": 2069,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2031,
											"end": 2069,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 2031,
											"end": 2069,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2031,
											"end": 2069,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 2111,
											"end": 2115,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "34324E9F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2111,
											"end": 2115,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2111,
											"end": 2115,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2111,
											"end": 2115,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2111,
											"end": 2115,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2111,
											"end": 2115,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2128,
											"name": "PUSH",
											"source": 2,
											"value": "D0C93A7C"
										},
										{
											"begin": 2094,
											"end": 2128,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2111,
											"end": 2115,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "150"
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "tag",
											"source": 2,
											"value": "150"
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "STATICCALL",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "152"
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "tag",
											"source": 2,
											"value": "152"
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "153"
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "154"
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "tag",
											"source": 2,
											"value": "153"
										},
										{
											"begin": 2094,
											"end": 2130,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2080,
											"end": 2091,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2080,
											"end": 2091,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 2080,
											"end": 2130,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2080,
											"end": 2130,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 2080,
											"end": 2130,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2080,
											"end": 2130,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2080,
											"end": 2130,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2080,
											"end": 2130,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFF"
										},
										{
											"begin": 2080,
											"end": 2130,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2080,
											"end": 2130,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2080,
											"end": 2130,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2080,
											"end": 2130,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2080,
											"end": 2130,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2080,
											"end": 2130,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2080,
											"end": 2130,
											"name": "SIGNEXTEND",
											"source": 2
										},
										{
											"begin": 2080,
											"end": 2130,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFF"
										},
										{
											"begin": 2080,
											"end": 2130,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2080,
											"end": 2130,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2080,
											"end": 2130,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 2080,
											"end": 2130,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2080,
											"end": 2130,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 2080,
											"end": 2130,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1784,
											"end": 2138,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1784,
											"end": 2138,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "tag",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2338,
											"end": 3423,
											"name": "tag",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 2338,
											"end": 3423,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2414,
											"end": 2415,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2403,
											"end": 2411,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2403,
											"end": 2415,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2395,
											"end": 2440,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 2395,
											"end": 2440,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2395,
											"end": 2440,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2395,
											"end": 2440,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2395,
											"end": 2440,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2395,
											"end": 2440,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2395,
											"end": 2440,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2395,
											"end": 2440,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2395,
											"end": 2440,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 2395,
											"end": 2440,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2395,
											"end": 2440,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "158"
										},
										{
											"begin": 2395,
											"end": 2440,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2395,
											"end": 2440,
											"name": "tag",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 2395,
											"end": 2440,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2505,
											"end": 2525,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2552,
											"end": 2556,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2552,
											"end": 2556,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2552,
											"end": 2556,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2552,
											"end": 2556,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2552,
											"end": 2556,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2552,
											"end": 2556,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2552,
											"end": 2556,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 2552,
											"end": 2556,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2552,
											"end": 2556,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2552,
											"end": 2556,
											"name": "AND",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2539,
											"end": 2563,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2563,
											"name": "PUSH",
											"source": 2,
											"value": "3850C7BD"
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "PUSH",
											"source": 2,
											"value": "C0"
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "159"
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "tag",
											"source": 2,
											"value": "159"
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "STATICCALL",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "161"
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "tag",
											"source": 2,
											"value": "161"
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "162"
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "124"
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "tag",
											"source": 2,
											"value": "162"
										},
										{
											"begin": 2539,
											"end": 2565,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2504,
											"end": 2565,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2504,
											"end": 2565,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2504,
											"end": 2565,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2504,
											"end": 2565,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2504,
											"end": 2565,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2504,
											"end": 2565,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2504,
											"end": 2565,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2576,
											"end": 2601,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2632,
											"end": 2635,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 2612,
											"end": 2624,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2627,
											"end": 2629,
											"name": "PUSH",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 2612,
											"end": 2629,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2612,
											"end": 2635,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2612,
											"end": 2635,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2612,
											"end": 2635,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "163"
										},
										{
											"begin": 2612,
											"end": 2635,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2612,
											"end": 2635,
											"name": "INVALID",
											"source": 2
										},
										{
											"begin": 2612,
											"end": 2635,
											"name": "tag",
											"source": 2,
											"value": "163"
										},
										{
											"begin": 2612,
											"end": 2635,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2612,
											"end": 2635,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2612,
											"end": 2635,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 824,
											"end": 834,
											"name": "PUSH",
											"source": 28,
											"value": "1000276A3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2699,
											"end": 2743,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2699,
											"end": 2743,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2699,
											"end": 2743,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2695,
											"end": 2819,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "164"
										},
										{
											"begin": 2695,
											"end": 2819,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2780,
											"end": 2807,
											"name": "PUSH",
											"source": 2,
											"value": "1000276A4"
										},
										{
											"begin": 2695,
											"end": 2819,
											"name": "tag",
											"source": 2,
											"value": "164"
										},
										{
											"begin": 2695,
											"end": 2819,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2886,
											"end": 2892,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2886,
											"end": 2892,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2886,
											"end": 2892,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2902,
											"end": 2906,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "95EA7B3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2886,
											"end": 2892,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2886,
											"end": 2892,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2886,
											"end": 2892,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2886,
											"end": 2892,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2901,
											"name": "PUSH",
											"source": 2,
											"value": "95EA7B3"
										},
										{
											"begin": 2872,
											"end": 2901,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "165"
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2902,
											"end": 2906,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2902,
											"end": 2906,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2902,
											"end": 2906,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2908,
											"end": 2916,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 2908,
											"end": 2916,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "103"
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "tag",
											"source": 2,
											"value": "165"
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "166"
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "tag",
											"source": 2,
											"value": "166"
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "168"
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "tag",
											"source": 2,
											"value": "168"
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "169"
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "tag",
											"source": 2,
											"value": "169"
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2872,
											"end": 2917,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3026,
											"end": 3043,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3065,
											"end": 3069,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3071,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3046,
											"end": 3071,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3071,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3046,
											"end": 3071,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3071,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "170"
										},
										{
											"begin": 3046,
											"end": 3071,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3071,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3071,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 3046,
											"end": 3071,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3046,
											"end": 3071,
											"name": "tag",
											"source": 2,
											"value": "170"
										},
										{
											"begin": 3046,
											"end": 3071,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3071,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3046,
											"end": 3071,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3071,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3046,
											"end": 3071,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3071,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3071,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3071,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3071,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3071,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3071,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3071,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3071,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3071,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3141,
											"end": 3145,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3141,
											"end": 3145,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2515961"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3071,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3071,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3141,
											"end": 3145,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3141,
											"end": 3145,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3151,
											"name": "PUSH",
											"source": 2,
											"value": "128ACB08"
										},
										{
											"begin": 3126,
											"end": 3151,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "171"
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3174,
											"end": 3178,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 3174,
											"end": 3178,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3141,
											"end": 3145,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 3141,
											"end": 3145,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3282,
											"end": 3290,
											"name": "DUP10",
											"source": 2
										},
										{
											"begin": 3282,
											"end": 3290,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3322,
											"end": 3339,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 3322,
											"end": 3339,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3071,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 3046,
											"end": 3071,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "172"
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "tag",
											"source": 2,
											"value": "171"
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "173"
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "tag",
											"source": 2,
											"value": "173"
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "175"
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "tag",
											"source": 2,
											"value": "175"
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "176"
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "177"
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "tag",
											"source": 2,
											"value": "176"
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3415,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2338,
											"end": 3423,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2338,
											"end": 3423,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2338,
											"end": 3423,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2338,
											"end": 3423,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2338,
											"end": 3423,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1630,
											"end": 1776,
											"name": "tag",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 1630,
											"end": 1776,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1709,
											"end": 1714,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1709,
											"end": 1714,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1709,
											"end": 1714,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1695,
											"end": 1705,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 1695,
											"end": 1714,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1687,
											"end": 1741,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "179"
										},
										{
											"begin": 1687,
											"end": 1741,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1687,
											"end": 1741,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1687,
											"end": 1741,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1687,
											"end": 1741,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1687,
											"end": 1741,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1687,
											"end": 1741,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1687,
											"end": 1741,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1687,
											"end": 1741,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 1687,
											"end": 1741,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1687,
											"end": 1741,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "136"
										},
										{
											"begin": 1687,
											"end": 1741,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1687,
											"end": 1741,
											"name": "tag",
											"source": 2,
											"value": "179"
										},
										{
											"begin": 1687,
											"end": 1741,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1752,
											"end": 1757,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1752,
											"end": 1768,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1752,
											"end": 1768,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1752,
											"end": 1768,
											"name": "AND",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1752,
											"end": 1768,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1752,
											"end": 1768,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1752,
											"end": 1768,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1752,
											"end": 1768,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1752,
											"end": 1768,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1752,
											"end": 1768,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1752,
											"end": 1768,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1752,
											"end": 1768,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 1752,
											"end": 1768,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1752,
											"end": 1768,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 1630,
											"end": 1776,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1240,
											"end": 1260,
											"name": "tag",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 1240,
											"end": 1260,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1240,
											"end": 1260,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1260,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1260,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1240,
											"end": 1260,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1240,
											"end": 1260,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 4598,
											"end": 5257,
											"name": "tag",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 4598,
											"end": 5257,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4783,
											"end": 4787,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4783,
											"end": 4787,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4783,
											"end": 4787,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4769,
											"end": 4779,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 4769,
											"end": 4787,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 4761,
											"end": 4815,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "182"
										},
										{
											"begin": 4761,
											"end": 4815,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4761,
											"end": 4815,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4761,
											"end": 4815,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4761,
											"end": 4815,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4761,
											"end": 4815,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4761,
											"end": 4815,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4761,
											"end": 4815,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4761,
											"end": 4815,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 4761,
											"end": 4815,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4761,
											"end": 4815,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "184"
										},
										{
											"begin": 4761,
											"end": 4815,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4761,
											"end": 4815,
											"name": "tag",
											"source": 2,
											"value": "182"
										},
										{
											"begin": 4761,
											"end": 4815,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4926,
											"end": 4927,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4911,
											"end": 4923,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 4911,
											"end": 4927,
											"name": "SGT",
											"source": 2
										},
										{
											"begin": 4907,
											"end": 5015,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4907,
											"end": 5015,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "185"
										},
										{
											"begin": 4907,
											"end": 5015,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4958,
											"end": 4964,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 4958,
											"end": 4964,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 4958,
											"end": 4964,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4975,
											"end": 4979,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4958,
											"end": 4964,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4958,
											"end": 4964,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 4958,
											"end": 4964,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4958,
											"end": 4964,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 4974,
											"name": "PUSH",
											"source": 2,
											"value": "A9059CBB"
										},
										{
											"begin": 4944,
											"end": 4974,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "186"
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4975,
											"end": 4979,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4975,
											"end": 4979,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4975,
											"end": 4979,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4989,
											"end": 5001,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 4989,
											"end": 5001,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "103"
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "tag",
											"source": 2,
											"value": "186"
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "187"
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "tag",
											"source": 2,
											"value": "187"
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "189"
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "tag",
											"source": 2,
											"value": "189"
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "190"
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "tag",
											"source": 2,
											"value": "190"
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4944,
											"end": 5003,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4907,
											"end": 5015,
											"name": "tag",
											"source": 2,
											"value": "185"
										},
										{
											"begin": 4907,
											"end": 5015,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5161,
											"end": 5162,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5146,
											"end": 5158,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5146,
											"end": 5162,
											"name": "SGT",
											"source": 2
										},
										{
											"begin": 5142,
											"end": 5250,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5142,
											"end": 5250,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "191"
										},
										{
											"begin": 5142,
											"end": 5250,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5193,
											"end": 5199,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 5193,
											"end": 5199,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 5193,
											"end": 5199,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5210,
											"end": 5214,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5193,
											"end": 5199,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5193,
											"end": 5199,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5193,
											"end": 5199,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5193,
											"end": 5199,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5209,
											"name": "PUSH",
											"source": 2,
											"value": "A9059CBB"
										},
										{
											"begin": 5179,
											"end": 5209,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "192"
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5210,
											"end": 5214,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5210,
											"end": 5214,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5210,
											"end": 5214,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5224,
											"end": 5236,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 5224,
											"end": 5236,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "103"
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "tag",
											"source": 2,
											"value": "192"
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "193"
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "tag",
											"source": 2,
											"value": "193"
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "195"
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "tag",
											"source": 2,
											"value": "195"
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "196"
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "tag",
											"source": 2,
											"value": "196"
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5179,
											"end": 5238,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5142,
											"end": 5250,
											"name": "tag",
											"source": 2,
											"value": "191"
										},
										{
											"begin": 5142,
											"end": 5250,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 5257,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 5257,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 5257,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 5257,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4598,
											"end": 5257,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3431,
											"end": 4520,
											"name": "tag",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 3431,
											"end": 4520,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3509,
											"end": 3510,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3498,
											"end": 3506,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3498,
											"end": 3510,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 3490,
											"end": 3535,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "198"
										},
										{
											"begin": 3490,
											"end": 3535,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3490,
											"end": 3535,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3490,
											"end": 3535,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3490,
											"end": 3535,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3490,
											"end": 3535,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3490,
											"end": 3535,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3490,
											"end": 3535,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3490,
											"end": 3535,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 3490,
											"end": 3535,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3490,
											"end": 3535,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "158"
										},
										{
											"begin": 3490,
											"end": 3535,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3490,
											"end": 3535,
											"name": "tag",
											"source": 2,
											"value": "198"
										},
										{
											"begin": 3490,
											"end": 3535,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3600,
											"end": 3620,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3647,
											"end": 3651,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3647,
											"end": 3651,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3647,
											"end": 3651,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3647,
											"end": 3651,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3647,
											"end": 3651,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3647,
											"end": 3651,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 3647,
											"end": 3651,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 3647,
											"end": 3651,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3647,
											"end": 3651,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3647,
											"end": 3651,
											"name": "AND",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3634,
											"end": 3658,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3658,
											"name": "PUSH",
											"source": 2,
											"value": "3850C7BD"
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "PUSH",
											"source": 2,
											"value": "C0"
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "200"
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "tag",
											"source": 2,
											"value": "200"
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "STATICCALL",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "202"
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "tag",
											"source": 2,
											"value": "202"
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "203"
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "124"
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "tag",
											"source": 2,
											"value": "203"
										},
										{
											"begin": 3634,
											"end": 3660,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3599,
											"end": 3660,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3599,
											"end": 3660,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3599,
											"end": 3660,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3599,
											"end": 3660,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3599,
											"end": 3660,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3599,
											"end": 3660,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3599,
											"end": 3660,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3696,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3728,
											"end": 3731,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 3707,
											"end": 3719,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3722,
											"end": 3725,
											"name": "PUSH",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 3707,
											"end": 3725,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3707,
											"end": 3731,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3707,
											"end": 3731,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3707,
											"end": 3731,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "204"
										},
										{
											"begin": 3707,
											"end": 3731,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3707,
											"end": 3731,
											"name": "INVALID",
											"source": 2
										},
										{
											"begin": 3707,
											"end": 3731,
											"name": "tag",
											"source": 2,
											"value": "204"
										},
										{
											"begin": 3707,
											"end": 3731,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3707,
											"end": 3731,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 3707,
											"end": 3731,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 824,
											"end": 834,
											"name": "PUSH",
											"source": 28,
											"value": "1000276A3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3795,
											"end": 3839,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3795,
											"end": 3839,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3795,
											"end": 3839,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 3791,
											"end": 3915,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "205"
										},
										{
											"begin": 3791,
											"end": 3915,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3876,
											"end": 3903,
											"name": "PUSH",
											"source": 2,
											"value": "1000276A2"
										},
										{
											"begin": 3791,
											"end": 3915,
											"name": "tag",
											"source": 2,
											"value": "205"
										},
										{
											"begin": 3791,
											"end": 3915,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3982,
											"end": 3988,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 3982,
											"end": 3988,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3982,
											"end": 3988,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3998,
											"end": 4002,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "95EA7B3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3982,
											"end": 3988,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3982,
											"end": 3988,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3982,
											"end": 3988,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3982,
											"end": 3988,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 3997,
											"name": "PUSH",
											"source": 2,
											"value": "95EA7B3"
										},
										{
											"begin": 3968,
											"end": 3997,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "206"
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3998,
											"end": 4002,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3998,
											"end": 4002,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3998,
											"end": 4002,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4004,
											"end": 4012,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 4004,
											"end": 4012,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "103"
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "tag",
											"source": 2,
											"value": "206"
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "207"
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "tag",
											"source": 2,
											"value": "207"
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "209"
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "tag",
											"source": 2,
											"value": "209"
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "210"
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "tag",
											"source": 2,
											"value": "210"
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3968,
											"end": 4013,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4122,
											"end": 4139,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4161,
											"end": 4165,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 4142,
											"end": 4167,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4142,
											"end": 4167,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4142,
											"end": 4167,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4142,
											"end": 4167,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4142,
											"end": 4167,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "211"
										},
										{
											"begin": 4142,
											"end": 4167,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4142,
											"end": 4167,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4142,
											"end": 4167,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 4142,
											"end": 4167,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4142,
											"end": 4167,
											"name": "tag",
											"source": 2,
											"value": "211"
										},
										{
											"begin": 4142,
											"end": 4167,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4142,
											"end": 4167,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4142,
											"end": 4167,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4142,
											"end": 4167,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4142,
											"end": 4167,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4142,
											"end": 4167,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 4142,
											"end": 4167,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4142,
											"end": 4167,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4142,
											"end": 4167,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4142,
											"end": 4167,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4142,
											"end": 4167,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4142,
											"end": 4167,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4142,
											"end": 4167,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4142,
											"end": 4167,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4237,
											"end": 4241,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4237,
											"end": 4241,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4237,
											"end": 4241,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2515961"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4222,
											"end": 4512,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 4222,
											"end": 4512,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4142,
											"end": 4167,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4142,
											"end": 4167,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4237,
											"end": 4241,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4237,
											"end": 4241,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4237,
											"end": 4241,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4237,
											"end": 4241,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4222,
											"end": 4247,
											"name": "PUSH",
											"source": 2,
											"value": "128ACB08"
										},
										{
											"begin": 4222,
											"end": 4247,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4222,
											"end": 4512,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "171"
										},
										{
											"begin": 4222,
											"end": 4512,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4270,
											"end": 4274,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 4270,
											"end": 4274,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4237,
											"end": 4241,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4379,
											"end": 4387,
											"name": "DUP10",
											"source": 2
										},
										{
											"begin": 4379,
											"end": 4387,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4419,
											"end": 4436,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 4419,
											"end": 4436,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4142,
											"end": 4167,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 4142,
											"end": 4167,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4222,
											"end": 4512,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4222,
											"end": 4512,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4222,
											"end": 4512,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "172"
										},
										{
											"begin": 4222,
											"end": 4512,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6831,
											"end": 7252,
											"name": "tag",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 6831,
											"end": 7252,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7022,
											"end": 7029,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 7022,
											"end": 7029,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "133F7571"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6912,
											"end": 6927,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6912,
											"end": 6927,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6912,
											"end": 6927,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6912,
											"end": 6927,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6912,
											"end": 6927,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6912,
											"end": 6927,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7022,
											"end": 7029,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7022,
											"end": 7029,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7040,
											"name": "PUSH",
											"source": 2,
											"value": "99FBAB88"
										},
										{
											"begin": 6994,
											"end": 7040,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "218"
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7041,
											"end": 7048,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 7041,
											"end": 7048,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "219"
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "tag",
											"source": 2,
											"value": "218"
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "PUSH",
											"source": 2,
											"value": "180"
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "220"
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "tag",
											"source": 2,
											"value": "220"
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "STATICCALL",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "222"
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "tag",
											"source": 2,
											"value": "222"
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "223"
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "224"
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "tag",
											"source": 2,
											"value": "223"
										},
										{
											"begin": 6994,
											"end": 7049,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6907,
											"end": 7049,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6907,
											"end": 7049,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6907,
											"end": 7049,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6907,
											"end": 7049,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6907,
											"end": 7049,
											"name": "SWAP8",
											"source": 2
										},
										{
											"begin": 6907,
											"end": 7049,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6907,
											"end": 7049,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6907,
											"end": 7049,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6907,
											"end": 7049,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6907,
											"end": 7049,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 6907,
											"end": 7049,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6907,
											"end": 7049,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 6907,
											"end": 7049,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6907,
											"end": 7049,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6907,
											"end": 7049,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7165,
											"end": 7244,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7165,
											"end": 7244,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7165,
											"end": 7244,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7165,
											"end": 7244,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 7165,
											"end": 7244,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7165,
											"end": 7244,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7165,
											"end": 7244,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7165,
											"end": 7244,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7181,
											"end": 7186,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7165,
											"end": 7244,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7165,
											"end": 7244,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7165,
											"end": 7244,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7165,
											"end": 7244,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7165,
											"end": 7244,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7199,
											"end": 7208,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7165,
											"end": 7244,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7165,
											"end": 7244,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7165,
											"end": 7244,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7165,
											"end": 7244,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7165,
											"end": 7244,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7218,
											"end": 7225,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7165,
											"end": 7244,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7165,
											"end": 7244,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7165,
											"end": 7244,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7165,
											"end": 7244,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7165,
											"end": 7244,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7235,
											"end": 7242,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7165,
											"end": 7244,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7165,
											"end": 7244,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7165,
											"end": 7244,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7165,
											"end": 7244,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7153,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 7145,
											"end": 7162,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7154,
											"end": 7161,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7162,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7162,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7162,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7145,
											"end": 7162,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7162,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7162,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7162,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7162,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7145,
											"end": 7162,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7162,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7145,
											"end": 7162,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7145,
											"end": 7244,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6831,
											"end": 7252,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6831,
											"end": 7252,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6831,
											"end": 7252,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6831,
											"end": 7252,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6831,
											"end": 7252,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6831,
											"end": 7252,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 14,
											"end": 156,
											"name": "tag",
											"source": 32,
											"value": "226"
										},
										{
											"begin": 14,
											"end": 156,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 95,
											"end": 108,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 95,
											"end": 108,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 117,
											"end": 150,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "228"
										},
										{
											"begin": 95,
											"end": 108,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 117,
											"end": 150,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "229"
										},
										{
											"begin": 117,
											"end": 150,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 117,
											"end": 150,
											"name": "tag",
											"source": 32,
											"value": "228"
										},
										{
											"begin": 117,
											"end": 150,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 76,
											"end": 156,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 76,
											"end": 156,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 76,
											"end": 156,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 76,
											"end": 156,
											"name": "JUMP",
											"source": 32,
											"value": "[out]"
										},
										{
											"begin": 161,
											"end": 327,
											"name": "tag",
											"source": 32,
											"value": "230"
										},
										{
											"begin": 161,
											"end": 327,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 239,
											"end": 252,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 239,
											"end": 252,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 288,
											"end": 301,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 288,
											"end": 301,
											"name": "ISZERO",
											"source": 32
										},
										{
											"begin": 281,
											"end": 302,
											"name": "ISZERO",
											"source": 32
										},
										{
											"begin": 271,
											"end": 303,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 271,
											"end": 303,
											"name": "EQ",
											"source": 32
										},
										{
											"begin": 261,
											"end": 263,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "228"
										},
										{
											"begin": 261,
											"end": 263,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 317,
											"end": 318,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 314,
											"end": 315,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 307,
											"end": 319,
											"name": "REVERT",
											"source": 32
										},
										{
											"begin": 332,
											"end": 709,
											"name": "tag",
											"source": 32,
											"value": "233"
										},
										{
											"begin": 332,
											"end": 709,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 332,
											"end": 709,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 332,
											"end": 709,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 449,
											"end": 452,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 442,
											"end": 446,
											"name": "PUSH",
											"source": 32,
											"value": "1F"
										},
										{
											"begin": 434,
											"end": 440,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 430,
											"end": 447,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 426,
											"end": 453,
											"name": "SLT",
											"source": 32
										},
										{
											"begin": 416,
											"end": 418,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "235"
										},
										{
											"begin": 416,
											"end": 418,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 474,
											"end": 482,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 464,
											"end": 472,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 457,
											"end": 483,
											"name": "REVERT",
											"source": 32
										},
										{
											"begin": 416,
											"end": 418,
											"name": "tag",
											"source": 32,
											"value": "235"
										},
										{
											"begin": 416,
											"end": 418,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 504,
											"end": 524,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 504,
											"end": 524,
											"name": "CALLDATALOAD",
											"source": 32
										},
										{
											"begin": 547,
											"end": 565,
											"name": "PUSH",
											"source": 32,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 536,
											"end": 566,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 536,
											"end": 566,
											"name": "GT",
											"source": 32
										},
										{
											"begin": 533,
											"end": 535,
											"name": "ISZERO",
											"source": 32
										},
										{
											"begin": 533,
											"end": 535,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "236"
										},
										{
											"begin": 533,
											"end": 535,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 586,
											"end": 594,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 576,
											"end": 584,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 569,
											"end": 595,
											"name": "REVERT",
											"source": 32
										},
										{
											"begin": 533,
											"end": 535,
											"name": "tag",
											"source": 32,
											"value": "236"
										},
										{
											"begin": 533,
											"end": 535,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 630,
											"end": 634,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 622,
											"end": 628,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 618,
											"end": 635,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 606,
											"end": 635,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 606,
											"end": 635,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 682,
											"end": 685,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 675,
											"end": 679,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 666,
											"end": 672,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 658,
											"end": 664,
											"name": "DUP6",
											"source": 32
										},
										{
											"begin": 654,
											"end": 673,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 650,
											"end": 680,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 647,
											"end": 686,
											"name": "GT",
											"source": 32
										},
										{
											"begin": 644,
											"end": 646,
											"name": "ISZERO",
											"source": 32
										},
										{
											"begin": 644,
											"end": 646,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "237"
										},
										{
											"begin": 644,
											"end": 646,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 699,
											"end": 700,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 696,
											"end": 697,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 689,
											"end": 701,
											"name": "REVERT",
											"source": 32
										},
										{
											"begin": 644,
											"end": 646,
											"name": "tag",
											"source": 32,
											"value": "237"
										},
										{
											"begin": 644,
											"end": 646,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 406,
											"end": 709,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": 406,
											"end": 709,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 406,
											"end": 709,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": 406,
											"end": 709,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 406,
											"end": 709,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 406,
											"end": 709,
											"name": "JUMP",
											"source": 32,
											"value": "[out]"
										},
										{
											"begin": 714,
											"end": 880,
											"name": "tag",
											"source": 32,
											"value": "238"
										},
										{
											"begin": 714,
											"end": 880,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 793,
											"end": 806,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 793,
											"end": 806,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 846,
											"end": 847,
											"name": "PUSH",
											"source": 32,
											"value": "2"
										},
										{
											"begin": 835,
											"end": 855,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 835,
											"end": 855,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 835,
											"end": 855,
											"name": "SIGNEXTEND",
											"source": 32
										},
										{
											"begin": 825,
											"end": 856,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 825,
											"end": 856,
											"name": "EQ",
											"source": 32
										},
										{
											"begin": 815,
											"end": 817,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "228"
										},
										{
											"begin": 815,
											"end": 817,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 870,
											"end": 871,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 867,
											"end": 868,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 860,
											"end": 872,
											"name": "REVERT",
											"source": 32
										},
										{
											"begin": 885,
											"end": 1079,
											"name": "tag",
											"source": 32,
											"value": "241"
										},
										{
											"begin": 885,
											"end": 1079,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 966,
											"end": 979,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 966,
											"end": 979,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1008,
											"end": 1054,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 1008,
											"end": 1054,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 998,
											"end": 1055,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 998,
											"end": 1055,
											"name": "EQ",
											"source": 32
										},
										{
											"begin": 988,
											"end": 990,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "228"
										},
										{
											"begin": 988,
											"end": 990,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 1069,
											"end": 1070,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 1066,
											"end": 1067,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1059,
											"end": 1071,
											"name": "REVERT",
											"source": 32
										},
										{
											"begin": 1084,
											"end": 1249,
											"name": "tag",
											"source": 32,
											"value": "244"
										},
										{
											"begin": 1084,
											"end": 1249,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 1164,
											"end": 1177,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1164,
											"end": 1177,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 1217,
											"end": 1223,
											"name": "PUSH",
											"source": 32,
											"value": "FFFF"
										},
										{
											"begin": 1206,
											"end": 1224,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 1206,
											"end": 1224,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 1196,
											"end": 1225,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 1196,
											"end": 1225,
											"name": "EQ",
											"source": 32
										},
										{
											"begin": 1186,
											"end": 1188,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "228"
										},
										{
											"begin": 1186,
											"end": 1188,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 1239,
											"end": 1240,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 1236,
											"end": 1237,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1229,
											"end": 1241,
											"name": "REVERT",
											"source": 32
										},
										{
											"begin": 1254,
											"end": 1513,
											"name": "tag",
											"source": 32,
											"value": "39"
										},
										{
											"begin": 1254,
											"end": 1513,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 1254,
											"end": 1513,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 1366,
											"end": 1368,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 1354,
											"end": 1363,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 1345,
											"end": 1352,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 1341,
											"end": 1364,
											"name": "SUB",
											"source": 32
										},
										{
											"begin": 1337,
											"end": 1369,
											"name": "SLT",
											"source": 32
										},
										{
											"begin": 1334,
											"end": 1336,
											"name": "ISZERO",
											"source": 32
										},
										{
											"begin": 1334,
											"end": 1336,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "248"
										},
										{
											"begin": 1334,
											"end": 1336,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 1387,
											"end": 1393,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1379,
											"end": 1385,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 1372,
											"end": 1394,
											"name": "REVERT",
											"source": 32
										},
										{
											"begin": 1334,
											"end": 1336,
											"name": "tag",
											"source": 32,
											"value": "248"
										},
										{
											"begin": 1334,
											"end": 1336,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 1431,
											"end": 1440,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 1418,
											"end": 1441,
											"name": "CALLDATALOAD",
											"source": 32
										},
										{
											"begin": 1450,
											"end": 1483,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "249"
										},
										{
											"begin": 1477,
											"end": 1482,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 1450,
											"end": 1483,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "229"
										},
										{
											"begin": 1450,
											"end": 1483,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 1450,
											"end": 1483,
											"name": "tag",
											"source": 32,
											"value": "249"
										},
										{
											"begin": 1450,
											"end": 1483,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 1502,
											"end": 1507,
											"name": "SWAP4",
											"source": 32
										},
										{
											"begin": 1324,
											"end": 1513,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1324,
											"end": 1513,
											"name": "JUMP",
											"source": 32,
											"value": "[out]"
										},
										{
											"begin": 1518,
											"end": 1781,
											"name": "tag",
											"source": 32,
											"value": "141"
										},
										{
											"begin": 1518,
											"end": 1781,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 1518,
											"end": 1781,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 1641,
											"end": 1643,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 1629,
											"end": 1638,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 1620,
											"end": 1627,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 1616,
											"end": 1639,
											"name": "SUB",
											"source": 32
										},
										{
											"begin": 1612,
											"end": 1644,
											"name": "SLT",
											"source": 32
										},
										{
											"begin": 1609,
											"end": 1611,
											"name": "ISZERO",
											"source": 32
										},
										{
											"begin": 1609,
											"end": 1611,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "251"
										},
										{
											"begin": 1609,
											"end": 1611,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 1662,
											"end": 1668,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1654,
											"end": 1660,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 1647,
											"end": 1669,
											"name": "REVERT",
											"source": 32
										},
										{
											"begin": 1609,
											"end": 1611,
											"name": "tag",
											"source": 32,
											"value": "251"
										},
										{
											"begin": 1609,
											"end": 1611,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 1699,
											"end": 1708,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 1693,
											"end": 1709,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 1718,
											"end": 1751,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "249"
										},
										{
											"begin": 1745,
											"end": 1750,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 1718,
											"end": 1751,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "229"
										},
										{
											"begin": 1718,
											"end": 1751,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 1786,
											"end": 2566,
											"name": "tag",
											"source": 32,
											"value": "28"
										},
										{
											"begin": 1786,
											"end": 2566,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 1786,
											"end": 2566,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 1786,
											"end": 2566,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1786,
											"end": 2566,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 1786,
											"end": 2566,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1786,
											"end": 2566,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 1968,
											"end": 1971,
											"name": "PUSH",
											"source": 32,
											"value": "80"
										},
										{
											"begin": 1956,
											"end": 1965,
											"name": "DUP7",
											"source": 32
										},
										{
											"begin": 1947,
											"end": 1954,
											"name": "DUP9",
											"source": 32
										},
										{
											"begin": 1943,
											"end": 1966,
											"name": "SUB",
											"source": 32
										},
										{
											"begin": 1939,
											"end": 1972,
											"name": "SLT",
											"source": 32
										},
										{
											"begin": 1936,
											"end": 1938,
											"name": "ISZERO",
											"source": 32
										},
										{
											"begin": 1936,
											"end": 1938,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "254"
										},
										{
											"begin": 1936,
											"end": 1938,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 1990,
											"end": 1996,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1982,
											"end": 1988,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 1975,
											"end": 1997,
											"name": "REVERT",
											"source": 32
										},
										{
											"begin": 1936,
											"end": 1938,
											"name": "tag",
											"source": 32,
											"value": "254"
										},
										{
											"begin": 1936,
											"end": 1938,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 2034,
											"end": 2043,
											"name": "DUP6",
											"source": 32
										},
										{
											"begin": 2021,
											"end": 2044,
											"name": "CALLDATALOAD",
											"source": 32
										},
										{
											"begin": 2053,
											"end": 2086,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "255"
										},
										{
											"begin": 2080,
											"end": 2085,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 2053,
											"end": 2086,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "229"
										},
										{
											"begin": 2053,
											"end": 2086,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 2053,
											"end": 2086,
											"name": "tag",
											"source": 32,
											"value": "255"
										},
										{
											"begin": 2053,
											"end": 2086,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 2105,
											"end": 2110,
											"name": "SWAP5",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2162,
											"end": 2164,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 2147,
											"end": 2165,
											"name": "DUP7",
											"source": 32
										},
										{
											"begin": 2147,
											"end": 2165,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2134,
											"end": 2166,
											"name": "CALLDATALOAD",
											"source": 32
										},
										{
											"begin": 2175,
											"end": 2210,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "256"
										},
										{
											"begin": 2134,
											"end": 2166,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 2175,
											"end": 2210,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "229"
										},
										{
											"begin": 2175,
											"end": 2210,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 2175,
											"end": 2210,
											"name": "tag",
											"source": 32,
											"value": "256"
										},
										{
											"begin": 2175,
											"end": 2210,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 2229,
											"end": 2236,
											"name": "SWAP4",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2283,
											"end": 2285,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 2268,
											"end": 2286,
											"name": "DUP7",
											"source": 32
										},
										{
											"begin": 2268,
											"end": 2286,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2255,
											"end": 2287,
											"name": "CALLDATALOAD",
											"source": 32
										},
										{
											"begin": 2255,
											"end": 2287,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2338,
											"end": 2340,
											"name": "PUSH",
											"source": 32,
											"value": "60"
										},
										{
											"begin": 2323,
											"end": 2341,
											"name": "DUP7",
											"source": 32
										},
										{
											"begin": 2323,
											"end": 2341,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2310,
											"end": 2342,
											"name": "CALLDATALOAD",
											"source": 32
										},
										{
											"begin": 2365,
											"end": 2383,
											"name": "PUSH",
											"source": 32,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2354,
											"end": 2384,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 2354,
											"end": 2384,
											"name": "GT",
											"source": 32
										},
										{
											"begin": 2351,
											"end": 2353,
											"name": "ISZERO",
											"source": 32
										},
										{
											"begin": 2351,
											"end": 2353,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "257"
										},
										{
											"begin": 2351,
											"end": 2353,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 2402,
											"end": 2408,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 2394,
											"end": 2400,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 2387,
											"end": 2409,
											"name": "REVERT",
											"source": 32
										},
										{
											"begin": 2351,
											"end": 2353,
											"name": "tag",
											"source": 32,
											"value": "257"
										},
										{
											"begin": 2351,
											"end": 2353,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 2446,
											"end": 2506,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "258"
										},
										{
											"begin": 2498,
											"end": 2505,
											"name": "DUP9",
											"source": 32
										},
										{
											"begin": 2489,
											"end": 2495,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 2478,
											"end": 2487,
											"name": "DUP10",
											"source": 32
										},
										{
											"begin": 2474,
											"end": 2496,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2446,
											"end": 2506,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "233"
										},
										{
											"begin": 2446,
											"end": 2506,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 2446,
											"end": 2506,
											"name": "tag",
											"source": 32,
											"value": "258"
										},
										{
											"begin": 2446,
											"end": 2506,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 1926,
											"end": 2566,
											"name": "SWAP7",
											"source": 32
										},
										{
											"begin": 1926,
											"end": 2566,
											"name": "SWAP10",
											"source": 32
										},
										{
											"begin": 1926,
											"end": 2566,
											"name": "SWAP6",
											"source": 32
										},
										{
											"begin": 1926,
											"end": 2566,
											"name": "SWAP9",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1926,
											"end": 2566,
											"name": "SWAP4",
											"source": 32
										},
										{
											"begin": 1926,
											"end": 2566,
											"name": "SWAP7",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2525,
											"end": 2533,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": 2525,
											"end": 2533,
											"name": "SWAP5",
											"source": 32
										},
										{
											"begin": 2420,
											"end": 2506,
											"name": "SWAP4",
											"source": 32
										},
										{
											"begin": 1926,
											"end": 2566,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1926,
											"end": 2566,
											"name": "JUMP",
											"source": 32,
											"value": "[out]"
										},
										{
											"begin": 2571,
											"end": 2785,
											"name": "tag",
											"source": 32,
											"value": "108"
										},
										{
											"begin": 2571,
											"end": 2785,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 2571,
											"end": 2785,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 2691,
											"end": 2693,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 2679,
											"end": 2688,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 2670,
											"end": 2677,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 2666,
											"end": 2689,
											"name": "SUB",
											"source": 32
										},
										{
											"begin": 2662,
											"end": 2694,
											"name": "SLT",
											"source": 32
										},
										{
											"begin": 2659,
											"end": 2661,
											"name": "ISZERO",
											"source": 32
										},
										{
											"begin": 2659,
											"end": 2661,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "260"
										},
										{
											"begin": 2659,
											"end": 2661,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 2712,
											"end": 2718,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 2704,
											"end": 2710,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 2697,
											"end": 2719,
											"name": "REVERT",
											"source": 32
										},
										{
											"begin": 2659,
											"end": 2661,
											"name": "tag",
											"source": 32,
											"value": "260"
										},
										{
											"begin": 2659,
											"end": 2661,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 2740,
											"end": 2779,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "249"
										},
										{
											"begin": 2769,
											"end": 2778,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 2740,
											"end": 2779,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "230"
										},
										{
											"begin": 2740,
											"end": 2779,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 2790,
											"end": 3006,
											"name": "tag",
											"source": 32,
											"value": "154"
										},
										{
											"begin": 2790,
											"end": 3006,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 2790,
											"end": 3006,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 2911,
											"end": 2913,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 2899,
											"end": 2908,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 2890,
											"end": 2897,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 2886,
											"end": 2909,
											"name": "SUB",
											"source": 32
										},
										{
											"begin": 2882,
											"end": 2914,
											"name": "SLT",
											"source": 32
										},
										{
											"begin": 2879,
											"end": 2881,
											"name": "ISZERO",
											"source": 32
										},
										{
											"begin": 2879,
											"end": 2881,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "263"
										},
										{
											"begin": 2879,
											"end": 2881,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 2932,
											"end": 2938,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 2924,
											"end": 2930,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 2917,
											"end": 2939,
											"name": "REVERT",
											"source": 32
										},
										{
											"begin": 2879,
											"end": 2881,
											"name": "tag",
											"source": 32,
											"value": "263"
										},
										{
											"begin": 2879,
											"end": 2881,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 2960,
											"end": 3000,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "249"
										},
										{
											"begin": 2990,
											"end": 2999,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 2960,
											"end": 3000,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "238"
										},
										{
											"begin": 2960,
											"end": 3000,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 3011,
											"end": 3264,
											"name": "tag",
											"source": 32,
											"value": "177"
										},
										{
											"begin": 3011,
											"end": 3264,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 3011,
											"end": 3264,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 3011,
											"end": 3264,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 3149,
											"end": 3151,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 3137,
											"end": 3146,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 3128,
											"end": 3135,
											"name": "DUP6",
											"source": 32
										},
										{
											"begin": 3124,
											"end": 3147,
											"name": "SUB",
											"source": 32
										},
										{
											"begin": 3120,
											"end": 3152,
											"name": "SLT",
											"source": 32
										},
										{
											"begin": 3117,
											"end": 3119,
											"name": "ISZERO",
											"source": 32
										},
										{
											"begin": 3117,
											"end": 3119,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "266"
										},
										{
											"begin": 3117,
											"end": 3119,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 3170,
											"end": 3176,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 3162,
											"end": 3168,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 3155,
											"end": 3177,
											"name": "REVERT",
											"source": 32
										},
										{
											"begin": 3117,
											"end": 3119,
											"name": "tag",
											"source": 32,
											"value": "266"
										},
										{
											"begin": 3117,
											"end": 3119,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3198,
											"end": 3214,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 3198,
											"end": 3214,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 3254,
											"end": 3256,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 3239,
											"end": 3257,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 3239,
											"end": 3257,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 3239,
											"end": 3257,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 3233,
											"end": 3258,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 3198,
											"end": 3214,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 3198,
											"end": 3214,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": 3233,
											"end": 3258,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 3233,
											"end": 3258,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3107,
											"end": 3264,
											"name": "JUMP",
											"source": 32,
											"value": "[out]"
										},
										{
											"begin": 3269,
											"end": 3834,
											"name": "tag",
											"source": 32,
											"value": "86"
										},
										{
											"begin": 3269,
											"end": 3834,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 3269,
											"end": 3834,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 3269,
											"end": 3834,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 3269,
											"end": 3834,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 3269,
											"end": 3834,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 3432,
											"end": 3434,
											"name": "PUSH",
											"source": 32,
											"value": "60"
										},
										{
											"begin": 3420,
											"end": 3429,
											"name": "DUP6",
											"source": 32
										},
										{
											"begin": 3411,
											"end": 3418,
											"name": "DUP8",
											"source": 32
										},
										{
											"begin": 3407,
											"end": 3430,
											"name": "SUB",
											"source": 32
										},
										{
											"begin": 3403,
											"end": 3435,
											"name": "SLT",
											"source": 32
										},
										{
											"begin": 3400,
											"end": 3402,
											"name": "ISZERO",
											"source": 32
										},
										{
											"begin": 3400,
											"end": 3402,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "268"
										},
										{
											"begin": 3400,
											"end": 3402,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 3453,
											"end": 3459,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 3445,
											"end": 3451,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 3438,
											"end": 3460,
											"name": "REVERT",
											"source": 32
										},
										{
											"begin": 3400,
											"end": 3402,
											"name": "tag",
											"source": 32,
											"value": "268"
										},
										{
											"begin": 3400,
											"end": 3402,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 3494,
											"end": 3503,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 3481,
											"end": 3504,
											"name": "CALLDATALOAD",
											"source": 32
										},
										{
											"begin": 3471,
											"end": 3504,
											"name": "SWAP4",
											"source": 32
										},
										{
											"begin": 3471,
											"end": 3504,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 3551,
											"end": 3553,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 3540,
											"end": 3549,
											"name": "DUP6",
											"source": 32
										},
										{
											"begin": 3536,
											"end": 3554,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 3523,
											"end": 3555,
											"name": "CALLDATALOAD",
											"source": 32
										},
										{
											"begin": 3513,
											"end": 3555,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": 3513,
											"end": 3555,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 3606,
											"end": 3608,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 3595,
											"end": 3604,
											"name": "DUP6",
											"source": 32
										},
										{
											"begin": 3591,
											"end": 3609,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 3578,
											"end": 3610,
											"name": "CALLDATALOAD",
											"source": 32
										},
										{
											"begin": 3633,
											"end": 3651,
											"name": "PUSH",
											"source": 32,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3625,
											"end": 3631,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 3622,
											"end": 3652,
											"name": "GT",
											"source": 32
										},
										{
											"begin": 3619,
											"end": 3621,
											"name": "ISZERO",
											"source": 32
										},
										{
											"begin": 3619,
											"end": 3621,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "269"
										},
										{
											"begin": 3619,
											"end": 3621,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 3670,
											"end": 3676,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 3662,
											"end": 3668,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 3655,
											"end": 3677,
											"name": "REVERT",
											"source": 32
										},
										{
											"begin": 3619,
											"end": 3621,
											"name": "tag",
											"source": 32,
											"value": "269"
										},
										{
											"begin": 3619,
											"end": 3621,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 3714,
											"end": 3774,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "270"
										},
										{
											"begin": 3766,
											"end": 3773,
											"name": "DUP8",
											"source": 32
										},
										{
											"begin": 3757,
											"end": 3763,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 3746,
											"end": 3755,
											"name": "DUP9",
											"source": 32
										},
										{
											"begin": 3742,
											"end": 3764,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 3714,
											"end": 3774,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "233"
										},
										{
											"begin": 3714,
											"end": 3774,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 3714,
											"end": 3774,
											"name": "tag",
											"source": 32,
											"value": "270"
										},
										{
											"begin": 3714,
											"end": 3774,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 3390,
											"end": 3834,
											"name": "SWAP6",
											"source": 32
										},
										{
											"begin": 3390,
											"end": 3834,
											"name": "SWAP9",
											"source": 32
										},
										{
											"begin": 3390,
											"end": 3834,
											"name": "SWAP5",
											"source": 32
										},
										{
											"begin": 3390,
											"end": 3834,
											"name": "SWAP8",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3793,
											"end": 3801,
											"name": "SWAP6",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3390,
											"end": 3834,
											"name": "JUMP",
											"source": 32,
											"value": "[out]"
										},
										{
											"begin": 3839,
											"end": 4524,
											"name": "tag",
											"source": 32,
											"value": "124"
										},
										{
											"begin": 3839,
											"end": 4524,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 3839,
											"end": 4524,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 3839,
											"end": 4524,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 3839,
											"end": 4524,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 3839,
											"end": 4524,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 3839,
											"end": 4524,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 3839,
											"end": 4524,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 4039,
											"end": 4042,
											"name": "PUSH",
											"source": 32,
											"value": "C0"
										},
										{
											"begin": 4027,
											"end": 4036,
											"name": "DUP8",
											"source": 32
										},
										{
											"begin": 4018,
											"end": 4025,
											"name": "DUP10",
											"source": 32
										},
										{
											"begin": 4014,
											"end": 4037,
											"name": "SUB",
											"source": 32
										},
										{
											"begin": 4010,
											"end": 4043,
											"name": "SLT",
											"source": 32
										},
										{
											"begin": 4007,
											"end": 4009,
											"name": "ISZERO",
											"source": 32
										},
										{
											"begin": 4007,
											"end": 4009,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "272"
										},
										{
											"begin": 4007,
											"end": 4009,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 4061,
											"end": 4067,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 4053,
											"end": 4059,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 4046,
											"end": 4068,
											"name": "REVERT",
											"source": 32
										},
										{
											"begin": 4007,
											"end": 4009,
											"name": "tag",
											"source": 32,
											"value": "272"
										},
										{
											"begin": 4007,
											"end": 4009,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 4098,
											"end": 4107,
											"name": "DUP7",
											"source": 32
										},
										{
											"begin": 4092,
											"end": 4108,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 4117,
											"end": 4150,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "273"
										},
										{
											"begin": 4144,
											"end": 4149,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 4117,
											"end": 4150,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "229"
										},
										{
											"begin": 4117,
											"end": 4150,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 4117,
											"end": 4150,
											"name": "tag",
											"source": 32,
											"value": "273"
										},
										{
											"begin": 4117,
											"end": 4150,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 4169,
											"end": 4174,
											"name": "SWAP6",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4193,
											"end": 4242,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "274"
										},
										{
											"begin": 4238,
											"end": 4240,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 4223,
											"end": 4241,
											"name": "DUP9",
											"source": 32
										},
										{
											"begin": 4223,
											"end": 4241,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 4193,
											"end": 4242,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "238"
										},
										{
											"begin": 4193,
											"end": 4242,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 4193,
											"end": 4242,
											"name": "tag",
											"source": 32,
											"value": "274"
										},
										{
											"begin": 4193,
											"end": 4242,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 4183,
											"end": 4242,
											"name": "SWAP5",
											"source": 32
										},
										{
											"begin": 4183,
											"end": 4242,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 4261,
											"end": 4311,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "275"
										},
										{
											"begin": 4307,
											"end": 4309,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 4296,
											"end": 4305,
											"name": "DUP9",
											"source": 32
										},
										{
											"begin": 4292,
											"end": 4310,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 4261,
											"end": 4311,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "244"
										},
										{
											"begin": 4261,
											"end": 4311,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 4261,
											"end": 4311,
											"name": "tag",
											"source": 32,
											"value": "275"
										},
										{
											"begin": 4261,
											"end": 4311,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 4251,
											"end": 4311,
											"name": "SWAP4",
											"source": 32
										},
										{
											"begin": 4251,
											"end": 4311,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 4330,
											"end": 4380,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "276"
										},
										{
											"begin": 4376,
											"end": 4378,
											"name": "PUSH",
											"source": 32,
											"value": "60"
										},
										{
											"begin": 4365,
											"end": 4374,
											"name": "DUP9",
											"source": 32
										},
										{
											"begin": 4361,
											"end": 4379,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 4330,
											"end": 4380,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "244"
										},
										{
											"begin": 4330,
											"end": 4380,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 4330,
											"end": 4380,
											"name": "tag",
											"source": 32,
											"value": "276"
										},
										{
											"begin": 4330,
											"end": 4380,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 4320,
											"end": 4380,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": 4320,
											"end": 4380,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 4399,
											"end": 4450,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "277"
										},
										{
											"begin": 4445,
											"end": 4448,
											"name": "PUSH",
											"source": 32,
											"value": "80"
										},
										{
											"begin": 4434,
											"end": 4443,
											"name": "DUP9",
											"source": 32
										},
										{
											"begin": 4430,
											"end": 4449,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 4399,
											"end": 4450,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "244"
										},
										{
											"begin": 4399,
											"end": 4450,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 4399,
											"end": 4450,
											"name": "tag",
											"source": 32,
											"value": "277"
										},
										{
											"begin": 4399,
											"end": 4450,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 4389,
											"end": 4450,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 4389,
											"end": 4450,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 4469,
											"end": 4518,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "278"
										},
										{
											"begin": 4513,
											"end": 4516,
											"name": "PUSH",
											"source": 32,
											"value": "A0"
										},
										{
											"begin": 4502,
											"end": 4511,
											"name": "DUP9",
											"source": 32
										},
										{
											"begin": 4498,
											"end": 4517,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 4469,
											"end": 4518,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "230"
										},
										{
											"begin": 4469,
											"end": 4518,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 4469,
											"end": 4518,
											"name": "tag",
											"source": 32,
											"value": "278"
										},
										{
											"begin": 4469,
											"end": 4518,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 4459,
											"end": 4518,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 4459,
											"end": 4518,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 3997,
											"end": 4524,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": 3997,
											"end": 4524,
											"name": "SWAP6",
											"source": 32
										},
										{
											"begin": 3997,
											"end": 4524,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 3997,
											"end": 4524,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": 3997,
											"end": 4524,
											"name": "SWAP6",
											"source": 32
										},
										{
											"begin": 3997,
											"end": 4524,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 3997,
											"end": 4524,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": 3997,
											"end": 4524,
											"name": "SWAP6",
											"source": 32
										},
										{
											"begin": 3997,
											"end": 4524,
											"name": "JUMP",
											"source": 32,
											"value": "[out]"
										},
										{
											"begin": 4529,
											"end": 4719,
											"name": "tag",
											"source": 32,
											"value": "50"
										},
										{
											"begin": 4529,
											"end": 4719,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 4529,
											"end": 4719,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 4641,
											"end": 4643,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 4629,
											"end": 4638,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 4620,
											"end": 4627,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 4616,
											"end": 4639,
											"name": "SUB",
											"source": 32
										},
										{
											"begin": 4612,
											"end": 4644,
											"name": "SLT",
											"source": 32
										},
										{
											"begin": 4609,
											"end": 4611,
											"name": "ISZERO",
											"source": 32
										},
										{
											"begin": 4609,
											"end": 4611,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "280"
										},
										{
											"begin": 4609,
											"end": 4611,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 4662,
											"end": 4668,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 4654,
											"end": 4660,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 4647,
											"end": 4669,
											"name": "REVERT",
											"source": 32
										},
										{
											"begin": 4609,
											"end": 4611,
											"name": "tag",
											"source": 32,
											"value": "280"
										},
										{
											"begin": 4609,
											"end": 4611,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4690,
											"end": 4713,
											"name": "CALLDATALOAD",
											"source": 32
										},
										{
											"begin": 4690,
											"end": 4713,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 4599,
											"end": 4719,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4599,
											"end": 4719,
											"name": "JUMP",
											"source": 32,
											"value": "[out]"
										},
										{
											"begin": 4724,
											"end": 4918,
											"name": "tag",
											"source": 32,
											"value": "101"
										},
										{
											"begin": 4724,
											"end": 4918,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 4724,
											"end": 4918,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 4847,
											"end": 4849,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 4835,
											"end": 4844,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 4826,
											"end": 4833,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 4822,
											"end": 4845,
											"name": "SUB",
											"source": 32
										},
										{
											"begin": 4818,
											"end": 4850,
											"name": "SLT",
											"source": 32
										},
										{
											"begin": 4815,
											"end": 4817,
											"name": "ISZERO",
											"source": 32
										},
										{
											"begin": 4815,
											"end": 4817,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "282"
										},
										{
											"begin": 4815,
											"end": 4817,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 4868,
											"end": 4874,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 4860,
											"end": 4866,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 4853,
											"end": 4875,
											"name": "REVERT",
											"source": 32
										},
										{
											"begin": 4815,
											"end": 4817,
											"name": "tag",
											"source": 32,
											"value": "282"
										},
										{
											"begin": 4815,
											"end": 4817,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4896,
											"end": 4912,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 4896,
											"end": 4912,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 4805,
											"end": 4918,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4805,
											"end": 4918,
											"name": "JUMP",
											"source": 32,
											"value": "[out]"
										},
										{
											"begin": 4923,
											"end": 5327,
											"name": "tag",
											"source": 32,
											"value": "131"
										},
										{
											"begin": 4923,
											"end": 5327,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 4923,
											"end": 5327,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 4923,
											"end": 5327,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 4923,
											"end": 5327,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 4923,
											"end": 5327,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 5097,
											"end": 5100,
											"name": "PUSH",
											"source": 32,
											"value": "80"
										},
										{
											"begin": 5085,
											"end": 5094,
											"name": "DUP6",
											"source": 32
										},
										{
											"begin": 5076,
											"end": 5083,
											"name": "DUP8",
											"source": 32
										},
										{
											"begin": 5072,
											"end": 5095,
											"name": "SUB",
											"source": 32
										},
										{
											"begin": 5068,
											"end": 5101,
											"name": "SLT",
											"source": 32
										},
										{
											"begin": 5065,
											"end": 5067,
											"name": "ISZERO",
											"source": 32
										},
										{
											"begin": 5065,
											"end": 5067,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "284"
										},
										{
											"begin": 5065,
											"end": 5067,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 5119,
											"end": 5125,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 5111,
											"end": 5117,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 5104,
											"end": 5126,
											"name": "REVERT",
											"source": 32
										},
										{
											"begin": 5065,
											"end": 5067,
											"name": "tag",
											"source": 32,
											"value": "284"
										},
										{
											"begin": 5065,
											"end": 5067,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 5153,
											"end": 5162,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 5147,
											"end": 5163,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 5137,
											"end": 5163,
											"name": "SWAP4",
											"source": 32
										},
										{
											"begin": 5137,
											"end": 5163,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 5182,
											"end": 5233,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "285"
										},
										{
											"begin": 5229,
											"end": 5231,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 5218,
											"end": 5227,
											"name": "DUP7",
											"source": 32
										},
										{
											"begin": 5214,
											"end": 5232,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 5182,
											"end": 5233,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "241"
										},
										{
											"begin": 5182,
											"end": 5233,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 5182,
											"end": 5233,
											"name": "tag",
											"source": 32,
											"value": "285"
										},
										{
											"begin": 5182,
											"end": 5233,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 5273,
											"end": 5275,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 5258,
											"end": 5276,
											"name": "DUP7",
											"source": 32
										},
										{
											"begin": 5258,
											"end": 5276,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 5252,
											"end": 5277,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 5317,
											"end": 5319,
											"name": "PUSH",
											"source": 32,
											"value": "60"
										},
										{
											"begin": 5302,
											"end": 5320,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 5302,
											"end": 5320,
											"name": "SWAP7",
											"source": 32
										},
										{
											"begin": 5302,
											"end": 5320,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 5296,
											"end": 5321,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 5055,
											"end": 5327,
											"name": "SWAP5",
											"source": 32
										},
										{
											"begin": 5055,
											"end": 5327,
											"name": "SWAP8",
											"source": 32
										},
										{
											"begin": 5172,
											"end": 5233,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 5172,
											"end": 5233,
											"name": "SWAP7",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5055,
											"end": 5327,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5055,
											"end": 5327,
											"name": "JUMP",
											"source": 32,
											"value": "[out]"
										},
										{
											"begin": 5332,
											"end": 5590,
											"name": "tag",
											"source": 32,
											"value": "43"
										},
										{
											"begin": 5332,
											"end": 5590,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 5332,
											"end": 5590,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 5332,
											"end": 5590,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 5461,
											"end": 5463,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 5449,
											"end": 5458,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 5440,
											"end": 5447,
											"name": "DUP6",
											"source": 32
										},
										{
											"begin": 5436,
											"end": 5459,
											"name": "SUB",
											"source": 32
										},
										{
											"begin": 5432,
											"end": 5464,
											"name": "SLT",
											"source": 32
										},
										{
											"begin": 5429,
											"end": 5431,
											"name": "ISZERO",
											"source": 32
										},
										{
											"begin": 5429,
											"end": 5431,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "287"
										},
										{
											"begin": 5429,
											"end": 5431,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 5482,
											"end": 5488,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 5474,
											"end": 5480,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 5467,
											"end": 5489,
											"name": "REVERT",
											"source": 32
										},
										{
											"begin": 5429,
											"end": 5431,
											"name": "tag",
											"source": 32,
											"value": "287"
										},
										{
											"begin": 5429,
											"end": 5431,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5510,
											"end": 5533,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 5510,
											"end": 5533,
											"name": "CALLDATALOAD",
											"source": 32
										},
										{
											"begin": 5510,
											"end": 5533,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": 5580,
											"end": 5582,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 5565,
											"end": 5583,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 5565,
											"end": 5583,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 5565,
											"end": 5583,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 5552,
											"end": 5584,
											"name": "CALLDATALOAD",
											"source": 32
										},
										{
											"begin": 5552,
											"end": 5584,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5419,
											"end": 5590,
											"name": "JUMP",
											"source": 32,
											"value": "[out]"
										},
										{
											"begin": 5595,
											"end": 6817,
											"name": "tag",
											"source": 32,
											"value": "224"
										},
										{
											"begin": 5595,
											"end": 6817,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 5595,
											"end": 6817,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 5595,
											"end": 6817,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 5595,
											"end": 6817,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 5595,
											"end": 6817,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 5595,
											"end": 6817,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 5595,
											"end": 6817,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 5595,
											"end": 6817,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 5595,
											"end": 6817,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 5595,
											"end": 6817,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 5595,
											"end": 6817,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 5595,
											"end": 6817,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 5595,
											"end": 6817,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 5900,
											"end": 5903,
											"name": "PUSH",
											"source": 32,
											"value": "180"
										},
										{
											"begin": 5888,
											"end": 5897,
											"name": "DUP14",
											"source": 32
										},
										{
											"begin": 5879,
											"end": 5886,
											"name": "DUP16",
											"source": 32
										},
										{
											"begin": 5875,
											"end": 5898,
											"name": "SUB",
											"source": 32
										},
										{
											"begin": 5871,
											"end": 5904,
											"name": "SLT",
											"source": 32
										},
										{
											"begin": 5868,
											"end": 5870,
											"name": "ISZERO",
											"source": 32
										},
										{
											"begin": 5868,
											"end": 5870,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "289"
										},
										{
											"begin": 5868,
											"end": 5870,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 5922,
											"end": 5928,
											"name": "DUP10",
											"source": 32
										},
										{
											"begin": 5914,
											"end": 5920,
											"name": "DUP11",
											"source": 32
										},
										{
											"begin": 5907,
											"end": 5929,
											"name": "REVERT",
											"source": 32
										},
										{
											"begin": 5868,
											"end": 5870,
											"name": "tag",
											"source": 32,
											"value": "289"
										},
										{
											"begin": 5868,
											"end": 5870,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 5959,
											"end": 5968,
											"name": "DUP13",
											"source": 32
										},
										{
											"begin": 5953,
											"end": 5969,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 6009,
											"end": 6035,
											"name": "PUSH",
											"source": 32,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6002,
											"end": 6007,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 5998,
											"end": 6036,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 5991,
											"end": 5996,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 5988,
											"end": 6037,
											"name": "EQ",
											"source": 32
										},
										{
											"begin": 5978,
											"end": 5980,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "290"
										},
										{
											"begin": 5978,
											"end": 5980,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 6056,
											"end": 6062,
											"name": "DUP11",
											"source": 32
										},
										{
											"begin": 6048,
											"end": 6054,
											"name": "DUP12",
											"source": 32
										},
										{
											"begin": 6041,
											"end": 6063,
											"name": "REVERT",
											"source": 32
										},
										{
											"begin": 5978,
											"end": 5980,
											"name": "tag",
											"source": 32,
											"value": "290"
										},
										{
											"begin": 5978,
											"end": 5980,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 6084,
											"end": 6089,
											"name": "SWAP12",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6108,
											"end": 6159,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "291"
										},
										{
											"begin": 6155,
											"end": 6157,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 6140,
											"end": 6158,
											"name": "DUP15",
											"source": 32
										},
										{
											"begin": 6140,
											"end": 6158,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 6108,
											"end": 6159,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "226"
										},
										{
											"begin": 6108,
											"end": 6159,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 6108,
											"end": 6159,
											"name": "tag",
											"source": 32,
											"value": "291"
										},
										{
											"begin": 6108,
											"end": 6159,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 6098,
											"end": 6159,
											"name": "SWAP11",
											"source": 32
										},
										{
											"begin": 6098,
											"end": 6159,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 6178,
											"end": 6229,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "292"
										},
										{
											"begin": 6225,
											"end": 6227,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 6214,
											"end": 6223,
											"name": "DUP15",
											"source": 32
										},
										{
											"begin": 6210,
											"end": 6228,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 6178,
											"end": 6229,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "226"
										},
										{
											"begin": 6178,
											"end": 6229,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 6178,
											"end": 6229,
											"name": "tag",
											"source": 32,
											"value": "292"
										},
										{
											"begin": 6178,
											"end": 6229,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 6168,
											"end": 6229,
											"name": "SWAP10",
											"source": 32
										},
										{
											"begin": 6168,
											"end": 6229,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 6248,
											"end": 6299,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "293"
										},
										{
											"begin": 6295,
											"end": 6297,
											"name": "PUSH",
											"source": 32,
											"value": "60"
										},
										{
											"begin": 6284,
											"end": 6293,
											"name": "DUP15",
											"source": 32
										},
										{
											"begin": 6280,
											"end": 6298,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 6248,
											"end": 6299,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "226"
										},
										{
											"begin": 6248,
											"end": 6299,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 6248,
											"end": 6299,
											"name": "tag",
											"source": 32,
											"value": "293"
										},
										{
											"begin": 6248,
											"end": 6299,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 6238,
											"end": 6299,
											"name": "SWAP9",
											"source": 32
										},
										{
											"begin": 6238,
											"end": 6299,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 6318,
											"end": 6368,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "294"
										},
										{
											"begin": 6363,
											"end": 6366,
											"name": "PUSH",
											"source": 32,
											"value": "80"
										},
										{
											"begin": 6352,
											"end": 6361,
											"name": "DUP15",
											"source": 32
										},
										{
											"begin": 6348,
											"end": 6367,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 6318,
											"end": 6368,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "238"
										},
										{
											"begin": 6318,
											"end": 6368,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 6318,
											"end": 6368,
											"name": "tag",
											"source": 32,
											"value": "294"
										},
										{
											"begin": 6318,
											"end": 6368,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 6308,
											"end": 6368,
											"name": "SWAP8",
											"source": 32
										},
										{
											"begin": 6308,
											"end": 6368,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 6387,
											"end": 6437,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "295"
										},
										{
											"begin": 6432,
											"end": 6435,
											"name": "PUSH",
											"source": 32,
											"value": "A0"
										},
										{
											"begin": 6421,
											"end": 6430,
											"name": "DUP15",
											"source": 32
										},
										{
											"begin": 6417,
											"end": 6436,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 6387,
											"end": 6437,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "238"
										},
										{
											"begin": 6387,
											"end": 6437,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 6387,
											"end": 6437,
											"name": "tag",
											"source": 32,
											"value": "295"
										},
										{
											"begin": 6387,
											"end": 6437,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 6377,
											"end": 6437,
											"name": "SWAP7",
											"source": 32
										},
										{
											"begin": 6377,
											"end": 6437,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 6456,
											"end": 6506,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "296"
										},
										{
											"begin": 6501,
											"end": 6504,
											"name": "PUSH",
											"source": 32,
											"value": "C0"
										},
										{
											"begin": 6490,
											"end": 6499,
											"name": "DUP15",
											"source": 32
										},
										{
											"begin": 6486,
											"end": 6505,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 6456,
											"end": 6506,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "238"
										},
										{
											"begin": 6456,
											"end": 6506,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 6456,
											"end": 6506,
											"name": "tag",
											"source": 32,
											"value": "296"
										},
										{
											"begin": 6456,
											"end": 6506,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 6446,
											"end": 6506,
											"name": "SWAP6",
											"source": 32
										},
										{
											"begin": 6446,
											"end": 6506,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 6525,
											"end": 6577,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "297"
										},
										{
											"begin": 6572,
											"end": 6575,
											"name": "PUSH",
											"source": 32,
											"value": "E0"
										},
										{
											"begin": 6561,
											"end": 6570,
											"name": "DUP15",
											"source": 32
										},
										{
											"begin": 6557,
											"end": 6576,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 6525,
											"end": 6577,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "241"
										},
										{
											"begin": 6525,
											"end": 6577,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 6525,
											"end": 6577,
											"name": "tag",
											"source": 32,
											"value": "297"
										},
										{
											"begin": 6525,
											"end": 6577,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 6515,
											"end": 6577,
											"name": "SWAP5",
											"source": 32
										},
										{
											"begin": 6515,
											"end": 6577,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 6617,
											"end": 6620,
											"name": "PUSH",
											"source": 32,
											"value": "100"
										},
										{
											"begin": 6606,
											"end": 6615,
											"name": "DUP14",
											"source": 32
										},
										{
											"begin": 6602,
											"end": 6621,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 6596,
											"end": 6622,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 6586,
											"end": 6622,
											"name": "SWAP4",
											"source": 32
										},
										{
											"begin": 6586,
											"end": 6622,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 6662,
											"end": 6665,
											"name": "PUSH",
											"source": 32,
											"value": "120"
										},
										{
											"begin": 6651,
											"end": 6660,
											"name": "DUP14",
											"source": 32
										},
										{
											"begin": 6647,
											"end": 6666,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 6641,
											"end": 6667,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 6631,
											"end": 6667,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": 6631,
											"end": 6667,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 6687,
											"end": 6739,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "298"
										},
										{
											"begin": 6734,
											"end": 6737,
											"name": "PUSH",
											"source": 32,
											"value": "140"
										},
										{
											"begin": 6723,
											"end": 6732,
											"name": "DUP15",
											"source": 32
										},
										{
											"begin": 6719,
											"end": 6738,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 6687,
											"end": 6739,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "241"
										},
										{
											"begin": 6687,
											"end": 6739,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 6687,
											"end": 6739,
											"name": "tag",
											"source": 32,
											"value": "298"
										},
										{
											"begin": 6687,
											"end": 6739,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 6676,
											"end": 6739,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 6676,
											"end": 6739,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 6759,
											"end": 6811,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "299"
										},
										{
											"begin": 6806,
											"end": 6809,
											"name": "PUSH",
											"source": 32,
											"value": "160"
										},
										{
											"begin": 6795,
											"end": 6804,
											"name": "DUP15",
											"source": 32
										},
										{
											"begin": 6791,
											"end": 6810,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 6759,
											"end": 6811,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "241"
										},
										{
											"begin": 6759,
											"end": 6811,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 6759,
											"end": 6811,
											"name": "tag",
											"source": 32,
											"value": "299"
										},
										{
											"begin": 6759,
											"end": 6811,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 6748,
											"end": 6811,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 6748,
											"end": 6811,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 5858,
											"end": 6817,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": 5858,
											"end": 6817,
											"name": "SWAP6",
											"source": 32
										},
										{
											"begin": 5858,
											"end": 6817,
											"name": "SWAP9",
											"source": 32
										},
										{
											"begin": 5858,
											"end": 6817,
											"name": "SWAP12",
											"source": 32
										},
										{
											"begin": 5858,
											"end": 6817,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 5858,
											"end": 6817,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": 5858,
											"end": 6817,
											"name": "SWAP6",
											"source": 32
										},
										{
											"begin": 5858,
											"end": 6817,
											"name": "SWAP9",
											"source": 32
										},
										{
											"begin": 5858,
											"end": 6817,
											"name": "SWAP12",
											"source": 32
										},
										{
											"begin": 5858,
											"end": 6817,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 5858,
											"end": 6817,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": 5858,
											"end": 6817,
											"name": "SWAP6",
											"source": 32
										},
										{
											"begin": 5858,
											"end": 6817,
											"name": "SWAP9",
											"source": 32
										},
										{
											"begin": 5858,
											"end": 6817,
											"name": "SWAP12",
											"source": 32
										},
										{
											"begin": 5858,
											"end": 6817,
											"name": "JUMP",
											"source": 32,
											"value": "[out]"
										},
										{
											"begin": 6822,
											"end": 6928,
											"name": "tag",
											"source": 32,
											"value": "300"
										},
										{
											"begin": 6822,
											"end": 6928,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6890,
											"end": 6921,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 6878,
											"end": 6922,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 6878,
											"end": 6922,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 6868,
											"end": 6928,
											"name": "JUMP",
											"source": 32,
											"value": "[out]"
										},
										{
											"begin": 6933,
											"end": 7026,
											"name": "tag",
											"source": 32,
											"value": "302"
										},
										{
											"begin": 6933,
											"end": 7026,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 7010,
											"end": 7011,
											"name": "PUSH",
											"source": 32,
											"value": "2"
										},
										{
											"begin": 6999,
											"end": 7019,
											"name": "SIGNEXTEND",
											"source": 32
										},
										{
											"begin": 6987,
											"end": 7020,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 6987,
											"end": 7020,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 6977,
											"end": 7026,
											"name": "JUMP",
											"source": 32,
											"value": "[out]"
										},
										{
											"begin": 7031,
											"end": 7234,
											"name": "tag",
											"source": 32,
											"value": "24"
										},
										{
											"begin": 7031,
											"end": 7234,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7195,
											"end": 7227,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 7195,
											"end": 7227,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 7195,
											"end": 7227,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 7195,
											"end": 7227,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 7177,
											"end": 7228,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 7177,
											"end": 7228,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 7165,
											"end": 7167,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 7150,
											"end": 7168,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 7150,
											"end": 7168,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 7132,
											"end": 7234,
											"name": "JUMP",
											"source": 32,
											"value": "[out]"
										},
										{
											"begin": 7239,
											"end": 8194,
											"name": "tag",
											"source": 32,
											"value": "172"
										},
										{
											"begin": 7239,
											"end": 8194,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 7239,
											"end": 8194,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 7499,
											"end": 7500,
											"name": "PUSH",
											"source": 32,
											"value": "1"
										},
										{
											"begin": 7495,
											"end": 7496,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 7490,
											"end": 7493,
											"name": "PUSH",
											"source": 32,
											"value": "A0"
										},
										{
											"begin": 7486,
											"end": 7497,
											"name": "SHL",
											"source": 32
										},
										{
											"begin": 7482,
											"end": 7501,
											"name": "SUB",
											"source": 32
										},
										{
											"begin": 7540,
											"end": 7542,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 7532,
											"end": 7538,
											"name": "DUP9",
											"source": 32
										},
										{
											"begin": 7528,
											"end": 7543,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 7517,
											"end": 7526,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 7510,
											"end": 7544,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 7563,
											"end": 7565,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 7615,
											"end": 7621,
											"name": "DUP8",
											"source": 32
										},
										{
											"begin": 7608,
											"end": 7622,
											"name": "ISZERO",
											"source": 32
										},
										{
											"begin": 7601,
											"end": 7623,
											"name": "ISZERO",
											"source": 32
										},
										{
											"begin": 7596,
											"end": 7598,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 7585,
											"end": 7594,
											"name": "DUP6",
											"source": 32
										},
										{
											"begin": 7581,
											"end": 7599,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 7574,
											"end": 7624,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 7660,
											"end": 7666,
											"name": "DUP7",
											"source": 32
										},
										{
											"begin": 7655,
											"end": 7657,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 7644,
											"end": 7653,
											"name": "DUP6",
											"source": 32
										},
										{
											"begin": 7640,
											"end": 7658,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 7633,
											"end": 7667,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 7715,
											"end": 7717,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 7707,
											"end": 7713,
											"name": "DUP7",
											"source": 32
										},
										{
											"begin": 7703,
											"end": 7718,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 7698,
											"end": 7700,
											"name": "PUSH",
											"source": 32,
											"value": "60"
										},
										{
											"begin": 7687,
											"end": 7696,
											"name": "DUP6",
											"source": 32
										},
										{
											"begin": 7683,
											"end": 7701,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 7676,
											"end": 7719,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 7756,
											"end": 7759,
											"name": "PUSH",
											"source": 32,
											"value": "A0"
										},
										{
											"begin": 7750,
											"end": 7753,
											"name": "PUSH",
											"source": 32,
											"value": "80"
										},
										{
											"begin": 7739,
											"end": 7748,
											"name": "DUP6",
											"source": 32
										},
										{
											"begin": 7735,
											"end": 7754,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 7728,
											"end": 7760,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 7789,
											"end": 7795,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 7783,
											"end": 7796,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 7769,
											"end": 7796,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 7769,
											"end": 7796,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 7833,
											"end": 7839,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 7827,
											"end": 7830,
											"name": "PUSH",
											"source": 32,
											"value": "A0"
										},
										{
											"begin": 7816,
											"end": 7825,
											"name": "DUP6",
											"source": 32
										},
										{
											"begin": 7812,
											"end": 7831,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 7805,
											"end": 7840,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 7858,
											"end": 7862,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 7871,
											"end": 8012,
											"name": "tag",
											"source": 32,
											"value": "306"
										},
										{
											"begin": 7871,
											"end": 8012,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 7885,
											"end": 7891,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 7882,
											"end": 7883,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 7879,
											"end": 7892,
											"name": "LT",
											"source": 32
										},
										{
											"begin": 7871,
											"end": 8012,
											"name": "ISZERO",
											"source": 32
										},
										{
											"begin": 7871,
											"end": 8012,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "308"
										},
										{
											"begin": 7871,
											"end": 8012,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 7981,
											"end": 7995,
											"name": "DUP6",
											"source": 32
										},
										{
											"begin": 7981,
											"end": 7995,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 7981,
											"end": 7995,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 7977,
											"end": 8000,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 7977,
											"end": 8000,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 7971,
											"end": 8001,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 7946,
											"end": 7963,
											"name": "DUP6",
											"source": 32
										},
										{
											"begin": 7946,
											"end": 7963,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 7946,
											"end": 7963,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 7965,
											"end": 7968,
											"name": "PUSH",
											"source": 32,
											"value": "C0"
										},
										{
											"begin": 7942,
											"end": 7969,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 7935,
											"end": 8002,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 7900,
											"end": 7910,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 7900,
											"end": 7910,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 7871,
											"end": 8012,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "306"
										},
										{
											"begin": 7871,
											"end": 8012,
											"name": "JUMP",
											"source": 32
										},
										{
											"begin": 7871,
											"end": 8012,
											"name": "tag",
											"source": 32,
											"value": "308"
										},
										{
											"begin": 7871,
											"end": 8012,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 8030,
											"end": 8036,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 8027,
											"end": 8028,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 8024,
											"end": 8037,
											"name": "GT",
											"source": 32
										},
										{
											"begin": 8021,
											"end": 8023,
											"name": "ISZERO",
											"source": 32
										},
										{
											"begin": 8021,
											"end": 8023,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "309"
										},
										{
											"begin": 8021,
											"end": 8023,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 8101,
											"end": 8105,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 8095,
											"end": 8098,
											"name": "PUSH",
											"source": 32,
											"value": "C0"
										},
										{
											"begin": 8086,
											"end": 8092,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 8075,
											"end": 8084,
											"name": "DUP8",
											"source": 32
										},
										{
											"begin": 8071,
											"end": 8093,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 8067,
											"end": 8099,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 8060,
											"end": 8106,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 8021,
											"end": 8023,
											"name": "tag",
											"source": 32,
											"value": "309"
										},
										{
											"begin": 8021,
											"end": 8023,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8177,
											"end": 8179,
											"name": "PUSH",
											"source": 32,
											"value": "1F"
										},
										{
											"begin": 8156,
											"end": 8171,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 8152,
											"end": 8181,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 8137,
											"end": 8182,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 8137,
											"end": 8182,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 8137,
											"end": 8182,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 8137,
											"end": 8182,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 8184,
											"end": 8187,
											"name": "PUSH",
											"source": 32,
											"value": "C0"
										},
										{
											"begin": 8133,
											"end": 8188,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 8133,
											"end": 8188,
											"name": "SWAP7",
											"source": 32
										},
										{
											"begin": 7462,
											"end": 8194,
											"name": "SWAP6",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7462,
											"end": 8194,
											"name": "JUMP",
											"source": 32,
											"value": "[out]"
										},
										{
											"begin": 8199,
											"end": 8696,
											"name": "tag",
											"source": 32,
											"value": "53"
										},
										{
											"begin": 8199,
											"end": 8696,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8486,
											"end": 8501,
											"name": "SWAP5",
											"source": 32
										},
										{
											"begin": 8486,
											"end": 8501,
											"name": "DUP6",
											"source": 32
										},
										{
											"begin": 8486,
											"end": 8501,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 8468,
											"end": 8502,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 8468,
											"end": 8502,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8538,
											"end": 8585,
											"name": "SWAP4",
											"source": 32
										},
										{
											"begin": 8538,
											"end": 8585,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 8538,
											"end": 8585,
											"name": "SWAP4",
											"source": 32
										},
										{
											"begin": 8538,
											"end": 8585,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 8533,
											"end": 8535,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 8518,
											"end": 8536,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 8518,
											"end": 8536,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 8511,
											"end": 8586,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 8622,
											"end": 8637,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 8622,
											"end": 8637,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 8622,
											"end": 8637,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 8617,
											"end": 8619,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 8602,
											"end": 8620,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 8602,
											"end": 8620,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 8595,
											"end": 8638,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 8674,
											"end": 8689,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 8674,
											"end": 8689,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 8674,
											"end": 8689,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 8669,
											"end": 8671,
											"name": "PUSH",
											"source": 32,
											"value": "60"
										},
										{
											"begin": 8654,
											"end": 8672,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 8654,
											"end": 8672,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 8647,
											"end": 8690,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 8417,
											"end": 8420,
											"name": "PUSH",
											"source": 32,
											"value": "80"
										},
										{
											"begin": 8402,
											"end": 8421,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 8402,
											"end": 8421,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 8384,
											"end": 8696,
											"name": "JUMP",
											"source": 32,
											"value": "[out]"
										},
										{
											"begin": 8701,
											"end": 8975,
											"name": "tag",
											"source": 32,
											"value": "103"
										},
										{
											"begin": 8701,
											"end": 8975,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8893,
											"end": 8925,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": 8893,
											"end": 8925,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 8893,
											"end": 8925,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": 8893,
											"end": 8925,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 8875,
											"end": 8926,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 8875,
											"end": 8926,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 8957,
											"end": 8959,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 8942,
											"end": 8960,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 8942,
											"end": 8960,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 8935,
											"end": 8969,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 8863,
											"end": 8865,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 8848,
											"end": 8866,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 8848,
											"end": 8866,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 8830,
											"end": 8975,
											"name": "JUMP",
											"source": 32,
											"value": "[out]"
										},
										{
											"begin": 8980,
											"end": 9182,
											"name": "tag",
											"source": 32,
											"value": "31"
										},
										{
											"begin": 8980,
											"end": 9182,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 9142,
											"end": 9175,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 9142,
											"end": 9175,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 9142,
											"end": 9175,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 9142,
											"end": 9175,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 9124,
											"end": 9176,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 9124,
											"end": 9176,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 9112,
											"end": 9114,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 9097,
											"end": 9115,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 9097,
											"end": 9115,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 9079,
											"end": 9182,
											"name": "JUMP",
											"source": 32,
											"value": "[out]"
										},
										{
											"begin": 9187,
											"end": 9375,
											"name": "tag",
											"source": 32,
											"value": "58"
										},
										{
											"begin": 9187,
											"end": 9375,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 9358,
											"end": 9359,
											"name": "PUSH",
											"source": 32,
											"value": "2"
										},
										{
											"begin": 9347,
											"end": 9368,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 9347,
											"end": 9368,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 9347,
											"end": 9368,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 9347,
											"end": 9368,
											"name": "SIGNEXTEND",
											"source": 32
										},
										{
											"begin": 9329,
											"end": 9369,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 9329,
											"end": 9369,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 9317,
											"end": 9319,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 9302,
											"end": 9320,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 9302,
											"end": 9320,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 9284,
											"end": 9375,
											"name": "JUMP",
											"source": 32,
											"value": "[out]"
										},
										{
											"begin": 9380,
											"end": 9726,
											"name": "tag",
											"source": 32,
											"value": "136"
										},
										{
											"begin": 9380,
											"end": 9726,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 9582,
											"end": 9584,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 9564,
											"end": 9585,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 9564,
											"end": 9585,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 9564,
											"end": 9585,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 9621,
											"end": 9623,
											"name": "PUSH",
											"source": 32,
											"value": "16"
										},
										{
											"begin": 9601,
											"end": 9619,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 9601,
											"end": 9619,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 9601,
											"end": 9619,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 9594,
											"end": 9624,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4F6E6C79206F776E65722063616E20646F2074686973"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "50"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9655,
											"end": 9657,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 9640,
											"end": 9658,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 9640,
											"end": 9658,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 9633,
											"end": 9685,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 9717,
											"end": 9719,
											"name": "PUSH",
											"source": 32,
											"value": "60"
										},
										{
											"begin": 9702,
											"end": 9720,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 9702,
											"end": 9720,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 9554,
											"end": 9726,
											"name": "JUMP",
											"source": 32,
											"value": "[out]"
										},
										{
											"begin": 9731,
											"end": 10075,
											"name": "tag",
											"source": 32,
											"value": "158"
										},
										{
											"begin": 9731,
											"end": 10075,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 9933,
											"end": 9935,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 9915,
											"end": 9936,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 9915,
											"end": 9936,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 9915,
											"end": 9936,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 9972,
											"end": 9974,
											"name": "PUSH",
											"source": 32,
											"value": "14"
										},
										{
											"begin": 9952,
											"end": 9970,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 9952,
											"end": 9970,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 9952,
											"end": 9970,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 9945,
											"end": 9975,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "125B9D985B1A59081A5B9C1D5D08185B5BDD5B9D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "62"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10006,
											"end": 10008,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 9991,
											"end": 10009,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 9991,
											"end": 10009,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 9984,
											"end": 10034,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 10066,
											"end": 10068,
											"name": "PUSH",
											"source": 32,
											"value": "60"
										},
										{
											"begin": 10051,
											"end": 10069,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 10051,
											"end": 10069,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 9905,
											"end": 10075,
											"name": "JUMP",
											"source": 32,
											"value": "[out]"
										},
										{
											"begin": 10080,
											"end": 10427,
											"name": "tag",
											"source": 32,
											"value": "184"
										},
										{
											"begin": 10080,
											"end": 10427,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 10282,
											"end": 10284,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 10264,
											"end": 10285,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 10264,
											"end": 10285,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 10264,
											"end": 10285,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 10321,
											"end": 10323,
											"name": "PUSH",
											"source": 32,
											"value": "17"
										},
										{
											"begin": 10301,
											"end": 10319,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 10301,
											"end": 10319,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 10301,
											"end": 10319,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 10294,
											"end": 10324,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 10360,
											"end": 10385,
											"name": "PUSH",
											"source": 32,
											"value": "43616C6C6261636B206F6E6C792066726F6D20706F6F6C000000000000000000"
										},
										{
											"begin": 10355,
											"end": 10357,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 10340,
											"end": 10358,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 10340,
											"end": 10358,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 10333,
											"end": 10386,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 10418,
											"end": 10420,
											"name": "PUSH",
											"source": 32,
											"value": "60"
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 10254,
											"end": 10427,
											"name": "JUMP",
											"source": 32,
											"value": "[out]"
										},
										{
											"begin": 10432,
											"end": 11806,
											"name": "tag",
											"source": 32,
											"value": "126"
										},
										{
											"begin": 10432,
											"end": 11806,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 10432,
											"end": 11806,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 10620,
											"end": 10623,
											"name": "PUSH",
											"source": 32,
											"value": "180"
										},
										{
											"begin": 10609,
											"end": 10618,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 10605,
											"end": 10624,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 10597,
											"end": 10624,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 10597,
											"end": 10624,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 10633,
											"end": 10679,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "318"
										},
										{
											"begin": 10669,
											"end": 10678,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 10660,
											"end": 10666,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 10654,
											"end": 10667,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 10633,
											"end": 10679,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "300"
										},
										{
											"begin": 10633,
											"end": 10679,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 10633,
											"end": 10679,
											"name": "tag",
											"source": 32,
											"value": "318"
										},
										{
											"begin": 10633,
											"end": 10679,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 10726,
											"end": 10730,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 10718,
											"end": 10724,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 10714,
											"end": 10731,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 10708,
											"end": 10732,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 10741,
											"end": 10797,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "319"
										},
										{
											"begin": 10791,
											"end": 10795,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 10780,
											"end": 10789,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 10776,
											"end": 10796,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 10762,
											"end": 10774,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 10741,
											"end": 10797,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "300"
										},
										{
											"begin": 10741,
											"end": 10797,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 10741,
											"end": 10797,
											"name": "tag",
											"source": 32,
											"value": "319"
										},
										{
											"begin": 10741,
											"end": 10797,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 10741,
											"end": 10797,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 10846,
											"end": 10850,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 10838,
											"end": 10844,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 10834,
											"end": 10851,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 10828,
											"end": 10852,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 10861,
											"end": 10917,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "320"
										},
										{
											"begin": 10911,
											"end": 10915,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 10900,
											"end": 10909,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 10896,
											"end": 10916,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 10880,
											"end": 10894,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 10861,
											"end": 10917,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "302"
										},
										{
											"begin": 10861,
											"end": 10917,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 10861,
											"end": 10917,
											"name": "tag",
											"source": 32,
											"value": "320"
										},
										{
											"begin": 10861,
											"end": 10917,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 10861,
											"end": 10917,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 10966,
											"end": 10970,
											"name": "PUSH",
											"source": 32,
											"value": "60"
										},
										{
											"begin": 10958,
											"end": 10964,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 10954,
											"end": 10971,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 10948,
											"end": 10972,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 10981,
											"end": 11037,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "321"
										},
										{
											"begin": 11031,
											"end": 11035,
											"name": "PUSH",
											"source": 32,
											"value": "60"
										},
										{
											"begin": 11020,
											"end": 11029,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 11016,
											"end": 11036,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 11000,
											"end": 11014,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 10981,
											"end": 11037,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "302"
										},
										{
											"begin": 10981,
											"end": 11037,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 10981,
											"end": 11037,
											"name": "tag",
											"source": 32,
											"value": "321"
										},
										{
											"begin": 10981,
											"end": 11037,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 10981,
											"end": 11037,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 11086,
											"end": 11090,
											"name": "PUSH",
											"source": 32,
											"value": "80"
										},
										{
											"begin": 11078,
											"end": 11084,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 11074,
											"end": 11091,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 11068,
											"end": 11092,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 11101,
											"end": 11157,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "322"
										},
										{
											"begin": 11151,
											"end": 11155,
											"name": "PUSH",
											"source": 32,
											"value": "80"
										},
										{
											"begin": 11140,
											"end": 11149,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 11136,
											"end": 11156,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 11120,
											"end": 11134,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 11101,
											"end": 11157,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "302"
										},
										{
											"begin": 11101,
											"end": 11157,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 11101,
											"end": 11157,
											"name": "tag",
											"source": 32,
											"value": "322"
										},
										{
											"begin": 11101,
											"end": 11157,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 11101,
											"end": 11157,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 11213,
											"end": 11217,
											"name": "PUSH",
											"source": 32,
											"value": "A0"
										},
										{
											"begin": 11205,
											"end": 11211,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 11201,
											"end": 11218,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 11195,
											"end": 11219,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 11188,
											"end": 11192,
											"name": "PUSH",
											"source": 32,
											"value": "A0"
										},
										{
											"begin": 11177,
											"end": 11186,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 11173,
											"end": 11193,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 11166,
											"end": 11220,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 11276,
											"end": 11280,
											"name": "PUSH",
											"source": 32,
											"value": "C0"
										},
										{
											"begin": 11268,
											"end": 11274,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 11264,
											"end": 11281,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 11258,
											"end": 11282,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 11251,
											"end": 11255,
											"name": "PUSH",
											"source": 32,
											"value": "C0"
										},
										{
											"begin": 11240,
											"end": 11249,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 11236,
											"end": 11256,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 11229,
											"end": 11283,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 11339,
											"end": 11343,
											"name": "PUSH",
											"source": 32,
											"value": "E0"
										},
										{
											"begin": 11331,
											"end": 11337,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 11327,
											"end": 11344,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 11321,
											"end": 11345,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 11314,
											"end": 11318,
											"name": "PUSH",
											"source": 32,
											"value": "E0"
										},
										{
											"begin": 11303,
											"end": 11312,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 11299,
											"end": 11319,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 11292,
											"end": 11346,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 11365,
											"end": 11371,
											"name": "PUSH",
											"source": 32,
											"value": "100"
										},
										{
											"begin": 11425,
											"end": 11427,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 11417,
											"end": 11423,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 11413,
											"end": 11428,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 11407,
											"end": 11429,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 11402,
											"end": 11404,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 11391,
											"end": 11400,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 11387,
											"end": 11405,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 11380,
											"end": 11430,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 11380,
											"end": 11430,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 11449,
											"end": 11455,
											"name": "PUSH",
											"source": 32,
											"value": "120"
										},
										{
											"begin": 11504,
											"end": 11506,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 11496,
											"end": 11502,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 11492,
											"end": 11507,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 11486,
											"end": 11508,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 11517,
											"end": 11573,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "323"
										},
										{
											"begin": 11569,
											"end": 11571,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 11558,
											"end": 11567,
											"name": "DUP6",
											"source": 32
										},
										{
											"begin": 11554,
											"end": 11572,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 11538,
											"end": 11552,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 11517,
											"end": 11573,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "300"
										},
										{
											"begin": 11517,
											"end": 11573,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 11517,
											"end": 11573,
											"name": "tag",
											"source": 32,
											"value": "323"
										},
										{
											"begin": 11517,
											"end": 11573,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11592,
											"end": 11598,
											"name": "PUSH",
											"source": 32,
											"value": "140"
										},
										{
											"begin": 11640,
											"end": 11655,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 11640,
											"end": 11655,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 11640,
											"end": 11655,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 11634,
											"end": 11656,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 11614,
											"end": 11632,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 11614,
											"end": 11632,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 11614,
											"end": 11632,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 11607,
											"end": 11657,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 11676,
											"end": 11682,
											"name": "PUSH",
											"source": 32,
											"value": "160"
										},
										{
											"begin": 11719,
											"end": 11734,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 11719,
											"end": 11734,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 11719,
											"end": 11734,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 11713,
											"end": 11735,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 11744,
											"end": 11800,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "324"
										},
										{
											"begin": 11781,
											"end": 11799,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 11781,
											"end": 11799,
											"name": "DUP6",
											"source": 32
										},
										{
											"begin": 11781,
											"end": 11799,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 11713,
											"end": 11735,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 11744,
											"end": 11800,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "300"
										},
										{
											"begin": 11744,
											"end": 11800,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 11744,
											"end": 11800,
											"name": "tag",
											"source": 32,
											"value": "324"
										},
										{
											"begin": 11744,
											"end": 11800,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 11744,
											"end": 11800,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 11744,
											"end": 11800,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 10587,
											"end": 11806,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": 10587,
											"end": 11806,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 10587,
											"end": 11806,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 10587,
											"end": 11806,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 10587,
											"end": 11806,
											"name": "JUMP",
											"source": 32,
											"value": "[out]"
										},
										{
											"begin": 11811,
											"end": 11988,
											"name": "tag",
											"source": 32,
											"value": "219"
										},
										{
											"begin": 11811,
											"end": 11988,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 11957,
											"end": 11982,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 11957,
											"end": 11982,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 11957,
											"end": 11982,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 11945,
											"end": 11947,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 11930,
											"end": 11948,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 11930,
											"end": 11948,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 11912,
											"end": 11988,
											"name": "JUMP",
											"source": 32,
											"value": "[out]"
										},
										{
											"begin": 11993,
											"end": 12425,
											"name": "tag",
											"source": 32,
											"value": "46"
										},
										{
											"begin": 11993,
											"end": 12425,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 12224,
											"end": 12249,
											"name": "SWAP4",
											"source": 32
										},
										{
											"begin": 12224,
											"end": 12249,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 12224,
											"end": 12249,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 12285,
											"end": 12332,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": 12285,
											"end": 12332,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 12285,
											"end": 12332,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": 12285,
											"end": 12332,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 12280,
											"end": 12282,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 12265,
											"end": 12283,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 12265,
											"end": 12283,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 12258,
											"end": 12333,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 12364,
											"end": 12366,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 12349,
											"end": 12367,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 12349,
											"end": 12367,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 12342,
											"end": 12376,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 12407,
											"end": 12409,
											"name": "PUSH",
											"source": 32,
											"value": "60"
										},
										{
											"begin": 12392,
											"end": 12410,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 12392,
											"end": 12410,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 12385,
											"end": 12419,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 12211,
											"end": 12214,
											"name": "PUSH",
											"source": 32,
											"value": "80"
										},
										{
											"begin": 12196,
											"end": 12215,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 12196,
											"end": 12215,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 12178,
											"end": 12425,
											"name": "JUMP",
											"source": 32,
											"value": "[out]"
										},
										{
											"begin": 12430,
											"end": 12563,
											"name": "tag",
											"source": 32,
											"value": "229"
										},
										{
											"begin": 12430,
											"end": 12563,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 12507,
											"end": 12538,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 12507,
											"end": 12538,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 12497,
											"end": 12539,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 12497,
											"end": 12539,
											"name": "EQ",
											"source": 32
										},
										{
											"begin": 12487,
											"end": 12489,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "328"
										},
										{
											"begin": 12487,
											"end": 12489,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 12553,
											"end": 12554,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 12550,
											"end": 12551,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 12543,
											"end": 12555,
											"name": "REVERT",
											"source": 32
										},
										{
											"begin": 12487,
											"end": 12489,
											"name": "tag",
											"source": 32,
											"value": "328"
										},
										{
											"begin": 12487,
											"end": 12489,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 12477,
											"end": 12563,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 12477,
											"end": 12563,
											"name": "JUMP",
											"source": 32,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"Swap0for1(uint256)": "db638298",
							"V3Swap1for0(uint256)": "fdde416f",
							"_newAdmin(address)": "e6f4d0aa",
							"_newPool(address)": "d2aca8cd",
							"_transferToAdmin(address)": "7210468a",
							"addLiquidity(uint256,uint256)": "9cd441da",
							"admin()": "f851a440",
							"deposits(uint256)": "b02c43d0",
							"farmNFT()": "da802f80",
							"onERC721Received(address,address,uint256,bytes)": "150b7a02",
							"pool()": "16f0115b",
							"tickSpacing()": "d0c93a7c",
							"token0()": "0dfe1681",
							"token1()": "d21220a7",
							"uniswapV3SwapCallback(int256,int256,bytes)": "fa461e33"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"SwapExecuted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"Swap0for1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"V3Swap1for0\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"_newAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"_newPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Token\",\"type\":\"address\"}],\"name\":\"_transferToAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0ToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1ToMint\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/VeloBot.sol\":\"V3Bot\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/IERC721.sol\":{\"keccak256\":\"0xa5d0054dd7767bd5a6b897102ce1ec058a8d36b0c34f49a394e2b9d302f4700d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://852f1c467f89daa70d729231e543b11c47e2f125202ed123fe9ac9410868fd64\",\"dweb:/ipfs/QmeaFw32FQ9QAXen9EKZkafK4jfXogcEGex4R446DQjJ5i\"]},\"contracts/core/INonfungiblePositionManager.sol\":{\"keccak256\":\"0xfe7d9ee66050cd945f09f5a54bada3d8eb3b024aedc37b9c521703c61e3ac892\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f5d4cc3b9d41b44b2419a72bc3cd27bc0608e0b488196348b4a2e342d2114467\",\"dweb:/ipfs/QmYKKT5uccPQQSBT54wN2yZV5phs4kPYr76WvUerYiKbWp\"]},\"contracts/core/VeloBot.sol\":{\"keccak256\":\"0x6e7200a6a1c4ffc726461a8195709a54eb8c62f9fb259c0ee6a43115db155f90\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://620e1d04cd2390bb30d7b9a87caf9126d5784ed6cfd943b1c64a84f7cb1debdd\",\"dweb:/ipfs/QmTijo9nJKfp82b5TY8MSBTofuKr4NRrwquDMjFftiHg5g\"]},\"contracts/core/interfaces/ICLFactory.sol\":{\"keccak256\":\"0x2b8dda4776bd095c900e408b2cb21324f72694bed75c69972cd0cb3b16b1bff0\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d37ae64eabec6197ef78c9fd1d4c699398937ca5f3e9f852b11b32082ab2e680\",\"dweb:/ipfs/QmWLLA5bV17Q3fS5fDdukXsaquZ5sNoP8KvBAEfYQHfK3Z\"]},\"contracts/core/interfaces/ICLPool.sol\":{\"keccak256\":\"0x0a11e1392c4b5ef4e47a3415a9b1a2118e9370d52a253dbd1c910bbbb615e91f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://0c04e689e0589f3d67961fd5febcdc0f39c0700aeebef2537ccfb29ddba29de1\",\"dweb:/ipfs/QmbuthGhVJsx45dpgF7p71VSuLshREAsaLJu34HQNgRJoz\"]},\"contracts/core/interfaces/IERC20Minimal.sol\":{\"keccak256\":\"0xa7d3b1fd5f9b9d8848a3ed9d1137eb9c79fa1fa4484347e0f75e285a2e51ea40\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://0a3f7e24d48048a87d541cc014fd51ff4cc3c54aeb78b559d17d75884671fb43\",\"dweb:/ipfs/QmWQC2DiaLXaj3QnwUgvZrKP3xvWVxUjxXDfTMmq6aziYc\"]},\"contracts/core/interfaces/IFactoryRegistry.sol\":{\"keccak256\":\"0xa2dbe19a5c9e221ffd8e4612ee8a4aa1233ab0ad059d4b7d91a8dca1153bcea0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://47a01d481d3a1f5172b8601d267439e24662849d7ebb3e1e66ec46d541e57831\",\"dweb:/ipfs/QmYG56TEtS8dwHrNaHxGrTp8r6cDzRkuGKsHBbiToUVEvX\"]},\"contracts/core/interfaces/IVoter.sol\":{\"keccak256\":\"0x029239646ad77a70b26a702b7e286521a03d5b89d148ff7c13d9bf56f6203187\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://eccfb9403ee8f5e7f604eccb0cafcbd047c1f73371537227011e6d557895fa68\",\"dweb:/ipfs/QmTjDHzzKTzkYhTeiWA1po8YL3USKkkMZSxZixVgsSQcXK\"]},\"contracts/core/interfaces/IVotingEscrow.sol\":{\"keccak256\":\"0x17ee815f29f7bc6a1528203976ed5bfdd945354dd72a7d322e8b092e331beb3d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9845c5056470191730c8a8688663bc9808172e57395c1c6053b5145bf9fd5098\",\"dweb:/ipfs/QmXyoRGbDe6KPngPsKXWZCyLLdmRTFKdhVD5Gf1Y15rG7a\"]},\"contracts/core/interfaces/callback/ICLMintCallback.sol\":{\"keccak256\":\"0x22d4ed43f7d7313e676e80f7ae3315f53c3a84fbf256efae5116ef0aba32c1e8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a21d9618b9a9c2fe2cf35d9d6d608dd02a112bd05e6020fbe71e7e09064c2be7\",\"dweb:/ipfs/QmeBQiyVmxVTPT3ftVFDkiDVgZLMar6SQegryLC7A3jmLr\"]},\"contracts/core/interfaces/callback/ICLSwapCallback.sol\":{\"keccak256\":\"0xb93e1ef2be3090a64b3b024f60253aef64b875f61dffaef8b9231351f8054948\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b16ccd544a6a551c977b7a7d6b6b9704c68e86624d66ecb16d945d3b88239458\",\"dweb:/ipfs/QmPBP5K81AFfHazhbbVb9ZXh6hzKeLqZcEUxnrkKNY7z2L\"]},\"contracts/core/interfaces/pool/ICLPoolActions.sol\":{\"keccak256\":\"0x7699f31261ab40982e34febe16128f1edfdad39075969195301352ea66bcac40\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://074f1c470e11f30d0fae8b95b963c9d19dcbd2c5bd17ad4ebba95c5f0f073044\",\"dweb:/ipfs/QmdDWMUspgBXfLhcxqESez9rSwA8JYNRycmhkhuKoDCWqJ\"]},\"contracts/core/interfaces/pool/ICLPoolConstants.sol\":{\"keccak256\":\"0xfad00d4ca1a40ef27d9614a98483ca67c4491b6f19e376901745c57a6949b512\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://2b5ea522565efb803d146673ff9e37aa090a5abff334fea587da62f4fb5d6647\",\"dweb:/ipfs/QmVRPscHFVjYFvRbJf41zVLtA2jVLbEUH66KGtEzspXnWS\"]},\"contracts/core/interfaces/pool/ICLPoolDerivedState.sol\":{\"keccak256\":\"0xc15e4192a1b7b756cababb994341dc8e78627e1341465e47b1dcb66e9ed54af8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ee4b9269244f6b7ac57cba3b8966ac188220596d16cef71d186f0a6446593b4e\",\"dweb:/ipfs/QmQjyc5ggDgoAv4YbL5uKpNxRDoTvVYw6vePFgu4aNigmQ\"]},\"contracts/core/interfaces/pool/ICLPoolEvents.sol\":{\"keccak256\":\"0x32fbcac8952f1c5c44b466b0e1c28634ce71372c0f65242aa0d821cebdddcc2b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://19f22382292967f97640f84a7edfa01cf7deb303bf882344b9985007f1dcbef2\",\"dweb:/ipfs/Qmej7vWwun9fRBCrcvzPHdZP1jtLSCxJtjTSdkVTcgWeAE\"]},\"contracts/core/interfaces/pool/ICLPoolOwnerActions.sol\":{\"keccak256\":\"0xeafd14ae3e15c9f663507e004c599618bfd5d2a90d58b3b450f9372f9e3f54f8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://49472c8cf06dc7084e22fc57ffdce860aa7a9ff77f12e4bef0c13a078bbc5831\",\"dweb:/ipfs/Qmd29vWULezsJJzhw3wZxsU6Hsng5949v2TiVCbdga4Vqe\"]},\"contracts/core/interfaces/pool/ICLPoolState.sol\":{\"keccak256\":\"0xe57d65825a097d6f0ab55d7ae39b528695b3df65320ed524124fbb55949bfcf9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b63b25beebe612acfd564f40b0d95b3844ee71bf969a3357419e7a54f1ece961\",\"dweb:/ipfs/Qmdk3mNLz3cSZscbXFsJp69gjgxFcBv6K5mdc6tjnmtFSR\"]},\"contracts/core/libraries/BitMath.sol\":{\"keccak256\":\"0x82e425066110aac05ed8a9fc90f9ee85142b6f434769447e49d4438a8d9fcd82\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://77a97078bc992c18c59cb61e07fa4632c8a26b6babf00f3b16eabb5dcaa953b4\",\"dweb:/ipfs/QmTj15ufLWk6AxedSVXBcLp5cYf2DCJAeDi94cVemCkm54\"]},\"contracts/core/libraries/FixedPoint128.sol\":{\"keccak256\":\"0x2d1f4f73ae0d8f0a210b8d30084659b57c56ac8f2f96011fca36f00a6d417178\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://2ba88933f16cd2df398e19c6ad227268f83c03081b70d243c97116d2ed9bc241\",\"dweb:/ipfs/QmTUGxdh8snzEM9VrTSS47StCg9VVWvvLJtJeNnMTFY4xb\"]},\"contracts/core/libraries/FixedPoint96.sol\":{\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://186d3b528866065a5856f96d2aeec698efa99f8da913e9adf34f8cc296cc993d\",\"dweb:/ipfs/QmUAiMvtAQp8c9dy57bqJYzG7hkb1uChiPaQmt264skoqP\"]},\"contracts/core/libraries/FullMath.sol\":{\"keccak256\":\"0x5340256039418f5d03512a44173d3dcf1da277a73a461e06fb5668f49cfc46f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75dee99795d1125875233a7f1d356935099cc97b4085c0e451060d77db85d144\",\"dweb:/ipfs/QmTGqyrxVLQd8TBaarqSQDiYvq1QFutCdmTyXk6JpxzKTN\"]},\"contracts/core/libraries/LiquidityMath.sol\":{\"keccak256\":\"0xd1059ccc904c8752cec175e8d99e31921c6cd7f3a9c2dd315ce34ac486172ac9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f3630a49e62fa056e2cc4e0278b6f17c5f7e1c9ad2190540cf84c152b58cdef8\",\"dweb:/ipfs/QmdGjKRTNY2qLXJtR2rXU8Nxk4pZwXfbzZYNn3F472QEn6\"]},\"contracts/core/libraries/LowGasSafeMath.sol\":{\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bfc1d5d58e59015086b0e65a6c3a2ddad312e2350480510f6c0c8167f3d71a37\",\"dweb:/ipfs/QmQndULYjFsHKHjMAKLMfc12vWbVB5FawtioHtvwcWRJZp\"]},\"contracts/core/libraries/Position.sol\":{\"keccak256\":\"0xcf1e701e3fae35be8b77ff1217cfdd23d33eb16fd3cec70be8ea6888f87af285\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://c8c89746dd30e76cc029d4e090e402b28aae0659cc71800758b99137dfe85f55\",\"dweb:/ipfs/QmY4Ft1YBLqzqwTgNdpCyRd7WrY78zKgg4Ddv2zqZiBEiE\"]},\"contracts/core/libraries/SafeCast.sol\":{\"keccak256\":\"0xd4c1c1b67f946b077d7c52a158113763a89a210fc2927b8491055a962ecd18c0\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://5344400c74320ca8dbe19241db7ff49babbd6c875c1b561c79d6e4315a9fb5f9\",\"dweb:/ipfs/QmRKCNTbkovxK1WvejXZr3iAHhGN97ZT1yWGsWCJFkrT5X\"]},\"contracts/core/libraries/SqrtPriceMath.sol\":{\"keccak256\":\"0xefd51a282ca9fbc89394776e7f5c6f96fa084ca26b71d99727780332c87d1843\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1f09b719eff523f65d0d11fc476b9735e1390018d5ff585991d0fc644e913ecf\",\"dweb:/ipfs/QmNiZxxQhqteYgJdhCQ3cZ4S7bTQf2AQRUJqMVvPY3doot\"]},\"contracts/core/libraries/Tick.sol\":{\"keccak256\":\"0xb5ebd80c667f4501dba65f4e39e51ff36e5334480849e0ed8604222d20b4ed1e\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://246f590513441ac0f307170f5099e4a0c0b1f579406fc30b909b249858dbd099\",\"dweb:/ipfs/QmaA5uC3eck7nMqyJbpSPEhmXmAXaKLNBSS1Lfnzzzjc95\"]},\"contracts/core/libraries/TickBitmap.sol\":{\"keccak256\":\"0xd829fadfca3f8f5870c877c7eeceb4a692603c16b711174526129987e8745f5b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1d2cbf3802f7e611708a45bc390ee9307d947e49b348294591659444b9989c05\",\"dweb:/ipfs/Qmcny7JNyVYCtcZG3b1BL4ThuKREmAkE9ZKaC3i32pnt7X\"]},\"contracts/core/libraries/TickMath.sol\":{\"keccak256\":\"0x2aa3180a8a59b34a513b948d3f2207b5376de7a2c37065853b7c9fbf0cd3d43f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://c4d46ca5384037f14497c6268342b15becf8bbe1a8fecbcd89ca5b80f41fabc2\",\"dweb:/ipfs/QmanLcdh7EppV4yJ1CdWfPB67es3nEjrDiByAYwgkSE58D\"]},\"contracts/core/libraries/TransferHelper.sol\":{\"keccak256\":\"0x3bbe07a0684d98efe73f7012e446873494e74983e1f75a16d42c25b956d61651\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://78ac9659c70ba3253a6e526ba5a144994fb3d32df2e9537787eeb45aae320aec\",\"dweb:/ipfs/QmbaZRbPP2wFZ9coJd2iyPM37hm3kXzPLuRtL6KKr1MCSL\"]},\"contracts/core/libraries/UnsafeMath.sol\":{\"keccak256\":\"0x5f36d7d16348d8c37fe64fda932018d6e5e8acecd054f0f97d32db62d20c6c88\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://4bd4e817ea3d2c26bb2be7e58db3eaa403119562c18d4c09cc92fb31aa231496\",\"dweb:/ipfs/QmbpjgL8Hf1mhmUyf9hpuPk4noGAggCdTqaRBFKqNF3AQw\"]},\"contracts/libraries/VelodromeTimeLibrary.sol\":{\"keccak256\":\"0x53d5f0b1b864a7dc552ef0291526938a36b1936517d17f62515bb6ba51c1260d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bbc80fd3b18f04224a2a813d6c20a305c7e0479d6414a78d482b45635bc97dba\",\"dweb:/ipfs/QmQFbXCkjzeFgY5M8DyeKZjxeuN8xGdmUmjNH7FNMkLi8T\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 359,
								"contract": "contracts/core/VeloBot.sol:V3Bot",
								"label": "pool",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 361,
								"contract": "contracts/core/VeloBot.sol:V3Bot",
								"label": "token0",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 363,
								"contract": "contracts/core/VeloBot.sol:V3Bot",
								"label": "token1",
								"offset": 0,
								"slot": "2",
								"type": "t_address"
							},
							{
								"astId": 365,
								"contract": "contracts/core/VeloBot.sol:V3Bot",
								"label": "farmNFT",
								"offset": 0,
								"slot": "3",
								"type": "t_address"
							},
							{
								"astId": 367,
								"contract": "contracts/core/VeloBot.sol:V3Bot",
								"label": "admin",
								"offset": 0,
								"slot": "4",
								"type": "t_address"
							},
							{
								"astId": 369,
								"contract": "contracts/core/VeloBot.sol:V3Bot",
								"label": "tickSpacing",
								"offset": 20,
								"slot": "4",
								"type": "t_int24"
							},
							{
								"astId": 382,
								"contract": "contracts/core/VeloBot.sol:V3Bot",
								"label": "deposits",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_uint256,t_struct(Deposit)378_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_int24": {
								"encoding": "inplace",
								"label": "int24",
								"numberOfBytes": "3"
							},
							"t_mapping(t_uint256,t_struct(Deposit)378_storage)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => struct V3Bot.Deposit)",
								"numberOfBytes": "32",
								"value": "t_struct(Deposit)378_storage"
							},
							"t_struct(Deposit)378_storage": {
								"encoding": "inplace",
								"label": "struct V3Bot.Deposit",
								"members": [
									{
										"astId": 371,
										"contract": "contracts/core/VeloBot.sol:V3Bot",
										"label": "owner",
										"offset": 0,
										"slot": "0",
										"type": "t_address"
									},
									{
										"astId": 373,
										"contract": "contracts/core/VeloBot.sol:V3Bot",
										"label": "liquidity",
										"offset": 0,
										"slot": "1",
										"type": "t_uint128"
									},
									{
										"astId": 375,
										"contract": "contracts/core/VeloBot.sol:V3Bot",
										"label": "token0",
										"offset": 0,
										"slot": "2",
										"type": "t_address"
									},
									{
										"astId": 377,
										"contract": "contracts/core/VeloBot.sol:V3Bot",
										"label": "token1",
										"offset": 0,
										"slot": "3",
										"type": "t_address"
									}
								],
								"numberOfBytes": "128"
							},
							"t_uint128": {
								"encoding": "inplace",
								"label": "uint128",
								"numberOfBytes": "16"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/core/interfaces/ICLFactory.sol": {
				"ICLFactory": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint24",
									"name": "oldUnstakedFee",
									"type": "uint24"
								},
								{
									"indexed": true,
									"internalType": "uint24",
									"name": "newUnstakedFee",
									"type": "uint24"
								}
							],
							"name": "DefaultUnstakedFeeChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "oldOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnerChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"name": "PoolCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "oldFeeManager",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newFeeManager",
									"type": "address"
								}
							],
							"name": "SwapFeeManagerChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "oldFeeModule",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newFeeModule",
									"type": "address"
								}
							],
							"name": "SwapFeeModuleChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								}
							],
							"name": "TickSpacingEnabled",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "oldFeeManager",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newFeeManager",
									"type": "address"
								}
							],
							"name": "UnstakedFeeManagerChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "oldFeeModule",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newFeeModule",
									"type": "address"
								}
							],
							"name": "UnstakedFeeModuleChanged",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "allPools",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "allPoolsLength",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "createPool",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "defaultUnstakedFee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								}
							],
							"name": "enableTickSpacing",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factoryRegistry",
							"outputs": [
								{
									"internalType": "contract IFactoryRegistry",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								}
							],
							"name": "getPool",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"name": "getSwapFee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"name": "getUnstakedFee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"name": "isPair",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "poolImplementation",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint24",
									"name": "_defaultUnstakedFee",
									"type": "uint24"
								}
							],
							"name": "setDefaultUnstakedFee",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								}
							],
							"name": "setOwner",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_swapFeeManager",
									"type": "address"
								}
							],
							"name": "setSwapFeeManager",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_swapFeeModule",
									"type": "address"
								}
							],
							"name": "setSwapFeeModule",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_unstakedFeeManager",
									"type": "address"
								}
							],
							"name": "setUnstakedFeeManager",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_unstakedFeeModule",
									"type": "address"
								}
							],
							"name": "setUnstakedFeeModule",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "swapFeeManager",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "swapFeeModule",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								}
							],
							"name": "tickSpacingToFee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacings",
							"outputs": [
								{
									"internalType": "int24[]",
									"name": "",
									"type": "int24[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unstakedFeeManager",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unstakedFeeModule",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "voter",
							"outputs": [
								{
									"internalType": "contract IVoter",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"DefaultUnstakedFeeChanged(uint24,uint24)": {
								"params": {
									"newUnstakedFee": "The defaultUnstakedFee after the unstakedFeeModule was changed",
									"oldUnstakedFee": "The defaultUnstakedFee before the defaultUnstakedFee was changed"
								}
							},
							"OwnerChanged(address,address)": {
								"params": {
									"newOwner": "The owner after the owner was changed",
									"oldOwner": "The owner before the owner was changed"
								}
							},
							"PoolCreated(address,address,int24,address)": {
								"params": {
									"pool": "The address of the created pool",
									"tickSpacing": "The minimum number of ticks between initialized ticks",
									"token0": "The first token of the pool by address sort order",
									"token1": "The second token of the pool by address sort order"
								}
							},
							"SwapFeeManagerChanged(address,address)": {
								"params": {
									"newFeeManager": "The swapFeeManager after the swapFeeManager was changed",
									"oldFeeManager": "The swapFeeManager before the swapFeeManager was changed"
								}
							},
							"SwapFeeModuleChanged(address,address)": {
								"params": {
									"newFeeModule": "The swapFeeModule after the swapFeeModule was changed",
									"oldFeeModule": "The swapFeeModule before the swapFeeModule was changed"
								}
							},
							"TickSpacingEnabled(int24,uint24)": {
								"params": {
									"fee": "The default fee for a pool created with a given tickSpacing",
									"tickSpacing": "The minimum number of ticks between initialized ticks for pools"
								}
							},
							"UnstakedFeeManagerChanged(address,address)": {
								"params": {
									"newFeeManager": "The unstakedFeeManager after the unstakedFeeManager was changed",
									"oldFeeManager": "The unstakedFeeManager before the unstakedFeeManager was changed"
								}
							},
							"UnstakedFeeModuleChanged(address,address)": {
								"params": {
									"newFeeModule": "The unstakedFeeModule after the unstakedFeeModule was changed",
									"oldFeeModule": "The unstakedFeeModule before the unstakedFeeModule was changed"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"allPools(uint256)": {
								"params": {
									"index": "Index of the pool"
								},
								"returns": {
									"_0": "The pool address in the given index"
								}
							},
							"allPoolsLength()": {
								"returns": {
									"_0": "Number of pools created from this factory"
								}
							},
							"createPool(address,address,int24,uint160)": {
								"details": "tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. The call will revert if the pool already exists, the tick spacing is invalid, or the token arguments are invalid",
								"params": {
									"sqrtPriceX96": "The initial sqrt price of the pool, as a Q64.96",
									"tickSpacing": "The desired tick spacing for the pool",
									"tokenA": "One of the two tokens in the desired pool",
									"tokenB": "The other of the two tokens in the desired pool"
								},
								"returns": {
									"pool": "The address of the newly created pool"
								}
							},
							"defaultUnstakedFee()": {
								"details": "Can be changed by the current unstaked fee manager via setDefaultUnstakedFee",
								"returns": {
									"_0": "The default Unstaked Fee of the factory"
								}
							},
							"enableTickSpacing(int24,uint24)": {
								"details": "Tick spacings may never be removed once enabled",
								"params": {
									"fee": "The default fee associated with a given tick spacing",
									"tickSpacing": "The spacing between ticks to be enforced in the pool"
								}
							},
							"factoryRegistry()": {
								"returns": {
									"_0": "The address of the factory registry"
								}
							},
							"getPool(address,address,int24)": {
								"details": "tokenA and tokenB may be passed in either token0/token1 or token1/token0 order",
								"params": {
									"tickSpacing": "The tick spacing of the pool",
									"tokenA": "The contract address of either token0 or token1",
									"tokenB": "The contract address of the other token"
								},
								"returns": {
									"pool": "The pool address"
								}
							},
							"getSwapFee(address)": {
								"details": "Swap & flash fee is denominated in pips. i.e. 1e-6",
								"params": {
									"pool": "The pool to get the swap & flash fee for"
								},
								"returns": {
									"_0": "The swap & flash fee for the given pool"
								}
							},
							"getUnstakedFee(address)": {
								"details": "Unstaked fee is denominated in pips. i.e. 1e-6",
								"params": {
									"pool": "The pool to get the unstaked fee for"
								},
								"returns": {
									"_0": "The unstaked fee for the given pool"
								}
							},
							"isPair(address)": {
								"params": {
									"pool": "The address of the pool to check"
								},
								"returns": {
									"_0": "Whether the pool is a valid pool of the factory"
								}
							},
							"owner()": {
								"details": "Can be changed by the current owner via setOwner",
								"returns": {
									"_0": "The address of the factory owner"
								}
							},
							"poolImplementation()": {
								"returns": {
									"_0": "The address of the pool implementation contract"
								}
							},
							"setDefaultUnstakedFee(uint24)": {
								"details": "Must be called by the current unstaked fee manager",
								"params": {
									"_defaultUnstakedFee": "The new defaultUnstakedFee of the factory"
								}
							},
							"setOwner(address)": {
								"details": "Must be called by the current owner",
								"params": {
									"_owner": "The new owner of the factory"
								}
							},
							"setSwapFeeManager(address)": {
								"details": "Must be called by the current swap fee manager",
								"params": {
									"_swapFeeManager": "The new swapFeeManager of the factory"
								}
							},
							"setSwapFeeModule(address)": {
								"details": "Must be called by the current swap fee manager",
								"params": {
									"_swapFeeModule": "The new swapFeeModule of the factory"
								}
							},
							"setUnstakedFeeManager(address)": {
								"details": "Must be called by the current unstaked fee manager",
								"params": {
									"_unstakedFeeManager": "The new unstakedFeeManager of the factory"
								}
							},
							"setUnstakedFeeModule(address)": {
								"details": "Must be called by the current unstaked fee manager",
								"params": {
									"_unstakedFeeModule": "The new unstakedFeeModule of the factory"
								}
							},
							"swapFeeManager()": {
								"details": "Can be changed by the current swap fee manager via setSwapFeeManager",
								"returns": {
									"_0": "The address of the factory swapFeeManager"
								}
							},
							"swapFeeModule()": {
								"details": "Can be changed by the current swap fee manager via setSwapFeeModule",
								"returns": {
									"_0": "The address of the factory swapFeeModule"
								}
							},
							"tickSpacingToFee(int24)": {
								"details": "Use getFee for the most up to date fee for a given pool. A tick spacing can never be removed, so this value should be hard coded or cached in the calling context",
								"params": {
									"tickSpacing": "The enabled tick spacing. Returns 0 if not enabled"
								},
								"returns": {
									"fee": "The default fee for the given tick spacing"
								}
							},
							"tickSpacings()": {
								"details": "Tick spacings cannot be removed. Tick spacings are not ordered",
								"returns": {
									"_0": "List of enabled tick spacings"
								}
							},
							"unstakedFeeManager()": {
								"details": "Can be changed by the current unstaked fee manager via setUnstakedFeeManager",
								"returns": {
									"_0": "The address of the factory unstakedFeeManager"
								}
							},
							"unstakedFeeModule()": {
								"details": "Can be changed by the current unstaked fee manager via setUnstakedFeeModule",
								"returns": {
									"_0": "The address of the factory unstakedFeeModule"
								}
							},
							"voter()": {
								"returns": {
									"_0": "The address of the voter contract"
								}
							}
						},
						"title": "The interface for the CL Factory",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allPools(uint256)": "41d1de97",
							"allPoolsLength()": "efde4e64",
							"createPool(address,address,int24,uint160)": "232aa5ac",
							"defaultUnstakedFee()": "e2824832",
							"enableTickSpacing(int24,uint24)": "eee0fdb4",
							"factoryRegistry()": "3bf0c9fb",
							"getPool(address,address,int24)": "28af8d0b",
							"getSwapFee(address)": "35458dcc",
							"getUnstakedFee(address)": "48cf7a43",
							"isPair(address)": "e5e31b13",
							"owner()": "8da5cb5b",
							"poolImplementation()": "cefa7799",
							"setDefaultUnstakedFee(uint24)": "a2f97f42",
							"setOwner(address)": "13af4035",
							"setSwapFeeManager(address)": "ffb4d9d1",
							"setSwapFeeModule(address)": "61b9c3ec",
							"setUnstakedFeeManager(address)": "93ce8627",
							"setUnstakedFeeModule(address)": "1b31d878",
							"swapFeeManager()": "d574afa9",
							"swapFeeModule()": "23c43a51",
							"tickSpacingToFee(int24)": "380dc1c2",
							"tickSpacings()": "9cbbbe86",
							"unstakedFeeManager()": "82e189e0",
							"unstakedFeeModule()": "7693bc11",
							"voter()": "46c96aac"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"oldUnstakedFee\",\"type\":\"uint24\"},{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"newUnstakedFee\",\"type\":\"uint24\"}],\"name\":\"DefaultUnstakedFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldFeeManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeManager\",\"type\":\"address\"}],\"name\":\"SwapFeeManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldFeeModule\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeModule\",\"type\":\"address\"}],\"name\":\"SwapFeeModuleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"TickSpacingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldFeeManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeManager\",\"type\":\"address\"}],\"name\":\"UnstakedFeeManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldFeeModule\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeModule\",\"type\":\"address\"}],\"name\":\"UnstakedFeeModuleChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"allPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPoolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultUnstakedFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"enableTickSpacing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryRegistry\",\"outputs\":[{\"internalType\":\"contract IFactoryRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getSwapFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getUnstakedFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"_defaultUnstakedFee\",\"type\":\"uint24\"}],\"name\":\"setDefaultUnstakedFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapFeeManager\",\"type\":\"address\"}],\"name\":\"setSwapFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapFeeModule\",\"type\":\"address\"}],\"name\":\"setSwapFeeModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_unstakedFeeManager\",\"type\":\"address\"}],\"name\":\"setUnstakedFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_unstakedFeeModule\",\"type\":\"address\"}],\"name\":\"setUnstakedFeeModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFeeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFeeModule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"}],\"name\":\"tickSpacingToFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacings\",\"outputs\":[{\"internalType\":\"int24[]\",\"name\":\"\",\"type\":\"int24[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakedFeeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakedFeeModule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voter\",\"outputs\":[{\"internalType\":\"contract IVoter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"DefaultUnstakedFeeChanged(uint24,uint24)\":{\"params\":{\"newUnstakedFee\":\"The defaultUnstakedFee after the unstakedFeeModule was changed\",\"oldUnstakedFee\":\"The defaultUnstakedFee before the defaultUnstakedFee was changed\"}},\"OwnerChanged(address,address)\":{\"params\":{\"newOwner\":\"The owner after the owner was changed\",\"oldOwner\":\"The owner before the owner was changed\"}},\"PoolCreated(address,address,int24,address)\":{\"params\":{\"pool\":\"The address of the created pool\",\"tickSpacing\":\"The minimum number of ticks between initialized ticks\",\"token0\":\"The first token of the pool by address sort order\",\"token1\":\"The second token of the pool by address sort order\"}},\"SwapFeeManagerChanged(address,address)\":{\"params\":{\"newFeeManager\":\"The swapFeeManager after the swapFeeManager was changed\",\"oldFeeManager\":\"The swapFeeManager before the swapFeeManager was changed\"}},\"SwapFeeModuleChanged(address,address)\":{\"params\":{\"newFeeModule\":\"The swapFeeModule after the swapFeeModule was changed\",\"oldFeeModule\":\"The swapFeeModule before the swapFeeModule was changed\"}},\"TickSpacingEnabled(int24,uint24)\":{\"params\":{\"fee\":\"The default fee for a pool created with a given tickSpacing\",\"tickSpacing\":\"The minimum number of ticks between initialized ticks for pools\"}},\"UnstakedFeeManagerChanged(address,address)\":{\"params\":{\"newFeeManager\":\"The unstakedFeeManager after the unstakedFeeManager was changed\",\"oldFeeManager\":\"The unstakedFeeManager before the unstakedFeeManager was changed\"}},\"UnstakedFeeModuleChanged(address,address)\":{\"params\":{\"newFeeModule\":\"The unstakedFeeModule after the unstakedFeeModule was changed\",\"oldFeeModule\":\"The unstakedFeeModule before the unstakedFeeModule was changed\"}}},\"kind\":\"dev\",\"methods\":{\"allPools(uint256)\":{\"params\":{\"index\":\"Index of the pool\"},\"returns\":{\"_0\":\"The pool address in the given index\"}},\"allPoolsLength()\":{\"returns\":{\"_0\":\"Number of pools created from this factory\"}},\"createPool(address,address,int24,uint160)\":{\"details\":\"tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. The call will revert if the pool already exists, the tick spacing is invalid, or the token arguments are invalid\",\"params\":{\"sqrtPriceX96\":\"The initial sqrt price of the pool, as a Q64.96\",\"tickSpacing\":\"The desired tick spacing for the pool\",\"tokenA\":\"One of the two tokens in the desired pool\",\"tokenB\":\"The other of the two tokens in the desired pool\"},\"returns\":{\"pool\":\"The address of the newly created pool\"}},\"defaultUnstakedFee()\":{\"details\":\"Can be changed by the current unstaked fee manager via setDefaultUnstakedFee\",\"returns\":{\"_0\":\"The default Unstaked Fee of the factory\"}},\"enableTickSpacing(int24,uint24)\":{\"details\":\"Tick spacings may never be removed once enabled\",\"params\":{\"fee\":\"The default fee associated with a given tick spacing\",\"tickSpacing\":\"The spacing between ticks to be enforced in the pool\"}},\"factoryRegistry()\":{\"returns\":{\"_0\":\"The address of the factory registry\"}},\"getPool(address,address,int24)\":{\"details\":\"tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\",\"params\":{\"tickSpacing\":\"The tick spacing of the pool\",\"tokenA\":\"The contract address of either token0 or token1\",\"tokenB\":\"The contract address of the other token\"},\"returns\":{\"pool\":\"The pool address\"}},\"getSwapFee(address)\":{\"details\":\"Swap & flash fee is denominated in pips. i.e. 1e-6\",\"params\":{\"pool\":\"The pool to get the swap & flash fee for\"},\"returns\":{\"_0\":\"The swap & flash fee for the given pool\"}},\"getUnstakedFee(address)\":{\"details\":\"Unstaked fee is denominated in pips. i.e. 1e-6\",\"params\":{\"pool\":\"The pool to get the unstaked fee for\"},\"returns\":{\"_0\":\"The unstaked fee for the given pool\"}},\"isPair(address)\":{\"params\":{\"pool\":\"The address of the pool to check\"},\"returns\":{\"_0\":\"Whether the pool is a valid pool of the factory\"}},\"owner()\":{\"details\":\"Can be changed by the current owner via setOwner\",\"returns\":{\"_0\":\"The address of the factory owner\"}},\"poolImplementation()\":{\"returns\":{\"_0\":\"The address of the pool implementation contract\"}},\"setDefaultUnstakedFee(uint24)\":{\"details\":\"Must be called by the current unstaked fee manager\",\"params\":{\"_defaultUnstakedFee\":\"The new defaultUnstakedFee of the factory\"}},\"setOwner(address)\":{\"details\":\"Must be called by the current owner\",\"params\":{\"_owner\":\"The new owner of the factory\"}},\"setSwapFeeManager(address)\":{\"details\":\"Must be called by the current swap fee manager\",\"params\":{\"_swapFeeManager\":\"The new swapFeeManager of the factory\"}},\"setSwapFeeModule(address)\":{\"details\":\"Must be called by the current swap fee manager\",\"params\":{\"_swapFeeModule\":\"The new swapFeeModule of the factory\"}},\"setUnstakedFeeManager(address)\":{\"details\":\"Must be called by the current unstaked fee manager\",\"params\":{\"_unstakedFeeManager\":\"The new unstakedFeeManager of the factory\"}},\"setUnstakedFeeModule(address)\":{\"details\":\"Must be called by the current unstaked fee manager\",\"params\":{\"_unstakedFeeModule\":\"The new unstakedFeeModule of the factory\"}},\"swapFeeManager()\":{\"details\":\"Can be changed by the current swap fee manager via setSwapFeeManager\",\"returns\":{\"_0\":\"The address of the factory swapFeeManager\"}},\"swapFeeModule()\":{\"details\":\"Can be changed by the current swap fee manager via setSwapFeeModule\",\"returns\":{\"_0\":\"The address of the factory swapFeeModule\"}},\"tickSpacingToFee(int24)\":{\"details\":\"Use getFee for the most up to date fee for a given pool. A tick spacing can never be removed, so this value should be hard coded or cached in the calling context\",\"params\":{\"tickSpacing\":\"The enabled tick spacing. Returns 0 if not enabled\"},\"returns\":{\"fee\":\"The default fee for the given tick spacing\"}},\"tickSpacings()\":{\"details\":\"Tick spacings cannot be removed. Tick spacings are not ordered\",\"returns\":{\"_0\":\"List of enabled tick spacings\"}},\"unstakedFeeManager()\":{\"details\":\"Can be changed by the current unstaked fee manager via setUnstakedFeeManager\",\"returns\":{\"_0\":\"The address of the factory unstakedFeeManager\"}},\"unstakedFeeModule()\":{\"details\":\"Can be changed by the current unstaked fee manager via setUnstakedFeeModule\",\"returns\":{\"_0\":\"The address of the factory unstakedFeeModule\"}},\"voter()\":{\"returns\":{\"_0\":\"The address of the voter contract\"}}},\"title\":\"The interface for the CL Factory\",\"version\":1},\"userdoc\":{\"events\":{\"DefaultUnstakedFeeChanged(uint24,uint24)\":{\"notice\":\"Emitted when the defaultUnstakedFee of the factory is changed\"},\"OwnerChanged(address,address)\":{\"notice\":\"Emitted when the owner of the factory is changed\"},\"PoolCreated(address,address,int24,address)\":{\"notice\":\"Emitted when a pool is created\"},\"SwapFeeManagerChanged(address,address)\":{\"notice\":\"Emitted when the swapFeeManager of the factory is changed\"},\"SwapFeeModuleChanged(address,address)\":{\"notice\":\"Emitted when the swapFeeModule of the factory is changed\"},\"TickSpacingEnabled(int24,uint24)\":{\"notice\":\"Emitted when a new tick spacing is enabled for pool creation via the factory\"},\"UnstakedFeeManagerChanged(address,address)\":{\"notice\":\"Emitted when the unstakedFeeManager of the factory is changed\"},\"UnstakedFeeModuleChanged(address,address)\":{\"notice\":\"Emitted when the unstakedFeeModule of the factory is changed\"}},\"kind\":\"user\",\"methods\":{\"allPools(uint256)\":{\"notice\":\"Return address of pool created by this factory given its `index`\"},\"allPoolsLength()\":{\"notice\":\"Returns the number of pools created from this factory\"},\"createPool(address,address,int24,uint160)\":{\"notice\":\"Creates a pool for the given two tokens and fee\"},\"defaultUnstakedFee()\":{\"notice\":\"Returns the current defaultUnstakedFee of the factory\"},\"enableTickSpacing(int24,uint24)\":{\"notice\":\"Enables a certain tickSpacing\"},\"factoryRegistry()\":{\"notice\":\"Factory registry for valid pool / gauge / rewards factories\"},\"getPool(address,address,int24)\":{\"notice\":\"Returns the pool address for a given pair of tokens and a tick spacing, or address 0 if it does not exist\"},\"getSwapFee(address)\":{\"notice\":\"Get swap & flash fee for a given pool. Accounts for default and dynamic fees\"},\"getUnstakedFee(address)\":{\"notice\":\"Get unstaked fee for a given pool. Accounts for default and dynamic fees\"},\"isPair(address)\":{\"notice\":\"Used in VotingEscrow to determine if a contract is a valid pool of the factory\"},\"owner()\":{\"notice\":\"Returns the current owner of the factory\"},\"poolImplementation()\":{\"notice\":\"The address of the pool implementation contract used to deploy proxies / clones\"},\"setDefaultUnstakedFee(uint24)\":{\"notice\":\"Updates the defaultUnstakedFee of the factory\"},\"setOwner(address)\":{\"notice\":\"Updates the owner of the factory\"},\"setSwapFeeManager(address)\":{\"notice\":\"Updates the swapFeeManager of the factory\"},\"setSwapFeeModule(address)\":{\"notice\":\"Updates the swapFeeModule of the factory\"},\"setUnstakedFeeManager(address)\":{\"notice\":\"Updates the unstakedFeeManager of the factory\"},\"setUnstakedFeeModule(address)\":{\"notice\":\"Updates the unstakedFeeModule of the factory\"},\"swapFeeManager()\":{\"notice\":\"Returns the current swapFeeManager of the factory\"},\"swapFeeModule()\":{\"notice\":\"Returns the current swapFeeModule of the factory\"},\"tickSpacingToFee(int24)\":{\"notice\":\"Returns a default fee for a tick spacing.\"},\"tickSpacings()\":{\"notice\":\"Returns a list of enabled tick spacings. Used to iterate through pools created by the factory\"},\"unstakedFeeManager()\":{\"notice\":\"Returns the current unstakedFeeManager of the factory\"},\"unstakedFeeModule()\":{\"notice\":\"Returns the current unstakedFeeModule of the factory\"},\"voter()\":{\"notice\":\"The voter contract, used to create gauges\"}},\"notice\":\"The CL Factory facilitates creation of CL pools and control over the protocol fees\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/interfaces/ICLFactory.sol\":\"ICLFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/ICLFactory.sol\":{\"keccak256\":\"0x2b8dda4776bd095c900e408b2cb21324f72694bed75c69972cd0cb3b16b1bff0\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d37ae64eabec6197ef78c9fd1d4c699398937ca5f3e9f852b11b32082ab2e680\",\"dweb:/ipfs/QmWLLA5bV17Q3fS5fDdukXsaquZ5sNoP8KvBAEfYQHfK3Z\"]},\"contracts/core/interfaces/IFactoryRegistry.sol\":{\"keccak256\":\"0xa2dbe19a5c9e221ffd8e4612ee8a4aa1233ab0ad059d4b7d91a8dca1153bcea0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://47a01d481d3a1f5172b8601d267439e24662849d7ebb3e1e66ec46d541e57831\",\"dweb:/ipfs/QmYG56TEtS8dwHrNaHxGrTp8r6cDzRkuGKsHBbiToUVEvX\"]},\"contracts/core/interfaces/IVoter.sol\":{\"keccak256\":\"0x029239646ad77a70b26a702b7e286521a03d5b89d148ff7c13d9bf56f6203187\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://eccfb9403ee8f5e7f604eccb0cafcbd047c1f73371537227011e6d557895fa68\",\"dweb:/ipfs/QmTjDHzzKTzkYhTeiWA1po8YL3USKkkMZSxZixVgsSQcXK\"]},\"contracts/core/interfaces/IVotingEscrow.sol\":{\"keccak256\":\"0x17ee815f29f7bc6a1528203976ed5bfdd945354dd72a7d322e8b092e331beb3d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9845c5056470191730c8a8688663bc9808172e57395c1c6053b5145bf9fd5098\",\"dweb:/ipfs/QmXyoRGbDe6KPngPsKXWZCyLLdmRTFKdhVD5Gf1Y15rG7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"DefaultUnstakedFeeChanged(uint24,uint24)": {
								"notice": "Emitted when the defaultUnstakedFee of the factory is changed"
							},
							"OwnerChanged(address,address)": {
								"notice": "Emitted when the owner of the factory is changed"
							},
							"PoolCreated(address,address,int24,address)": {
								"notice": "Emitted when a pool is created"
							},
							"SwapFeeManagerChanged(address,address)": {
								"notice": "Emitted when the swapFeeManager of the factory is changed"
							},
							"SwapFeeModuleChanged(address,address)": {
								"notice": "Emitted when the swapFeeModule of the factory is changed"
							},
							"TickSpacingEnabled(int24,uint24)": {
								"notice": "Emitted when a new tick spacing is enabled for pool creation via the factory"
							},
							"UnstakedFeeManagerChanged(address,address)": {
								"notice": "Emitted when the unstakedFeeManager of the factory is changed"
							},
							"UnstakedFeeModuleChanged(address,address)": {
								"notice": "Emitted when the unstakedFeeModule of the factory is changed"
							}
						},
						"kind": "user",
						"methods": {
							"allPools(uint256)": {
								"notice": "Return address of pool created by this factory given its `index`"
							},
							"allPoolsLength()": {
								"notice": "Returns the number of pools created from this factory"
							},
							"createPool(address,address,int24,uint160)": {
								"notice": "Creates a pool for the given two tokens and fee"
							},
							"defaultUnstakedFee()": {
								"notice": "Returns the current defaultUnstakedFee of the factory"
							},
							"enableTickSpacing(int24,uint24)": {
								"notice": "Enables a certain tickSpacing"
							},
							"factoryRegistry()": {
								"notice": "Factory registry for valid pool / gauge / rewards factories"
							},
							"getPool(address,address,int24)": {
								"notice": "Returns the pool address for a given pair of tokens and a tick spacing, or address 0 if it does not exist"
							},
							"getSwapFee(address)": {
								"notice": "Get swap & flash fee for a given pool. Accounts for default and dynamic fees"
							},
							"getUnstakedFee(address)": {
								"notice": "Get unstaked fee for a given pool. Accounts for default and dynamic fees"
							},
							"isPair(address)": {
								"notice": "Used in VotingEscrow to determine if a contract is a valid pool of the factory"
							},
							"owner()": {
								"notice": "Returns the current owner of the factory"
							},
							"poolImplementation()": {
								"notice": "The address of the pool implementation contract used to deploy proxies / clones"
							},
							"setDefaultUnstakedFee(uint24)": {
								"notice": "Updates the defaultUnstakedFee of the factory"
							},
							"setOwner(address)": {
								"notice": "Updates the owner of the factory"
							},
							"setSwapFeeManager(address)": {
								"notice": "Updates the swapFeeManager of the factory"
							},
							"setSwapFeeModule(address)": {
								"notice": "Updates the swapFeeModule of the factory"
							},
							"setUnstakedFeeManager(address)": {
								"notice": "Updates the unstakedFeeManager of the factory"
							},
							"setUnstakedFeeModule(address)": {
								"notice": "Updates the unstakedFeeModule of the factory"
							},
							"swapFeeManager()": {
								"notice": "Returns the current swapFeeManager of the factory"
							},
							"swapFeeModule()": {
								"notice": "Returns the current swapFeeModule of the factory"
							},
							"tickSpacingToFee(int24)": {
								"notice": "Returns a default fee for a tick spacing."
							},
							"tickSpacings()": {
								"notice": "Returns a list of enabled tick spacings. Used to iterate through pools created by the factory"
							},
							"unstakedFeeManager()": {
								"notice": "Returns the current unstakedFeeManager of the factory"
							},
							"unstakedFeeModule()": {
								"notice": "Returns the current unstakedFeeModule of the factory"
							},
							"voter()": {
								"notice": "The voter contract, used to create gauges"
							}
						},
						"notice": "The CL Factory facilitates creation of CL pools and control over the protocol fees",
						"version": 1
					}
				}
			},
			"contracts/core/interfaces/ICLPool.sol": {
				"ICLPool": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "CollectFees",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid1",
									"type": "uint256"
								}
							],
							"name": "Flash",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextOld",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextNew",
									"type": "uint16"
								}
							],
							"name": "IncreaseObservationCardinalityNext",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Initialize",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0New",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1New",
									"type": "uint8"
								}
							],
							"name": "SetFeeProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Swap",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "collectFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factoryRegistry",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "fee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal0X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal1X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flash",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "gauge",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "gaugeFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "token0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "token1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint256",
									"name": "_rewardGrowthGlobalX128",
									"type": "uint256"
								}
							],
							"name": "getRewardGrowthInside",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "rewardGrowthInsideX128",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								}
							],
							"name": "increaseObservationCardinalityNext",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_factory",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_token1",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "_tickSpacing",
									"type": "int24"
								},
								{
									"internalType": "address",
									"name": "_factoryRegistry",
									"type": "address"
								},
								{
									"internalType": "uint160",
									"name": "_sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "lastUpdated",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "liquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxLiquidityPerTick",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "nft",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "observations",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "blockTimestamp",
									"type": "uint32"
								},
								{
									"internalType": "int56",
									"name": "tickCumulative",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityCumulativeX128",
									"type": "uint160"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint32[]",
									"name": "secondsAgos",
									"type": "uint32[]"
								}
							],
							"name": "observe",
							"outputs": [
								{
									"internalType": "int56[]",
									"name": "tickCumulatives",
									"type": "int56[]"
								},
								{
									"internalType": "uint160[]",
									"name": "secondsPerLiquidityCumulativeX128s",
									"type": "uint160[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "periodFinish",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "_liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rewardGrowthGlobalX128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rewardRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rewardReserve",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rollover",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_gauge",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_nft",
									"type": "address"
								}
							],
							"name": "setGaugeAndPositionManager",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "slot0",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								},
								{
									"internalType": "uint16",
									"name": "observationIndex",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinality",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								},
								{
									"internalType": "bool",
									"name": "unlocked",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								}
							],
							"name": "snapshotCumulativesInside",
							"outputs": [
								{
									"internalType": "int56",
									"name": "tickCumulativeInside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityInsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsInside",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int128",
									"name": "stakedLiquidityDelta",
									"type": "int128"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "bool",
									"name": "positionUpdate",
									"type": "bool"
								}
							],
							"name": "stake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "stakedLiquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "zeroForOne",
									"type": "bool"
								},
								{
									"internalType": "int256",
									"name": "amountSpecified",
									"type": "int256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "rewardRate",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "rewardReserve",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "periodFinish",
									"type": "uint256"
								}
							],
							"name": "syncReward",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int16",
									"name": "wordPosition",
									"type": "int16"
								}
							],
							"name": "tickBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "ticks",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidityGross",
									"type": "uint128"
								},
								{
									"internalType": "int128",
									"name": "liquidityNet",
									"type": "int128"
								},
								{
									"internalType": "int128",
									"name": "stakedLiquidityNet",
									"type": "int128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside0X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside1X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "rewardGrowthOutsideX128",
									"type": "uint256"
								},
								{
									"internalType": "int56",
									"name": "tickCumulativeOutside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityOutsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsOutside",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unstakedFee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "updateRewardsGrowthGlobal",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "The pool interface is broken up into many smaller pieces",
						"kind": "dev",
						"methods": {
							"burn(int24,int24,uint128)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"burn(int24,int24,uint128,address)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"owner": "Owner of the position in the pool (nft manager or gauge)",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"collect(address,int24,int24,uint128,uint128,address)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"owner": "Owner of the position in the pool (nft manager or gauge)",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"collectFees()": {
								"returns": {
									"amount0": "The gauge fee collected in token0",
									"amount1": "The gauge fee collected in token1"
								}
							},
							"factory()": {
								"returns": {
									"_0": "The contract address"
								}
							},
							"factoryRegistry()": {
								"returns": {
									"_0": "The factory registry contract address"
								}
							},
							"fee()": {
								"details": "Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.",
								"returns": {
									"_0": "The swap & flash fee"
								}
							},
							"feeGrowthGlobal0X128()": {
								"details": "This value can overflow the uint256"
							},
							"feeGrowthGlobal1X128()": {
								"details": "This value can overflow the uint256"
							},
							"flash(address,uint256,uint256,bytes)": {
								"details": "The caller of this method receives a callback in the form of ICLFlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback",
								"params": {
									"amount0": "The amount of token0 to send",
									"amount1": "The amount of token1 to send",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address which will receive the token0 and token1 amounts"
								}
							},
							"gauge()": {
								"returns": {
									"_0": "The gauge contract address"
								}
							},
							"gaugeFees()": {
								"details": "Gauge fees will never exceed uint128 max in either token"
							},
							"getRewardGrowthInside(int24,int24,uint256)": {
								"details": "Used in gauge reward/earned calculations",
								"params": {
									"_rewardGrowthGlobalX128": "a calculated rewardGrowthGlobalX128 or 0 (in case of 0 it means we use the rewardGrowthGlobalX128 from state)",
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"rewardGrowthInsideX128": "The reward growth in the range"
								}
							},
							"increaseObservationCardinalityNext(uint16)": {
								"details": "This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
								"params": {
									"observationCardinalityNext": "The desired minimum number of observations for the pool to store"
								}
							},
							"initialize(address,address,address,int24,address,uint160)": {
								"details": "Can be called once only Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 valuenot locked because it initializes unlocked",
								"params": {
									"_factory": "The CL factory contract address",
									"_factoryRegistry": "The address of the factory registry managing the pool factory",
									"_sqrtPriceX96": "The initial sqrt price of the pool, as a Q64.96",
									"_tickSpacing": "The pool tick spacing",
									"_token0": "The first token of the pool by address sort order",
									"_token1": "The second token of the pool by address sort order"
								}
							},
							"liquidity()": {
								"details": "This value has no relationship to the total liquidity across all ticksThis value includes staked liquidity"
							},
							"maxLiquidityPerTick()": {
								"details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
								"returns": {
									"_0": "The max amount of liquidity per tick"
								}
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"details": "The caller of this method receives a callback in the form of ICLMintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.",
								"params": {
									"amount": "The amount of liquidity to mint",
									"data": "Any data that should be passed through to the callback",
									"recipient": "The address for which the liquidity will be created",
									"tickLower": "The lower tick of the position in which to add liquidity",
									"tickUpper": "The upper tick of the position in which to add liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback",
									"amount1": "The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
								}
							},
							"nft()": {
								"returns": {
									"_0": "The nft manager contract address"
								}
							},
							"observations(uint256)": {
								"details": "You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.",
								"params": {
									"index": "The element of the observations array to fetch"
								},
								"returns": {
									"blockTimestamp": "The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"
								}
							},
							"observe(uint32[])": {
								"details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
								"params": {
									"secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
								},
								"returns": {
									"secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
									"tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
								}
							},
							"positions(bytes32)": {
								"params": {
									"key": "The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"
								},
								"returns": {
									"_liquidity": "The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
								}
							},
							"rewardGrowthGlobalX128()": {
								"details": "This value can overflow the uint256"
							},
							"rollover()": {
								"details": "rollover will always be smaller than the rewards distributed that epoch"
							},
							"setGaugeAndPositionManager(address,address)": {
								"details": "Callable only once, by the gauge factory",
								"params": {
									"_gauge": "The gauge corresponding to this pool",
									"_nft": "The position manager used for position management"
								}
							},
							"slot0()": {
								"returns": {
									"sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. unlocked Whether the pool is currently locked to reentrancy"
								}
							},
							"snapshotCumulativesInside(int24,int24)": {
								"details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
								"params": {
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"secondsInside": "The snapshot of seconds per liquidity for the range",
									"secondsPerLiquidityInsideX128": "The snapshot of seconds per liquidity for the range",
									"tickCumulativeInside": "The snapshot of the tick accumulator for the range"
								}
							},
							"stake(int128,int24,int24,bool)": {
								"params": {
									"positionUpdate": "If the nft and gauge position should be updated",
									"stakedLiquidityDelta": "The amount by which to increase or decrease the staked liquidity",
									"tickLower": "The lower tick of the position for which to stake liquidity",
									"tickUpper": "The upper tick of the position for which to stake liquidity"
								}
							},
							"stakedLiquidity()": {
								"details": "This value has no relationship to the total staked liquidity across all ticks"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"details": "The caller of this method receives a callback in the form of ICLSwapCallback#uniswapV3SwapCallback",
								"params": {
									"amountSpecified": "The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address to receive the output of the swap",
									"sqrtPriceLimitX96": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
									"zeroForOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
								},
								"returns": {
									"amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
									"amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
								}
							},
							"syncReward(uint256,uint256,uint256)": {
								"params": {
									"periodFinish": "the end of the current period of rewards, updated once per epoch",
									"rewardRate": "the rate rewards being distributed during the epoch",
									"rewardReserve": "the available rewards to be distributed during the epoch"
								}
							},
							"tickSpacing()": {
								"details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"ticks(int24)": {
								"params": {
									"tick": "The tick to look up"
								},
								"returns": {
									"liquidityGross": "the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, stakedLiquidityNet how much staked liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, rewardGrowthOutsideX128 the reward growth on the other side of the tick from the current tick in emission token tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."
								}
							},
							"token0()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"token1()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"unstakedFee()": {
								"details": "Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.",
								"returns": {
									"_0": "The unstaked fee"
								}
							}
						},
						"title": "The interface for a CL Pool",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"burn(int24,int24,uint128)": "a34123a7",
							"burn(int24,int24,uint128,address)": "6f89244c",
							"collect(address,int24,int24,uint128,uint128)": "4f1eb3d8",
							"collect(address,int24,int24,uint128,uint128,address)": "31338374",
							"collectFees()": "c8796572",
							"factory()": "c45a0155",
							"factoryRegistry()": "3bf0c9fb",
							"fee()": "ddca3f43",
							"feeGrowthGlobal0X128()": "f3058399",
							"feeGrowthGlobal1X128()": "46141319",
							"flash(address,uint256,uint256,bytes)": "490e6cbc",
							"gauge()": "a6f19c84",
							"gaugeFees()": "293833ba",
							"getRewardGrowthInside(int24,int24,uint256)": "a16368c9",
							"increaseObservationCardinalityNext(uint16)": "32148f67",
							"initialize(address,address,address,int24,address,uint160)": "2071d884",
							"lastUpdated()": "d0b06f5d",
							"liquidity()": "1a686502",
							"maxLiquidityPerTick()": "70cf754a",
							"mint(address,int24,int24,uint128,bytes)": "3c8a7d8d",
							"nft()": "47ccca02",
							"observations(uint256)": "252c09d7",
							"observe(uint32[])": "883bdbfd",
							"periodFinish()": "ebe2b12b",
							"positions(bytes32)": "514ea4bf",
							"rewardGrowthGlobalX128()": "57806ada",
							"rewardRate()": "7b0a47ee",
							"rewardReserve()": "cab64bcd",
							"rollover()": "b056b49a",
							"setGaugeAndPositionManager(address,address)": "1f7c3568",
							"slot0()": "3850c7bd",
							"snapshotCumulativesInside(int24,int24)": "a38807f2",
							"stake(int128,int24,int24,bool)": "4ed6210f",
							"stakedLiquidity()": "3ab04b20",
							"swap(address,bool,int256,uint160,bytes)": "128acb08",
							"syncReward(uint256,uint256,uint256)": "60a73f9b",
							"tickBitmap(int16)": "5339c296",
							"tickSpacing()": "d0c93a7c",
							"ticks(int24)": "f30dba93",
							"token0()": "0dfe1681",
							"token1()": "d21220a7",
							"unstakedFee()": "b64cc67b",
							"updateRewardsGrowthGlobal()": "1b410960"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugeFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"_rewardGrowthGlobalX128\",\"type\":\"uint256\"}],\"name\":\"getRewardGrowthInside\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardGrowthInsideX128\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"_tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"address\",\"name\":\"_factoryRegistry\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"_sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdated\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardGrowthGlobalX128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"setGaugeAndPositionManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"stakedLiquidityDelta\",\"type\":\"int128\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"bool\",\"name\":\"positionUpdate\",\"type\":\"bool\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedLiquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodFinish\",\"type\":\"uint256\"}],\"name\":\"syncReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"stakedLiquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardGrowthOutsideX128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakedFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRewardsGrowthGlobal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The pool interface is broken up into many smaller pieces\",\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"burn(int24,int24,uint128,address)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"owner\":\"Owner of the position in the pool (nft manager or gauge)\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"collect(address,int24,int24,uint128,uint128,address)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"owner\":\"Owner of the position in the pool (nft manager or gauge)\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"collectFees()\":{\"returns\":{\"amount0\":\"The gauge fee collected in token0\",\"amount1\":\"The gauge fee collected in token1\"}},\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"factoryRegistry()\":{\"returns\":{\"_0\":\"The factory registry contract address\"}},\"fee()\":{\"details\":\"Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.\",\"returns\":{\"_0\":\"The swap & flash fee\"}},\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of ICLFlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"gauge()\":{\"returns\":{\"_0\":\"The gauge contract address\"}},\"gaugeFees()\":{\"details\":\"Gauge fees will never exceed uint128 max in either token\"},\"getRewardGrowthInside(int24,int24,uint256)\":{\"details\":\"Used in gauge reward/earned calculations\",\"params\":{\"_rewardGrowthGlobalX128\":\"a calculated rewardGrowthGlobalX128 or 0 (in case of 0 it means we use the rewardGrowthGlobalX128 from state)\",\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"rewardGrowthInsideX128\":\"The reward growth in the range\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(address,address,address,int24,address,uint160)\":{\"details\":\"Can be called once only Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 valuenot locked because it initializes unlocked\",\"params\":{\"_factory\":\"The CL factory contract address\",\"_factoryRegistry\":\"The address of the factory registry managing the pool factory\",\"_sqrtPriceX96\":\"The initial sqrt price of the pool, as a Q64.96\",\"_tickSpacing\":\"The pool tick spacing\",\"_token0\":\"The first token of the pool by address sort order\",\"_token1\":\"The second token of the pool by address sort order\"}},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticksThis value includes staked liquidity\"},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of ICLMintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"nft()\":{\"returns\":{\"_0\":\"The nft manager contract address\"}},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"rewardGrowthGlobalX128()\":{\"details\":\"This value can overflow the uint256\"},\"rollover()\":{\"details\":\"rollover will always be smaller than the rewards distributed that epoch\"},\"setGaugeAndPositionManager(address,address)\":{\"details\":\"Callable only once, by the gauge factory\",\"params\":{\"_gauge\":\"The gauge corresponding to this pool\",\"_nft\":\"The position manager used for position management\"}},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. unlocked Whether the pool is currently locked to reentrancy\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}},\"stake(int128,int24,int24,bool)\":{\"params\":{\"positionUpdate\":\"If the nft and gauge position should be updated\",\"stakedLiquidityDelta\":\"The amount by which to increase or decrease the staked liquidity\",\"tickLower\":\"The lower tick of the position for which to stake liquidity\",\"tickUpper\":\"The upper tick of the position for which to stake liquidity\"}},\"stakedLiquidity()\":{\"details\":\"This value has no relationship to the total staked liquidity across all ticks\"},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of ICLSwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}},\"syncReward(uint256,uint256,uint256)\":{\"params\":{\"periodFinish\":\"the end of the current period of rewards, updated once per epoch\",\"rewardRate\":\"the rate rewards being distributed during the epoch\",\"rewardReserve\":\"the available rewards to be distributed during the epoch\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, stakedLiquidityNet how much staked liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, rewardGrowthOutsideX128 the reward growth on the other side of the tick from the current tick in emission token tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"unstakedFee()\":{\"details\":\"Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.\",\"returns\":{\"_0\":\"The unstaked fee\"}}},\"title\":\"The interface for a CL Pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectFees(address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the gauge\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"burn(int24,int24,uint128,address)\":{\"notice\":\"Burn liquidity from the supplied owner and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"collect(address,int24,int24,uint128,uint128,address)\":{\"notice\":\"Collects tokens owed to a position\"},\"collectFees()\":{\"notice\":\"Collect the gauge fee accrued to the pool\"},\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the ICLFactory interface\"},\"factoryRegistry()\":{\"notice\":\"The factory registry that manages pool <> gauge <> reward factory relationships\"},\"fee()\":{\"notice\":\"The pool's swap & flash fee in pips, i.e. 1e-6\"},\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"gauge()\":{\"notice\":\"The gauge corresponding to this pool\"},\"gaugeFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the gauge\"},\"getRewardGrowthInside(int24,int24,uint256)\":{\"notice\":\"Returns data about reward growth within a tick range. RewardGrowthGlobalX128 can be supplied as a parameter for claimable reward calculations.\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(address,address,address,int24,address,uint160)\":{\"notice\":\"Initialize function used in proxy deployment\"},\"lastUpdated()\":{\"notice\":\"last time the rewardReserve and rewardRate were updated\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"nft()\":{\"notice\":\"The nft manager\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"periodFinish()\":{\"notice\":\"timestamp of the end of the current epoch's rewards\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"rewardGrowthGlobalX128()\":{\"notice\":\"The reward growth as a Q128.128 rewards of emission collected per unit of liquidity for the entire life of the pool\"},\"rewardRate()\":{\"notice\":\"the emission rate of time-based farming\"},\"rewardReserve()\":{\"notice\":\"acts as a virtual reserve that holds information on how many rewards are yet to be distributed\"},\"rollover()\":{\"notice\":\"tracks total rewards distributed when no staked liquidity in active tick for epoch ending at periodFinishthis amount is rolled over on the next call to notifyRewardAmount\"},\"setGaugeAndPositionManager(address,address)\":{\"notice\":\"Initialize gauge and nft manager\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"},\"stake(int128,int24,int24,bool)\":{\"notice\":\"Convert existing liquidity into staked liquidityOnly callable by the gauge associated with this pool\"},\"stakedLiquidity()\":{\"notice\":\"The currently in range staked liquidity available to the pool\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"},\"syncReward(uint256,uint256,uint256)\":{\"notice\":\"Syncs rewards with gauge\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"},\"unstakedFee()\":{\"notice\":\"The pool's unstaked fee in pips, i.e. 1e-6\"},\"updateRewardsGrowthGlobal()\":{\"notice\":\"Updates rewardGrowthGlobalX128 every time when any tick is crossed, or when any position is staked/unstaked from the gauge\"}},\"notice\":\"A CL pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/interfaces/ICLPool.sol\":\"ICLPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/ICLPool.sol\":{\"keccak256\":\"0x0a11e1392c4b5ef4e47a3415a9b1a2118e9370d52a253dbd1c910bbbb615e91f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://0c04e689e0589f3d67961fd5febcdc0f39c0700aeebef2537ccfb29ddba29de1\",\"dweb:/ipfs/QmbuthGhVJsx45dpgF7p71VSuLshREAsaLJu34HQNgRJoz\"]},\"contracts/core/interfaces/pool/ICLPoolActions.sol\":{\"keccak256\":\"0x7699f31261ab40982e34febe16128f1edfdad39075969195301352ea66bcac40\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://074f1c470e11f30d0fae8b95b963c9d19dcbd2c5bd17ad4ebba95c5f0f073044\",\"dweb:/ipfs/QmdDWMUspgBXfLhcxqESez9rSwA8JYNRycmhkhuKoDCWqJ\"]},\"contracts/core/interfaces/pool/ICLPoolConstants.sol\":{\"keccak256\":\"0xfad00d4ca1a40ef27d9614a98483ca67c4491b6f19e376901745c57a6949b512\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://2b5ea522565efb803d146673ff9e37aa090a5abff334fea587da62f4fb5d6647\",\"dweb:/ipfs/QmVRPscHFVjYFvRbJf41zVLtA2jVLbEUH66KGtEzspXnWS\"]},\"contracts/core/interfaces/pool/ICLPoolDerivedState.sol\":{\"keccak256\":\"0xc15e4192a1b7b756cababb994341dc8e78627e1341465e47b1dcb66e9ed54af8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ee4b9269244f6b7ac57cba3b8966ac188220596d16cef71d186f0a6446593b4e\",\"dweb:/ipfs/QmQjyc5ggDgoAv4YbL5uKpNxRDoTvVYw6vePFgu4aNigmQ\"]},\"contracts/core/interfaces/pool/ICLPoolEvents.sol\":{\"keccak256\":\"0x32fbcac8952f1c5c44b466b0e1c28634ce71372c0f65242aa0d821cebdddcc2b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://19f22382292967f97640f84a7edfa01cf7deb303bf882344b9985007f1dcbef2\",\"dweb:/ipfs/Qmej7vWwun9fRBCrcvzPHdZP1jtLSCxJtjTSdkVTcgWeAE\"]},\"contracts/core/interfaces/pool/ICLPoolOwnerActions.sol\":{\"keccak256\":\"0xeafd14ae3e15c9f663507e004c599618bfd5d2a90d58b3b450f9372f9e3f54f8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://49472c8cf06dc7084e22fc57ffdce860aa7a9ff77f12e4bef0c13a078bbc5831\",\"dweb:/ipfs/Qmd29vWULezsJJzhw3wZxsU6Hsng5949v2TiVCbdga4Vqe\"]},\"contracts/core/interfaces/pool/ICLPoolState.sol\":{\"keccak256\":\"0xe57d65825a097d6f0ab55d7ae39b528695b3df65320ed524124fbb55949bfcf9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b63b25beebe612acfd564f40b0d95b3844ee71bf969a3357419e7a54f1ece961\",\"dweb:/ipfs/Qmdk3mNLz3cSZscbXFsJp69gjgxFcBv6K5mdc6tjnmtFSR\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when a position's liquidity is removed"
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"notice": "Emitted when fees are collected by the owner of a position"
							},
							"CollectFees(address,uint128,uint128)": {
								"notice": "Emitted when the collected protocol fees are withdrawn by the gauge"
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"notice": "Emitted by the pool for any flashes of token0/token1"
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"notice": "Emitted by the pool for increases to the number of observations that can be stored"
							},
							"Initialize(uint160,int24)": {
								"notice": "Emitted exactly once by a pool when #initialize is first called on the pool"
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is minted for a given position"
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"notice": "Emitted when the protocol fee is changed by the pool"
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"notice": "Emitted by the pool for any swaps between token0 and token1"
							}
						},
						"kind": "user",
						"methods": {
							"burn(int24,int24,uint128)": {
								"notice": "Burn liquidity from the sender and account tokens owed for the liquidity to the position"
							},
							"burn(int24,int24,uint128,address)": {
								"notice": "Burn liquidity from the supplied owner and account tokens owed for the liquidity to the position"
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"notice": "Collects tokens owed to a position"
							},
							"collect(address,int24,int24,uint128,uint128,address)": {
								"notice": "Collects tokens owed to a position"
							},
							"collectFees()": {
								"notice": "Collect the gauge fee accrued to the pool"
							},
							"factory()": {
								"notice": "The contract that deployed the pool, which must adhere to the ICLFactory interface"
							},
							"factoryRegistry()": {
								"notice": "The factory registry that manages pool <> gauge <> reward factory relationships"
							},
							"fee()": {
								"notice": "The pool's swap & flash fee in pips, i.e. 1e-6"
							},
							"feeGrowthGlobal0X128()": {
								"notice": "The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"
							},
							"feeGrowthGlobal1X128()": {
								"notice": "The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"
							},
							"flash(address,uint256,uint256,bytes)": {
								"notice": "Receive token0 and/or token1 and pay it back, plus a fee, in the callback"
							},
							"gauge()": {
								"notice": "The gauge corresponding to this pool"
							},
							"gaugeFees()": {
								"notice": "The amounts of token0 and token1 that are owed to the gauge"
							},
							"getRewardGrowthInside(int24,int24,uint256)": {
								"notice": "Returns data about reward growth within a tick range. RewardGrowthGlobalX128 can be supplied as a parameter for claimable reward calculations."
							},
							"increaseObservationCardinalityNext(uint16)": {
								"notice": "Increase the maximum number of price and liquidity observations that this pool will store"
							},
							"initialize(address,address,address,int24,address,uint160)": {
								"notice": "Initialize function used in proxy deployment"
							},
							"lastUpdated()": {
								"notice": "last time the rewardReserve and rewardRate were updated"
							},
							"liquidity()": {
								"notice": "The currently in range liquidity available to the pool"
							},
							"maxLiquidityPerTick()": {
								"notice": "The maximum amount of position liquidity that can use any tick in the range"
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"notice": "Adds liquidity for the given recipient/tickLower/tickUpper position"
							},
							"nft()": {
								"notice": "The nft manager"
							},
							"observations(uint256)": {
								"notice": "Returns data about a specific observation index"
							},
							"observe(uint32[])": {
								"notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
							},
							"periodFinish()": {
								"notice": "timestamp of the end of the current epoch's rewards"
							},
							"positions(bytes32)": {
								"notice": "Returns the information about a position by the position's key"
							},
							"rewardGrowthGlobalX128()": {
								"notice": "The reward growth as a Q128.128 rewards of emission collected per unit of liquidity for the entire life of the pool"
							},
							"rewardRate()": {
								"notice": "the emission rate of time-based farming"
							},
							"rewardReserve()": {
								"notice": "acts as a virtual reserve that holds information on how many rewards are yet to be distributed"
							},
							"rollover()": {
								"notice": "tracks total rewards distributed when no staked liquidity in active tick for epoch ending at periodFinishthis amount is rolled over on the next call to notifyRewardAmount"
							},
							"setGaugeAndPositionManager(address,address)": {
								"notice": "Initialize gauge and nft manager"
							},
							"slot0()": {
								"notice": "The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."
							},
							"snapshotCumulativesInside(int24,int24)": {
								"notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
							},
							"stake(int128,int24,int24,bool)": {
								"notice": "Convert existing liquidity into staked liquidityOnly callable by the gauge associated with this pool"
							},
							"stakedLiquidity()": {
								"notice": "The currently in range staked liquidity available to the pool"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"notice": "Swap token0 for token1, or token1 for token0"
							},
							"syncReward(uint256,uint256,uint256)": {
								"notice": "Syncs rewards with gauge"
							},
							"tickBitmap(int16)": {
								"notice": "Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
							},
							"tickSpacing()": {
								"notice": "The pool tick spacing"
							},
							"ticks(int24)": {
								"notice": "Look up information about a specific tick in the pool"
							},
							"token0()": {
								"notice": "The first of the two tokens of the pool, sorted by address"
							},
							"token1()": {
								"notice": "The second of the two tokens of the pool, sorted by address"
							},
							"unstakedFee()": {
								"notice": "The pool's unstaked fee in pips, i.e. 1e-6"
							},
							"updateRewardsGrowthGlobal()": {
								"notice": "Updates rewardGrowthGlobalX128 every time when any tick is crossed, or when any position is staked/unstaked from the gauge"
							}
						},
						"notice": "A CL pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification",
						"version": 1
					}
				}
			},
			"contracts/core/interfaces/IERC20Minimal.sol": {
				"IERC20Minimal": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"params": {
									"owner": "The account that approved spending of its tokens",
									"spender": "The account for which the spending allowance was modified",
									"value": "The new allowance from the owner to the spender"
								}
							},
							"Transfer(address,address,uint256)": {
								"params": {
									"from": "The account from which the tokens were sent, i.e. the balance decreased",
									"to": "The account to which the tokens were sent, i.e. the balance increased",
									"value": "The amount of tokens that were transferred"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"params": {
									"owner": "The account of the token owner",
									"spender": "The account of the token spender"
								},
								"returns": {
									"_0": "The current allowance granted by `owner` to `spender`"
								}
							},
							"approve(address,uint256)": {
								"params": {
									"amount": "The amount of tokens allowed to be used by `spender`",
									"spender": "The account which will be allowed to spend a given amount of the owners tokens"
								},
								"returns": {
									"_0": "Returns true for a successful approval, false for unsuccessful"
								}
							},
							"balanceOf(address)": {
								"params": {
									"account": "The account for which to look up the number of tokens it has, i.e. its balance"
								},
								"returns": {
									"_0": "The number of tokens held by the account"
								}
							},
							"transfer(address,uint256)": {
								"params": {
									"amount": "The number of tokens to send from the sender to the recipient",
									"recipient": "The account that will receive the amount transferred"
								},
								"returns": {
									"_0": "Returns true for a successful transfer, false for an unsuccessful transfer"
								}
							},
							"transferFrom(address,address,uint256)": {
								"params": {
									"amount": "The amount of the transfer",
									"recipient": "The recipient of the transfer",
									"sender": "The account from which the transfer will be initiated"
								},
								"returns": {
									"_0": "Returns true for a successful transfer, false for unsuccessful"
								}
							}
						},
						"title": "Minimal ERC20 interface for CL",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"params\":{\"owner\":\"The account that approved spending of its tokens\",\"spender\":\"The account for which the spending allowance was modified\",\"value\":\"The new allowance from the owner to the spender\"}},\"Transfer(address,address,uint256)\":{\"params\":{\"from\":\"The account from which the tokens were sent, i.e. the balance decreased\",\"to\":\"The account to which the tokens were sent, i.e. the balance increased\",\"value\":\"The amount of tokens that were transferred\"}}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"owner\":\"The account of the token owner\",\"spender\":\"The account of the token spender\"},\"returns\":{\"_0\":\"The current allowance granted by `owner` to `spender`\"}},\"approve(address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens allowed to be used by `spender`\",\"spender\":\"The account which will be allowed to spend a given amount of the owners tokens\"},\"returns\":{\"_0\":\"Returns true for a successful approval, false for unsuccessful\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The account for which to look up the number of tokens it has, i.e. its balance\"},\"returns\":{\"_0\":\"The number of tokens held by the account\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to send from the sender to the recipient\",\"recipient\":\"The account that will receive the amount transferred\"},\"returns\":{\"_0\":\"Returns true for a successful transfer, false for an unsuccessful transfer\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The amount of the transfer\",\"recipient\":\"The recipient of the transfer\",\"sender\":\"The account from which the transfer will be initiated\"},\"returns\":{\"_0\":\"Returns true for a successful transfer, false for unsuccessful\"}}},\"title\":\"Minimal ERC20 interface for CL\",\"version\":1},\"userdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"Event emitted when the approval amount for the spender of a given owner's tokens changes.\"},\"Transfer(address,address,uint256)\":{\"notice\":\"Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\"}},\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"Returns the current allowance given to a spender by an owner\"},\"approve(address,uint256)\":{\"notice\":\"Sets the allowance of a spender from the `msg.sender` to the value `amount`\"},\"balanceOf(address)\":{\"notice\":\"Returns the balance of a token\"},\"transfer(address,uint256)\":{\"notice\":\"Transfers the amount of token from the `msg.sender` to the recipient\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\"}},\"notice\":\"Contains a subset of the full ERC20 interface that is used in CL\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/interfaces/IERC20Minimal.sol\":\"IERC20Minimal\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/IERC20Minimal.sol\":{\"keccak256\":\"0xa7d3b1fd5f9b9d8848a3ed9d1137eb9c79fa1fa4484347e0f75e285a2e51ea40\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://0a3f7e24d48048a87d541cc014fd51ff4cc3c54aeb78b559d17d75884671fb43\",\"dweb:/ipfs/QmWQC2DiaLXaj3QnwUgvZrKP3xvWVxUjxXDfTMmq6aziYc\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"notice": "Event emitted when the approval amount for the spender of a given owner's tokens changes."
							},
							"Transfer(address,address,uint256)": {
								"notice": "Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`."
							}
						},
						"kind": "user",
						"methods": {
							"allowance(address,address)": {
								"notice": "Returns the current allowance given to a spender by an owner"
							},
							"approve(address,uint256)": {
								"notice": "Sets the allowance of a spender from the `msg.sender` to the value `amount`"
							},
							"balanceOf(address)": {
								"notice": "Returns the balance of a token"
							},
							"transfer(address,uint256)": {
								"notice": "Transfers the amount of token from the `msg.sender` to the recipient"
							},
							"transferFrom(address,address,uint256)": {
								"notice": "Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`"
							}
						},
						"notice": "Contains a subset of the full ERC20 interface that is used in CL",
						"version": 1
					}
				}
			},
			"contracts/core/interfaces/IFactoryRegistry.sol": {
				"IFactoryRegistry": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "poolFactory",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "votingRewardsFactory",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "gaugeFactory",
									"type": "address"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "poolFactory",
									"type": "address"
								}
							],
							"name": "factoriesToPoolFactory",
							"outputs": [
								{
									"internalType": "address",
									"name": "votingRewardsFactory",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "gaugeFactory",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "poolFactory",
									"type": "address"
								}
							],
							"name": "isPoolFactoryApproved",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,address,address)": "9b140a85",
							"factoriesToPoolFactory(address)": "1217afdb",
							"isPoolFactoryApproved(address)": "d1ea0a1d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"votingRewardsFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gaugeFactory\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolFactory\",\"type\":\"address\"}],\"name\":\"factoriesToPoolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"votingRewardsFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gaugeFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolFactory\",\"type\":\"address\"}],\"name\":\"isPoolFactoryApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/interfaces/IFactoryRegistry.sol\":\"IFactoryRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/IFactoryRegistry.sol\":{\"keccak256\":\"0xa2dbe19a5c9e221ffd8e4612ee8a4aa1233ab0ad059d4b7d91a8dca1153bcea0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://47a01d481d3a1f5172b8601d267439e24662849d7ebb3e1e66ec46d541e57831\",\"dweb:/ipfs/QmYG56TEtS8dwHrNaHxGrTp8r6cDzRkuGKsHBbiToUVEvX\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/core/interfaces/IVoter.sol": {
				"IVoter": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_fees",
									"type": "address[]"
								},
								{
									"internalType": "address[][]",
									"name": "_tokens",
									"type": "address[][]"
								},
								{
									"internalType": "uint256",
									"name": "_tokenId",
									"type": "uint256"
								}
							],
							"name": "claimFees",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_gauges",
									"type": "address[]"
								}
							],
							"name": "claimRewards",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_poolFactory",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_pool",
									"type": "address"
								}
							],
							"name": "createGauge",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_gauges",
									"type": "address[]"
								}
							],
							"name": "distribute",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "gauge",
									"type": "address"
								}
							],
							"name": "distribute",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "emergencyCouncil",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factoryRegistry",
							"outputs": [
								{
									"internalType": "contract IFactoryRegistry",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_gauge",
									"type": "address"
								}
							],
							"name": "gaugeToBribes",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_gauge",
									"type": "address"
								}
							],
							"name": "gaugeToFees",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_pool",
									"type": "address"
								}
							],
							"name": "gauges",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_gauge",
									"type": "address"
								}
							],
							"name": "isAlive",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_gauge",
									"type": "address"
								}
							],
							"name": "killGauge",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "ve",
							"outputs": [
								{
									"internalType": "contract IVotingEscrow",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address[]",
									"name": "_poolVote",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "_weights",
									"type": "uint256[]"
								}
							],
							"name": "vote",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"claimFees(address[],address[][],uint256)": {
								"details": "Utility to help batch fee claims.",
								"params": {
									"_fees": "Array of FeesVotingReward contracts to collect from.",
									"_tokenId": "Id of veNFT that you wish to claim fees for.",
									"_tokens": "Array of tokens that are used as fees."
								}
							},
							"claimRewards(address[])": {
								"params": {
									"_gauges": "Array of gauges to collect emissions from."
								}
							},
							"distribute(address[])": {
								"details": "Utility to distribute to gauges of pools in array.",
								"params": {
									"_gauges": "Array of gauges to distribute to."
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"claimFees(address[],address[][],uint256)": "666256aa",
							"claimRewards(address[])": "f9f031df",
							"createGauge(address,address)": "794cea3c",
							"distribute(address)": "63453ae1",
							"distribute(address[])": "6138889b",
							"emergencyCouncil()": "7778960e",
							"factoryRegistry()": "3bf0c9fb",
							"gaugeToBribes(address)": "294a6aeb",
							"gaugeToFees(address)": "c4f08165",
							"gauges(address)": "b9a09fd5",
							"isAlive(address)": "1703e5f9",
							"killGauge(address)": "992a7933",
							"ve()": "1f850716",
							"vote(uint256,address[],uint256[])": "7ac09bf7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_fees\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_tokens\",\"type\":\"address[][]\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"createGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyCouncil\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryRegistry\",\"outputs\":[{\"internalType\":\"contract IFactoryRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"gaugeToBribes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"gaugeToFees\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"gauges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"isAlive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"killGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ve\",\"outputs\":[{\"internalType\":\"contract IVotingEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_poolVote\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimFees(address[],address[][],uint256)\":{\"details\":\"Utility to help batch fee claims.\",\"params\":{\"_fees\":\"Array of FeesVotingReward contracts to collect from.\",\"_tokenId\":\"Id of veNFT that you wish to claim fees for.\",\"_tokens\":\"Array of tokens that are used as fees.\"}},\"claimRewards(address[])\":{\"params\":{\"_gauges\":\"Array of gauges to collect emissions from.\"}},\"distribute(address[])\":{\"details\":\"Utility to distribute to gauges of pools in array.\",\"params\":{\"_gauges\":\"Array of gauges to distribute to.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimFees(address[],address[][],uint256)\":{\"notice\":\"Claim fees for a given NFT.\"},\"claimRewards(address[])\":{\"notice\":\"Claim emissions from gauges.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/interfaces/IVoter.sol\":\"IVoter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/IFactoryRegistry.sol\":{\"keccak256\":\"0xa2dbe19a5c9e221ffd8e4612ee8a4aa1233ab0ad059d4b7d91a8dca1153bcea0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://47a01d481d3a1f5172b8601d267439e24662849d7ebb3e1e66ec46d541e57831\",\"dweb:/ipfs/QmYG56TEtS8dwHrNaHxGrTp8r6cDzRkuGKsHBbiToUVEvX\"]},\"contracts/core/interfaces/IVoter.sol\":{\"keccak256\":\"0x029239646ad77a70b26a702b7e286521a03d5b89d148ff7c13d9bf56f6203187\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://eccfb9403ee8f5e7f604eccb0cafcbd047c1f73371537227011e6d557895fa68\",\"dweb:/ipfs/QmTjDHzzKTzkYhTeiWA1po8YL3USKkkMZSxZixVgsSQcXK\"]},\"contracts/core/interfaces/IVotingEscrow.sol\":{\"keccak256\":\"0x17ee815f29f7bc6a1528203976ed5bfdd945354dd72a7d322e8b092e331beb3d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9845c5056470191730c8a8688663bc9808172e57395c1c6053b5145bf9fd5098\",\"dweb:/ipfs/QmXyoRGbDe6KPngPsKXWZCyLLdmRTFKdhVD5Gf1Y15rG7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"claimFees(address[],address[][],uint256)": {
								"notice": "Claim fees for a given NFT."
							},
							"claimRewards(address[])": {
								"notice": "Claim emissions from gauges."
							}
						},
						"version": 1
					}
				}
			},
			"contracts/core/interfaces/IVotingEscrow.sol": {
				"IVotingEscrow": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_lockDuration",
									"type": "uint256"
								}
							],
							"name": "createLock",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "team",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"createLock(uint256,uint256)": {
								"params": {
									"_lockDuration": "Number of seconds to lock tokens for (rounded down to nearest week)",
									"_value": "Amount to deposit"
								},
								"returns": {
									"_0": "TokenId of created veNFT"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"createLock(uint256,uint256)": "b52c05fe",
							"team()": "85f2aef2"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"}],\"name\":\"createLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createLock(uint256,uint256)\":{\"params\":{\"_lockDuration\":\"Number of seconds to lock tokens for (rounded down to nearest week)\",\"_value\":\"Amount to deposit\"},\"returns\":{\"_0\":\"TokenId of created veNFT\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createLock(uint256,uint256)\":{\"notice\":\"Deposit `_value` tokens for `msg.sender` and lock for `_lockDuration`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/interfaces/IVotingEscrow.sol\":\"IVotingEscrow\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/IVotingEscrow.sol\":{\"keccak256\":\"0x17ee815f29f7bc6a1528203976ed5bfdd945354dd72a7d322e8b092e331beb3d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9845c5056470191730c8a8688663bc9808172e57395c1c6053b5145bf9fd5098\",\"dweb:/ipfs/QmXyoRGbDe6KPngPsKXWZCyLLdmRTFKdhVD5Gf1Y15rG7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"createLock(uint256,uint256)": {
								"notice": "Deposit `_value` tokens for `msg.sender` and lock for `_lockDuration`"
							}
						},
						"version": 1
					}
				}
			},
			"contracts/core/interfaces/callback/ICLMintCallback.sol": {
				"ICLMintCallback": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount0Owed",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1Owed",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "uniswapV3MintCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"uniswapV3MintCallback(uint256,uint256,bytes)": {
								"details": "In the implementation you must pay the pool tokens owed for the minted liquidity. The caller of this method must be checked to be a CLPool deployed by the canonical CLFactory.",
								"params": {
									"amount0Owed": "The amount of token0 due to the pool for the minted liquidity",
									"amount1Owed": "The amount of token1 due to the pool for the minted liquidity",
									"data": "Any data passed through by the caller via the ICLPoolActions#mint call"
								}
							}
						},
						"title": "Callback for ICLPoolActions#mint",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"uniswapV3MintCallback(uint256,uint256,bytes)": "d3487997"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Owed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Owed\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3MintCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"uniswapV3MintCallback(uint256,uint256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the minted liquidity. The caller of this method must be checked to be a CLPool deployed by the canonical CLFactory.\",\"params\":{\"amount0Owed\":\"The amount of token0 due to the pool for the minted liquidity\",\"amount1Owed\":\"The amount of token1 due to the pool for the minted liquidity\",\"data\":\"Any data passed through by the caller via the ICLPoolActions#mint call\"}}},\"title\":\"Callback for ICLPoolActions#mint\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"uniswapV3MintCallback(uint256,uint256,bytes)\":{\"notice\":\"Called to `msg.sender` after minting liquidity to a position from ICLPool#mint.\"}},\"notice\":\"Any contract that calls ICLPoolActions#mint must implement this interface\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/interfaces/callback/ICLMintCallback.sol\":\"ICLMintCallback\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/callback/ICLMintCallback.sol\":{\"keccak256\":\"0x22d4ed43f7d7313e676e80f7ae3315f53c3a84fbf256efae5116ef0aba32c1e8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a21d9618b9a9c2fe2cf35d9d6d608dd02a112bd05e6020fbe71e7e09064c2be7\",\"dweb:/ipfs/QmeBQiyVmxVTPT3ftVFDkiDVgZLMar6SQegryLC7A3jmLr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"uniswapV3MintCallback(uint256,uint256,bytes)": {
								"notice": "Called to `msg.sender` after minting liquidity to a position from ICLPool#mint."
							}
						},
						"notice": "Any contract that calls ICLPoolActions#mint must implement this interface",
						"version": 1
					}
				}
			},
			"contracts/core/interfaces/callback/ICLSwapCallback.sol": {
				"ICLSwapCallback": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"details": "In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a CLPool deployed by the canonical CLFactory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",
								"params": {
									"amount0Delta": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
									"amount1Delta": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
									"data": "Any data passed through by the caller via the ICLPoolActions#swap call"
								}
							}
						},
						"title": "Callback for ICLPoolActions#swap",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"uniswapV3SwapCallback(int256,int256,bytes)": "fa461e33"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a CLPool deployed by the canonical CLFactory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the ICLPoolActions#swap call\"}}},\"title\":\"Callback for ICLPoolActions#swap\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via ICLPool#swap.\"}},\"notice\":\"Any contract that calls ICLPoolActions#swap must implement this interface\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/interfaces/callback/ICLSwapCallback.sol\":\"ICLSwapCallback\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/callback/ICLSwapCallback.sol\":{\"keccak256\":\"0xb93e1ef2be3090a64b3b024f60253aef64b875f61dffaef8b9231351f8054948\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b16ccd544a6a551c977b7a7d6b6b9704c68e86624d66ecb16d945d3b88239458\",\"dweb:/ipfs/QmPBP5K81AFfHazhbbVb9ZXh6hzKeLqZcEUxnrkKNY7z2L\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"notice": "Called to `msg.sender` after executing a swap via ICLPool#swap."
							}
						},
						"notice": "Any contract that calls ICLPoolActions#swap must implement this interface",
						"version": 1
					}
				}
			},
			"contracts/core/interfaces/pool/ICLPoolActions.sol": {
				"ICLPoolActions": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flash",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								}
							],
							"name": "increaseObservationCardinalityNext",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_factory",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_token1",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "_tickSpacing",
									"type": "int24"
								},
								{
									"internalType": "address",
									"name": "_factoryRegistry",
									"type": "address"
								},
								{
									"internalType": "uint160",
									"name": "_sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_gauge",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_nft",
									"type": "address"
								}
							],
							"name": "setGaugeAndPositionManager",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int128",
									"name": "stakedLiquidityDelta",
									"type": "int128"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "bool",
									"name": "positionUpdate",
									"type": "bool"
								}
							],
							"name": "stake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "zeroForOne",
									"type": "bool"
								},
								{
									"internalType": "int256",
									"name": "amountSpecified",
									"type": "int256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "rewardRate",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "rewardReserve",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "periodFinish",
									"type": "uint256"
								}
							],
							"name": "syncReward",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "updateRewardsGrowthGlobal",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"burn(int24,int24,uint128)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"burn(int24,int24,uint128,address)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"owner": "Owner of the position in the pool (nft manager or gauge)",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"collect(address,int24,int24,uint128,uint128,address)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"owner": "Owner of the position in the pool (nft manager or gauge)",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"flash(address,uint256,uint256,bytes)": {
								"details": "The caller of this method receives a callback in the form of ICLFlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback",
								"params": {
									"amount0": "The amount of token0 to send",
									"amount1": "The amount of token1 to send",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address which will receive the token0 and token1 amounts"
								}
							},
							"increaseObservationCardinalityNext(uint16)": {
								"details": "This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
								"params": {
									"observationCardinalityNext": "The desired minimum number of observations for the pool to store"
								}
							},
							"initialize(address,address,address,int24,address,uint160)": {
								"details": "Can be called once only Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 valuenot locked because it initializes unlocked",
								"params": {
									"_factory": "The CL factory contract address",
									"_factoryRegistry": "The address of the factory registry managing the pool factory",
									"_sqrtPriceX96": "The initial sqrt price of the pool, as a Q64.96",
									"_tickSpacing": "The pool tick spacing",
									"_token0": "The first token of the pool by address sort order",
									"_token1": "The second token of the pool by address sort order"
								}
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"details": "The caller of this method receives a callback in the form of ICLMintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.",
								"params": {
									"amount": "The amount of liquidity to mint",
									"data": "Any data that should be passed through to the callback",
									"recipient": "The address for which the liquidity will be created",
									"tickLower": "The lower tick of the position in which to add liquidity",
									"tickUpper": "The upper tick of the position in which to add liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback",
									"amount1": "The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
								}
							},
							"setGaugeAndPositionManager(address,address)": {
								"details": "Callable only once, by the gauge factory",
								"params": {
									"_gauge": "The gauge corresponding to this pool",
									"_nft": "The position manager used for position management"
								}
							},
							"stake(int128,int24,int24,bool)": {
								"params": {
									"positionUpdate": "If the nft and gauge position should be updated",
									"stakedLiquidityDelta": "The amount by which to increase or decrease the staked liquidity",
									"tickLower": "The lower tick of the position for which to stake liquidity",
									"tickUpper": "The upper tick of the position for which to stake liquidity"
								}
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"details": "The caller of this method receives a callback in the form of ICLSwapCallback#uniswapV3SwapCallback",
								"params": {
									"amountSpecified": "The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address to receive the output of the swap",
									"sqrtPriceLimitX96": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
									"zeroForOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
								},
								"returns": {
									"amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
									"amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
								}
							},
							"syncReward(uint256,uint256,uint256)": {
								"params": {
									"periodFinish": "the end of the current period of rewards, updated once per epoch",
									"rewardRate": "the rate rewards being distributed during the epoch",
									"rewardReserve": "the available rewards to be distributed during the epoch"
								}
							}
						},
						"title": "Permissionless pool actions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"burn(int24,int24,uint128)": "a34123a7",
							"burn(int24,int24,uint128,address)": "6f89244c",
							"collect(address,int24,int24,uint128,uint128)": "4f1eb3d8",
							"collect(address,int24,int24,uint128,uint128,address)": "31338374",
							"flash(address,uint256,uint256,bytes)": "490e6cbc",
							"increaseObservationCardinalityNext(uint16)": "32148f67",
							"initialize(address,address,address,int24,address,uint160)": "2071d884",
							"mint(address,int24,int24,uint128,bytes)": "3c8a7d8d",
							"setGaugeAndPositionManager(address,address)": "1f7c3568",
							"stake(int128,int24,int24,bool)": "4ed6210f",
							"swap(address,bool,int256,uint160,bytes)": "128acb08",
							"syncReward(uint256,uint256,uint256)": "60a73f9b",
							"updateRewardsGrowthGlobal()": "1b410960"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"_tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"address\",\"name\":\"_factoryRegistry\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"_sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"setGaugeAndPositionManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"stakedLiquidityDelta\",\"type\":\"int128\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"bool\",\"name\":\"positionUpdate\",\"type\":\"bool\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodFinish\",\"type\":\"uint256\"}],\"name\":\"syncReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRewardsGrowthGlobal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"burn(int24,int24,uint128,address)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"owner\":\"Owner of the position in the pool (nft manager or gauge)\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"collect(address,int24,int24,uint128,uint128,address)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"owner\":\"Owner of the position in the pool (nft manager or gauge)\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of ICLFlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(address,address,address,int24,address,uint160)\":{\"details\":\"Can be called once only Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 valuenot locked because it initializes unlocked\",\"params\":{\"_factory\":\"The CL factory contract address\",\"_factoryRegistry\":\"The address of the factory registry managing the pool factory\",\"_sqrtPriceX96\":\"The initial sqrt price of the pool, as a Q64.96\",\"_tickSpacing\":\"The pool tick spacing\",\"_token0\":\"The first token of the pool by address sort order\",\"_token1\":\"The second token of the pool by address sort order\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of ICLMintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"setGaugeAndPositionManager(address,address)\":{\"details\":\"Callable only once, by the gauge factory\",\"params\":{\"_gauge\":\"The gauge corresponding to this pool\",\"_nft\":\"The position manager used for position management\"}},\"stake(int128,int24,int24,bool)\":{\"params\":{\"positionUpdate\":\"If the nft and gauge position should be updated\",\"stakedLiquidityDelta\":\"The amount by which to increase or decrease the staked liquidity\",\"tickLower\":\"The lower tick of the position for which to stake liquidity\",\"tickUpper\":\"The upper tick of the position for which to stake liquidity\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of ICLSwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}},\"syncReward(uint256,uint256,uint256)\":{\"params\":{\"periodFinish\":\"the end of the current period of rewards, updated once per epoch\",\"rewardRate\":\"the rate rewards being distributed during the epoch\",\"rewardReserve\":\"the available rewards to be distributed during the epoch\"}}},\"title\":\"Permissionless pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"burn(int24,int24,uint128,address)\":{\"notice\":\"Burn liquidity from the supplied owner and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"collect(address,int24,int24,uint128,uint128,address)\":{\"notice\":\"Collects tokens owed to a position\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(address,address,address,int24,address,uint160)\":{\"notice\":\"Initialize function used in proxy deployment\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"setGaugeAndPositionManager(address,address)\":{\"notice\":\"Initialize gauge and nft manager\"},\"stake(int128,int24,int24,bool)\":{\"notice\":\"Convert existing liquidity into staked liquidityOnly callable by the gauge associated with this pool\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"},\"syncReward(uint256,uint256,uint256)\":{\"notice\":\"Syncs rewards with gauge\"},\"updateRewardsGrowthGlobal()\":{\"notice\":\"Updates rewardGrowthGlobalX128 every time when any tick is crossed, or when any position is staked/unstaked from the gauge\"}},\"notice\":\"Contains pool methods that can be called by anyone\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/interfaces/pool/ICLPoolActions.sol\":\"ICLPoolActions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/pool/ICLPoolActions.sol\":{\"keccak256\":\"0x7699f31261ab40982e34febe16128f1edfdad39075969195301352ea66bcac40\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://074f1c470e11f30d0fae8b95b963c9d19dcbd2c5bd17ad4ebba95c5f0f073044\",\"dweb:/ipfs/QmdDWMUspgBXfLhcxqESez9rSwA8JYNRycmhkhuKoDCWqJ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"burn(int24,int24,uint128)": {
								"notice": "Burn liquidity from the sender and account tokens owed for the liquidity to the position"
							},
							"burn(int24,int24,uint128,address)": {
								"notice": "Burn liquidity from the supplied owner and account tokens owed for the liquidity to the position"
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"notice": "Collects tokens owed to a position"
							},
							"collect(address,int24,int24,uint128,uint128,address)": {
								"notice": "Collects tokens owed to a position"
							},
							"flash(address,uint256,uint256,bytes)": {
								"notice": "Receive token0 and/or token1 and pay it back, plus a fee, in the callback"
							},
							"increaseObservationCardinalityNext(uint16)": {
								"notice": "Increase the maximum number of price and liquidity observations that this pool will store"
							},
							"initialize(address,address,address,int24,address,uint160)": {
								"notice": "Initialize function used in proxy deployment"
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"notice": "Adds liquidity for the given recipient/tickLower/tickUpper position"
							},
							"setGaugeAndPositionManager(address,address)": {
								"notice": "Initialize gauge and nft manager"
							},
							"stake(int128,int24,int24,bool)": {
								"notice": "Convert existing liquidity into staked liquidityOnly callable by the gauge associated with this pool"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"notice": "Swap token0 for token1, or token1 for token0"
							},
							"syncReward(uint256,uint256,uint256)": {
								"notice": "Syncs rewards with gauge"
							},
							"updateRewardsGrowthGlobal()": {
								"notice": "Updates rewardGrowthGlobalX128 every time when any tick is crossed, or when any position is staked/unstaked from the gauge"
							}
						},
						"notice": "Contains pool methods that can be called by anyone",
						"version": 1
					}
				}
			},
			"contracts/core/interfaces/pool/ICLPoolConstants.sol": {
				"ICLPoolConstants": {
					"abi": [
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factoryRegistry",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "gauge",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxLiquidityPerTick",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "nft",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"factory()": {
								"returns": {
									"_0": "The contract address"
								}
							},
							"factoryRegistry()": {
								"returns": {
									"_0": "The factory registry contract address"
								}
							},
							"gauge()": {
								"returns": {
									"_0": "The gauge contract address"
								}
							},
							"maxLiquidityPerTick()": {
								"details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
								"returns": {
									"_0": "The max amount of liquidity per tick"
								}
							},
							"nft()": {
								"returns": {
									"_0": "The nft manager contract address"
								}
							},
							"tickSpacing()": {
								"details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"token0()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"token1()": {
								"returns": {
									"_0": "The token contract address"
								}
							}
						},
						"title": "Pool state that never changes",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"factory()": "c45a0155",
							"factoryRegistry()": "3bf0c9fb",
							"gauge()": "a6f19c84",
							"maxLiquidityPerTick()": "70cf754a",
							"nft()": "47ccca02",
							"tickSpacing()": "d0c93a7c",
							"token0()": "0dfe1681",
							"token1()": "d21220a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"factoryRegistry()\":{\"returns\":{\"_0\":\"The factory registry contract address\"}},\"gauge()\":{\"returns\":{\"_0\":\"The gauge contract address\"}},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"nft()\":{\"returns\":{\"_0\":\"The nft manager contract address\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"Pool state that never changes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the ICLFactory interface\"},\"factoryRegistry()\":{\"notice\":\"The factory registry that manages pool <> gauge <> reward factory relationships\"},\"gauge()\":{\"notice\":\"The gauge corresponding to this pool\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"nft()\":{\"notice\":\"The nft manager\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"These parameters are not defined as immutable (due to proxy pattern) but are effectively immutable.i.e., the methods will always return the same values\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/interfaces/pool/ICLPoolConstants.sol\":\"ICLPoolConstants\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/pool/ICLPoolConstants.sol\":{\"keccak256\":\"0xfad00d4ca1a40ef27d9614a98483ca67c4491b6f19e376901745c57a6949b512\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://2b5ea522565efb803d146673ff9e37aa090a5abff334fea587da62f4fb5d6647\",\"dweb:/ipfs/QmVRPscHFVjYFvRbJf41zVLtA2jVLbEUH66KGtEzspXnWS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"factory()": {
								"notice": "The contract that deployed the pool, which must adhere to the ICLFactory interface"
							},
							"factoryRegistry()": {
								"notice": "The factory registry that manages pool <> gauge <> reward factory relationships"
							},
							"gauge()": {
								"notice": "The gauge corresponding to this pool"
							},
							"maxLiquidityPerTick()": {
								"notice": "The maximum amount of position liquidity that can use any tick in the range"
							},
							"nft()": {
								"notice": "The nft manager"
							},
							"tickSpacing()": {
								"notice": "The pool tick spacing"
							},
							"token0()": {
								"notice": "The first of the two tokens of the pool, sorted by address"
							},
							"token1()": {
								"notice": "The second of the two tokens of the pool, sorted by address"
							}
						},
						"notice": "These parameters are not defined as immutable (due to proxy pattern) but are effectively immutable.i.e., the methods will always return the same values",
						"version": 1
					}
				}
			},
			"contracts/core/interfaces/pool/ICLPoolDerivedState.sol": {
				"ICLPoolDerivedState": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint32[]",
									"name": "secondsAgos",
									"type": "uint32[]"
								}
							],
							"name": "observe",
							"outputs": [
								{
									"internalType": "int56[]",
									"name": "tickCumulatives",
									"type": "int56[]"
								},
								{
									"internalType": "uint160[]",
									"name": "secondsPerLiquidityCumulativeX128s",
									"type": "uint160[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								}
							],
							"name": "snapshotCumulativesInside",
							"outputs": [
								{
									"internalType": "int56",
									"name": "tickCumulativeInside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityInsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsInside",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"observe(uint32[])": {
								"details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
								"params": {
									"secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
								},
								"returns": {
									"secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
									"tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
								}
							},
							"snapshotCumulativesInside(int24,int24)": {
								"details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
								"params": {
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"secondsInside": "The snapshot of seconds per liquidity for the range",
									"secondsPerLiquidityInsideX128": "The snapshot of seconds per liquidity for the range",
									"tickCumulativeInside": "The snapshot of the tick accumulator for the range"
								}
							}
						},
						"title": "Pool state that is not stored",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"observe(uint32[])": "883bdbfd",
							"snapshotCumulativesInside(int24,int24)": "a38807f2"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}}},\"title\":\"Pool state that is not stored\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"}},\"notice\":\"Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/interfaces/pool/ICLPoolDerivedState.sol\":\"ICLPoolDerivedState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/pool/ICLPoolDerivedState.sol\":{\"keccak256\":\"0xc15e4192a1b7b756cababb994341dc8e78627e1341465e47b1dcb66e9ed54af8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ee4b9269244f6b7ac57cba3b8966ac188220596d16cef71d186f0a6446593b4e\",\"dweb:/ipfs/QmQjyc5ggDgoAv4YbL5uKpNxRDoTvVYw6vePFgu4aNigmQ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"observe(uint32[])": {
								"notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
							},
							"snapshotCumulativesInside(int24,int24)": {
								"notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
							}
						},
						"notice": "Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.",
						"version": 1
					}
				}
			},
			"contracts/core/interfaces/pool/ICLPoolEvents.sol": {
				"ICLPoolEvents": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "CollectFees",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid1",
									"type": "uint256"
								}
							],
							"name": "Flash",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextOld",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextNew",
									"type": "uint16"
								}
							],
							"name": "IncreaseObservationCardinalityNext",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Initialize",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0New",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1New",
									"type": "uint8"
								}
							],
							"name": "SetFeeProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Swap",
							"type": "event"
						}
					],
					"devdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"details": "Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect",
								"params": {
									"amount": "The amount of liquidity to remove",
									"amount0": "The amount of token0 withdrawn",
									"amount1": "The amount of token1 withdrawn",
									"owner": "The owner of the position for which liquidity is removed",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"details": "Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees",
								"params": {
									"amount0": "The amount of token0 fees collected",
									"amount1": "The amount of token1 fees collected",
									"owner": "The owner of the position for which fees are collected",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"CollectFees(address,uint128,uint128)": {
								"params": {
									"amount0": "The amount of token1 protocol fees that is withdrawn",
									"recipient": "The address that receives the collected protocol fees"
								}
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"params": {
									"amount0": "The amount of token0 that was flashed",
									"amount1": "The amount of token1 that was flashed",
									"paid0": "The amount of token0 paid for the flash, which can exceed the amount0 plus the fee",
									"paid1": "The amount of token1 paid for the flash, which can exceed the amount1 plus the fee",
									"recipient": "The address that received the tokens from flash",
									"sender": "The address that initiated the swap call, and that received the callback"
								}
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"details": "observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.",
								"params": {
									"observationCardinalityNextNew": "The updated value of the next observation cardinality",
									"observationCardinalityNextOld": "The previous value of the next observation cardinality"
								}
							},
							"Initialize(uint160,int24)": {
								"details": "Mint/Burn/Swap cannot be emitted by the pool before Initialize",
								"params": {
									"sqrtPriceX96": "The initial sqrt price of the pool, as a Q64.96",
									"tick": "The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
								}
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"params": {
									"amount": "The amount of liquidity minted to the position range",
									"amount0": "How much token0 was required for the minted liquidity",
									"amount1": "How much token1 was required for the minted liquidity",
									"owner": "The owner of the position and recipient of any minted liquidity",
									"sender": "The address that minted the liquidity",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"params": {
									"feeProtocol0New": "The updated value of the token0 protocol fee",
									"feeProtocol0Old": "The previous value of the token0 protocol fee",
									"feeProtocol1New": "The updated value of the token1 protocol fee",
									"feeProtocol1Old": "The previous value of the token1 protocol fee"
								}
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"params": {
									"amount0": "The delta of the token0 balance of the pool",
									"amount1": "The delta of the token1 balance of the pool",
									"liquidity": "The liquidity of the pool after the swap",
									"recipient": "The address that received the output of the swap",
									"sender": "The address that initiated the swap call, and that received the callback",
									"sqrtPriceX96": "The sqrt(price) of the pool after the swap, as a Q64.96",
									"tick": "The log base 1.0001 of price of the pool after the swap"
								}
							}
						},
						"kind": "dev",
						"methods": {},
						"title": "Events emitted by a pool",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"details\":\"Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\",\"params\":{\"amount\":\"The amount of liquidity to remove\",\"amount0\":\"The amount of token0 withdrawn\",\"amount1\":\"The amount of token1 withdrawn\",\"owner\":\"The owner of the position for which liquidity is removed\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"details\":\"Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\",\"params\":{\"amount0\":\"The amount of token0 fees collected\",\"amount1\":\"The amount of token1 fees collected\",\"owner\":\"The owner of the position for which fees are collected\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"CollectFees(address,uint128,uint128)\":{\"params\":{\"amount0\":\"The amount of token1 protocol fees that is withdrawn\",\"recipient\":\"The address that receives the collected protocol fees\"}},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was flashed\",\"amount1\":\"The amount of token1 that was flashed\",\"paid0\":\"The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\",\"paid1\":\"The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\",\"recipient\":\"The address that received the tokens from flash\",\"sender\":\"The address that initiated the swap call, and that received the callback\"}},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"details\":\"observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.\",\"params\":{\"observationCardinalityNextNew\":\"The updated value of the next observation cardinality\",\"observationCardinalityNextOld\":\"The previous value of the next observation cardinality\"}},\"Initialize(uint160,int24)\":{\"details\":\"Mint/Burn/Swap cannot be emitted by the pool before Initialize\",\"params\":{\"sqrtPriceX96\":\"The initial sqrt price of the pool, as a Q64.96\",\"tick\":\"The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\"}},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of liquidity minted to the position range\",\"amount0\":\"How much token0 was required for the minted liquidity\",\"amount1\":\"How much token1 was required for the minted liquidity\",\"owner\":\"The owner of the position and recipient of any minted liquidity\",\"sender\":\"The address that minted the liquidity\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"params\":{\"feeProtocol0New\":\"The updated value of the token0 protocol fee\",\"feeProtocol0Old\":\"The previous value of the token0 protocol fee\",\"feeProtocol1New\":\"The updated value of the token1 protocol fee\",\"feeProtocol1Old\":\"The previous value of the token1 protocol fee\"}},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"params\":{\"amount0\":\"The delta of the token0 balance of the pool\",\"amount1\":\"The delta of the token1 balance of the pool\",\"liquidity\":\"The liquidity of the pool after the swap\",\"recipient\":\"The address that received the output of the swap\",\"sender\":\"The address that initiated the swap call, and that received the callback\",\"sqrtPriceX96\":\"The sqrt(price) of the pool after the swap, as a Q64.96\",\"tick\":\"The log base 1.0001 of price of the pool after the swap\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"Events emitted by a pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectFees(address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the gauge\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains all events emitted by the pool\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/interfaces/pool/ICLPoolEvents.sol\":\"ICLPoolEvents\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/pool/ICLPoolEvents.sol\":{\"keccak256\":\"0x32fbcac8952f1c5c44b466b0e1c28634ce71372c0f65242aa0d821cebdddcc2b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://19f22382292967f97640f84a7edfa01cf7deb303bf882344b9985007f1dcbef2\",\"dweb:/ipfs/Qmej7vWwun9fRBCrcvzPHdZP1jtLSCxJtjTSdkVTcgWeAE\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when a position's liquidity is removed"
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"notice": "Emitted when fees are collected by the owner of a position"
							},
							"CollectFees(address,uint128,uint128)": {
								"notice": "Emitted when the collected protocol fees are withdrawn by the gauge"
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"notice": "Emitted by the pool for any flashes of token0/token1"
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"notice": "Emitted by the pool for increases to the number of observations that can be stored"
							},
							"Initialize(uint160,int24)": {
								"notice": "Emitted exactly once by a pool when #initialize is first called on the pool"
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is minted for a given position"
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"notice": "Emitted when the protocol fee is changed by the pool"
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"notice": "Emitted by the pool for any swaps between token0 and token1"
							}
						},
						"kind": "user",
						"methods": {},
						"notice": "Contains all events emitted by the pool",
						"version": 1
					}
				}
			},
			"contracts/core/interfaces/pool/ICLPoolOwnerActions.sol": {
				"ICLPoolOwnerActions": {
					"abi": [
						{
							"inputs": [],
							"name": "collectFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"collectFees()": {
								"returns": {
									"amount0": "The gauge fee collected in token0",
									"amount1": "The gauge fee collected in token1"
								}
							}
						},
						"title": "Permissioned pool actions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"collectFees()": "c8796572"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"collectFees()\":{\"returns\":{\"amount0\":\"The gauge fee collected in token0\",\"amount1\":\"The gauge fee collected in token1\"}}},\"title\":\"Permissioned pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collectFees()\":{\"notice\":\"Collect the gauge fee accrued to the pool\"}},\"notice\":\"Contains pool methods that may only be called by the factory owner\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/interfaces/pool/ICLPoolOwnerActions.sol\":\"ICLPoolOwnerActions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/pool/ICLPoolOwnerActions.sol\":{\"keccak256\":\"0xeafd14ae3e15c9f663507e004c599618bfd5d2a90d58b3b450f9372f9e3f54f8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://49472c8cf06dc7084e22fc57ffdce860aa7a9ff77f12e4bef0c13a078bbc5831\",\"dweb:/ipfs/Qmd29vWULezsJJzhw3wZxsU6Hsng5949v2TiVCbdga4Vqe\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"collectFees()": {
								"notice": "Collect the gauge fee accrued to the pool"
							}
						},
						"notice": "Contains pool methods that may only be called by the factory owner",
						"version": 1
					}
				}
			},
			"contracts/core/interfaces/pool/ICLPoolState.sol": {
				"ICLPoolState": {
					"abi": [
						{
							"inputs": [],
							"name": "fee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal0X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal1X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "gaugeFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "token0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "token1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint256",
									"name": "_rewardGrowthGlobalX128",
									"type": "uint256"
								}
							],
							"name": "getRewardGrowthInside",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "rewardGrowthInsideX128",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "lastUpdated",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "liquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "observations",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "blockTimestamp",
									"type": "uint32"
								},
								{
									"internalType": "int56",
									"name": "tickCumulative",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityCumulativeX128",
									"type": "uint160"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "periodFinish",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "_liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rewardGrowthGlobalX128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rewardRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rewardReserve",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rollover",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "slot0",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								},
								{
									"internalType": "uint16",
									"name": "observationIndex",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinality",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								},
								{
									"internalType": "bool",
									"name": "unlocked",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "stakedLiquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int16",
									"name": "wordPosition",
									"type": "int16"
								}
							],
							"name": "tickBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "ticks",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidityGross",
									"type": "uint128"
								},
								{
									"internalType": "int128",
									"name": "liquidityNet",
									"type": "int128"
								},
								{
									"internalType": "int128",
									"name": "stakedLiquidityNet",
									"type": "int128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside0X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside1X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "rewardGrowthOutsideX128",
									"type": "uint256"
								},
								{
									"internalType": "int56",
									"name": "tickCumulativeOutside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityOutsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsOutside",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unstakedFee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"fee()": {
								"details": "Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.",
								"returns": {
									"_0": "The swap & flash fee"
								}
							},
							"feeGrowthGlobal0X128()": {
								"details": "This value can overflow the uint256"
							},
							"feeGrowthGlobal1X128()": {
								"details": "This value can overflow the uint256"
							},
							"gaugeFees()": {
								"details": "Gauge fees will never exceed uint128 max in either token"
							},
							"getRewardGrowthInside(int24,int24,uint256)": {
								"details": "Used in gauge reward/earned calculations",
								"params": {
									"_rewardGrowthGlobalX128": "a calculated rewardGrowthGlobalX128 or 0 (in case of 0 it means we use the rewardGrowthGlobalX128 from state)",
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"rewardGrowthInsideX128": "The reward growth in the range"
								}
							},
							"liquidity()": {
								"details": "This value has no relationship to the total liquidity across all ticksThis value includes staked liquidity"
							},
							"observations(uint256)": {
								"details": "You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.",
								"params": {
									"index": "The element of the observations array to fetch"
								},
								"returns": {
									"blockTimestamp": "The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"
								}
							},
							"positions(bytes32)": {
								"params": {
									"key": "The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"
								},
								"returns": {
									"_liquidity": "The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
								}
							},
							"rewardGrowthGlobalX128()": {
								"details": "This value can overflow the uint256"
							},
							"rollover()": {
								"details": "rollover will always be smaller than the rewards distributed that epoch"
							},
							"slot0()": {
								"returns": {
									"sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. unlocked Whether the pool is currently locked to reentrancy"
								}
							},
							"stakedLiquidity()": {
								"details": "This value has no relationship to the total staked liquidity across all ticks"
							},
							"ticks(int24)": {
								"params": {
									"tick": "The tick to look up"
								},
								"returns": {
									"liquidityGross": "the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, stakedLiquidityNet how much staked liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, rewardGrowthOutsideX128 the reward growth on the other side of the tick from the current tick in emission token tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."
								}
							},
							"unstakedFee()": {
								"details": "Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.",
								"returns": {
									"_0": "The unstaked fee"
								}
							}
						},
						"title": "Pool state that can change",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"fee()": "ddca3f43",
							"feeGrowthGlobal0X128()": "f3058399",
							"feeGrowthGlobal1X128()": "46141319",
							"gaugeFees()": "293833ba",
							"getRewardGrowthInside(int24,int24,uint256)": "a16368c9",
							"lastUpdated()": "d0b06f5d",
							"liquidity()": "1a686502",
							"observations(uint256)": "252c09d7",
							"periodFinish()": "ebe2b12b",
							"positions(bytes32)": "514ea4bf",
							"rewardGrowthGlobalX128()": "57806ada",
							"rewardRate()": "7b0a47ee",
							"rewardReserve()": "cab64bcd",
							"rollover()": "b056b49a",
							"slot0()": "3850c7bd",
							"stakedLiquidity()": "3ab04b20",
							"tickBitmap(int16)": "5339c296",
							"ticks(int24)": "f30dba93",
							"unstakedFee()": "b64cc67b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugeFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"_rewardGrowthGlobalX128\",\"type\":\"uint256\"}],\"name\":\"getRewardGrowthInside\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardGrowthInsideX128\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdated\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardGrowthGlobalX128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedLiquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"stakedLiquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardGrowthOutsideX128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakedFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"fee()\":{\"details\":\"Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.\",\"returns\":{\"_0\":\"The swap & flash fee\"}},\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"gaugeFees()\":{\"details\":\"Gauge fees will never exceed uint128 max in either token\"},\"getRewardGrowthInside(int24,int24,uint256)\":{\"details\":\"Used in gauge reward/earned calculations\",\"params\":{\"_rewardGrowthGlobalX128\":\"a calculated rewardGrowthGlobalX128 or 0 (in case of 0 it means we use the rewardGrowthGlobalX128 from state)\",\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"rewardGrowthInsideX128\":\"The reward growth in the range\"}},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticksThis value includes staked liquidity\"},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"rewardGrowthGlobalX128()\":{\"details\":\"This value can overflow the uint256\"},\"rollover()\":{\"details\":\"rollover will always be smaller than the rewards distributed that epoch\"},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. unlocked Whether the pool is currently locked to reentrancy\"}},\"stakedLiquidity()\":{\"details\":\"This value has no relationship to the total staked liquidity across all ticks\"},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, stakedLiquidityNet how much staked liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, rewardGrowthOutsideX128 the reward growth on the other side of the tick from the current tick in emission token tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}},\"unstakedFee()\":{\"details\":\"Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.\",\"returns\":{\"_0\":\"The unstaked fee\"}}},\"title\":\"Pool state that can change\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fee()\":{\"notice\":\"The pool's swap & flash fee in pips, i.e. 1e-6\"},\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"gaugeFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the gauge\"},\"getRewardGrowthInside(int24,int24,uint256)\":{\"notice\":\"Returns data about reward growth within a tick range. RewardGrowthGlobalX128 can be supplied as a parameter for claimable reward calculations.\"},\"lastUpdated()\":{\"notice\":\"last time the rewardReserve and rewardRate were updated\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"periodFinish()\":{\"notice\":\"timestamp of the end of the current epoch's rewards\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"rewardGrowthGlobalX128()\":{\"notice\":\"The reward growth as a Q128.128 rewards of emission collected per unit of liquidity for the entire life of the pool\"},\"rewardRate()\":{\"notice\":\"the emission rate of time-based farming\"},\"rewardReserve()\":{\"notice\":\"acts as a virtual reserve that holds information on how many rewards are yet to be distributed\"},\"rollover()\":{\"notice\":\"tracks total rewards distributed when no staked liquidity in active tick for epoch ending at periodFinishthis amount is rolled over on the next call to notifyRewardAmount\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"stakedLiquidity()\":{\"notice\":\"The currently in range staked liquidity available to the pool\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"},\"unstakedFee()\":{\"notice\":\"The pool's unstaked fee in pips, i.e. 1e-6\"}},\"notice\":\"These methods compose the pool's state, and can change with any frequency including multiple times per transaction\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/interfaces/pool/ICLPoolState.sol\":\"ICLPoolState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/pool/ICLPoolState.sol\":{\"keccak256\":\"0xe57d65825a097d6f0ab55d7ae39b528695b3df65320ed524124fbb55949bfcf9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b63b25beebe612acfd564f40b0d95b3844ee71bf969a3357419e7a54f1ece961\",\"dweb:/ipfs/Qmdk3mNLz3cSZscbXFsJp69gjgxFcBv6K5mdc6tjnmtFSR\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"fee()": {
								"notice": "The pool's swap & flash fee in pips, i.e. 1e-6"
							},
							"feeGrowthGlobal0X128()": {
								"notice": "The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"
							},
							"feeGrowthGlobal1X128()": {
								"notice": "The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"
							},
							"gaugeFees()": {
								"notice": "The amounts of token0 and token1 that are owed to the gauge"
							},
							"getRewardGrowthInside(int24,int24,uint256)": {
								"notice": "Returns data about reward growth within a tick range. RewardGrowthGlobalX128 can be supplied as a parameter for claimable reward calculations."
							},
							"lastUpdated()": {
								"notice": "last time the rewardReserve and rewardRate were updated"
							},
							"liquidity()": {
								"notice": "The currently in range liquidity available to the pool"
							},
							"observations(uint256)": {
								"notice": "Returns data about a specific observation index"
							},
							"periodFinish()": {
								"notice": "timestamp of the end of the current epoch's rewards"
							},
							"positions(bytes32)": {
								"notice": "Returns the information about a position by the position's key"
							},
							"rewardGrowthGlobalX128()": {
								"notice": "The reward growth as a Q128.128 rewards of emission collected per unit of liquidity for the entire life of the pool"
							},
							"rewardRate()": {
								"notice": "the emission rate of time-based farming"
							},
							"rewardReserve()": {
								"notice": "acts as a virtual reserve that holds information on how many rewards are yet to be distributed"
							},
							"rollover()": {
								"notice": "tracks total rewards distributed when no staked liquidity in active tick for epoch ending at periodFinishthis amount is rolled over on the next call to notifyRewardAmount"
							},
							"slot0()": {
								"notice": "The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."
							},
							"stakedLiquidity()": {
								"notice": "The currently in range staked liquidity available to the pool"
							},
							"tickBitmap(int16)": {
								"notice": "Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
							},
							"ticks(int24)": {
								"notice": "Look up information about a specific tick in the pool"
							},
							"unstakedFee()": {
								"notice": "The pool's unstaked fee in pips, i.e. 1e-6"
							}
						},
						"notice": "These methods compose the pool's state, and can change with any frequency including multiple times per transaction",
						"version": 1
					}
				}
			},
			"contracts/core/libraries/BitMath.sol": {
				"BitMath": {
					"abi": [],
					"devdoc": {
						"details": "This library provides functionality for computing bit properties of an unsigned integer",
						"kind": "dev",
						"methods": {},
						"title": "BitMath",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/core/libraries/BitMath.sol\":187:2789  library BitMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/core/libraries/BitMath.sol\":187:2789  library BitMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220e9e957cb50153001d070b46e0a59e386f39dc0fba94434812b9aef01112e58ef64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e9e957cb50153001d070b46e0a59e386f39dc0fba94434812b9aef01112e58ef64736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE9 0xE9 JUMPI 0xCB POP ISZERO ADDRESS ADD 0xD0 PUSH17 0xB46E0A59E386F39DC0FBA94434812B9AEF ADD GT 0x2E PC 0xEF PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "187:2602:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e9e957cb50153001d070b46e0a59e386f39dc0fba94434812b9aef01112e58ef64736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE9 0xE9 JUMPI 0xCB POP ISZERO ADDRESS ADD 0xD0 PUSH17 0xB46E0A59E386F39DC0FBA94434812B9AEF ADD GT 0x2E PC 0xEF PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "187:2602:17:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"leastSignificantBit(uint256)": "infinite",
								"mostSignificantBit(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 187,
									"end": 2789,
									"name": "PUSH #[$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "PUSH [$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "PUSH",
									"source": 17,
									"value": "B"
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "CODECOPY",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "BYTE",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "PUSH",
									"source": 17,
									"value": "73"
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "EQ",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "INVALID",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "tag",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "ADDRESS",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "PUSH",
									"source": 17,
									"value": "73"
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "MSTORE8",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 187,
									"end": 2789,
									"name": "RETURN",
									"source": 17
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e9e957cb50153001d070b46e0a59e386f39dc0fba94434812b9aef01112e58ef64736f6c63430007060033",
									".code": [
										{
											"begin": 187,
											"end": 2789,
											"name": "PUSHDEPLOYADDRESS",
											"source": 17
										},
										{
											"begin": 187,
											"end": 2789,
											"name": "ADDRESS",
											"source": 17
										},
										{
											"begin": 187,
											"end": 2789,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 187,
											"end": 2789,
											"name": "PUSH",
											"source": 17,
											"value": "80"
										},
										{
											"begin": 187,
											"end": 2789,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 187,
											"end": 2789,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 187,
											"end": 2789,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 187,
											"end": 2789,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 187,
											"end": 2789,
											"name": "REVERT",
											"source": 17
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This library provides functionality for computing bit properties of an unsigned integer\",\"kind\":\"dev\",\"methods\":{},\"title\":\"BitMath\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/libraries/BitMath.sol\":\"BitMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/libraries/BitMath.sol\":{\"keccak256\":\"0x82e425066110aac05ed8a9fc90f9ee85142b6f434769447e49d4438a8d9fcd82\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://77a97078bc992c18c59cb61e07fa4632c8a26b6babf00f3b16eabb5dcaa953b4\",\"dweb:/ipfs/QmTj15ufLWk6AxedSVXBcLp5cYf2DCJAeDi94cVemCkm54\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/core/libraries/FixedPoint128.sol": {
				"FixedPoint128": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "FixedPoint128",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/core/libraries/FixedPoint128.sol\":211:310  library FixedPoint128 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/core/libraries/FixedPoint128.sol\":211:310  library FixedPoint128 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220af2e45a8ae608292f3ff954bcf0aec028d297ff58410fb4dec9e8abf8b7302b264736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220af2e45a8ae608292f3ff954bcf0aec028d297ff58410fb4dec9e8abf8b7302b264736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAF 0x2E GASLIMIT 0xA8 0xAE PUSH1 0x82 SWAP3 RETURN SELFDESTRUCT SWAP6 0x4B 0xCF EXP 0xEC MUL DUP14 0x29 PUSH32 0xF58410FB4DEC9E8ABF8B7302B264736F6C634300070600330000000000000000 ",
							"sourceMap": "211:99:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220af2e45a8ae608292f3ff954bcf0aec028d297ff58410fb4dec9e8abf8b7302b264736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAF 0x2E GASLIMIT 0xA8 0xAE PUSH1 0x82 SWAP3 RETURN SELFDESTRUCT SWAP6 0x4B 0xCF EXP 0xEC MUL DUP14 0x29 PUSH32 0xF58410FB4DEC9E8ABF8B7302B264736F6C634300070600330000000000000000 ",
							"sourceMap": "211:99:18:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 211,
									"end": 310,
									"name": "PUSH #[$]",
									"source": 18,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 211,
									"end": 310,
									"name": "PUSH [$]",
									"source": 18,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 211,
									"end": 310,
									"name": "PUSH",
									"source": 18,
									"value": "B"
								},
								{
									"begin": 211,
									"end": 310,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "CODECOPY",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 211,
									"end": 310,
									"name": "BYTE",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "PUSH",
									"source": 18,
									"value": "73"
								},
								{
									"begin": 211,
									"end": 310,
									"name": "EQ",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 211,
									"end": 310,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "INVALID",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "tag",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 211,
									"end": 310,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "ADDRESS",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 211,
									"end": 310,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "PUSH",
									"source": 18,
									"value": "73"
								},
								{
									"begin": 211,
									"end": 310,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "MSTORE8",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 211,
									"end": 310,
									"name": "RETURN",
									"source": 18
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220af2e45a8ae608292f3ff954bcf0aec028d297ff58410fb4dec9e8abf8b7302b264736f6c63430007060033",
									".code": [
										{
											"begin": 211,
											"end": 310,
											"name": "PUSHDEPLOYADDRESS",
											"source": 18
										},
										{
											"begin": 211,
											"end": 310,
											"name": "ADDRESS",
											"source": 18
										},
										{
											"begin": 211,
											"end": 310,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 211,
											"end": 310,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 211,
											"end": 310,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 211,
											"end": 310,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 211,
											"end": 310,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 211,
											"end": 310,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 211,
											"end": 310,
											"name": "REVERT",
											"source": 18
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"FixedPoint128\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/libraries/FixedPoint128.sol\":\"FixedPoint128\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/libraries/FixedPoint128.sol\":{\"keccak256\":\"0x2d1f4f73ae0d8f0a210b8d30084659b57c56ac8f2f96011fca36f00a6d417178\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://2ba88933f16cd2df398e19c6ad227268f83c03081b70d243c97116d2ed9bc241\",\"dweb:/ipfs/QmTUGxdh8snzEM9VrTSS47StCg9VVWvvLJtJeNnMTFY4xb\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)",
						"version": 1
					}
				}
			},
			"contracts/core/libraries/FixedPoint96.sol": {
				"FixedPoint96": {
					"abi": [],
					"devdoc": {
						"details": "Used in SqrtPriceMath.sol",
						"kind": "dev",
						"methods": {},
						"title": "FixedPoint96",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/core/libraries/FixedPoint96.sol\":245:379  library FixedPoint96 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/core/libraries/FixedPoint96.sol\":245:379  library FixedPoint96 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122091b00088012a888ead7d274b38fdf84d1fa38587dd76dc2c7e4d4cf58cb9987464736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122091b00088012a888ead7d274b38fdf84d1fa38587dd76dc2c7e4d4cf58cb9987464736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP2 0xB0 STOP DUP9 ADD 0x2A DUP9 DUP15 0xAD PUSH30 0x274B38FDF84D1FA38587DD76DC2C7E4D4CF58CB9987464736F6C63430007 MOD STOP CALLER ",
							"sourceMap": "245:134:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122091b00088012a888ead7d274b38fdf84d1fa38587dd76dc2c7e4d4cf58cb9987464736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP2 0xB0 STOP DUP9 ADD 0x2A DUP9 DUP15 0xAD PUSH30 0x274B38FDF84D1FA38587DD76DC2C7E4D4CF58CB9987464736F6C63430007 MOD STOP CALLER ",
							"sourceMap": "245:134:19:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 245,
									"end": 379,
									"name": "PUSH #[$]",
									"source": 19,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 245,
									"end": 379,
									"name": "PUSH [$]",
									"source": 19,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 245,
									"end": 379,
									"name": "PUSH",
									"source": 19,
									"value": "B"
								},
								{
									"begin": 245,
									"end": 379,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "CODECOPY",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 245,
									"end": 379,
									"name": "BYTE",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "PUSH",
									"source": 19,
									"value": "73"
								},
								{
									"begin": 245,
									"end": 379,
									"name": "EQ",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "1"
								},
								{
									"begin": 245,
									"end": 379,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "INVALID",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "tag",
									"source": 19,
									"value": "1"
								},
								{
									"begin": 245,
									"end": 379,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "ADDRESS",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 245,
									"end": 379,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "PUSH",
									"source": 19,
									"value": "73"
								},
								{
									"begin": 245,
									"end": 379,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "MSTORE8",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 245,
									"end": 379,
									"name": "RETURN",
									"source": 19
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122091b00088012a888ead7d274b38fdf84d1fa38587dd76dc2c7e4d4cf58cb9987464736f6c63430007060033",
									".code": [
										{
											"begin": 245,
											"end": 379,
											"name": "PUSHDEPLOYADDRESS",
											"source": 19
										},
										{
											"begin": 245,
											"end": 379,
											"name": "ADDRESS",
											"source": 19
										},
										{
											"begin": 245,
											"end": 379,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 245,
											"end": 379,
											"name": "PUSH",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 245,
											"end": 379,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 245,
											"end": 379,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 245,
											"end": 379,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 245,
											"end": 379,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 245,
											"end": 379,
											"name": "REVERT",
											"source": 19
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Used in SqrtPriceMath.sol\",\"kind\":\"dev\",\"methods\":{},\"title\":\"FixedPoint96\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/libraries/FixedPoint96.sol\":\"FixedPoint96\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/libraries/FixedPoint96.sol\":{\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://186d3b528866065a5856f96d2aeec698efa99f8da913e9adf34f8cc296cc993d\",\"dweb:/ipfs/QmUAiMvtAQp8c9dy57bqJYzG7hkb1uChiPaQmt264skoqP\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)",
						"version": 1
					}
				}
			},
			"contracts/core/libraries/FullMath.sol": {
				"FullMath": {
					"abi": [],
					"devdoc": {
						"details": "Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits",
						"kind": "dev",
						"methods": {},
						"title": "Contains 512-bit math functions",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/core/libraries/FullMath.sol\":362:5064  library FullMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/core/libraries/FullMath.sol\":362:5064  library FullMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220f95828329d9d950e6117728e0b3a0e7e1ae406599a5c4028c24a61931920daab64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f95828329d9d950e6117728e0b3a0e7e1ae406599a5c4028c24a61931920daab64736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF9 PC 0x28 ORIGIN SWAP14 SWAP14 SWAP6 0xE PUSH2 0x1772 DUP15 SIGNEXTEND GASPRICE 0xE PUSH31 0x1AE406599A5C4028C24A61931920DAAB64736F6C6343000706003300000000 ",
							"sourceMap": "362:4702:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f95828329d9d950e6117728e0b3a0e7e1ae406599a5c4028c24a61931920daab64736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF9 PC 0x28 ORIGIN SWAP14 SWAP14 SWAP6 0xE PUSH2 0x1772 DUP15 SIGNEXTEND GASPRICE 0xE PUSH31 0x1AE406599A5C4028C24A61931920DAAB64736F6C6343000706003300000000 ",
							"sourceMap": "362:4702:20:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDivRoundingUp(uint256,uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 362,
									"end": 5064,
									"name": "PUSH #[$]",
									"source": 20,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "PUSH [$]",
									"source": 20,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "PUSH",
									"source": 20,
									"value": "B"
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "CODECOPY",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "BYTE",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "PUSH",
									"source": 20,
									"value": "73"
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "EQ",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "INVALID",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "tag",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "ADDRESS",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "PUSH",
									"source": 20,
									"value": "73"
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "MSTORE8",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "RETURN",
									"source": 20
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220f95828329d9d950e6117728e0b3a0e7e1ae406599a5c4028c24a61931920daab64736f6c63430007060033",
									".code": [
										{
											"begin": 362,
											"end": 5064,
											"name": "PUSHDEPLOYADDRESS",
											"source": 20
										},
										{
											"begin": 362,
											"end": 5064,
											"name": "ADDRESS",
											"source": 20
										},
										{
											"begin": 362,
											"end": 5064,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 362,
											"end": 5064,
											"name": "PUSH",
											"source": 20,
											"value": "80"
										},
										{
											"begin": 362,
											"end": 5064,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 362,
											"end": 5064,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 362,
											"end": 5064,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 362,
											"end": 5064,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 362,
											"end": 5064,
											"name": "REVERT",
											"source": 20
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Contains 512-bit math functions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/libraries/FullMath.sol\":\"FullMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/libraries/FullMath.sol\":{\"keccak256\":\"0x5340256039418f5d03512a44173d3dcf1da277a73a461e06fb5668f49cfc46f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75dee99795d1125875233a7f1d356935099cc97b4085c0e451060d77db85d144\",\"dweb:/ipfs/QmTGqyrxVLQd8TBaarqSQDiYvq1QFutCdmTyXk6JpxzKTN\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision",
						"version": 1
					}
				}
			},
			"contracts/core/libraries/LiquidityMath.sol": {
				"LiquidityMath": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Math library for liquidity",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/core/libraries/LiquidityMath.sol\":109:621  library LiquidityMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/core/libraries/LiquidityMath.sol\":109:621  library LiquidityMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220f9a07e4c3f39b008473af8ec96bec1a5d2f59c60cff67bb1ea3c3fa6199ac08b64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f9a07e4c3f39b008473af8ec96bec1a5d2f59c60cff67bb1ea3c3fa6199ac08b64736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF9 LOG0 PUSH31 0x4C3F39B008473AF8EC96BEC1A5D2F59C60CFF67BB1EA3C3FA6199AC08B6473 PUSH16 0x6C634300070600330000000000000000 ",
							"sourceMap": "109:512:21:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f9a07e4c3f39b008473af8ec96bec1a5d2f59c60cff67bb1ea3c3fa6199ac08b64736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF9 LOG0 PUSH31 0x4C3F39B008473AF8EC96BEC1A5D2F59C60CFF67BB1EA3C3FA6199AC08B6473 PUSH16 0x6C634300070600330000000000000000 ",
							"sourceMap": "109:512:21:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"addDelta(uint128,int128)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 109,
									"end": 621,
									"name": "PUSH #[$]",
									"source": 21,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "PUSH [$]",
									"source": 21,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "PUSH",
									"source": 21,
									"value": "B"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "DUP3",
									"source": 21
								},
								{
									"begin": 109,
									"end": 621,
									"name": "DUP3",
									"source": 21
								},
								{
									"begin": 109,
									"end": 621,
									"name": "DUP3",
									"source": 21
								},
								{
									"begin": 109,
									"end": 621,
									"name": "CODECOPY",
									"source": 21
								},
								{
									"begin": 109,
									"end": 621,
									"name": "DUP1",
									"source": 21
								},
								{
									"begin": 109,
									"end": 621,
									"name": "MLOAD",
									"source": 21
								},
								{
									"begin": 109,
									"end": 621,
									"name": "PUSH",
									"source": 21,
									"value": "0"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "BYTE",
									"source": 21
								},
								{
									"begin": 109,
									"end": 621,
									"name": "PUSH",
									"source": 21,
									"value": "73"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "EQ",
									"source": 21
								},
								{
									"begin": 109,
									"end": 621,
									"name": "PUSH [tag]",
									"source": 21,
									"value": "1"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "JUMPI",
									"source": 21
								},
								{
									"begin": 109,
									"end": 621,
									"name": "INVALID",
									"source": 21
								},
								{
									"begin": 109,
									"end": 621,
									"name": "tag",
									"source": 21,
									"value": "1"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "JUMPDEST",
									"source": 21
								},
								{
									"begin": 109,
									"end": 621,
									"name": "ADDRESS",
									"source": 21
								},
								{
									"begin": 109,
									"end": 621,
									"name": "PUSH",
									"source": 21,
									"value": "0"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "MSTORE",
									"source": 21
								},
								{
									"begin": 109,
									"end": 621,
									"name": "PUSH",
									"source": 21,
									"value": "73"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "DUP2",
									"source": 21
								},
								{
									"begin": 109,
									"end": 621,
									"name": "MSTORE8",
									"source": 21
								},
								{
									"begin": 109,
									"end": 621,
									"name": "DUP3",
									"source": 21
								},
								{
									"begin": 109,
									"end": 621,
									"name": "DUP2",
									"source": 21
								},
								{
									"begin": 109,
									"end": 621,
									"name": "RETURN",
									"source": 21
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220f9a07e4c3f39b008473af8ec96bec1a5d2f59c60cff67bb1ea3c3fa6199ac08b64736f6c63430007060033",
									".code": [
										{
											"begin": 109,
											"end": 621,
											"name": "PUSHDEPLOYADDRESS",
											"source": 21
										},
										{
											"begin": 109,
											"end": 621,
											"name": "ADDRESS",
											"source": 21
										},
										{
											"begin": 109,
											"end": 621,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 109,
											"end": 621,
											"name": "PUSH",
											"source": 21,
											"value": "80"
										},
										{
											"begin": 109,
											"end": 621,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 109,
											"end": 621,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 109,
											"end": 621,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 109,
											"end": 621,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 109,
											"end": 621,
											"name": "REVERT",
											"source": 21
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Math library for liquidity\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/libraries/LiquidityMath.sol\":\"LiquidityMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/libraries/LiquidityMath.sol\":{\"keccak256\":\"0xd1059ccc904c8752cec175e8d99e31921c6cd7f3a9c2dd315ce34ac486172ac9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f3630a49e62fa056e2cc4e0278b6f17c5f7e1c9ad2190540cf84c152b58cdef8\",\"dweb:/ipfs/QmdGjKRTNY2qLXJtR2rXU8Nxk4pZwXfbzZYNn3F472QEn6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/core/libraries/LowGasSafeMath.sol": {
				"LowGasSafeMath": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Optimized overflow and underflow safe math operations",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/core/libraries/LowGasSafeMath.sol\":249:1695  library LowGasSafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/core/libraries/LowGasSafeMath.sol\":249:1695  library LowGasSafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212206f6d69b70b687c61cc4bf2e0895902ef99930a5d7a77f108f53303d03b38f21664736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206f6d69b70b687c61cc4bf2e0895902ef99930a5d7a77f108f53303d03b38f21664736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH16 0x6D69B70B687C61CC4BF2E0895902EF99 SWAP4 EXP 0x5D PUSH27 0x77F108F53303D03B38F21664736F6C634300070600330000000000 ",
							"sourceMap": "249:1446:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206f6d69b70b687c61cc4bf2e0895902ef99930a5d7a77f108f53303d03b38f21664736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH16 0x6D69B70B687C61CC4BF2E0895902EF99 SWAP4 EXP 0x5D PUSH27 0x77F108F53303D03B38F21664736F6C634300070600330000000000 ",
							"sourceMap": "249:1446:22:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"add(int256,int256)": "infinite",
								"add(uint256,uint256)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(int256,int256)": "infinite",
								"sub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 249,
									"end": 1695,
									"name": "PUSH #[$]",
									"source": 22,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "PUSH [$]",
									"source": 22,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "PUSH",
									"source": 22,
									"value": "B"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "CODECOPY",
									"source": 22
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "DUP1",
									"source": 22
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "MLOAD",
									"source": 22
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "BYTE",
									"source": 22
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "PUSH",
									"source": 22,
									"value": "73"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "EQ",
									"source": 22
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "1"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "JUMPI",
									"source": 22
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "INVALID",
									"source": 22
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "tag",
									"source": 22,
									"value": "1"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "ADDRESS",
									"source": 22
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "MSTORE",
									"source": 22
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "PUSH",
									"source": 22,
									"value": "73"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "MSTORE8",
									"source": 22
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "RETURN",
									"source": 22
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212206f6d69b70b687c61cc4bf2e0895902ef99930a5d7a77f108f53303d03b38f21664736f6c63430007060033",
									".code": [
										{
											"begin": 249,
											"end": 1695,
											"name": "PUSHDEPLOYADDRESS",
											"source": 22
										},
										{
											"begin": 249,
											"end": 1695,
											"name": "ADDRESS",
											"source": 22
										},
										{
											"begin": 249,
											"end": 1695,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 249,
											"end": 1695,
											"name": "PUSH",
											"source": 22,
											"value": "80"
										},
										{
											"begin": 249,
											"end": 1695,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 249,
											"end": 1695,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 249,
											"end": 1695,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 249,
											"end": 1695,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 249,
											"end": 1695,
											"name": "REVERT",
											"source": 22
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Optimized overflow and underflow safe math operations\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/libraries/LowGasSafeMath.sol\":\"LowGasSafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/libraries/LowGasSafeMath.sol\":{\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bfc1d5d58e59015086b0e65a6c3a2ddad312e2350480510f6c0c8167f3d71a37\",\"dweb:/ipfs/QmQndULYjFsHKHjMAKLMfc12vWbVB5FawtioHtvwcWRJZp\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost",
						"version": 1
					}
				}
			},
			"contracts/core/libraries/Position.sol": {
				"Position": {
					"abi": [],
					"devdoc": {
						"details": "Positions store additional state for tracking fees owed to the position",
						"kind": "dev",
						"methods": {},
						"title": "Position",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/core/libraries/Position.sol\":365:3661  library Position {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/core/libraries/Position.sol\":365:3661  library Position {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212209ffdbfba7c2b3c708191ea46264fbd18f6bf78c7372ab908fd46612996e3450064736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209ffdbfba7c2b3c708191ea46264fbd18f6bf78c7372ab908fd46612996e3450064736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP16 REVERT 0xBF 0xBA PUSH29 0x2B3C708191EA46264FBD18F6BF78C7372AB908FD46612996E345006473 PUSH16 0x6C634300070600330000000000000000 ",
							"sourceMap": "365:3296:23:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209ffdbfba7c2b3c708191ea46264fbd18f6bf78c7372ab908fd46612996e3450064736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP16 REVERT 0xBF 0xBA PUSH29 0x2B3C708191EA46264FBD18F6BF78C7372AB908FD46612996E345006473 PUSH16 0x6C634300070600330000000000000000 ",
							"sourceMap": "365:3296:23:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"get(mapping(bytes32 => struct Position.Info storage ref),address,int24,int24)": "infinite",
								"update(struct Position.Info storage pointer,int128,uint256,uint256,bool)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 365,
									"end": 3661,
									"name": "PUSH #[$]",
									"source": 23,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "PUSH [$]",
									"source": 23,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "PUSH",
									"source": 23,
									"value": "B"
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "CODECOPY",
									"source": 23
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "DUP1",
									"source": 23
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "MLOAD",
									"source": 23
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "BYTE",
									"source": 23
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "PUSH",
									"source": 23,
									"value": "73"
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "EQ",
									"source": 23
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "1"
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "INVALID",
									"source": 23
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "tag",
									"source": 23,
									"value": "1"
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "ADDRESS",
									"source": 23
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "PUSH",
									"source": 23,
									"value": "73"
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "MSTORE8",
									"source": 23
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 365,
									"end": 3661,
									"name": "RETURN",
									"source": 23
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212209ffdbfba7c2b3c708191ea46264fbd18f6bf78c7372ab908fd46612996e3450064736f6c63430007060033",
									".code": [
										{
											"begin": 365,
											"end": 3661,
											"name": "PUSHDEPLOYADDRESS",
											"source": 23
										},
										{
											"begin": 365,
											"end": 3661,
											"name": "ADDRESS",
											"source": 23
										},
										{
											"begin": 365,
											"end": 3661,
											"name": "EQ",
											"source": 23
										},
										{
											"begin": 365,
											"end": 3661,
											"name": "PUSH",
											"source": 23,
											"value": "80"
										},
										{
											"begin": 365,
											"end": 3661,
											"name": "PUSH",
											"source": 23,
											"value": "40"
										},
										{
											"begin": 365,
											"end": 3661,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 365,
											"end": 3661,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 365,
											"end": 3661,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 365,
											"end": 3661,
											"name": "REVERT",
											"source": 23
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Positions store additional state for tracking fees owed to the position\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Position\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Positions represent an owner address' liquidity between a lower and upper tick boundary\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/libraries/Position.sol\":\"Position\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/libraries/FixedPoint128.sol\":{\"keccak256\":\"0x2d1f4f73ae0d8f0a210b8d30084659b57c56ac8f2f96011fca36f00a6d417178\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://2ba88933f16cd2df398e19c6ad227268f83c03081b70d243c97116d2ed9bc241\",\"dweb:/ipfs/QmTUGxdh8snzEM9VrTSS47StCg9VVWvvLJtJeNnMTFY4xb\"]},\"contracts/core/libraries/FullMath.sol\":{\"keccak256\":\"0x5340256039418f5d03512a44173d3dcf1da277a73a461e06fb5668f49cfc46f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75dee99795d1125875233a7f1d356935099cc97b4085c0e451060d77db85d144\",\"dweb:/ipfs/QmTGqyrxVLQd8TBaarqSQDiYvq1QFutCdmTyXk6JpxzKTN\"]},\"contracts/core/libraries/LiquidityMath.sol\":{\"keccak256\":\"0xd1059ccc904c8752cec175e8d99e31921c6cd7f3a9c2dd315ce34ac486172ac9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f3630a49e62fa056e2cc4e0278b6f17c5f7e1c9ad2190540cf84c152b58cdef8\",\"dweb:/ipfs/QmdGjKRTNY2qLXJtR2rXU8Nxk4pZwXfbzZYNn3F472QEn6\"]},\"contracts/core/libraries/Position.sol\":{\"keccak256\":\"0xcf1e701e3fae35be8b77ff1217cfdd23d33eb16fd3cec70be8ea6888f87af285\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://c8c89746dd30e76cc029d4e090e402b28aae0659cc71800758b99137dfe85f55\",\"dweb:/ipfs/QmY4Ft1YBLqzqwTgNdpCyRd7WrY78zKgg4Ddv2zqZiBEiE\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Positions represent an owner address' liquidity between a lower and upper tick boundary",
						"version": 1
					}
				}
			},
			"contracts/core/libraries/SafeCast.sol": {
				"SafeCast": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Safe casting methods",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/core/libraries/SafeCast.sol\":165:1049  library SafeCast {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/core/libraries/SafeCast.sol\":165:1049  library SafeCast {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212208bc1d5498e8868630b52635c31abd8a241527d05d09b96891d03ac75c956531664736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208bc1d5498e8868630b52635c31abd8a241527d05d09b96891d03ac75c956531664736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP12 0xC1 0xD5 0x49 DUP15 DUP9 PUSH9 0x630B52635C31ABD8A2 COINBASE MSTORE PUSH30 0x5D09B96891D03AC75C956531664736F6C63430007060033000000000000 ",
							"sourceMap": "165:884:24:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208bc1d5498e8868630b52635c31abd8a241527d05d09b96891d03ac75c956531664736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP12 0xC1 0xD5 0x49 DUP15 DUP9 PUSH9 0x630B52635C31ABD8A2 COINBASE MSTORE PUSH30 0x5D09B96891D03AC75C956531664736F6C63430007060033000000000000 ",
							"sourceMap": "165:884:24:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"toInt128(int256)": "infinite",
								"toInt256(uint256)": "infinite",
								"toUint160(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 165,
									"end": 1049,
									"name": "PUSH #[$]",
									"source": 24,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "PUSH [$]",
									"source": 24,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "PUSH",
									"source": 24,
									"value": "B"
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "DUP3",
									"source": 24
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "DUP3",
									"source": 24
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "DUP3",
									"source": 24
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "CODECOPY",
									"source": 24
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "DUP1",
									"source": 24
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "MLOAD",
									"source": 24
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "PUSH",
									"source": 24,
									"value": "0"
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "BYTE",
									"source": 24
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "PUSH",
									"source": 24,
									"value": "73"
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "EQ",
									"source": 24
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "PUSH [tag]",
									"source": 24,
									"value": "1"
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "JUMPI",
									"source": 24
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "INVALID",
									"source": 24
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "tag",
									"source": 24,
									"value": "1"
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "JUMPDEST",
									"source": 24
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "ADDRESS",
									"source": 24
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "PUSH",
									"source": 24,
									"value": "0"
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "MSTORE",
									"source": 24
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "PUSH",
									"source": 24,
									"value": "73"
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "DUP2",
									"source": 24
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "MSTORE8",
									"source": 24
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "DUP3",
									"source": 24
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "DUP2",
									"source": 24
								},
								{
									"begin": 165,
									"end": 1049,
									"name": "RETURN",
									"source": 24
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212208bc1d5498e8868630b52635c31abd8a241527d05d09b96891d03ac75c956531664736f6c63430007060033",
									".code": [
										{
											"begin": 165,
											"end": 1049,
											"name": "PUSHDEPLOYADDRESS",
											"source": 24
										},
										{
											"begin": 165,
											"end": 1049,
											"name": "ADDRESS",
											"source": 24
										},
										{
											"begin": 165,
											"end": 1049,
											"name": "EQ",
											"source": 24
										},
										{
											"begin": 165,
											"end": 1049,
											"name": "PUSH",
											"source": 24,
											"value": "80"
										},
										{
											"begin": 165,
											"end": 1049,
											"name": "PUSH",
											"source": 24,
											"value": "40"
										},
										{
											"begin": 165,
											"end": 1049,
											"name": "MSTORE",
											"source": 24
										},
										{
											"begin": 165,
											"end": 1049,
											"name": "PUSH",
											"source": 24,
											"value": "0"
										},
										{
											"begin": 165,
											"end": 1049,
											"name": "DUP1",
											"source": 24
										},
										{
											"begin": 165,
											"end": 1049,
											"name": "REVERT",
											"source": 24
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Safe casting methods\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains methods for safely casting between types\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/libraries/SafeCast.sol\":\"SafeCast\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/libraries/SafeCast.sol\":{\"keccak256\":\"0xd4c1c1b67f946b077d7c52a158113763a89a210fc2927b8491055a962ecd18c0\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://5344400c74320ca8dbe19241db7ff49babbd6c875c1b561c79d6e4315a9fb5f9\",\"dweb:/ipfs/QmRKCNTbkovxK1WvejXZr3iAHhGN97ZT1yWGsWCJFkrT5X\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Contains methods for safely casting between types",
						"version": 1
					}
				}
			},
			"contracts/core/libraries/SqrtPriceMath.sol": {
				"SqrtPriceMath": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Functions based on Q64.96 sqrt price and liquidity",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/core/libraries/SqrtPriceMath.sol\":377:10495  library SqrtPriceMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/core/libraries/SqrtPriceMath.sol\":377:10495  library SqrtPriceMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220bdfb710106889611c8be3fde13915b318a902850e4157772fe840e0b9d0212f264736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bdfb710106889611c8be3fde13915b318a902850e4157772fe840e0b9d0212f264736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBD 0xFB PUSH18 0x106889611C8BE3FDE13915B318A902850E4 ISZERO PUSH24 0x72FE840E0B9D0212F264736F6C6343000706003300000000 ",
							"sourceMap": "377:10118:25:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bdfb710106889611c8be3fde13915b318a902850e4157772fe840e0b9d0212f264736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBD 0xFB PUSH18 0x106889611C8BE3FDE13915B318A902850E4 ISZERO PUSH24 0x72FE840E0B9D0212F264736F6C6343000706003300000000 ",
							"sourceMap": "377:10118:25:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"getAmount0Delta(uint160,uint160,int128)": "infinite",
								"getAmount0Delta(uint160,uint160,uint128,bool)": "infinite",
								"getAmount1Delta(uint160,uint160,int128)": "infinite",
								"getAmount1Delta(uint160,uint160,uint128,bool)": "infinite",
								"getNextSqrtPriceFromAmount0RoundingUp(uint160,uint128,uint256,bool)": "infinite",
								"getNextSqrtPriceFromAmount1RoundingDown(uint160,uint128,uint256,bool)": "infinite",
								"getNextSqrtPriceFromInput(uint160,uint128,uint256,bool)": "infinite",
								"getNextSqrtPriceFromOutput(uint160,uint128,uint256,bool)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 377,
									"end": 10495,
									"name": "PUSH #[$]",
									"source": 25,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "PUSH [$]",
									"source": 25,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "PUSH",
									"source": 25,
									"value": "B"
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "DUP3",
									"source": 25
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "DUP3",
									"source": 25
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "DUP3",
									"source": 25
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "CODECOPY",
									"source": 25
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "DUP1",
									"source": 25
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "MLOAD",
									"source": 25
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "PUSH",
									"source": 25,
									"value": "0"
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "BYTE",
									"source": 25
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "PUSH",
									"source": 25,
									"value": "73"
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "EQ",
									"source": 25
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "PUSH [tag]",
									"source": 25,
									"value": "1"
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "JUMPI",
									"source": 25
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "INVALID",
									"source": 25
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "tag",
									"source": 25,
									"value": "1"
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "JUMPDEST",
									"source": 25
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "ADDRESS",
									"source": 25
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "PUSH",
									"source": 25,
									"value": "0"
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "MSTORE",
									"source": 25
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "PUSH",
									"source": 25,
									"value": "73"
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "DUP2",
									"source": 25
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "MSTORE8",
									"source": 25
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "DUP3",
									"source": 25
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "DUP2",
									"source": 25
								},
								{
									"begin": 377,
									"end": 10495,
									"name": "RETURN",
									"source": 25
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220bdfb710106889611c8be3fde13915b318a902850e4157772fe840e0b9d0212f264736f6c63430007060033",
									".code": [
										{
											"begin": 377,
											"end": 10495,
											"name": "PUSHDEPLOYADDRESS",
											"source": 25
										},
										{
											"begin": 377,
											"end": 10495,
											"name": "ADDRESS",
											"source": 25
										},
										{
											"begin": 377,
											"end": 10495,
											"name": "EQ",
											"source": 25
										},
										{
											"begin": 377,
											"end": 10495,
											"name": "PUSH",
											"source": 25,
											"value": "80"
										},
										{
											"begin": 377,
											"end": 10495,
											"name": "PUSH",
											"source": 25,
											"value": "40"
										},
										{
											"begin": 377,
											"end": 10495,
											"name": "MSTORE",
											"source": 25
										},
										{
											"begin": 377,
											"end": 10495,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 377,
											"end": 10495,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 377,
											"end": 10495,
											"name": "REVERT",
											"source": 25
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Functions based on Q64.96 sqrt price and liquidity\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/libraries/SqrtPriceMath.sol\":\"SqrtPriceMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/libraries/FixedPoint96.sol\":{\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://186d3b528866065a5856f96d2aeec698efa99f8da913e9adf34f8cc296cc993d\",\"dweb:/ipfs/QmUAiMvtAQp8c9dy57bqJYzG7hkb1uChiPaQmt264skoqP\"]},\"contracts/core/libraries/FullMath.sol\":{\"keccak256\":\"0x5340256039418f5d03512a44173d3dcf1da277a73a461e06fb5668f49cfc46f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75dee99795d1125875233a7f1d356935099cc97b4085c0e451060d77db85d144\",\"dweb:/ipfs/QmTGqyrxVLQd8TBaarqSQDiYvq1QFutCdmTyXk6JpxzKTN\"]},\"contracts/core/libraries/LowGasSafeMath.sol\":{\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bfc1d5d58e59015086b0e65a6c3a2ddad312e2350480510f6c0c8167f3d71a37\",\"dweb:/ipfs/QmQndULYjFsHKHjMAKLMfc12vWbVB5FawtioHtvwcWRJZp\"]},\"contracts/core/libraries/SafeCast.sol\":{\"keccak256\":\"0xd4c1c1b67f946b077d7c52a158113763a89a210fc2927b8491055a962ecd18c0\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://5344400c74320ca8dbe19241db7ff49babbd6c875c1b561c79d6e4315a9fb5f9\",\"dweb:/ipfs/QmRKCNTbkovxK1WvejXZr3iAHhGN97ZT1yWGsWCJFkrT5X\"]},\"contracts/core/libraries/SqrtPriceMath.sol\":{\"keccak256\":\"0xefd51a282ca9fbc89394776e7f5c6f96fa084ca26b71d99727780332c87d1843\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1f09b719eff523f65d0d11fc476b9735e1390018d5ff585991d0fc644e913ecf\",\"dweb:/ipfs/QmNiZxxQhqteYgJdhCQ3cZ4S7bTQf2AQRUJqMVvPY3doot\"]},\"contracts/core/libraries/UnsafeMath.sol\":{\"keccak256\":\"0x5f36d7d16348d8c37fe64fda932018d6e5e8acecd054f0f97d32db62d20c6c88\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://4bd4e817ea3d2c26bb2be7e58db3eaa403119562c18d4c09cc92fb31aa231496\",\"dweb:/ipfs/QmbpjgL8Hf1mhmUyf9hpuPk4noGAggCdTqaRBFKqNF3AQw\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas",
						"version": 1
					}
				}
			},
			"contracts/core/libraries/Tick.sol": {
				"Tick": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Tick",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/core/libraries/Tick.sol\":292:13071  library Tick {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/core/libraries/Tick.sol\":292:13071  library Tick {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220067ba41cd20fa2a5d0af1679ff37714980de111a7d56f8368279ecb2df8100cb64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220067ba41cd20fa2a5d0af1679ff37714980de111a7d56f8368279ecb2df8100cb64736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD PUSH28 0xA41CD20FA2A5D0AF1679FF37714980DE111A7D56F8368279ECB2DF81 STOP 0xCB PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "292:12779:26:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220067ba41cd20fa2a5d0af1679ff37714980de111a7d56f8368279ecb2df8100cb64736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD PUSH28 0xA41CD20FA2A5D0AF1679FF37714980DE111A7D56F8368279ECB2DF81 STOP 0xCB PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "292:12779:26:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"clear(mapping(int24 => struct Tick.Info storage ref),int24)": "infinite",
								"cross(mapping(int24 => struct Tick.Info storage ref),int24,uint256,uint256,uint160,int56,uint32,uint256)": "infinite",
								"getFeeGrowthInside(mapping(int24 => struct Tick.Info storage ref),int24,int24,int24,uint256,uint256)": "infinite",
								"getRewardGrowthInside(mapping(int24 => struct Tick.Info storage ref),int24,int24,int24,uint256)": "infinite",
								"tickSpacingToMaxLiquidityPerTick(int24)": "infinite",
								"update(mapping(int24 => struct Tick.Info storage ref),int24,int24,int128,uint256,uint256,uint256,uint160,int56,uint32,bool,uint128)": "infinite",
								"updateStake(mapping(int24 => struct Tick.Info storage ref),int24,int128,bool)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 292,
									"end": 13071,
									"name": "PUSH #[$]",
									"source": 26,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "PUSH [$]",
									"source": 26,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "PUSH",
									"source": 26,
									"value": "B"
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "CODECOPY",
									"source": 26
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "DUP1",
									"source": 26
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "MLOAD",
									"source": 26
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "PUSH",
									"source": 26,
									"value": "0"
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "BYTE",
									"source": 26
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "PUSH",
									"source": 26,
									"value": "73"
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "EQ",
									"source": 26
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "1"
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "JUMPI",
									"source": 26
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "INVALID",
									"source": 26
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "tag",
									"source": 26,
									"value": "1"
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "ADDRESS",
									"source": 26
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "PUSH",
									"source": 26,
									"value": "0"
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "MSTORE",
									"source": 26
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "PUSH",
									"source": 26,
									"value": "73"
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "DUP2",
									"source": 26
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "MSTORE8",
									"source": 26
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "DUP2",
									"source": 26
								},
								{
									"begin": 292,
									"end": 13071,
									"name": "RETURN",
									"source": 26
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220067ba41cd20fa2a5d0af1679ff37714980de111a7d56f8368279ecb2df8100cb64736f6c63430007060033",
									".code": [
										{
											"begin": 292,
											"end": 13071,
											"name": "PUSHDEPLOYADDRESS",
											"source": 26
										},
										{
											"begin": 292,
											"end": 13071,
											"name": "ADDRESS",
											"source": 26
										},
										{
											"begin": 292,
											"end": 13071,
											"name": "EQ",
											"source": 26
										},
										{
											"begin": 292,
											"end": 13071,
											"name": "PUSH",
											"source": 26,
											"value": "80"
										},
										{
											"begin": 292,
											"end": 13071,
											"name": "PUSH",
											"source": 26,
											"value": "40"
										},
										{
											"begin": 292,
											"end": 13071,
											"name": "MSTORE",
											"source": 26
										},
										{
											"begin": 292,
											"end": 13071,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 292,
											"end": 13071,
											"name": "DUP1",
											"source": 26
										},
										{
											"begin": 292,
											"end": 13071,
											"name": "REVERT",
											"source": 26
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Tick\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains functions for managing tick processes and relevant calculations\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/libraries/Tick.sol\":\"Tick\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/libraries/LiquidityMath.sol\":{\"keccak256\":\"0xd1059ccc904c8752cec175e8d99e31921c6cd7f3a9c2dd315ce34ac486172ac9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f3630a49e62fa056e2cc4e0278b6f17c5f7e1c9ad2190540cf84c152b58cdef8\",\"dweb:/ipfs/QmdGjKRTNY2qLXJtR2rXU8Nxk4pZwXfbzZYNn3F472QEn6\"]},\"contracts/core/libraries/LowGasSafeMath.sol\":{\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bfc1d5d58e59015086b0e65a6c3a2ddad312e2350480510f6c0c8167f3d71a37\",\"dweb:/ipfs/QmQndULYjFsHKHjMAKLMfc12vWbVB5FawtioHtvwcWRJZp\"]},\"contracts/core/libraries/SafeCast.sol\":{\"keccak256\":\"0xd4c1c1b67f946b077d7c52a158113763a89a210fc2927b8491055a962ecd18c0\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://5344400c74320ca8dbe19241db7ff49babbd6c875c1b561c79d6e4315a9fb5f9\",\"dweb:/ipfs/QmRKCNTbkovxK1WvejXZr3iAHhGN97ZT1yWGsWCJFkrT5X\"]},\"contracts/core/libraries/Tick.sol\":{\"keccak256\":\"0xb5ebd80c667f4501dba65f4e39e51ff36e5334480849e0ed8604222d20b4ed1e\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://246f590513441ac0f307170f5099e4a0c0b1f579406fc30b909b249858dbd099\",\"dweb:/ipfs/QmaA5uC3eck7nMqyJbpSPEhmXmAXaKLNBSS1Lfnzzzjc95\"]},\"contracts/core/libraries/TickMath.sol\":{\"keccak256\":\"0x2aa3180a8a59b34a513b948d3f2207b5376de7a2c37065853b7c9fbf0cd3d43f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://c4d46ca5384037f14497c6268342b15becf8bbe1a8fecbcd89ca5b80f41fabc2\",\"dweb:/ipfs/QmanLcdh7EppV4yJ1CdWfPB67es3nEjrDiByAYwgkSE58D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Contains functions for managing tick processes and relevant calculations",
						"version": 1
					}
				}
			},
			"contracts/core/libraries/TickBitmap.sol": {
				"TickBitmap": {
					"abi": [],
					"devdoc": {
						"details": "The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.",
						"kind": "dev",
						"methods": {},
						"title": "Packed tick initialized state library",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/core/libraries/TickBitmap.sol\":339:4089  library TickBitmap {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/core/libraries/TickBitmap.sol\":339:4089  library TickBitmap {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220775625b5e662e54e19faf8e3afd2d16ad4a04e28de958a2dba6cd2d3e1e02d9464736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220775625b5e662e54e19faf8e3afd2d16ad4a04e28de958a2dba6cd2d3e1e02d9464736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0x5625B5E662E54E19FAF8E3AFD2D16AD4A04E28DE958A2DBA PUSH13 0xD2D3E1E02D9464736F6C634300 SMOD MOD STOP CALLER ",
							"sourceMap": "339:3750:27:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220775625b5e662e54e19faf8e3afd2d16ad4a04e28de958a2dba6cd2d3e1e02d9464736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0x5625B5E662E54E19FAF8E3AFD2D16AD4A04E28DE958A2DBA PUSH13 0xD2D3E1E02D9464736F6C634300 SMOD MOD STOP CALLER ",
							"sourceMap": "339:3750:27:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"flipTick(mapping(int16 => uint256),int24,int24)": "infinite",
								"nextInitializedTickWithinOneWord(mapping(int16 => uint256),int24,int24,bool)": "infinite",
								"position(int24)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 339,
									"end": 4089,
									"name": "PUSH #[$]",
									"source": 27,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "PUSH [$]",
									"source": 27,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "PUSH",
									"source": 27,
									"value": "B"
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "DUP3",
									"source": 27
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "DUP3",
									"source": 27
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "DUP3",
									"source": 27
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "CODECOPY",
									"source": 27
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "DUP1",
									"source": 27
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "MLOAD",
									"source": 27
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "PUSH",
									"source": 27,
									"value": "0"
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "BYTE",
									"source": 27
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "PUSH",
									"source": 27,
									"value": "73"
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "EQ",
									"source": 27
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "PUSH [tag]",
									"source": 27,
									"value": "1"
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "JUMPI",
									"source": 27
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "INVALID",
									"source": 27
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "tag",
									"source": 27,
									"value": "1"
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "JUMPDEST",
									"source": 27
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "ADDRESS",
									"source": 27
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "PUSH",
									"source": 27,
									"value": "0"
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "MSTORE",
									"source": 27
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "PUSH",
									"source": 27,
									"value": "73"
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "DUP2",
									"source": 27
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "MSTORE8",
									"source": 27
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "DUP3",
									"source": 27
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "DUP2",
									"source": 27
								},
								{
									"begin": 339,
									"end": 4089,
									"name": "RETURN",
									"source": 27
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220775625b5e662e54e19faf8e3afd2d16ad4a04e28de958a2dba6cd2d3e1e02d9464736f6c63430007060033",
									".code": [
										{
											"begin": 339,
											"end": 4089,
											"name": "PUSHDEPLOYADDRESS",
											"source": 27
										},
										{
											"begin": 339,
											"end": 4089,
											"name": "ADDRESS",
											"source": 27
										},
										{
											"begin": 339,
											"end": 4089,
											"name": "EQ",
											"source": 27
										},
										{
											"begin": 339,
											"end": 4089,
											"name": "PUSH",
											"source": 27,
											"value": "80"
										},
										{
											"begin": 339,
											"end": 4089,
											"name": "PUSH",
											"source": 27,
											"value": "40"
										},
										{
											"begin": 339,
											"end": 4089,
											"name": "MSTORE",
											"source": 27
										},
										{
											"begin": 339,
											"end": 4089,
											"name": "PUSH",
											"source": 27,
											"value": "0"
										},
										{
											"begin": 339,
											"end": 4089,
											"name": "DUP1",
											"source": 27
										},
										{
											"begin": 339,
											"end": 4089,
											"name": "REVERT",
											"source": 27
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Packed tick initialized state library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Stores a packed mapping of tick index to its initialized state\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/libraries/TickBitmap.sol\":\"TickBitmap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/libraries/BitMath.sol\":{\"keccak256\":\"0x82e425066110aac05ed8a9fc90f9ee85142b6f434769447e49d4438a8d9fcd82\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://77a97078bc992c18c59cb61e07fa4632c8a26b6babf00f3b16eabb5dcaa953b4\",\"dweb:/ipfs/QmTj15ufLWk6AxedSVXBcLp5cYf2DCJAeDi94cVemCkm54\"]},\"contracts/core/libraries/TickBitmap.sol\":{\"keccak256\":\"0xd829fadfca3f8f5870c877c7eeceb4a692603c16b711174526129987e8745f5b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1d2cbf3802f7e611708a45bc390ee9307d947e49b348294591659444b9989c05\",\"dweb:/ipfs/Qmcny7JNyVYCtcZG3b1BL4ThuKREmAkE9ZKaC3i32pnt7X\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Stores a packed mapping of tick index to its initialized state",
						"version": 1
					}
				}
			},
			"contracts/core/libraries/TickMath.sol": {
				"TickMath": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"MAX_SQRT_RATIO": {
								"details": "The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"
							},
							"MAX_TICK": {
								"details": "The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"
							},
							"MIN_SQRT_RATIO": {
								"details": "The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"
							},
							"MIN_TICK": {
								"details": "The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"
							}
						},
						"title": "Math library for computing sqrt prices from ticks and vice versa",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/core/libraries/TickMath.sol\":313:8644  library TickMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/core/libraries/TickMath.sol\":313:8644  library TickMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220e4369cc3d85a47546a752711b91428efe87c932f9ab54fa9d49354beb95ea76864736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e4369cc3d85a47546a752711b91428efe87c932f9ab54fa9d49354beb95ea76864736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE4 CALLDATASIZE SWAP13 0xC3 0xD8 GAS SELFBALANCE SLOAD PUSH11 0x752711B91428EFE87C932F SWAP11 0xB5 0x4F 0xA9 0xD4 SWAP4 SLOAD 0xBE 0xB9 0x5E 0xA7 PUSH9 0x64736F6C6343000706 STOP CALLER ",
							"sourceMap": "313:8331:28:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e4369cc3d85a47546a752711b91428efe87c932f9ab54fa9d49354beb95ea76864736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE4 CALLDATASIZE SWAP13 0xC3 0xD8 GAS SELFBALANCE SLOAD PUSH11 0x752711B91428EFE87C932F SWAP11 0xB5 0x4F 0xA9 0xD4 SWAP4 SLOAD 0xBE 0xB9 0x5E 0xA7 PUSH9 0x64736F6C6343000706 STOP CALLER ",
							"sourceMap": "313:8331:28:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"getSqrtRatioAtTick(int24)": "infinite",
								"getTickAtSqrtRatio(uint160)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH #[$]",
									"source": 28,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH [$]",
									"source": 28,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 28,
									"value": "B"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP3",
									"source": 28
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP3",
									"source": 28
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP3",
									"source": 28
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "CODECOPY",
									"source": 28
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP1",
									"source": 28
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "MLOAD",
									"source": 28
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 28,
									"value": "0"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "BYTE",
									"source": 28
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 28,
									"value": "73"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "EQ",
									"source": 28
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH [tag]",
									"source": 28,
									"value": "1"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "JUMPI",
									"source": 28
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "INVALID",
									"source": 28
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "tag",
									"source": 28,
									"value": "1"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "JUMPDEST",
									"source": 28
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "ADDRESS",
									"source": 28
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 28,
									"value": "0"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "MSTORE",
									"source": 28
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 28,
									"value": "73"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP2",
									"source": 28
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "MSTORE8",
									"source": 28
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP3",
									"source": 28
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP2",
									"source": 28
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "RETURN",
									"source": 28
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e4369cc3d85a47546a752711b91428efe87c932f9ab54fa9d49354beb95ea76864736f6c63430007060033",
									".code": [
										{
											"begin": 313,
											"end": 8644,
											"name": "PUSHDEPLOYADDRESS",
											"source": 28
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "ADDRESS",
											"source": 28
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "EQ",
											"source": 28
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "PUSH",
											"source": 28,
											"value": "80"
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "PUSH",
											"source": 28,
											"value": "40"
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "MSTORE",
											"source": 28
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "PUSH",
											"source": 28,
											"value": "0"
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "DUP1",
											"source": 28
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "REVERT",
											"source": 28
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"MAX_SQRT_RATIO\":{\"details\":\"The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\"},\"MAX_TICK\":{\"details\":\"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\"},\"MIN_SQRT_RATIO\":{\"details\":\"The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\"},\"MIN_TICK\":{\"details\":\"The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\"}},\"title\":\"Math library for computing sqrt prices from ticks and vice versa\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/libraries/TickMath.sol\":\"TickMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/libraries/TickMath.sol\":{\"keccak256\":\"0x2aa3180a8a59b34a513b948d3f2207b5376de7a2c37065853b7c9fbf0cd3d43f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://c4d46ca5384037f14497c6268342b15becf8bbe1a8fecbcd89ca5b80f41fabc2\",\"dweb:/ipfs/QmanLcdh7EppV4yJ1CdWfPB67es3nEjrDiByAYwgkSE58D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128",
						"version": 1
					}
				}
			},
			"contracts/core/libraries/TransferHelper.sol": {
				"TransferHelper": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "TransferHelper",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/core/libraries/TransferHelper.sol\":253:902  library TransferHelper {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/core/libraries/TransferHelper.sol\":253:902  library TransferHelper {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212205f14c657273f9d0b538e050f2b1afc06e9d6f3c540c64cfa5bc92ab0b346b6ea64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205f14c657273f9d0b538e050f2b1afc06e9d6f3c540c64cfa5bc92ab0b346b6ea64736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5F EQ 0xC6 JUMPI 0x27 EXTCODEHASH SWAP14 SIGNEXTEND MSTORE8 DUP15 SDIV 0xF 0x2B BYTE 0xFC MOD 0xE9 0xD6 RETURN 0xC5 BLOCKHASH 0xC6 0x4C STATICCALL JUMPDEST 0xC9 0x2A 0xB0 0xB3 CHAINID 0xB6 0xEA PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "253:649:29:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205f14c657273f9d0b538e050f2b1afc06e9d6f3c540c64cfa5bc92ab0b346b6ea64736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5F EQ 0xC6 JUMPI 0x27 EXTCODEHASH SWAP14 SIGNEXTEND MSTORE8 DUP15 SDIV 0xF 0x2B BYTE 0xFC MOD 0xE9 0xD6 RETURN 0xC5 BLOCKHASH 0xC6 0x4C STATICCALL JUMPDEST 0xC9 0x2A 0xB0 0xB3 CHAINID 0xB6 0xEA PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "253:649:29:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"safeTransfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 253,
									"end": 902,
									"name": "PUSH #[$]",
									"source": 29,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 253,
									"end": 902,
									"name": "PUSH [$]",
									"source": 29,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 253,
									"end": 902,
									"name": "PUSH",
									"source": 29,
									"value": "B"
								},
								{
									"begin": 253,
									"end": 902,
									"name": "DUP3",
									"source": 29
								},
								{
									"begin": 253,
									"end": 902,
									"name": "DUP3",
									"source": 29
								},
								{
									"begin": 253,
									"end": 902,
									"name": "DUP3",
									"source": 29
								},
								{
									"begin": 253,
									"end": 902,
									"name": "CODECOPY",
									"source": 29
								},
								{
									"begin": 253,
									"end": 902,
									"name": "DUP1",
									"source": 29
								},
								{
									"begin": 253,
									"end": 902,
									"name": "MLOAD",
									"source": 29
								},
								{
									"begin": 253,
									"end": 902,
									"name": "PUSH",
									"source": 29,
									"value": "0"
								},
								{
									"begin": 253,
									"end": 902,
									"name": "BYTE",
									"source": 29
								},
								{
									"begin": 253,
									"end": 902,
									"name": "PUSH",
									"source": 29,
									"value": "73"
								},
								{
									"begin": 253,
									"end": 902,
									"name": "EQ",
									"source": 29
								},
								{
									"begin": 253,
									"end": 902,
									"name": "PUSH [tag]",
									"source": 29,
									"value": "1"
								},
								{
									"begin": 253,
									"end": 902,
									"name": "JUMPI",
									"source": 29
								},
								{
									"begin": 253,
									"end": 902,
									"name": "INVALID",
									"source": 29
								},
								{
									"begin": 253,
									"end": 902,
									"name": "tag",
									"source": 29,
									"value": "1"
								},
								{
									"begin": 253,
									"end": 902,
									"name": "JUMPDEST",
									"source": 29
								},
								{
									"begin": 253,
									"end": 902,
									"name": "ADDRESS",
									"source": 29
								},
								{
									"begin": 253,
									"end": 902,
									"name": "PUSH",
									"source": 29,
									"value": "0"
								},
								{
									"begin": 253,
									"end": 902,
									"name": "MSTORE",
									"source": 29
								},
								{
									"begin": 253,
									"end": 902,
									"name": "PUSH",
									"source": 29,
									"value": "73"
								},
								{
									"begin": 253,
									"end": 902,
									"name": "DUP2",
									"source": 29
								},
								{
									"begin": 253,
									"end": 902,
									"name": "MSTORE8",
									"source": 29
								},
								{
									"begin": 253,
									"end": 902,
									"name": "DUP3",
									"source": 29
								},
								{
									"begin": 253,
									"end": 902,
									"name": "DUP2",
									"source": 29
								},
								{
									"begin": 253,
									"end": 902,
									"name": "RETURN",
									"source": 29
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205f14c657273f9d0b538e050f2b1afc06e9d6f3c540c64cfa5bc92ab0b346b6ea64736f6c63430007060033",
									".code": [
										{
											"begin": 253,
											"end": 902,
											"name": "PUSHDEPLOYADDRESS",
											"source": 29
										},
										{
											"begin": 253,
											"end": 902,
											"name": "ADDRESS",
											"source": 29
										},
										{
											"begin": 253,
											"end": 902,
											"name": "EQ",
											"source": 29
										},
										{
											"begin": 253,
											"end": 902,
											"name": "PUSH",
											"source": 29,
											"value": "80"
										},
										{
											"begin": 253,
											"end": 902,
											"name": "PUSH",
											"source": 29,
											"value": "40"
										},
										{
											"begin": 253,
											"end": 902,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": 253,
											"end": 902,
											"name": "PUSH",
											"source": 29,
											"value": "0"
										},
										{
											"begin": 253,
											"end": 902,
											"name": "DUP1",
											"source": 29
										},
										{
											"begin": 253,
											"end": 902,
											"name": "REVERT",
											"source": 29
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"TransferHelper\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains helper methods for interacting with ERC20 tokens that do not consistently return true/false\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/libraries/TransferHelper.sol\":\"TransferHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/IERC20Minimal.sol\":{\"keccak256\":\"0xa7d3b1fd5f9b9d8848a3ed9d1137eb9c79fa1fa4484347e0f75e285a2e51ea40\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://0a3f7e24d48048a87d541cc014fd51ff4cc3c54aeb78b559d17d75884671fb43\",\"dweb:/ipfs/QmWQC2DiaLXaj3QnwUgvZrKP3xvWVxUjxXDfTMmq6aziYc\"]},\"contracts/core/libraries/TransferHelper.sol\":{\"keccak256\":\"0x3bbe07a0684d98efe73f7012e446873494e74983e1f75a16d42c25b956d61651\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://78ac9659c70ba3253a6e526ba5a144994fb3d32df2e9537787eeb45aae320aec\",\"dweb:/ipfs/QmbaZRbPP2wFZ9coJd2iyPM37hm3kXzPLuRtL6KKr1MCSL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Contains helper methods for interacting with ERC20 tokens that do not consistently return true/false",
						"version": 1
					}
				}
			},
			"contracts/core/libraries/UnsafeMath.sol": {
				"UnsafeMath": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Math functions that do not check inputs or outputs",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/core/libraries/UnsafeMath.sol\":244:659  library UnsafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/core/libraries/UnsafeMath.sol\":244:659  library UnsafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122020037c21a6c9a8c96c3d6041914e3aaa6b0e7a297b3bd4bd3226d03c52f318a264736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122020037c21a6c9a8c96c3d6041914e3aaa6b0e7a297b3bd4bd3226d03c52f318a264736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 KECCAK256 SUB PUSH29 0x21A6C9A8C96C3D6041914E3AAA6B0E7A297B3BD4BD3226D03C52F318A2 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "244:415:30:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122020037c21a6c9a8c96c3d6041914e3aaa6b0e7a297b3bd4bd3226d03c52f318a264736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 KECCAK256 SUB PUSH29 0x21A6C9A8C96C3D6041914E3AAA6B0E7A297B3BD4BD3226D03C52F318A2 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "244:415:30:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"divRoundingUp(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 244,
									"end": 659,
									"name": "PUSH #[$]",
									"source": 30,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 244,
									"end": 659,
									"name": "PUSH [$]",
									"source": 30,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 244,
									"end": 659,
									"name": "PUSH",
									"source": 30,
									"value": "B"
								},
								{
									"begin": 244,
									"end": 659,
									"name": "DUP3",
									"source": 30
								},
								{
									"begin": 244,
									"end": 659,
									"name": "DUP3",
									"source": 30
								},
								{
									"begin": 244,
									"end": 659,
									"name": "DUP3",
									"source": 30
								},
								{
									"begin": 244,
									"end": 659,
									"name": "CODECOPY",
									"source": 30
								},
								{
									"begin": 244,
									"end": 659,
									"name": "DUP1",
									"source": 30
								},
								{
									"begin": 244,
									"end": 659,
									"name": "MLOAD",
									"source": 30
								},
								{
									"begin": 244,
									"end": 659,
									"name": "PUSH",
									"source": 30,
									"value": "0"
								},
								{
									"begin": 244,
									"end": 659,
									"name": "BYTE",
									"source": 30
								},
								{
									"begin": 244,
									"end": 659,
									"name": "PUSH",
									"source": 30,
									"value": "73"
								},
								{
									"begin": 244,
									"end": 659,
									"name": "EQ",
									"source": 30
								},
								{
									"begin": 244,
									"end": 659,
									"name": "PUSH [tag]",
									"source": 30,
									"value": "1"
								},
								{
									"begin": 244,
									"end": 659,
									"name": "JUMPI",
									"source": 30
								},
								{
									"begin": 244,
									"end": 659,
									"name": "INVALID",
									"source": 30
								},
								{
									"begin": 244,
									"end": 659,
									"name": "tag",
									"source": 30,
									"value": "1"
								},
								{
									"begin": 244,
									"end": 659,
									"name": "JUMPDEST",
									"source": 30
								},
								{
									"begin": 244,
									"end": 659,
									"name": "ADDRESS",
									"source": 30
								},
								{
									"begin": 244,
									"end": 659,
									"name": "PUSH",
									"source": 30,
									"value": "0"
								},
								{
									"begin": 244,
									"end": 659,
									"name": "MSTORE",
									"source": 30
								},
								{
									"begin": 244,
									"end": 659,
									"name": "PUSH",
									"source": 30,
									"value": "73"
								},
								{
									"begin": 244,
									"end": 659,
									"name": "DUP2",
									"source": 30
								},
								{
									"begin": 244,
									"end": 659,
									"name": "MSTORE8",
									"source": 30
								},
								{
									"begin": 244,
									"end": 659,
									"name": "DUP3",
									"source": 30
								},
								{
									"begin": 244,
									"end": 659,
									"name": "DUP2",
									"source": 30
								},
								{
									"begin": 244,
									"end": 659,
									"name": "RETURN",
									"source": 30
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122020037c21a6c9a8c96c3d6041914e3aaa6b0e7a297b3bd4bd3226d03c52f318a264736f6c63430007060033",
									".code": [
										{
											"begin": 244,
											"end": 659,
											"name": "PUSHDEPLOYADDRESS",
											"source": 30
										},
										{
											"begin": 244,
											"end": 659,
											"name": "ADDRESS",
											"source": 30
										},
										{
											"begin": 244,
											"end": 659,
											"name": "EQ",
											"source": 30
										},
										{
											"begin": 244,
											"end": 659,
											"name": "PUSH",
											"source": 30,
											"value": "80"
										},
										{
											"begin": 244,
											"end": 659,
											"name": "PUSH",
											"source": 30,
											"value": "40"
										},
										{
											"begin": 244,
											"end": 659,
											"name": "MSTORE",
											"source": 30
										},
										{
											"begin": 244,
											"end": 659,
											"name": "PUSH",
											"source": 30,
											"value": "0"
										},
										{
											"begin": 244,
											"end": 659,
											"name": "DUP1",
											"source": 30
										},
										{
											"begin": 244,
											"end": 659,
											"name": "REVERT",
											"source": 30
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Math functions that do not check inputs or outputs\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains methods that perform common math functions but do not do any overflow or underflow checks\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/libraries/UnsafeMath.sol\":\"UnsafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/libraries/UnsafeMath.sol\":{\"keccak256\":\"0x5f36d7d16348d8c37fe64fda932018d6e5e8acecd054f0f97d32db62d20c6c88\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://4bd4e817ea3d2c26bb2be7e58db3eaa403119562c18d4c09cc92fb31aa231496\",\"dweb:/ipfs/QmbpjgL8Hf1mhmUyf9hpuPk4noGAggCdTqaRBFKqNF3AQw\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Contains methods that perform common math functions but do not do any overflow or underflow checks",
						"version": 1
					}
				}
			},
			"contracts/libraries/VelodromeTimeLibrary.sol": {
				"VelodromeTimeLibrary": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/libraries/VelodromeTimeLibrary.sol\":57:952  library VelodromeTimeLibrary {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/libraries/VelodromeTimeLibrary.sol\":57:952  library VelodromeTimeLibrary {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220fa463d3310217fbd385a8f6a0760bddd7e8b8c18944c3764348f3ec20fbd2e8864736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fa463d3310217fbd385a8f6a0760bddd7e8b8c18944c3764348f3ec20fbd2e8864736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STATICCALL CHAINID RETURNDATASIZE CALLER LT 0x21 PUSH32 0xBD385A8F6A0760BDDD7E8B8C18944C3764348F3EC20FBD2E8864736F6C634300 SMOD MOD STOP CALLER ",
							"sourceMap": "57:895:31:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fa463d3310217fbd385a8f6a0760bddd7e8b8c18944c3764348f3ec20fbd2e8864736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STATICCALL CHAINID RETURNDATASIZE CALLER LT 0x21 PUSH32 0xBD385A8F6A0760BDDD7E8B8C18944C3764348F3EC20FBD2E8864736F6C634300 SMOD MOD STOP CALLER ",
							"sourceMap": "57:895:31:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"epochNext(uint256)": "infinite",
								"epochStart(uint256)": "infinite",
								"epochVoteEnd(uint256)": "infinite",
								"epochVoteStart(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 57,
									"end": 952,
									"name": "PUSH #[$]",
									"source": 31,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 57,
									"end": 952,
									"name": "PUSH [$]",
									"source": 31,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 57,
									"end": 952,
									"name": "PUSH",
									"source": 31,
									"value": "B"
								},
								{
									"begin": 57,
									"end": 952,
									"name": "DUP3",
									"source": 31
								},
								{
									"begin": 57,
									"end": 952,
									"name": "DUP3",
									"source": 31
								},
								{
									"begin": 57,
									"end": 952,
									"name": "DUP3",
									"source": 31
								},
								{
									"begin": 57,
									"end": 952,
									"name": "CODECOPY",
									"source": 31
								},
								{
									"begin": 57,
									"end": 952,
									"name": "DUP1",
									"source": 31
								},
								{
									"begin": 57,
									"end": 952,
									"name": "MLOAD",
									"source": 31
								},
								{
									"begin": 57,
									"end": 952,
									"name": "PUSH",
									"source": 31,
									"value": "0"
								},
								{
									"begin": 57,
									"end": 952,
									"name": "BYTE",
									"source": 31
								},
								{
									"begin": 57,
									"end": 952,
									"name": "PUSH",
									"source": 31,
									"value": "73"
								},
								{
									"begin": 57,
									"end": 952,
									"name": "EQ",
									"source": 31
								},
								{
									"begin": 57,
									"end": 952,
									"name": "PUSH [tag]",
									"source": 31,
									"value": "1"
								},
								{
									"begin": 57,
									"end": 952,
									"name": "JUMPI",
									"source": 31
								},
								{
									"begin": 57,
									"end": 952,
									"name": "INVALID",
									"source": 31
								},
								{
									"begin": 57,
									"end": 952,
									"name": "tag",
									"source": 31,
									"value": "1"
								},
								{
									"begin": 57,
									"end": 952,
									"name": "JUMPDEST",
									"source": 31
								},
								{
									"begin": 57,
									"end": 952,
									"name": "ADDRESS",
									"source": 31
								},
								{
									"begin": 57,
									"end": 952,
									"name": "PUSH",
									"source": 31,
									"value": "0"
								},
								{
									"begin": 57,
									"end": 952,
									"name": "MSTORE",
									"source": 31
								},
								{
									"begin": 57,
									"end": 952,
									"name": "PUSH",
									"source": 31,
									"value": "73"
								},
								{
									"begin": 57,
									"end": 952,
									"name": "DUP2",
									"source": 31
								},
								{
									"begin": 57,
									"end": 952,
									"name": "MSTORE8",
									"source": 31
								},
								{
									"begin": 57,
									"end": 952,
									"name": "DUP3",
									"source": 31
								},
								{
									"begin": 57,
									"end": 952,
									"name": "DUP2",
									"source": 31
								},
								{
									"begin": 57,
									"end": 952,
									"name": "RETURN",
									"source": 31
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220fa463d3310217fbd385a8f6a0760bddd7e8b8c18944c3764348f3ec20fbd2e8864736f6c63430007060033",
									".code": [
										{
											"begin": 57,
											"end": 952,
											"name": "PUSHDEPLOYADDRESS",
											"source": 31
										},
										{
											"begin": 57,
											"end": 952,
											"name": "ADDRESS",
											"source": 31
										},
										{
											"begin": 57,
											"end": 952,
											"name": "EQ",
											"source": 31
										},
										{
											"begin": 57,
											"end": 952,
											"name": "PUSH",
											"source": 31,
											"value": "80"
										},
										{
											"begin": 57,
											"end": 952,
											"name": "PUSH",
											"source": 31,
											"value": "40"
										},
										{
											"begin": 57,
											"end": 952,
											"name": "MSTORE",
											"source": 31
										},
										{
											"begin": 57,
											"end": 952,
											"name": "PUSH",
											"source": 31,
											"value": "0"
										},
										{
											"begin": 57,
											"end": 952,
											"name": "DUP1",
											"source": 31
										},
										{
											"begin": 57,
											"end": 952,
											"name": "REVERT",
											"source": 31
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/VelodromeTimeLibrary.sol\":\"VelodromeTimeLibrary\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/VelodromeTimeLibrary.sol\":{\"keccak256\":\"0x53d5f0b1b864a7dc552ef0291526938a36b1936517d17f62515bb6ba51c1260d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bbc80fd3b18f04224a2a813d6c20a305c7e0479d6414a78d482b45635bc97dba\",\"dweb:/ipfs/QmQFbXCkjzeFgY5M8DyeKZjxeuN8xGdmUmjNH7FNMkLi8T\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/core/IERC721.sol": {
				"ast": {
					"absolutePath": "contracts/core/IERC721.sol",
					"exportedSymbols": {
						"IERC721": [
							112
						]
					},
					"id": 113,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:0"
						},
						{
							"id": 2,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "58:19:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 112,
							"linearizedBaseContracts": [
								112
							],
							"name": "IERC721",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "106:90:0",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"id": 11,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "217:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "217:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "239:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 6,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "239:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "259:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 8,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "259:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "216:67:0"
									},
									"src": "202:82:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 12,
										"nodeType": "StructuredDocumentation",
										"src": "292:96:0",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"id": 20,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "409:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "409:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 16,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "432:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "432:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 18,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "458:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 17,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "458:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "408:74:0"
									},
									"src": "394:89:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 21,
										"nodeType": "StructuredDocumentation",
										"src": "491:119:0",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"id": 29,
									"name": "ApprovalForAll",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 23,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 29,
												"src": "637:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 22,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "637:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 25,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 29,
												"src": "660:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 24,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "660:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 27,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nodeType": "VariableDeclaration",
												"scope": 29,
												"src": "686:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 26,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "686:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "636:64:0"
									},
									"src": "616:85:0"
								},
								{
									"documentation": {
										"id": 30,
										"nodeType": "StructuredDocumentation",
										"src": "709:78:0",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 37,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 32,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 37,
												"src": "812:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 31,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "812:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "811:15:0"
									},
									"returnParameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "balance",
												"nodeType": "VariableDeclaration",
												"scope": 37,
												"src": "850:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 34,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "850:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "849:17:0"
									},
									"scope": 112,
									"src": "793:74:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 38,
										"nodeType": "StructuredDocumentation",
										"src": "875:137:0",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 45,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 41,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 40,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 45,
												"src": "1035:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 39,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1035:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1034:17:0"
									},
									"returnParameters": {
										"id": 44,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 43,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 45,
												"src": "1075:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 42,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1075:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1074:15:0"
									},
									"scope": 112,
									"src": "1018:72:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 46,
										"nodeType": "StructuredDocumentation",
										"src": "1098:578:0",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 57,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 55,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 48,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 57,
												"src": "1708:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 47,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1708:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 50,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 57,
												"src": "1722:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 49,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1722:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 52,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 57,
												"src": "1734:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 51,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1734:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 54,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 57,
												"src": "1751:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 53,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1751:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1707:64:0"
									},
									"returnParameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1780:0:0"
									},
									"scope": 112,
									"src": "1682:99:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 58,
										"nodeType": "StructuredDocumentation",
										"src": "1789:721:0",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC-721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n   {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 67,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 65,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 60,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "2542:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 59,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2542:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "2556:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 61,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2556:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 64,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "2568:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 63,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2568:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2541:43:0"
									},
									"returnParameters": {
										"id": 66,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2593:0:0"
									},
									"scope": 112,
									"src": "2516:78:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 68,
										"nodeType": "StructuredDocumentation",
										"src": "2602:748:0",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 77,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 70,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 77,
												"src": "3378:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 69,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3378:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 72,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 77,
												"src": "3392:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 71,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3392:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 77,
												"src": "3404:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 73,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3404:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3377:43:0"
									},
									"returnParameters": {
										"id": 76,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3429:0:0"
									},
									"scope": 112,
									"src": "3356:74:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 78,
										"nodeType": "StructuredDocumentation",
										"src": "3438:464:0",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 85,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 83,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 80,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 85,
												"src": "3925:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 79,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3925:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 82,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 85,
												"src": "3937:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 81,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3937:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3924:29:0"
									},
									"returnParameters": {
										"id": 84,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3962:0:0"
									},
									"scope": 112,
									"src": "3908:55:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 86,
										"nodeType": "StructuredDocumentation",
										"src": "3971:324:0",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the address zero.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 93,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 91,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 88,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 93,
												"src": "4328:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 87,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4328:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 90,
												"mutability": "mutable",
												"name": "approved",
												"nodeType": "VariableDeclaration",
												"scope": 93,
												"src": "4346:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 89,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4346:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4327:33:0"
									},
									"returnParameters": {
										"id": 92,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4369:0:0"
									},
									"scope": 112,
									"src": "4301:69:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 94,
										"nodeType": "StructuredDocumentation",
										"src": "4378:145:0",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 101,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 97,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 96,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "4550:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 95,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4550:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4549:17:0"
									},
									"returnParameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 99,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "4590:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 98,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4590:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4589:18:0"
									},
									"scope": 112,
									"src": "4529:79:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 102,
										"nodeType": "StructuredDocumentation",
										"src": "4616:142:0",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 111,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 107,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 104,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "4790:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 103,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4790:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 106,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "4805:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 105,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4805:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4789:33:0"
									},
									"returnParameters": {
										"id": 110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 109,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "4846:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 108,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4846:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4845:6:0"
									},
									"scope": 112,
									"src": "4764:88:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 113,
							"src": "81:4774:0"
						}
					],
					"src": "33:4824:0"
				},
				"id": 0
			},
			"contracts/core/INonfungiblePositionManager.sol": {
				"ast": {
					"absolutePath": "contracts/core/INonfungiblePositionManager.sol",
					"exportedSymbols": {
						"INonfungiblePositionManager": [
							324
						]
					},
					"id": 325,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 114,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "46:24:1"
						},
						{
							"id": 115,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "72:19:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 116,
								"nodeType": "StructuredDocumentation",
								"src": "97:172:1",
								"text": "@title Non-fungible token for positions\n @notice Wraps CL positions in a non-fungible token interface which allows for them to be transferred\n and authorized."
							},
							"fullyImplemented": false,
							"id": 324,
							"linearizedBaseContracts": [
								324
							],
							"name": "INonfungiblePositionManager",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 117,
										"nodeType": "StructuredDocumentation",
										"src": "315:463:1",
										"text": "@notice Emitted when liquidity is increased for a position NFT\n @dev Also emitted when a token is minted\n @param tokenId The ID of the token for which liquidity was increased\n @param liquidity The amount by which liquidity for the NFT position was increased\n @param amount0 The amount of token0 that was paid for the increase in liquidity\n @param amount1 The amount of token1 that was paid for the increase in liquidity"
									},
									"id": 127,
									"name": "IncreaseLiquidity",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 126,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 119,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 127,
												"src": "808:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 118,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "808:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 121,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 127,
												"src": "833:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 120,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "833:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 123,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 127,
												"src": "852:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 122,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "852:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 125,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 127,
												"src": "869:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 124,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "869:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "807:78:1"
									},
									"src": "784:102:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 128,
										"nodeType": "StructuredDocumentation",
										"src": "892:423:1",
										"text": "@notice Emitted when liquidity is decreased for a position NFT\n @param tokenId The ID of the token for which liquidity was decreased\n @param liquidity The amount by which liquidity for the NFT position was decreased\n @param amount0 The amount of token0 that was accounted for the decrease in liquidity\n @param amount1 The amount of token1 that was accounted for the decrease in liquidity"
									},
									"id": 138,
									"name": "DecreaseLiquidity",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 137,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 130,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "1345:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 129,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1345:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 132,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "1370:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 131,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1370:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 134,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "1389:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 133,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1389:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 136,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "1406:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 135,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1406:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1344:78:1"
									},
									"src": "1321:102:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 139,
										"nodeType": "StructuredDocumentation",
										"src": "1429:527:1",
										"text": "@notice Emitted when tokens are collected for a position NFT\n @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\n @param tokenId The ID of the token for which underlying tokens were collected\n @param recipient The address of the account that received the collected tokens\n @param amount0 The amount of token0 owed to the position that was collected\n @param amount1 The amount of token1 owed to the position that was collected"
									},
									"id": 149,
									"name": "Collect",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 148,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 141,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "1976:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 140,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1976:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 143,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2001:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 142,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2001:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 145,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2020:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 144,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2020:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 147,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2037:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 146,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2037:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1975:78:1"
									},
									"src": "1962:92:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 150,
										"nodeType": "StructuredDocumentation",
										"src": "2060:122:1",
										"text": "@notice Emitted when a new Token Descriptor is set\n @param tokenDescriptor Address of the new Token Descriptor"
									},
									"id": 154,
									"name": "TokenDescriptorChanged",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 152,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenDescriptor",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "2217:31:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 151,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2217:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2216:33:1"
									},
									"src": "2188:62:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 155,
										"nodeType": "StructuredDocumentation",
										"src": "2256:90:1",
										"text": "@notice Emitted when a new Owner is set\n @param owner Address of the new Owner"
									},
									"id": 159,
									"name": "TransferOwnership",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 158,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 157,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "2376:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 156,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2376:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2375:23:1"
									},
									"src": "2352:47:1"
								},
								{
									"documentation": {
										"id": 160,
										"nodeType": "StructuredDocumentation",
										"src": "2407:1188:1",
										"text": "@notice Returns the position information associated with a given token ID.\n @dev Throws if the token ID is not valid.\n @param tokenId The ID of the token that represents the position\n @return nonce The nonce for permits\n @return operator The address that is approved for spending\n @return token0 The address of the token0 for a specific pool\n @return token1 The address of the token1 for a specific pool\n @return tickSpacing The tick spacing associated with the pool\n @return tickLower The lower end of the tick range for the position\n @return tickUpper The higher end of the tick range for the position\n @return liquidity The liquidity of the position\n @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation"
									},
									"functionSelector": "99fbab88",
									"id": 189,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "positions",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "3620:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 161,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3620:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3619:17:1"
									},
									"returnParameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 165,
												"mutability": "mutable",
												"name": "nonce",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "3701:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint96",
													"typeString": "uint96"
												},
												"typeName": {
													"id": 164,
													"name": "uint96",
													"nodeType": "ElementaryTypeName",
													"src": "3701:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint96",
														"typeString": "uint96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 167,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "3728:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 166,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3728:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "token0",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "3759:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 168,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3759:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 171,
												"mutability": "mutable",
												"name": "token1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "3788:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 170,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3788:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 173,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "3817:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 172,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3817:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "3849:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 174,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3849:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 177,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "3879:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 176,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3879:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 179,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "3909:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 178,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3909:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 181,
												"mutability": "mutable",
												"name": "feeGrowthInside0LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "3941:32:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 180,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3941:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 183,
												"mutability": "mutable",
												"name": "feeGrowthInside1LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "3988:32:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 182,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3988:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 185,
												"mutability": "mutable",
												"name": "tokensOwed0",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "4035:19:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 184,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4035:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "tokensOwed1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "4069:19:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 186,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4069:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3686:413:1"
									},
									"scope": 324,
									"src": "3601:499:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 190,
										"nodeType": "StructuredDocumentation",
										"src": "4108:105:1",
										"text": "@notice Returns the address of the Token Descriptor, that handles generating token URIs for Positions"
									},
									"functionSelector": "5a9d7a68",
									"id": 195,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenDescriptor",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 191,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4243:2:1"
									},
									"returnParameters": {
										"id": 194,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 193,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 195,
												"src": "4269:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 192,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4269:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4268:9:1"
									},
									"scope": 324,
									"src": "4219:59:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 196,
										"nodeType": "StructuredDocumentation",
										"src": "4286:90:1",
										"text": "@notice Returns the address of the Owner, that is allowed to set a new TokenDescriptor"
									},
									"functionSelector": "8da5cb5b",
									"id": 201,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 197,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4396:2:1"
									},
									"returnParameters": {
										"id": 200,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 199,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 201,
												"src": "4422:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 198,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4422:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4421:9:1"
									},
									"scope": 324,
									"src": "4382:49:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.MintParams",
									"id": 226,
									"members": [
										{
											"constant": false,
											"id": 203,
											"mutability": "mutable",
											"name": "token0",
											"nodeType": "VariableDeclaration",
											"scope": 226,
											"src": "4468:14:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 202,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4468:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 205,
											"mutability": "mutable",
											"name": "token1",
											"nodeType": "VariableDeclaration",
											"scope": 226,
											"src": "4493:14:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 204,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4493:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 207,
											"mutability": "mutable",
											"name": "tickSpacing",
											"nodeType": "VariableDeclaration",
											"scope": 226,
											"src": "4518:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 206,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "4518:5:1",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 209,
											"mutability": "mutable",
											"name": "tickLower",
											"nodeType": "VariableDeclaration",
											"scope": 226,
											"src": "4546:15:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 208,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "4546:5:1",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 211,
											"mutability": "mutable",
											"name": "tickUpper",
											"nodeType": "VariableDeclaration",
											"scope": 226,
											"src": "4572:15:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 210,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "4572:5:1",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 213,
											"mutability": "mutable",
											"name": "amount0Desired",
											"nodeType": "VariableDeclaration",
											"scope": 226,
											"src": "4598:22:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 212,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4598:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 215,
											"mutability": "mutable",
											"name": "amount1Desired",
											"nodeType": "VariableDeclaration",
											"scope": 226,
											"src": "4631:22:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 214,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4631:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 217,
											"mutability": "mutable",
											"name": "amount0Min",
											"nodeType": "VariableDeclaration",
											"scope": 226,
											"src": "4664:18:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 216,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4664:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 219,
											"mutability": "mutable",
											"name": "amount1Min",
											"nodeType": "VariableDeclaration",
											"scope": 226,
											"src": "4693:18:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 218,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4693:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 221,
											"mutability": "mutable",
											"name": "recipient",
											"nodeType": "VariableDeclaration",
											"scope": 226,
											"src": "4722:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 220,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4722:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 223,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 226,
											"src": "4750:16:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 222,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4750:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 225,
											"mutability": "mutable",
											"name": "sqrtPriceX96",
											"nodeType": "VariableDeclaration",
											"scope": 226,
											"src": "4777:20:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint160",
												"typeString": "uint160"
											},
											"typeName": {
												"id": 224,
												"name": "uint160",
												"nodeType": "ElementaryTypeName",
												"src": "4777:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "MintParams",
									"nodeType": "StructDefinition",
									"scope": 324,
									"src": "4439:366:1",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 227,
										"nodeType": "StructuredDocumentation",
										"src": "4813:593:1",
										"text": "@notice Creates a new position wrapped in a NFT\n @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n a method does not exist, i.e. the pool is assumed to be initialized.\n @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n @return tokenId The ID of the token that represents the minted position\n @return liquidity The amount of liquidity for this position\n @return amount0 The amount of token0\n @return amount1 The amount of token1"
									},
									"functionSelector": "b5007d1f",
									"id": 240,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 230,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 229,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 240,
												"src": "5426:26:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_MintParams_$226_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.MintParams"
												},
												"typeName": {
													"id": 228,
													"name": "MintParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 226,
													"src": "5426:10:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_MintParams_$226_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.MintParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5425:28:1"
									},
									"returnParameters": {
										"id": 239,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 232,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 240,
												"src": "5507:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 231,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5507:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 234,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 240,
												"src": "5524:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 233,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5524:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 236,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 240,
												"src": "5543:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 235,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5543:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 238,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 240,
												"src": "5560:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 237,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5560:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5506:70:1"
									},
									"scope": 324,
									"src": "5412:165:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.IncreaseLiquidityParams",
									"id": 253,
									"members": [
										{
											"constant": false,
											"id": 242,
											"mutability": "mutable",
											"name": "tokenId",
											"nodeType": "VariableDeclaration",
											"scope": 253,
											"src": "5627:15:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 241,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5627:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 244,
											"mutability": "mutable",
											"name": "amount0Desired",
											"nodeType": "VariableDeclaration",
											"scope": 253,
											"src": "5653:22:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 243,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5653:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 246,
											"mutability": "mutable",
											"name": "amount1Desired",
											"nodeType": "VariableDeclaration",
											"scope": 253,
											"src": "5686:22:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 245,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5686:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 248,
											"mutability": "mutable",
											"name": "amount0Min",
											"nodeType": "VariableDeclaration",
											"scope": 253,
											"src": "5719:18:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 247,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5719:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 250,
											"mutability": "mutable",
											"name": "amount1Min",
											"nodeType": "VariableDeclaration",
											"scope": 253,
											"src": "5748:18:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 249,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5748:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 252,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 253,
											"src": "5777:16:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 251,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5777:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "IncreaseLiquidityParams",
									"nodeType": "StructDefinition",
									"scope": 324,
									"src": "5585:216:1",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 254,
										"nodeType": "StructuredDocumentation",
										"src": "5809:830:1",
										"text": "@notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n @param params tokenId The ID of the token for which liquidity is being increased,\n amount0Desired The desired amount of token0 to be spent,\n amount1Desired The desired amount of token1 to be spent,\n amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n deadline The time by which the transaction must be included to effect the change\n @return liquidity The new liquidity amount as a result of the increase\n @return amount0 The amount of token0 to acheive resulting liquidity\n @return amount1 The amount of token1 to acheive resulting liquidity"
									},
									"functionSelector": "219f5d17",
									"id": 265,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseLiquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 257,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "6672:39:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_IncreaseLiquidityParams_$253_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.IncreaseLiquidityParams"
												},
												"typeName": {
													"id": 255,
													"name": "IncreaseLiquidityParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 253,
													"src": "6672:23:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_IncreaseLiquidityParams_$253_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.IncreaseLiquidityParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6671:41:1"
									},
									"returnParameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 259,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "6766:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 258,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "6766:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 261,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "6785:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 260,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6785:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "6802:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 262,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6802:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6765:53:1"
									},
									"scope": 324,
									"src": "6645:174:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.DecreaseLiquidityParams",
									"id": 276,
									"members": [
										{
											"constant": false,
											"id": 267,
											"mutability": "mutable",
											"name": "tokenId",
											"nodeType": "VariableDeclaration",
											"scope": 276,
											"src": "6869:15:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 266,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6869:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 269,
											"mutability": "mutable",
											"name": "liquidity",
											"nodeType": "VariableDeclaration",
											"scope": 276,
											"src": "6895:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 268,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "6895:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 271,
											"mutability": "mutable",
											"name": "amount0Min",
											"nodeType": "VariableDeclaration",
											"scope": 276,
											"src": "6923:18:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 270,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6923:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 273,
											"mutability": "mutable",
											"name": "amount1Min",
											"nodeType": "VariableDeclaration",
											"scope": 276,
											"src": "6952:18:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 272,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6952:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 275,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 276,
											"src": "6981:16:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 274,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6981:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "DecreaseLiquidityParams",
									"nodeType": "StructDefinition",
									"scope": 324,
									"src": "6827:178:1",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 277,
										"nodeType": "StructuredDocumentation",
										"src": "7013:1005:1",
										"text": "@notice Decreases the amount of liquidity in a position and accounts it to the position\n @param params tokenId The ID of the token for which liquidity is being decreased,\n amount The amount by which liquidity will be decreased,\n amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n deadline The time by which the transaction must be included to effect the change\n @return amount0 The amount of token0 accounted to the position's tokens owed\n @return amount1 The amount of token1 accounted to the position's tokens owed\n @dev The use of this function can cause a loss to users of the NonfungiblePositionManager\n @dev for tokens that have very high decimals.\n @dev The amount of tokens necessary for the loss is: 3.4028237e+38.\n @dev This is equivalent to 1e20 value with 18 decimals."
									},
									"functionSelector": "0c49ccbe",
									"id": 286,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseLiquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 279,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 286,
												"src": "8051:39:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_DecreaseLiquidityParams_$276_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.DecreaseLiquidityParams"
												},
												"typeName": {
													"id": 278,
													"name": "DecreaseLiquidityParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 276,
													"src": "8051:23:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_DecreaseLiquidityParams_$276_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.DecreaseLiquidityParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8050:41:1"
									},
									"returnParameters": {
										"id": 285,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 282,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 286,
												"src": "8145:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 281,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8145:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 284,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 286,
												"src": "8162:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 283,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8162:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8144:34:1"
									},
									"scope": 324,
									"src": "8024:155:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.CollectParams",
									"id": 295,
									"members": [
										{
											"constant": false,
											"id": 288,
											"mutability": "mutable",
											"name": "tokenId",
											"nodeType": "VariableDeclaration",
											"scope": 295,
											"src": "8219:15:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 287,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "8219:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 290,
											"mutability": "mutable",
											"name": "recipient",
											"nodeType": "VariableDeclaration",
											"scope": 295,
											"src": "8245:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 289,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "8245:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 292,
											"mutability": "mutable",
											"name": "amount0Max",
											"nodeType": "VariableDeclaration",
											"scope": 295,
											"src": "8273:18:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 291,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "8273:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 294,
											"mutability": "mutable",
											"name": "amount1Max",
											"nodeType": "VariableDeclaration",
											"scope": 295,
											"src": "8302:18:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 293,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "8302:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "CollectParams",
									"nodeType": "StructDefinition",
									"scope": 324,
									"src": "8187:141:1",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 296,
										"nodeType": "StructuredDocumentation",
										"src": "8336:572:1",
										"text": "@notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n @notice Used to update staked positions before deposit and withdraw\n @param params tokenId The ID of the NFT for which tokens are being collected,\n recipient The account that should receive the tokens,\n amount0Max The maximum amount of token0 to collect,\n amount1Max The maximum amount of token1 to collect\n @return amount0 The amount of fees collected in token0\n @return amount1 The amount of fees collected in token1"
									},
									"functionSelector": "fc6f7865",
									"id": 305,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collect",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 299,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 298,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "8931:29:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CollectParams_$295_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.CollectParams"
												},
												"typeName": {
													"id": 297,
													"name": "CollectParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 295,
													"src": "8931:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CollectParams_$295_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.CollectParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8930:31:1"
									},
									"returnParameters": {
										"id": 304,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 301,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "8988:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 300,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8988:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 303,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "9005:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 302,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9005:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8987:34:1"
									},
									"scope": 324,
									"src": "8914:108:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 306,
										"nodeType": "StructuredDocumentation",
										"src": "9030:215:1",
										"text": "@notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n must be collected first.\n @param tokenId The ID of the token that is being burned"
									},
									"functionSelector": "42966c68",
									"id": 311,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 309,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 308,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 311,
												"src": "9265:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 307,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9265:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9264:17:1"
									},
									"returnParameters": {
										"id": 310,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9298:0:1"
									},
									"scope": 324,
									"src": "9251:48:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 312,
										"nodeType": "StructuredDocumentation",
										"src": "9307:121:1",
										"text": "@notice Sets a new Token Descriptor\n @param _tokenDescriptor Address of the new Token Descriptor to be chosen"
									},
									"functionSelector": "b6dc7ea3",
									"id": 317,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setTokenDescriptor",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 315,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 314,
												"mutability": "mutable",
												"name": "_tokenDescriptor",
												"nodeType": "VariableDeclaration",
												"scope": 317,
												"src": "9462:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 313,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9462:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9461:26:1"
									},
									"returnParameters": {
										"id": 316,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9496:0:1"
									},
									"scope": 324,
									"src": "9434:63:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 318,
										"nodeType": "StructuredDocumentation",
										"src": "9505:97:1",
										"text": "@notice Sets a new Owner address\n @param _owner Address of the new Owner to be chosen"
									},
									"functionSelector": "13af4035",
									"id": 323,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setOwner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 321,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 320,
												"mutability": "mutable",
												"name": "_owner",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "9626:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 319,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9626:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9625:16:1"
									},
									"returnParameters": {
										"id": 322,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9650:0:1"
									},
									"scope": 324,
									"src": "9608:43:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 325,
							"src": "269:9385:1"
						}
					],
					"src": "46:9610:1"
				},
				"id": 1
			},
			"contracts/core/VeloBot.sol": {
				"ast": {
					"absolutePath": "contracts/core/VeloBot.sol",
					"exportedSymbols": {
						"BitMath": [
							2211
						],
						"FixedPoint128": [
							2218
						],
						"FixedPoint96": [
							2228
						],
						"FullMath": [
							2401
						],
						"ICLFactory": [
							1092
						],
						"ICLMintCallback": [
							1354
						],
						"ICLPool": [
							1114
						],
						"ICLPoolActions": [
							1544
						],
						"ICLPoolConstants": [
							1596
						],
						"ICLPoolDerivedState": [
							1627
						],
						"ICLPoolEvents": [
							1744
						],
						"ICLPoolOwnerActions": [
							1756
						],
						"ICLPoolState": [
							1932
						],
						"ICLSwapCallback": [
							1368
						],
						"IERC20Minimal": [
							1186
						],
						"IERC721": [
							112
						],
						"IFactoryRegistry": [
							1214
						],
						"INonfungiblePositionManager": [
							324
						],
						"IVoter": [
							1322
						],
						"LiquidityMath": [
							2453
						],
						"LowGasSafeMath": [
							2583
						],
						"Oracle": [
							355
						],
						"Position": [
							2768
						],
						"SafeCast": [
							2838
						],
						"SqrtPriceMath": [
							3355
						],
						"Tick": [
							3974
						],
						"TickBitmap": [
							4230
						],
						"TickMath": [
							4765
						],
						"TransferHelper": [
							4816
						],
						"UnsafeMath": [
							4832
						],
						"V3Bot": [
							847
						],
						"VelodromeTimeLibrary": [
							4910
						]
					},
					"id": 848,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 326,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:2"
						},
						{
							"id": 327,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "58:19:2"
						},
						{
							"absolutePath": "contracts/core/interfaces/ICLPool.sol",
							"file": "./interfaces/ICLPool.sol",
							"id": 328,
							"nodeType": "ImportDirective",
							"scope": 848,
							"sourceUnit": 1115,
							"src": "81:34:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/LowGasSafeMath.sol",
							"file": "./libraries/LowGasSafeMath.sol",
							"id": 329,
							"nodeType": "ImportDirective",
							"scope": 848,
							"sourceUnit": 2584,
							"src": "119:40:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/SafeCast.sol",
							"file": "./libraries/SafeCast.sol",
							"id": 330,
							"nodeType": "ImportDirective",
							"scope": 848,
							"sourceUnit": 2839,
							"src": "161:34:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/Tick.sol",
							"file": "./libraries/Tick.sol",
							"id": 331,
							"nodeType": "ImportDirective",
							"scope": 848,
							"sourceUnit": 3975,
							"src": "197:30:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/TickBitmap.sol",
							"file": "./libraries/TickBitmap.sol",
							"id": 332,
							"nodeType": "ImportDirective",
							"scope": 848,
							"sourceUnit": 4231,
							"src": "229:36:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/Position.sol",
							"file": "./libraries/Position.sol",
							"id": 333,
							"nodeType": "ImportDirective",
							"scope": 848,
							"sourceUnit": 2769,
							"src": "267:34:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/FullMath.sol",
							"file": "./libraries/FullMath.sol",
							"id": 334,
							"nodeType": "ImportDirective",
							"scope": 848,
							"sourceUnit": 2402,
							"src": "305:34:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/FixedPoint128.sol",
							"file": "./libraries/FixedPoint128.sol",
							"id": 335,
							"nodeType": "ImportDirective",
							"scope": 848,
							"sourceUnit": 2219,
							"src": "341:39:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/TransferHelper.sol",
							"file": "./libraries/TransferHelper.sol",
							"id": 336,
							"nodeType": "ImportDirective",
							"scope": 848,
							"sourceUnit": 4817,
							"src": "382:40:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/TickMath.sol",
							"file": "./libraries/TickMath.sol",
							"id": 337,
							"nodeType": "ImportDirective",
							"scope": 848,
							"sourceUnit": 4766,
							"src": "424:34:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/LiquidityMath.sol",
							"file": "./libraries/LiquidityMath.sol",
							"id": 338,
							"nodeType": "ImportDirective",
							"scope": 848,
							"sourceUnit": 2454,
							"src": "460:39:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/SqrtPriceMath.sol",
							"file": "./libraries/SqrtPriceMath.sol",
							"id": 339,
							"nodeType": "ImportDirective",
							"scope": 848,
							"sourceUnit": 3356,
							"src": "501:39:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/interfaces/ICLFactory.sol",
							"file": "./interfaces/ICLFactory.sol",
							"id": 340,
							"nodeType": "ImportDirective",
							"scope": 848,
							"sourceUnit": 1093,
							"src": "544:37:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/interfaces/IFactoryRegistry.sol",
							"file": "./interfaces/IFactoryRegistry.sol",
							"id": 341,
							"nodeType": "ImportDirective",
							"scope": 848,
							"sourceUnit": 1215,
							"src": "583:43:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/interfaces/IERC20Minimal.sol",
							"file": "./interfaces/IERC20Minimal.sol",
							"id": 342,
							"nodeType": "ImportDirective",
							"scope": 848,
							"sourceUnit": 1187,
							"src": "628:40:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/interfaces/callback/ICLMintCallback.sol",
							"file": "./interfaces/callback/ICLMintCallback.sol",
							"id": 343,
							"nodeType": "ImportDirective",
							"scope": 848,
							"sourceUnit": 1355,
							"src": "670:51:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/interfaces/callback/ICLSwapCallback.sol",
							"file": "./interfaces/callback/ICLSwapCallback.sol",
							"id": 344,
							"nodeType": "ImportDirective",
							"scope": 848,
							"sourceUnit": 1369,
							"src": "723:51:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/libraries/VelodromeTimeLibrary.sol",
							"file": "contracts/libraries/VelodromeTimeLibrary.sol",
							"id": 345,
							"nodeType": "ImportDirective",
							"scope": 848,
							"sourceUnit": 4911,
							"src": "776:54:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/IERC721.sol",
							"file": "./IERC721.sol",
							"id": 346,
							"nodeType": "ImportDirective",
							"scope": 848,
							"sourceUnit": 113,
							"src": "832:23:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/INonfungiblePositionManager.sol",
							"file": "./INonfungiblePositionManager.sol",
							"id": 347,
							"nodeType": "ImportDirective",
							"scope": 848,
							"sourceUnit": 325,
							"src": "857:43:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 355,
							"linearizedBaseContracts": [
								355
							],
							"name": "Oracle",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "f29d0040",
									"id": 354,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "GetPrice",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 350,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 349,
												"mutability": "mutable",
												"name": "pooladdress",
												"nodeType": "VariableDeclaration",
												"scope": 354,
												"src": "946:19:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 348,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "946:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "945:21:2"
									},
									"returnParameters": {
										"id": 353,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 352,
												"mutability": "mutable",
												"name": "price",
												"nodeType": "VariableDeclaration",
												"scope": 354,
												"src": "990:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 351,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "990:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "989:15:2"
									},
									"scope": 355,
									"src": "928:77:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 848,
							"src": "904:104:2"
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 356,
										"name": "ICLSwapCallback",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1368,
										"src": "1032:15:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ICLSwapCallback_$1368",
											"typeString": "contract ICLSwapCallback"
										}
									},
									"id": 357,
									"nodeType": "InheritanceSpecifier",
									"src": "1032:15:2"
								}
							],
							"contractDependencies": [
								1368
							],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 847,
							"linearizedBaseContracts": [
								847,
								1368
							],
							"name": "V3Bot",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "16f0115b",
									"id": 359,
									"mutability": "mutable",
									"name": "pool",
									"nodeType": "VariableDeclaration",
									"scope": 847,
									"src": "1055:19:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 358,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1055:7:2",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "0dfe1681",
									"id": 361,
									"mutability": "mutable",
									"name": "token0",
									"nodeType": "VariableDeclaration",
									"scope": 847,
									"src": "1111:21:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 360,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1111:7:2",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "d21220a7",
									"id": 363,
									"mutability": "mutable",
									"name": "token1",
									"nodeType": "VariableDeclaration",
									"scope": 847,
									"src": "1161:21:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 362,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1161:7:2",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "da802f80",
									"id": 365,
									"mutability": "mutable",
									"name": "farmNFT",
									"nodeType": "VariableDeclaration",
									"scope": 847,
									"src": "1211:22:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 364,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1211:7:2",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "f851a440",
									"id": 367,
									"mutability": "mutable",
									"name": "admin",
									"nodeType": "VariableDeclaration",
									"scope": 847,
									"src": "1240:20:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 366,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1240:7:2",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "d0c93a7c",
									"id": 369,
									"mutability": "mutable",
									"name": "tickSpacing",
									"nodeType": "VariableDeclaration",
									"scope": 847,
									"src": "1267:24:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_int24",
										"typeString": "int24"
									},
									"typeName": {
										"id": 368,
										"name": "int24",
										"nodeType": "ElementaryTypeName",
										"src": "1267:5:2",
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"visibility": "public"
								},
								{
									"canonicalName": "V3Bot.Deposit",
									"id": 378,
									"members": [
										{
											"constant": false,
											"id": 371,
											"mutability": "mutable",
											"name": "owner",
											"nodeType": "VariableDeclaration",
											"scope": 378,
											"src": "1326:13:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 370,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1326:7:2",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 373,
											"mutability": "mutable",
											"name": "liquidity",
											"nodeType": "VariableDeclaration",
											"scope": 378,
											"src": "1350:17:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 372,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "1350:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 375,
											"mutability": "mutable",
											"name": "token0",
											"nodeType": "VariableDeclaration",
											"scope": 378,
											"src": "1378:14:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 374,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1378:7:2",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 377,
											"mutability": "mutable",
											"name": "token1",
											"nodeType": "VariableDeclaration",
											"scope": 378,
											"src": "1403:14:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 376,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1403:7:2",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Deposit",
									"nodeType": "StructDefinition",
									"scope": 847,
									"src": "1300:125:2",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "b02c43d0",
									"id": 382,
									"mutability": "mutable",
									"name": "deposits",
									"nodeType": "VariableDeclaration",
									"scope": 847,
									"src": "1433:43:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Deposit_$378_storage_$",
										"typeString": "mapping(uint256 => struct V3Bot.Deposit)"
									},
									"typeName": {
										"id": 381,
										"keyType": {
											"id": 379,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1441:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "1433:27:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Deposit_$378_storage_$",
											"typeString": "mapping(uint256 => struct V3Bot.Deposit)"
										},
										"valueType": {
											"id": 380,
											"name": "Deposit",
											"nodeType": "UserDefinedTypeName",
											"referencedDeclaration": 378,
											"src": "1452:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Deposit_$378_storage_ptr",
												"typeString": "struct V3Bot.Deposit"
											}
										}
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"id": 390,
									"name": "SwapExecuted",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 389,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 384,
												"indexed": true,
												"mutability": "mutable",
												"name": "user",
												"nodeType": "VariableDeclaration",
												"scope": 390,
												"src": "1504:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 383,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1504:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 386,
												"indexed": false,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 390,
												"src": "1526:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 385,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1526:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 388,
												"indexed": false,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 390,
												"src": "1544:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 387,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1544:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1503:59:2"
									},
									"src": "1485:78:2"
								},
								{
									"body": {
										"id": 398,
										"nodeType": "Block",
										"src": "1585:37:2",
										"statements": [
											{
												"expression": {
													"id": 396,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 393,
														"name": "admin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 367,
														"src": "1596:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 394,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "1604:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 395,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "1604:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "1596:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 397,
												"nodeType": "ExpressionStatement",
												"src": "1596:18:2"
											}
										]
									},
									"id": 399,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 391,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1582:2:2"
									},
									"returnParameters": {
										"id": 392,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1585:0:2"
									},
									"scope": 847,
									"src": "1571:51:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 416,
										"nodeType": "Block",
										"src": "1676:100:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 408,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 405,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1695:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 406,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1695:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 407,
																"name": "admin",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 367,
																"src": "1709:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1695:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f6e6c79206f776e65722063616e20646f2074686973",
															"id": 409,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1716:24:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6fd24def08b0888543800c4127fd6d1aa58919ac12b49d8f20efd315c642cdfa",
																"typeString": "literal_string \"Only owner can do this\""
															},
															"value": "Only owner can do this"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6fd24def08b0888543800c4127fd6d1aa58919ac12b49d8f20efd315c642cdfa",
																"typeString": "literal_string \"Only owner can do this\""
															}
														],
														"id": 404,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1687:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 410,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1687:54:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 411,
												"nodeType": "ExpressionStatement",
												"src": "1687:54:2"
											},
											{
												"expression": {
													"id": 414,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 412,
														"name": "admin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 367,
														"src": "1752:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 413,
														"name": "newAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 401,
														"src": "1760:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1752:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 415,
												"nodeType": "ExpressionStatement",
												"src": "1752:16:2"
											}
										]
									},
									"functionSelector": "e6f4d0aa",
									"id": 417,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_newAdmin",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 402,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 401,
												"mutability": "mutable",
												"name": "newAdmin",
												"nodeType": "VariableDeclaration",
												"scope": 417,
												"src": "1649:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 400,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1649:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1648:18:2"
									},
									"returnParameters": {
										"id": 403,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1676:0:2"
									},
									"scope": 847,
									"src": "1630:146:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 466,
										"nodeType": "Block",
										"src": "1828:310:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 426,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 423,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1847:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 424,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1847:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 425,
																"name": "admin",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 367,
																"src": "1861:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1847:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f6e6c79206f776e65722063616e20646f2074686973",
															"id": 427,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1868:24:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6fd24def08b0888543800c4127fd6d1aa58919ac12b49d8f20efd315c642cdfa",
																"typeString": "literal_string \"Only owner can do this\""
															},
															"value": "Only owner can do this"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6fd24def08b0888543800c4127fd6d1aa58919ac12b49d8f20efd315c642cdfa",
																"typeString": "literal_string \"Only owner can do this\""
															}
														],
														"id": 422,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1839:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 428,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1839:54:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 429,
												"nodeType": "ExpressionStatement",
												"src": "1839:54:2"
											},
											{
												"expression": {
													"id": 432,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 430,
														"name": "pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 359,
														"src": "1904:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 431,
														"name": "newPool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 419,
														"src": "1911:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1904:14:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 433,
												"nodeType": "ExpressionStatement",
												"src": "1904:14:2"
											},
											{
												"expression": {
													"id": 440,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 434,
														"name": "token0",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 361,
														"src": "1929:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"arguments": [
																	{
																		"id": 436,
																		"name": "pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 359,
																		"src": "1955:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 435,
																	"name": "ICLPoolConstants",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1596,
																	"src": "1938:16:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_ICLPoolConstants_$1596_$",
																		"typeString": "type(contract ICLPoolConstants)"
																	}
																},
																"id": 437,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1938:22:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_ICLPoolConstants_$1596",
																	"typeString": "contract ICLPoolConstants"
																}
															},
															"id": 438,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "token0",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1559,
															"src": "1938:29:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
																"typeString": "function () view external returns (address)"
															}
														},
														"id": 439,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1938:31:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1929:40:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 441,
												"nodeType": "ExpressionStatement",
												"src": "1929:40:2"
											},
											{
												"expression": {
													"id": 448,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 442,
														"name": "token1",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 363,
														"src": "1980:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"arguments": [
																	{
																		"id": 444,
																		"name": "pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 359,
																		"src": "2006:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 443,
																	"name": "ICLPoolConstants",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1596,
																	"src": "1989:16:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_ICLPoolConstants_$1596_$",
																		"typeString": "type(contract ICLPoolConstants)"
																	}
																},
																"id": 445,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1989:22:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_ICLPoolConstants_$1596",
																	"typeString": "contract ICLPoolConstants"
																}
															},
															"id": 446,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "token1",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1565,
															"src": "1989:29:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
																"typeString": "function () view external returns (address)"
															}
														},
														"id": 447,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1989:31:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1980:40:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 449,
												"nodeType": "ExpressionStatement",
												"src": "1980:40:2"
											},
											{
												"expression": {
													"id": 456,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 450,
														"name": "farmNFT",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 365,
														"src": "2031:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"arguments": [
																	{
																		"id": 452,
																		"name": "pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 359,
																		"src": "2058:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 451,
																	"name": "ICLPoolConstants",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1596,
																	"src": "2041:16:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_ICLPoolConstants_$1596_$",
																		"typeString": "type(contract ICLPoolConstants)"
																	}
																},
																"id": 453,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2041:22:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_ICLPoolConstants_$1596",
																	"typeString": "contract ICLPoolConstants"
																}
															},
															"id": 454,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "nft",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1577,
															"src": "2041:26:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
																"typeString": "function () view external returns (address)"
															}
														},
														"id": 455,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2041:28:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2031:38:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 457,
												"nodeType": "ExpressionStatement",
												"src": "2031:38:2"
											},
											{
												"expression": {
													"id": 464,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 458,
														"name": "tickSpacing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 369,
														"src": "2080:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"arguments": [
																	{
																		"id": 460,
																		"name": "pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 359,
																		"src": "2111:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 459,
																	"name": "ICLPoolConstants",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1596,
																	"src": "2094:16:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_ICLPoolConstants_$1596_$",
																		"typeString": "type(contract ICLPoolConstants)"
																	}
																},
																"id": 461,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2094:22:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_ICLPoolConstants_$1596",
																	"typeString": "contract ICLPoolConstants"
																}
															},
															"id": 462,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "tickSpacing",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1589,
															"src": "2094:34:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$__$returns$_t_int24_$",
																"typeString": "function () view external returns (int24)"
															}
														},
														"id": 463,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2094:36:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "2080:50:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"id": 465,
												"nodeType": "ExpressionStatement",
												"src": "2080:50:2"
											}
										]
									},
									"functionSelector": "d2aca8cd",
									"id": 467,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_newPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 420,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 419,
												"mutability": "mutable",
												"name": "newPool",
												"nodeType": "VariableDeclaration",
												"scope": 467,
												"src": "1802:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 418,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1802:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1801:17:2"
									},
									"returnParameters": {
										"id": 421,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1828:0:2"
									},
									"scope": 847,
									"src": "1784:354:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 492,
										"nodeType": "Block",
										"src": "2196:134:2",
										"statements": [
											{
												"assignments": [
													473
												],
												"declarations": [
													{
														"constant": false,
														"id": 473,
														"mutability": "mutable",
														"name": "value",
														"nodeType": "VariableDeclaration",
														"scope": 492,
														"src": "2207:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 472,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2207:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 483,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 480,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2262:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_V3Bot_$847",
																		"typeString": "contract V3Bot"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_V3Bot_$847",
																		"typeString": "contract V3Bot"
																	}
																],
																"id": 479,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2254:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 478,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2254:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 481,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2254:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 475,
																	"name": "Token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 469,
																	"src": "2237:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 474,
																"name": "IERC20Minimal",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1186,
																"src": "2223:13:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20Minimal_$1186_$",
																	"typeString": "type(contract IERC20Minimal)"
																}
															},
															"id": 476,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2223:20:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Minimal_$1186",
																"typeString": "contract IERC20Minimal"
															}
														},
														"id": 477,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1125,
														"src": "2223:30:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 482,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2223:45:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2207:61:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 488,
															"name": "admin",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 367,
															"src": "2309:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 489,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 473,
															"src": "2316:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 485,
																	"name": "Token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 469,
																	"src": "2293:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 484,
																"name": "IERC20Minimal",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1186,
																"src": "2279:13:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20Minimal_$1186_$",
																	"typeString": "type(contract IERC20Minimal)"
																}
															},
															"id": 486,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2279:20:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Minimal_$1186",
																"typeString": "contract IERC20Minimal"
															}
														},
														"id": 487,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1135,
														"src": "2279:29:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 490,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2279:43:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 491,
												"nodeType": "ExpressionStatement",
												"src": "2279:43:2"
											}
										]
									},
									"functionSelector": "7210468a",
									"id": 493,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferToAdmin",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 470,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 469,
												"mutability": "mutable",
												"name": "Token",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "2172:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 468,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2172:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2171:15:2"
									},
									"returnParameters": {
										"id": 471,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2196:0:2"
									},
									"scope": 847,
									"src": "2146:184:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 572,
										"nodeType": "Block",
										"src": "2384:1039:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 501,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 499,
																"name": "amountIn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 495,
																"src": "2403:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 500,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2414:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2403:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c696420696e70757420616d6f756e74",
															"id": 502,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2417:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_71128eeb4fd76da6a8355c9d10e3d97be1d2b0195b0030a1450235b9a3ac80cf",
																"typeString": "literal_string \"Invalid input amount\""
															},
															"value": "Invalid input amount"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_71128eeb4fd76da6a8355c9d10e3d97be1d2b0195b0030a1450235b9a3ac80cf",
																"typeString": "literal_string \"Invalid input amount\""
															}
														],
														"id": 498,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2395:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 503,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2395:45:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 504,
												"nodeType": "ExpressionStatement",
												"src": "2395:45:2"
											},
											{
												"assignments": [
													506,
													null,
													null,
													null,
													null,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 506,
														"mutability": "mutable",
														"name": "sqrtPriceX96",
														"nodeType": "VariableDeclaration",
														"scope": 572,
														"src": "2505:20:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"typeName": {
															"id": 505,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "2505:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"visibility": "internal"
													},
													null,
													null,
													null,
													null,
													null
												],
												"id": 512,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"arguments": [
																{
																	"id": 508,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 359,
																	"src": "2552:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 507,
																"name": "ICLPoolState",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1932,
																"src": "2539:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ICLPoolState_$1932_$",
																	"typeString": "type(contract ICLPoolState)"
																}
															},
															"id": 509,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2539:18:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ICLPoolState_$1932",
																"typeString": "contract ICLPoolState"
															}
														},
														"id": 510,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "slot0",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1775,
														"src": "2539:24:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$__$returns$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_bool_$",
															"typeString": "function () view external returns (uint160,int24,uint16,uint16,uint16,bool)"
														}
													},
													"id": 511,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2539:26:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_bool_$",
														"typeString": "tuple(uint160,int24,uint16,uint16,uint16,bool)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2504:61:2"
											},
											{
												"assignments": [
													514
												],
												"declarations": [
													{
														"constant": false,
														"id": 514,
														"mutability": "mutable",
														"name": "sqrtPriceLimitX96",
														"nodeType": "VariableDeclaration",
														"scope": 572,
														"src": "2576:25:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"typeName": {
															"id": 513,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "2576:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 523,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															"id": 521,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 519,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 517,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 506,
																	"src": "2612:12:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"hexValue": "3939",
																	"id": 518,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2627:2:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_99_by_1",
																		"typeString": "int_const 99"
																	},
																	"value": "99"
																},
																"src": "2612:17:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"hexValue": "313030",
																"id": 520,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2632:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"value": "100"
															},
															"src": "2612:23:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														],
														"id": 516,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2604:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint160_$",
															"typeString": "type(uint160)"
														},
														"typeName": {
															"id": 515,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "2604:7:2",
															"typeDescriptions": {}
														}
													},
													"id": 522,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2604:32:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2576:60:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 527,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 524,
														"name": "sqrtPriceLimitX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 514,
														"src": "2699:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<=",
													"rightExpression": {
														"expression": {
															"id": 525,
															"name": "TickMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4765,
															"src": "2720:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_TickMath_$4765_$",
																"typeString": "type(library TickMath)"
															}
														},
														"id": 526,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "MIN_SQRT_RATIO",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 4247,
														"src": "2720:23:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "2699:44:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 536,
												"nodeType": "IfStatement",
												"src": "2695:124:2",
												"trueBody": {
													"id": 535,
													"nodeType": "Block",
													"src": "2745:74:2",
													"statements": [
														{
															"expression": {
																"id": 533,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 528,
																	"name": "sqrtPriceLimitX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 514,
																	"src": "2760:17:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	},
																	"id": 532,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 529,
																			"name": "TickMath",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4765,
																			"src": "2780:8:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_TickMath_$4765_$",
																				"typeString": "type(library TickMath)"
																			}
																		},
																		"id": 530,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "MIN_SQRT_RATIO",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 4247,
																		"src": "2780:23:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 531,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2806:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "2780:27:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "2760:47:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"id": 534,
															"nodeType": "ExpressionStatement",
															"src": "2760:47:2"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 541,
															"name": "pool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 359,
															"src": "2902:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 542,
															"name": "amountIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 495,
															"src": "2908:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 538,
																	"name": "token0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 361,
																	"src": "2886:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 537,
																"name": "IERC20Minimal",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1186,
																"src": "2872:13:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20Minimal_$1186_$",
																	"typeString": "type(contract IERC20Minimal)"
																}
															},
															"id": 539,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2872:21:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Minimal_$1186",
																"typeString": "contract IERC20Minimal"
															}
														},
														"id": 540,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "approve",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1155,
														"src": "2872:29:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 543,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2872:45:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 544,
												"nodeType": "ExpressionStatement",
												"src": "2872:45:2"
											},
											{
												"assignments": [
													546
												],
												"declarations": [
													{
														"constant": false,
														"id": 546,
														"mutability": "mutable",
														"name": "data",
														"nodeType": "VariableDeclaration",
														"scope": 572,
														"src": "3026:17:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 545,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3026:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 554,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 551,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3065:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_V3Bot_$847",
																		"typeString": "contract V3Bot"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_V3Bot_$847",
																		"typeString": "contract V3Bot"
																	}
																],
																"id": 550,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3057:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 549,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3057:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 552,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3057:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 547,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "3046:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 548,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "encode",
														"nodeType": "MemberAccess",
														"src": "3046:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 553,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3046:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3026:45:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 561,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3174:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_V3Bot_$847",
																		"typeString": "contract V3Bot"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_V3Bot_$847",
																		"typeString": "contract V3Bot"
																	}
																],
																"id": 560,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3166:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 559,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3166:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 562,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3166:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"hexValue": "74727565",
															"id": 563,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3211:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"arguments": [
																{
																	"id": 566,
																	"name": "amountIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 495,
																	"src": "3282:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 565,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3275:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_int256_$",
																	"typeString": "type(int256)"
																},
																"typeName": {
																	"id": 564,
																	"name": "int256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3275:6:2",
																	"typeDescriptions": {}
																}
															},
															"id": 567,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3275:16:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														{
															"id": 568,
															"name": "sqrtPriceLimitX96",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 514,
															"src": "3322:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														{
															"id": 569,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 546,
															"src": "3369:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 556,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 359,
																	"src": "3141:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 555,
																"name": "ICLPoolActions",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1544,
																"src": "3126:14:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ICLPoolActions_$1544_$",
																	"typeString": "type(contract ICLPoolActions)"
																}
															},
															"id": 557,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3126:20:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ICLPoolActions_$1544",
																"typeString": "contract ICLPoolActions"
															}
														},
														"id": 558,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "swap",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1511,
														"src": "3126:25:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_bool_$_t_int256_$_t_uint160_$_t_bytes_memory_ptr_$returns$_t_int256_$_t_int256_$",
															"typeString": "function (address,bool,int256,uint160,bytes memory) external returns (int256,int256)"
														}
													},
													"id": 570,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3126:289:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$",
														"typeString": "tuple(int256,int256)"
													}
												},
												"id": 571,
												"nodeType": "ExpressionStatement",
												"src": "3126:289:2"
											}
										]
									},
									"functionSelector": "db638298",
									"id": 573,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "Swap0for1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 496,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 495,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 573,
												"src": "2357:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 494,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2357:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2356:18:2"
									},
									"returnParameters": {
										"id": 497,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2384:0:2"
									},
									"scope": 847,
									"src": "2338:1085:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 652,
										"nodeType": "Block",
										"src": "3479:1041:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 581,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 579,
																"name": "amountIn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 575,
																"src": "3498:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 580,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3509:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3498:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c696420696e70757420616d6f756e74",
															"id": 582,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3512:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_71128eeb4fd76da6a8355c9d10e3d97be1d2b0195b0030a1450235b9a3ac80cf",
																"typeString": "literal_string \"Invalid input amount\""
															},
															"value": "Invalid input amount"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_71128eeb4fd76da6a8355c9d10e3d97be1d2b0195b0030a1450235b9a3ac80cf",
																"typeString": "literal_string \"Invalid input amount\""
															}
														],
														"id": 578,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3490:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 583,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3490:45:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 584,
												"nodeType": "ExpressionStatement",
												"src": "3490:45:2"
											},
											{
												"assignments": [
													586,
													null,
													null,
													null,
													null,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 586,
														"mutability": "mutable",
														"name": "sqrtPriceX96",
														"nodeType": "VariableDeclaration",
														"scope": 652,
														"src": "3600:20:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"typeName": {
															"id": 585,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "3600:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"visibility": "internal"
													},
													null,
													null,
													null,
													null,
													null
												],
												"id": 592,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"arguments": [
																{
																	"id": 588,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 359,
																	"src": "3647:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 587,
																"name": "ICLPoolState",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1932,
																"src": "3634:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ICLPoolState_$1932_$",
																	"typeString": "type(contract ICLPoolState)"
																}
															},
															"id": 589,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3634:18:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ICLPoolState_$1932",
																"typeString": "contract ICLPoolState"
															}
														},
														"id": 590,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "slot0",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1775,
														"src": "3634:24:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$__$returns$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_bool_$",
															"typeString": "function () view external returns (uint160,int24,uint16,uint16,uint16,bool)"
														}
													},
													"id": 591,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3634:26:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_bool_$",
														"typeString": "tuple(uint160,int24,uint16,uint16,uint16,bool)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3599:61:2"
											},
											{
												"assignments": [
													594
												],
												"declarations": [
													{
														"constant": false,
														"id": 594,
														"mutability": "mutable",
														"name": "sqrtPriceLimitX96",
														"nodeType": "VariableDeclaration",
														"scope": 652,
														"src": "3671:25:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"typeName": {
															"id": 593,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "3671:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 603,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															"id": 601,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 599,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 597,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 586,
																	"src": "3707:12:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"hexValue": "313031",
																	"id": 598,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3722:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_101_by_1",
																		"typeString": "int_const 101"
																	},
																	"value": "101"
																},
																"src": "3707:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"hexValue": "313030",
																"id": 600,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3728:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"value": "100"
															},
															"src": "3707:24:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														],
														"id": 596,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "3699:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint160_$",
															"typeString": "type(uint160)"
														},
														"typeName": {
															"id": 595,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "3699:7:2",
															"typeDescriptions": {}
														}
													},
													"id": 602,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3699:33:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3671:61:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 607,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 604,
														"name": "sqrtPriceLimitX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 594,
														"src": "3795:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<=",
													"rightExpression": {
														"expression": {
															"id": 605,
															"name": "TickMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4765,
															"src": "3816:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_TickMath_$4765_$",
																"typeString": "type(library TickMath)"
															}
														},
														"id": 606,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "MIN_SQRT_RATIO",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 4247,
														"src": "3816:23:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "3795:44:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 616,
												"nodeType": "IfStatement",
												"src": "3791:124:2",
												"trueBody": {
													"id": 615,
													"nodeType": "Block",
													"src": "3841:74:2",
													"statements": [
														{
															"expression": {
																"id": 613,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 608,
																	"name": "sqrtPriceLimitX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 594,
																	"src": "3856:17:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	},
																	"id": 612,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 609,
																			"name": "TickMath",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4765,
																			"src": "3876:8:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_TickMath_$4765_$",
																				"typeString": "type(library TickMath)"
																			}
																		},
																		"id": 610,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "MIN_SQRT_RATIO",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 4247,
																		"src": "3876:23:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 611,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3902:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "3876:27:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "3856:47:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"id": 614,
															"nodeType": "ExpressionStatement",
															"src": "3856:47:2"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 621,
															"name": "pool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 359,
															"src": "3998:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 622,
															"name": "amountIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 575,
															"src": "4004:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 618,
																	"name": "token1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 363,
																	"src": "3982:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 617,
																"name": "IERC20Minimal",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1186,
																"src": "3968:13:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20Minimal_$1186_$",
																	"typeString": "type(contract IERC20Minimal)"
																}
															},
															"id": 619,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3968:21:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Minimal_$1186",
																"typeString": "contract IERC20Minimal"
															}
														},
														"id": 620,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "approve",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1155,
														"src": "3968:29:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 623,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3968:45:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 624,
												"nodeType": "ExpressionStatement",
												"src": "3968:45:2"
											},
											{
												"assignments": [
													626
												],
												"declarations": [
													{
														"constant": false,
														"id": 626,
														"mutability": "mutable",
														"name": "data",
														"nodeType": "VariableDeclaration",
														"scope": 652,
														"src": "4122:17:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 625,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4122:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 634,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 631,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "4161:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_V3Bot_$847",
																		"typeString": "contract V3Bot"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_V3Bot_$847",
																		"typeString": "contract V3Bot"
																	}
																],
																"id": 630,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4153:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 629,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4153:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 632,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4153:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 627,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "4142:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 628,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "encode",
														"nodeType": "MemberAccess",
														"src": "4142:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 633,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4142:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4122:45:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 641,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "4270:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_V3Bot_$847",
																		"typeString": "contract V3Bot"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_V3Bot_$847",
																		"typeString": "contract V3Bot"
																	}
																],
																"id": 640,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4262:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 639,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4262:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 642,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4262:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"hexValue": "66616c7365",
															"id": 643,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4307:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "false"
														},
														{
															"arguments": [
																{
																	"id": 646,
																	"name": "amountIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 575,
																	"src": "4379:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 645,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4372:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_int256_$",
																	"typeString": "type(int256)"
																},
																"typeName": {
																	"id": 644,
																	"name": "int256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4372:6:2",
																	"typeDescriptions": {}
																}
															},
															"id": 647,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4372:16:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														{
															"id": 648,
															"name": "sqrtPriceLimitX96",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 594,
															"src": "4419:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														{
															"id": 649,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 626,
															"src": "4466:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 636,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 359,
																	"src": "4237:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 635,
																"name": "ICLPoolActions",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1544,
																"src": "4222:14:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ICLPoolActions_$1544_$",
																	"typeString": "type(contract ICLPoolActions)"
																}
															},
															"id": 637,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4222:20:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ICLPoolActions_$1544",
																"typeString": "contract ICLPoolActions"
															}
														},
														"id": 638,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "swap",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1511,
														"src": "4222:25:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_bool_$_t_int256_$_t_uint160_$_t_bytes_memory_ptr_$returns$_t_int256_$_t_int256_$",
															"typeString": "function (address,bool,int256,uint160,bytes memory) external returns (int256,int256)"
														}
													},
													"id": 650,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4222:290:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$",
														"typeString": "tuple(int256,int256)"
													}
												},
												"id": 651,
												"nodeType": "ExpressionStatement",
												"src": "4222:290:2"
											}
										]
									},
									"functionSelector": "fdde416f",
									"id": 653,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "V3Swap1for0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 576,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 575,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "3452:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 574,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3452:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3451:18:2"
									},
									"returnParameters": {
										"id": 577,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3479:0:2"
									},
									"scope": 847,
									"src": "3431:1089:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										1367
									],
									"body": {
										"id": 703,
										"nodeType": "Block",
										"src": "4750:507:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 667,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 664,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "4769:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 665,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "4769:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 666,
																"name": "pool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 359,
																"src": "4783:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "4769:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43616c6c6261636b206f6e6c792066726f6d20706f6f6c",
															"id": 668,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4789:25:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_bff4c104f39e47a163d0cb9a612fb38cc6d016a74062770b58bcdc30c5de72ee",
																"typeString": "literal_string \"Callback only from pool\""
															},
															"value": "Callback only from pool"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_bff4c104f39e47a163d0cb9a612fb38cc6d016a74062770b58bcdc30c5de72ee",
																"typeString": "literal_string \"Callback only from pool\""
															}
														],
														"id": 663,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4761:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 669,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4761:54:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 670,
												"nodeType": "ExpressionStatement",
												"src": "4761:54:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 673,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 671,
														"name": "amount0Delta",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 655,
														"src": "4911:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 672,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4926:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4911:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 686,
												"nodeType": "IfStatement",
												"src": "4907:108:2",
												"trueBody": {
													"id": 685,
													"nodeType": "Block",
													"src": "4929:86:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 678,
																		"name": "pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 359,
																		"src": "4975:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"id": 681,
																				"name": "amount0Delta",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 655,
																				"src": "4989:12:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			],
																			"id": 680,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "4981:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 679,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "4981:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 682,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4981:21:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 675,
																				"name": "token0",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 361,
																				"src": "4958:6:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 674,
																			"name": "IERC20Minimal",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1186,
																			"src": "4944:13:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20Minimal_$1186_$",
																				"typeString": "type(contract IERC20Minimal)"
																			}
																		},
																		"id": 676,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4944:21:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20Minimal_$1186",
																			"typeString": "contract IERC20Minimal"
																		}
																	},
																	"id": 677,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1135,
																	"src": "4944:30:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																"id": 683,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4944:59:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 684,
															"nodeType": "ExpressionStatement",
															"src": "4944:59:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 689,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 687,
														"name": "amount1Delta",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 657,
														"src": "5146:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 688,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5161:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5146:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 702,
												"nodeType": "IfStatement",
												"src": "5142:108:2",
												"trueBody": {
													"id": 701,
													"nodeType": "Block",
													"src": "5164:86:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 694,
																		"name": "pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 359,
																		"src": "5210:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"id": 697,
																				"name": "amount1Delta",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 657,
																				"src": "5224:12:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			],
																			"id": 696,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5216:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 695,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "5216:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 698,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5216:21:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 691,
																				"name": "token1",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 363,
																				"src": "5193:6:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 690,
																			"name": "IERC20Minimal",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1186,
																			"src": "5179:13:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20Minimal_$1186_$",
																				"typeString": "type(contract IERC20Minimal)"
																			}
																		},
																		"id": 692,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5179:21:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20Minimal_$1186",
																			"typeString": "contract IERC20Minimal"
																		}
																	},
																	"id": 693,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1135,
																	"src": "5179:30:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																"id": 699,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5179:59:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 700,
															"nodeType": "ExpressionStatement",
															"src": "5179:59:2"
														}
													]
												}
											}
										]
									},
									"functionSelector": "fa461e33",
									"id": 704,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "uniswapV3SwapCallback",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 661,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4741:8:2"
									},
									"parameters": {
										"id": 660,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 655,
												"mutability": "mutable",
												"name": "amount0Delta",
												"nodeType": "VariableDeclaration",
												"scope": 704,
												"src": "4639:19:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 654,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "4639:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 657,
												"mutability": "mutable",
												"name": "amount1Delta",
												"nodeType": "VariableDeclaration",
												"scope": 704,
												"src": "4669:19:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 656,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "4669:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 659,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 704,
												"src": "4699:14:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 658,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4699:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4628:103:2"
									},
									"returnParameters": {
										"id": 662,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4750:0:2"
									},
									"scope": 847,
									"src": "4598:659:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 790,
										"nodeType": "Block",
										"src": "5424:1095:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 723,
															"name": "farmNFT",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 365,
															"src": "5524:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 724,
															"name": "amount0ToMint",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 706,
															"src": "5533:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 720,
																	"name": "token0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 361,
																	"src": "5508:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 719,
																"name": "IERC20Minimal",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1186,
																"src": "5494:13:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20Minimal_$1186_$",
																	"typeString": "type(contract IERC20Minimal)"
																}
															},
															"id": 721,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5494:21:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Minimal_$1186",
																"typeString": "contract IERC20Minimal"
															}
														},
														"id": 722,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "approve",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1155,
														"src": "5494:29:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 725,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5494:53:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 726,
												"nodeType": "ExpressionStatement",
												"src": "5494:53:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 731,
															"name": "farmNFT",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 365,
															"src": "5588:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 732,
															"name": "amount1ToMint",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 708,
															"src": "5597:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 728,
																	"name": "token1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 363,
																	"src": "5572:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 727,
																"name": "IERC20Minimal",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1186,
																"src": "5558:13:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20Minimal_$1186_$",
																	"typeString": "type(contract IERC20Minimal)"
																}
															},
															"id": 729,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5558:21:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Minimal_$1186",
																"typeString": "contract IERC20Minimal"
															}
														},
														"id": 730,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "approve",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1155,
														"src": "5558:29:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 733,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5558:53:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 734,
												"nodeType": "ExpressionStatement",
												"src": "5558:53:2"
											},
											{
												"assignments": [
													736,
													null,
													null,
													null,
													null,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 736,
														"mutability": "mutable",
														"name": "sqrtPriceX96",
														"nodeType": "VariableDeclaration",
														"scope": 790,
														"src": "5623:20:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"typeName": {
															"id": 735,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "5623:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"visibility": "internal"
													},
													null,
													null,
													null,
													null,
													null
												],
												"id": 742,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"arguments": [
																{
																	"id": 738,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 359,
																	"src": "5665:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 737,
																"name": "ICLPoolState",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1932,
																"src": "5652:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ICLPoolState_$1932_$",
																	"typeString": "type(contract ICLPoolState)"
																}
															},
															"id": 739,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5652:18:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ICLPoolState_$1932",
																"typeString": "contract ICLPoolState"
															}
														},
														"id": 740,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "slot0",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1775,
														"src": "5652:24:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$__$returns$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_bool_$",
															"typeString": "function () view external returns (uint160,int24,uint16,uint16,uint16,bool)"
														}
													},
													"id": 741,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5652:26:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_bool_$",
														"typeString": "tuple(uint160,int24,uint16,uint16,uint16,bool)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5622:56:2"
											},
											{
												"assignments": [
													746
												],
												"declarations": [
													{
														"constant": false,
														"id": 746,
														"mutability": "mutable",
														"name": "params",
														"nodeType": "VariableDeclaration",
														"scope": 790,
														"src": "5691:52:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_MintParams_$226_memory_ptr",
															"typeString": "struct INonfungiblePositionManager.MintParams"
														},
														"typeName": {
															"id": 745,
															"name": "INonfungiblePositionManager.MintParams",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 226,
															"src": "5691:38:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_MintParams_$226_storage_ptr",
																"typeString": "struct INonfungiblePositionManager.MintParams"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 768,
												"initialValue": {
													"arguments": [
														{
															"id": 749,
															"name": "token0",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 361,
															"src": "5825:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 750,
															"name": "token1",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 363,
															"src": "5858:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 751,
															"name": "tickSpacing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 369,
															"src": "5896:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														{
															"expression": {
																"id": 752,
																"name": "TickMath",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4765,
																"src": "5937:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_TickMath_$4765_$",
																	"typeString": "type(library TickMath)"
																}
															},
															"id": 753,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "MIN_TICK",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 4238,
															"src": "5937:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														{
															"expression": {
																"id": 754,
																"name": "TickMath",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4765,
																"src": "6003:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_TickMath_$4765_$",
																	"typeString": "type(library TickMath)"
																}
															},
															"id": 755,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "MAX_TICK",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 4243,
															"src": "6003:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														{
															"id": 756,
															"name": "amount0ToMint",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 706,
															"src": "6074:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 757,
															"name": "amount1ToMint",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 708,
															"src": "6122:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "30",
															"id": 758,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6166:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "30",
															"id": 759,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6198:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"arguments": [
																{
																	"id": 762,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "6237:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_V3Bot_$847",
																		"typeString": "contract V3Bot"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_V3Bot_$847",
																		"typeString": "contract V3Bot"
																	}
																],
																"id": 761,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6229:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 760,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "6229:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 763,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6229:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 764,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "6271:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 765,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "6271:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 766,
															"name": "sqrtPriceX96",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 736,
															"src": "6319:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															},
															{
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															},
															{
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														],
														"expression": {
															"id": 747,
															"name": "INonfungiblePositionManager",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 324,
															"src": "5759:27:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_INonfungiblePositionManager_$324_$",
																"typeString": "type(contract INonfungiblePositionManager)"
															}
														},
														"id": 748,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "MintParams",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 226,
														"src": "5759:38:2",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_MintParams_$226_storage_ptr_$",
															"typeString": "type(struct INonfungiblePositionManager.MintParams storage pointer)"
														}
													},
													"id": 767,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"names": [
														"token0",
														"token1",
														"tickSpacing",
														"tickLower",
														"tickUpper",
														"amount0Desired",
														"amount1Desired",
														"amount0Min",
														"amount1Min",
														"recipient",
														"deadline",
														"sqrtPriceX96"
													],
													"nodeType": "FunctionCall",
													"src": "5759:588:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_MintParams_$226_memory_ptr",
														"typeString": "struct INonfungiblePositionManager.MintParams memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5691:656:2"
											},
											{
												"expression": {
													"id": 780,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"components": [
															{
																"id": 769,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 711,
																"src": "6363:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 770,
																"name": "liquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 713,
																"src": "6372:9:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															{
																"id": 771,
																"name": "amount0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 715,
																"src": "6383:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 772,
																"name": "amount1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 717,
																"src": "6392:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 773,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "TupleExpression",
														"src": "6362:38:2",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_uint256_$_t_uint128_$_t_uint256_$_t_uint256_$",
															"typeString": "tuple(uint256,uint128,uint256,uint256)"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 778,
																"name": "params",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 746,
																"src": "6445:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_MintParams_$226_memory_ptr",
																	"typeString": "struct INonfungiblePositionManager.MintParams memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_struct$_MintParams_$226_memory_ptr",
																	"typeString": "struct INonfungiblePositionManager.MintParams memory"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"id": 775,
																		"name": "farmNFT",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 365,
																		"src": "6431:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 774,
																	"name": "INonfungiblePositionManager",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 324,
																	"src": "6403:27:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_INonfungiblePositionManager_$324_$",
																		"typeString": "type(contract INonfungiblePositionManager)"
																	}
																},
																"id": 776,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6403:36:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_INonfungiblePositionManager_$324",
																	"typeString": "contract INonfungiblePositionManager"
																}
															},
															"id": 777,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "mint",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 240,
															"src": "6403:41:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_payable$_t_struct$_MintParams_$226_memory_ptr_$returns$_t_uint256_$_t_uint128_$_t_uint256_$_t_uint256_$",
																"typeString": "function (struct INonfungiblePositionManager.MintParams memory) payable external returns (uint256,uint128,uint256,uint256)"
															}
														},
														"id": 779,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6403:49:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_uint256_$_t_uint128_$_t_uint256_$_t_uint256_$",
															"typeString": "tuple(uint256,uint128,uint256,uint256)"
														}
													},
													"src": "6362:90:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 781,
												"nodeType": "ExpressionStatement",
												"src": "6362:90:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 785,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "6498:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_V3Bot_$847",
																		"typeString": "contract V3Bot"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_V3Bot_$847",
																		"typeString": "contract V3Bot"
																	}
																],
																"id": 784,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6490:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 783,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "6490:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 786,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6490:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 787,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 711,
															"src": "6505:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 782,
														"name": "_createDeposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 846,
														"src": "6475:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 788,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6475:38:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 789,
												"nodeType": "ExpressionStatement",
												"src": "6475:38:2"
											}
										]
									},
									"functionSelector": "9cd441da",
									"id": 791,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "addLiquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 709,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 706,
												"mutability": "mutable",
												"name": "amount0ToMint",
												"nodeType": "VariableDeclaration",
												"scope": 791,
												"src": "5283:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 705,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5283:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 708,
												"mutability": "mutable",
												"name": "amount1ToMint",
												"nodeType": "VariableDeclaration",
												"scope": 791,
												"src": "5306:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 707,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5306:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5282:46:2"
									},
									"returnParameters": {
										"id": 718,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 711,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 791,
												"src": "5355:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 710,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5355:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 713,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 791,
												"src": "5372:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 712,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5372:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 715,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 791,
												"src": "5391:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 714,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5391:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 717,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 791,
												"src": "5408:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 716,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5408:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5354:70:2"
									},
									"scope": 847,
									"src": "5261:1258:2",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 813,
										"nodeType": "Block",
										"src": "6682:137:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 805,
															"name": "operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 793,
															"src": "6745:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 806,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 797,
															"src": "6755:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 804,
														"name": "_createDeposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 846,
														"src": "6730:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 807,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6730:33:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 808,
												"nodeType": "ExpressionStatement",
												"src": "6730:33:2"
											},
											{
												"expression": {
													"expression": {
														"expression": {
															"id": 809,
															"name": "this",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967268,
															"src": "6781:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_V3Bot_$847",
																"typeString": "contract V3Bot"
															}
														},
														"id": 810,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "onERC721Received",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 814,
														"src": "6781:21:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$",
															"typeString": "function (address,address,uint256,bytes memory) external returns (bytes4)"
														}
													},
													"id": 811,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"memberName": "selector",
													"nodeType": "MemberAccess",
													"src": "6781:30:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"functionReturnParameters": 803,
												"id": 812,
												"nodeType": "Return",
												"src": "6774:37:2"
											}
										]
									},
									"functionSelector": "150b7a02",
									"id": 814,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "onERC721Received",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 800,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 793,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 814,
												"src": "6563:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 792,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6563:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 795,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 814,
												"src": "6590:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 794,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6590:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 797,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 814,
												"src": "6608:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 796,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6608:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 799,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 814,
												"src": "6634:14:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 798,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6634:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6552:103:2"
									},
									"returnParameters": {
										"id": 803,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 802,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 814,
												"src": "6674:6:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 801,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "6674:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6673:8:2"
									},
									"scope": 847,
									"src": "6527:292:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 845,
										"nodeType": "Block",
										"src": "6896:356:2",
										"statements": [
											{
												"assignments": [
													null,
													null,
													822,
													824,
													null,
													null,
													null,
													826,
													null,
													null,
													null,
													null
												],
												"declarations": [
													null,
													null,
													{
														"constant": false,
														"id": 822,
														"mutability": "mutable",
														"name": "_token0",
														"nodeType": "VariableDeclaration",
														"scope": 845,
														"src": "6912:15:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 821,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6912:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 824,
														"mutability": "mutable",
														"name": "_token1",
														"nodeType": "VariableDeclaration",
														"scope": 845,
														"src": "6929:15:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 823,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6929:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													null,
													null,
													null,
													{
														"constant": false,
														"id": 826,
														"mutability": "mutable",
														"name": "liquidity",
														"nodeType": "VariableDeclaration",
														"scope": 845,
														"src": "6952:17:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														},
														"typeName": {
															"id": 825,
															"name": "uint128",
															"nodeType": "ElementaryTypeName",
															"src": "6952:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														"visibility": "internal"
													},
													null,
													null,
													null,
													null
												],
												"id": 833,
												"initialValue": {
													"arguments": [
														{
															"id": 831,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 818,
															"src": "7041:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 828,
																	"name": "farmNFT",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 365,
																	"src": "7022:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 827,
																"name": "INonfungiblePositionManager",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 324,
																"src": "6994:27:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_INonfungiblePositionManager_$324_$",
																	"typeString": "type(contract INonfungiblePositionManager)"
																}
															},
															"id": 829,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6994:36:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_INonfungiblePositionManager_$324",
																"typeString": "contract INonfungiblePositionManager"
															}
														},
														"id": 830,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "positions",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 189,
														"src": "6994:46:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_uint96_$_t_address_$_t_address_$_t_address_$_t_int24_$_t_int24_$_t_int24_$_t_uint128_$_t_uint256_$_t_uint256_$_t_uint128_$_t_uint128_$",
															"typeString": "function (uint256) view external returns (uint96,address,address,address,int24,int24,int24,uint128,uint256,uint256,uint128,uint128)"
														}
													},
													"id": 832,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6994:55:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint96_$_t_address_$_t_address_$_t_address_$_t_int24_$_t_int24_$_t_int24_$_t_uint128_$_t_uint256_$_t_uint256_$_t_uint128_$_t_uint128_$",
														"typeString": "tuple(uint96,address,address,address,int24,int24,int24,uint128,uint256,uint256,uint128,uint128)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6907:142:2"
											},
											{
												"expression": {
													"id": 843,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 834,
															"name": "deposits",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 382,
															"src": "7145:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Deposit_$378_storage_$",
																"typeString": "mapping(uint256 => struct V3Bot.Deposit storage ref)"
															}
														},
														"id": 836,
														"indexExpression": {
															"id": 835,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 818,
															"src": "7154:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "7145:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Deposit_$378_storage",
															"typeString": "struct V3Bot.Deposit storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 838,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 816,
																"src": "7181:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 839,
																"name": "liquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 826,
																"src": "7199:9:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															{
																"id": 840,
																"name": "_token0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 822,
																"src": "7218:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 841,
																"name": "_token1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 824,
																"src": "7235:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 837,
															"name": "Deposit",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 378,
															"src": "7165:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_Deposit_$378_storage_ptr_$",
																"typeString": "type(struct V3Bot.Deposit storage pointer)"
															}
														},
														"id": 842,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"names": [
															"owner",
															"liquidity",
															"token0",
															"token1"
														],
														"nodeType": "FunctionCall",
														"src": "7165:79:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Deposit_$378_memory_ptr",
															"typeString": "struct V3Bot.Deposit memory"
														}
													},
													"src": "7145:99:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Deposit_$378_storage",
														"typeString": "struct V3Bot.Deposit storage ref"
													}
												},
												"id": 844,
												"nodeType": "ExpressionStatement",
												"src": "7145:99:2"
											}
										]
									},
									"id": 846,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_createDeposit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 819,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 816,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "6855:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 815,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6855:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 818,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "6870:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 817,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6870:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6854:32:2"
									},
									"returnParameters": {
										"id": 820,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6896:0:2"
									},
									"scope": 847,
									"src": "6831:421:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 848,
							"src": "1014:6245:2"
						}
					],
					"src": "33:7226:2"
				},
				"id": 2
			},
			"contracts/core/interfaces/ICLFactory.sol": {
				"ast": {
					"absolutePath": "contracts/core/interfaces/ICLFactory.sol",
					"exportedSymbols": {
						"ICLFactory": [
							1092
						],
						"IFactoryRegistry": [
							1214
						],
						"IVoter": [
							1322
						]
					},
					"id": 1093,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 849,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:3"
						},
						{
							"absolutePath": "contracts/core/interfaces/IVoter.sol",
							"file": "contracts/core/interfaces/IVoter.sol",
							"id": 851,
							"nodeType": "ImportDirective",
							"scope": 1093,
							"sourceUnit": 1323,
							"src": "71:60:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 850,
										"name": "IVoter",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "79:6:3",
										"typeDescriptions": {}
									}
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/interfaces/IFactoryRegistry.sol",
							"file": "contracts/core/interfaces/IFactoryRegistry.sol",
							"id": 853,
							"nodeType": "ImportDirective",
							"scope": 1093,
							"sourceUnit": 1215,
							"src": "132:80:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 852,
										"name": "IFactoryRegistry",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "140:16:3",
										"typeDescriptions": {}
									}
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 854,
								"nodeType": "StructuredDocumentation",
								"src": "214:139:3",
								"text": "@title The interface for the CL Factory\n @notice The CL Factory facilitates creation of CL pools and control over the protocol fees"
							},
							"fullyImplemented": false,
							"id": 1092,
							"linearizedBaseContracts": [
								1092
							],
							"name": "ICLFactory",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 855,
										"nodeType": "StructuredDocumentation",
										"src": "380:185:3",
										"text": "@notice Emitted when the owner of the factory is changed\n @param oldOwner The owner before the owner was changed\n @param newOwner The owner after the owner was changed"
									},
									"id": 861,
									"name": "OwnerChanged",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 860,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 857,
												"indexed": true,
												"mutability": "mutable",
												"name": "oldOwner",
												"nodeType": "VariableDeclaration",
												"scope": 861,
												"src": "589:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 856,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "589:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 859,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 861,
												"src": "615:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 858,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "615:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "588:52:3"
									},
									"src": "570:71:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 862,
										"nodeType": "StructuredDocumentation",
										"src": "647:240:3",
										"text": "@notice Emitted when the swapFeeManager of the factory is changed\n @param oldFeeManager The swapFeeManager before the swapFeeManager was changed\n @param newFeeManager The swapFeeManager after the swapFeeManager was changed"
									},
									"id": 868,
									"name": "SwapFeeManagerChanged",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 867,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 864,
												"indexed": true,
												"mutability": "mutable",
												"name": "oldFeeManager",
												"nodeType": "VariableDeclaration",
												"scope": 868,
												"src": "920:29:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 863,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "920:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 866,
												"indexed": true,
												"mutability": "mutable",
												"name": "newFeeManager",
												"nodeType": "VariableDeclaration",
												"scope": 868,
												"src": "951:29:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 865,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "951:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "919:62:3"
									},
									"src": "892:90:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 869,
										"nodeType": "StructuredDocumentation",
										"src": "988:233:3",
										"text": "@notice Emitted when the swapFeeModule of the factory is changed\n @param oldFeeModule The swapFeeModule before the swapFeeModule was changed\n @param newFeeModule The swapFeeModule after the swapFeeModule was changed"
									},
									"id": 875,
									"name": "SwapFeeModuleChanged",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 874,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 871,
												"indexed": true,
												"mutability": "mutable",
												"name": "oldFeeModule",
												"nodeType": "VariableDeclaration",
												"scope": 875,
												"src": "1253:28:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 870,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1253:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 873,
												"indexed": true,
												"mutability": "mutable",
												"name": "newFeeModule",
												"nodeType": "VariableDeclaration",
												"scope": 875,
												"src": "1283:28:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 872,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1283:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1252:60:3"
									},
									"src": "1226:87:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 876,
										"nodeType": "StructuredDocumentation",
										"src": "1319:260:3",
										"text": "@notice Emitted when the unstakedFeeManager of the factory is changed\n @param oldFeeManager The unstakedFeeManager before the unstakedFeeManager was changed\n @param newFeeManager The unstakedFeeManager after the unstakedFeeManager was changed"
									},
									"id": 882,
									"name": "UnstakedFeeManagerChanged",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 881,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 878,
												"indexed": true,
												"mutability": "mutable",
												"name": "oldFeeManager",
												"nodeType": "VariableDeclaration",
												"scope": 882,
												"src": "1616:29:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 877,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1616:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 880,
												"indexed": true,
												"mutability": "mutable",
												"name": "newFeeManager",
												"nodeType": "VariableDeclaration",
												"scope": 882,
												"src": "1647:29:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 879,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1647:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1615:62:3"
									},
									"src": "1584:94:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 883,
										"nodeType": "StructuredDocumentation",
										"src": "1684:253:3",
										"text": "@notice Emitted when the unstakedFeeModule of the factory is changed\n @param oldFeeModule The unstakedFeeModule before the unstakedFeeModule was changed\n @param newFeeModule The unstakedFeeModule after the unstakedFeeModule was changed"
									},
									"id": 889,
									"name": "UnstakedFeeModuleChanged",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 888,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 885,
												"indexed": true,
												"mutability": "mutable",
												"name": "oldFeeModule",
												"nodeType": "VariableDeclaration",
												"scope": 889,
												"src": "1973:28:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 884,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1973:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 887,
												"indexed": true,
												"mutability": "mutable",
												"name": "newFeeModule",
												"nodeType": "VariableDeclaration",
												"scope": 889,
												"src": "2003:28:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 886,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2003:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1972:60:3"
									},
									"src": "1942:91:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 890,
										"nodeType": "StructuredDocumentation",
										"src": "2039:261:3",
										"text": "@notice Emitted when the defaultUnstakedFee of the factory is changed\n @param oldUnstakedFee The defaultUnstakedFee before the defaultUnstakedFee was changed\n @param newUnstakedFee The defaultUnstakedFee after the unstakedFeeModule was changed"
									},
									"id": 896,
									"name": "DefaultUnstakedFeeChanged",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 895,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 892,
												"indexed": true,
												"mutability": "mutable",
												"name": "oldUnstakedFee",
												"nodeType": "VariableDeclaration",
												"scope": 896,
												"src": "2337:29:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 891,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "2337:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 894,
												"indexed": true,
												"mutability": "mutable",
												"name": "newUnstakedFee",
												"nodeType": "VariableDeclaration",
												"scope": 896,
												"src": "2368:29:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 893,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "2368:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2336:62:3"
									},
									"src": "2305:94:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 897,
										"nodeType": "StructuredDocumentation",
										"src": "2405:320:3",
										"text": "@notice Emitted when a pool is created\n @param token0 The first token of the pool by address sort order\n @param token1 The second token of the pool by address sort order\n @param tickSpacing The minimum number of ticks between initialized ticks\n @param pool The address of the created pool"
									},
									"id": 907,
									"name": "PoolCreated",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 906,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 899,
												"indexed": true,
												"mutability": "mutable",
												"name": "token0",
												"nodeType": "VariableDeclaration",
												"scope": 907,
												"src": "2748:22:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 898,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2748:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 901,
												"indexed": true,
												"mutability": "mutable",
												"name": "token1",
												"nodeType": "VariableDeclaration",
												"scope": 907,
												"src": "2772:22:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 900,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2772:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 903,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 907,
												"src": "2796:25:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 902,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2796:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 905,
												"indexed": false,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 907,
												"src": "2823:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 904,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2823:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2747:89:3"
									},
									"src": "2730:107:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 908,
										"nodeType": "StructuredDocumentation",
										"src": "2843:258:3",
										"text": "@notice Emitted when a new tick spacing is enabled for pool creation via the factory\n @param tickSpacing The minimum number of ticks between initialized ticks for pools\n @param fee The default fee for a pool created with a given tickSpacing"
									},
									"id": 914,
									"name": "TickSpacingEnabled",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 913,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 910,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 914,
												"src": "3131:25:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 909,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3131:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 912,
												"indexed": true,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 914,
												"src": "3158:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 911,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "3158:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3130:47:3"
									},
									"src": "3106:72:3"
								},
								{
									"documentation": {
										"id": 915,
										"nodeType": "StructuredDocumentation",
										"src": "3184:103:3",
										"text": "@notice The voter contract, used to create gauges\n @return The address of the voter contract"
									},
									"functionSelector": "46c96aac",
									"id": 920,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "voter",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 916,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3306:2:3"
									},
									"returnParameters": {
										"id": 919,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 918,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 920,
												"src": "3332:6:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IVoter_$1322",
													"typeString": "contract IVoter"
												},
												"typeName": {
													"id": 917,
													"name": "IVoter",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1322,
													"src": "3332:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IVoter_$1322",
														"typeString": "contract IVoter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3331:8:3"
									},
									"scope": 1092,
									"src": "3292:48:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 921,
										"nodeType": "StructuredDocumentation",
										"src": "3346:155:3",
										"text": "@notice The address of the pool implementation contract used to deploy proxies / clones\n @return The address of the pool implementation contract"
									},
									"functionSelector": "cefa7799",
									"id": 926,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "poolImplementation",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 922,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3533:2:3"
									},
									"returnParameters": {
										"id": 925,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 924,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 926,
												"src": "3559:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 923,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3559:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3558:9:3"
									},
									"scope": 1092,
									"src": "3506:62:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 927,
										"nodeType": "StructuredDocumentation",
										"src": "3574:123:3",
										"text": "@notice Factory registry for valid pool / gauge / rewards factories\n @return The address of the factory registry"
									},
									"functionSelector": "3bf0c9fb",
									"id": 932,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factoryRegistry",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 928,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3726:2:3"
									},
									"returnParameters": {
										"id": 931,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 930,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 932,
												"src": "3752:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IFactoryRegistry_$1214",
													"typeString": "contract IFactoryRegistry"
												},
												"typeName": {
													"id": 929,
													"name": "IFactoryRegistry",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1214,
													"src": "3752:16:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IFactoryRegistry_$1214",
														"typeString": "contract IFactoryRegistry"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3751:18:3"
									},
									"scope": 1092,
									"src": "3702:68:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 933,
										"nodeType": "StructuredDocumentation",
										"src": "3776:163:3",
										"text": "@notice Returns the current owner of the factory\n @dev Can be changed by the current owner via setOwner\n @return The address of the factory owner"
									},
									"functionSelector": "8da5cb5b",
									"id": 938,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 934,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3958:2:3"
									},
									"returnParameters": {
										"id": 937,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 936,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 938,
												"src": "3984:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 935,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3984:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3983:9:3"
									},
									"scope": 1092,
									"src": "3944:49:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 939,
										"nodeType": "StructuredDocumentation",
										"src": "3999:201:3",
										"text": "@notice Returns the current swapFeeManager of the factory\n @dev Can be changed by the current swap fee manager via setSwapFeeManager\n @return The address of the factory swapFeeManager"
									},
									"functionSelector": "d574afa9",
									"id": 944,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "swapFeeManager",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 940,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4228:2:3"
									},
									"returnParameters": {
										"id": 943,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 942,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "4254:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 941,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4254:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4253:9:3"
									},
									"scope": 1092,
									"src": "4205:58:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 945,
										"nodeType": "StructuredDocumentation",
										"src": "4269:198:3",
										"text": "@notice Returns the current swapFeeModule of the factory\n @dev Can be changed by the current swap fee manager via setSwapFeeModule\n @return The address of the factory swapFeeModule"
									},
									"functionSelector": "23c43a51",
									"id": 950,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "swapFeeModule",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 946,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4494:2:3"
									},
									"returnParameters": {
										"id": 949,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 948,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 950,
												"src": "4520:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 947,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4520:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4519:9:3"
									},
									"scope": 1092,
									"src": "4472:57:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 951,
										"nodeType": "StructuredDocumentation",
										"src": "4535:217:3",
										"text": "@notice Returns the current unstakedFeeManager of the factory\n @dev Can be changed by the current unstaked fee manager via setUnstakedFeeManager\n @return The address of the factory unstakedFeeManager"
									},
									"functionSelector": "82e189e0",
									"id": 956,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unstakedFeeManager",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 952,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4784:2:3"
									},
									"returnParameters": {
										"id": 955,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 954,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 956,
												"src": "4810:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 953,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4810:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4809:9:3"
									},
									"scope": 1092,
									"src": "4757:62:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 957,
										"nodeType": "StructuredDocumentation",
										"src": "4825:214:3",
										"text": "@notice Returns the current unstakedFeeModule of the factory\n @dev Can be changed by the current unstaked fee manager via setUnstakedFeeModule\n @return The address of the factory unstakedFeeModule"
									},
									"functionSelector": "7693bc11",
									"id": 962,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unstakedFeeModule",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 958,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5070:2:3"
									},
									"returnParameters": {
										"id": 961,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 960,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 962,
												"src": "5096:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 959,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5096:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5095:9:3"
									},
									"scope": 1092,
									"src": "5044:61:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 963,
										"nodeType": "StructuredDocumentation",
										"src": "5111:211:3",
										"text": "@notice Returns the current defaultUnstakedFee of the factory\n @dev Can be changed by the current unstaked fee manager via setDefaultUnstakedFee\n @return The default Unstaked Fee of the factory"
									},
									"functionSelector": "e2824832",
									"id": 968,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "defaultUnstakedFee",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 964,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5354:2:3"
									},
									"returnParameters": {
										"id": 967,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 966,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 968,
												"src": "5380:6:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 965,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "5380:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5379:8:3"
									},
									"scope": 1092,
									"src": "5327:61:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 969,
										"nodeType": "StructuredDocumentation",
										"src": "5394:377:3",
										"text": "@notice Returns a default fee for a tick spacing.\n @dev Use getFee for the most up to date fee for a given pool.\n A tick spacing can never be removed, so this value should be hard coded or cached in the calling context\n @param tickSpacing The enabled tick spacing. Returns 0 if not enabled\n @return fee The default fee for the given tick spacing"
									},
									"functionSelector": "380dc1c2",
									"id": 976,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tickSpacingToFee",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 972,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 971,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 976,
												"src": "5802:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 970,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "5802:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5801:19:3"
									},
									"returnParameters": {
										"id": 975,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 974,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 976,
												"src": "5844:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 973,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "5844:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5843:12:3"
									},
									"scope": 1092,
									"src": "5776:80:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 977,
										"nodeType": "StructuredDocumentation",
										"src": "5862:227:3",
										"text": "@notice Returns a list of enabled tick spacings. Used to iterate through pools created by the factory\n @dev Tick spacings cannot be removed. Tick spacings are not ordered\n @return List of enabled tick spacings"
									},
									"functionSelector": "9cbbbe86",
									"id": 983,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tickSpacings",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 978,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6115:2:3"
									},
									"returnParameters": {
										"id": 982,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 981,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 983,
												"src": "6141:14:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_int24_$dyn_memory_ptr",
													"typeString": "int24[]"
												},
												"typeName": {
													"baseType": {
														"id": 979,
														"name": "int24",
														"nodeType": "ElementaryTypeName",
														"src": "6141:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"id": 980,
													"nodeType": "ArrayTypeName",
													"src": "6141:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_int24_$dyn_storage_ptr",
														"typeString": "int24[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6140:16:3"
									},
									"scope": 1092,
									"src": "6094:63:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 984,
										"nodeType": "StructuredDocumentation",
										"src": "6163:435:3",
										"text": "@notice Returns the pool address for a given pair of tokens and a tick spacing, or address 0 if it does not exist\n @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n @param tokenA The contract address of either token0 or token1\n @param tokenB The contract address of the other token\n @param tickSpacing The tick spacing of the pool\n @return pool The pool address"
									},
									"functionSelector": "28af8d0b",
									"id": 995,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 991,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 986,
												"mutability": "mutable",
												"name": "tokenA",
												"nodeType": "VariableDeclaration",
												"scope": 995,
												"src": "6620:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 985,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6620:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 988,
												"mutability": "mutable",
												"name": "tokenB",
												"nodeType": "VariableDeclaration",
												"scope": 995,
												"src": "6636:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 987,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6636:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 990,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 995,
												"src": "6652:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 989,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "6652:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6619:51:3"
									},
									"returnParameters": {
										"id": 994,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 993,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 995,
												"src": "6694:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 992,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6694:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6693:14:3"
									},
									"scope": 1092,
									"src": "6603:105:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 996,
										"nodeType": "StructuredDocumentation",
										"src": "6714:167:3",
										"text": "@notice Return address of pool created by this factory given its `index`\n @param index Index of the pool\n @return The pool address in the given index"
									},
									"functionSelector": "41d1de97",
									"id": 1003,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allPools",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 999,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 998,
												"mutability": "mutable",
												"name": "index",
												"nodeType": "VariableDeclaration",
												"scope": 1003,
												"src": "6904:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 997,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6904:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6903:15:3"
									},
									"returnParameters": {
										"id": 1002,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1001,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1003,
												"src": "6942:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1000,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6942:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6941:9:3"
									},
									"scope": 1092,
									"src": "6886:65:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1004,
										"nodeType": "StructuredDocumentation",
										"src": "6957:123:3",
										"text": "@notice Returns the number of pools created from this factory\n @return Number of pools created from this factory"
									},
									"functionSelector": "efde4e64",
									"id": 1009,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allPoolsLength",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1005,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7108:2:3"
									},
									"returnParameters": {
										"id": 1008,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1007,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1009,
												"src": "7134:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1006,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7134:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7133:9:3"
									},
									"scope": 1092,
									"src": "7085:58:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1010,
										"nodeType": "StructuredDocumentation",
										"src": "7149:207:3",
										"text": "@notice Used in VotingEscrow to determine if a contract is a valid pool of the factory\n @param pool The address of the pool to check\n @return Whether the pool is a valid pool of the factory"
									},
									"functionSelector": "e5e31b13",
									"id": 1017,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isPair",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1013,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1012,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 1017,
												"src": "7377:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1011,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7377:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7376:14:3"
									},
									"returnParameters": {
										"id": 1016,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1015,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1017,
												"src": "7414:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1014,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7414:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7413:6:3"
									},
									"scope": 1092,
									"src": "7361:59:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1018,
										"nodeType": "StructuredDocumentation",
										"src": "7426:269:3",
										"text": "@notice Get swap & flash fee for a given pool. Accounts for default and dynamic fees\n @dev Swap & flash fee is denominated in pips. i.e. 1e-6\n @param pool The pool to get the swap & flash fee for\n @return The swap & flash fee for the given pool"
									},
									"functionSelector": "35458dcc",
									"id": 1025,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getSwapFee",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1021,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1020,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 1025,
												"src": "7720:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1019,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7720:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7719:14:3"
									},
									"returnParameters": {
										"id": 1024,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1023,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1025,
												"src": "7757:6:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1022,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "7757:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7756:8:3"
									},
									"scope": 1092,
									"src": "7700:65:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1026,
										"nodeType": "StructuredDocumentation",
										"src": "7771:253:3",
										"text": "@notice Get unstaked fee for a given pool. Accounts for default and dynamic fees\n @dev Unstaked fee is denominated in pips. i.e. 1e-6\n @param pool The pool to get the unstaked fee for\n @return The unstaked fee for the given pool"
									},
									"functionSelector": "48cf7a43",
									"id": 1033,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getUnstakedFee",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1029,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1028,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 1033,
												"src": "8053:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1027,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8053:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8052:14:3"
									},
									"returnParameters": {
										"id": 1032,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1031,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1033,
												"src": "8090:6:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1030,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "8090:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8089:8:3"
									},
									"scope": 1092,
									"src": "8029:69:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1034,
										"nodeType": "StructuredDocumentation",
										"src": "8104:608:3",
										"text": "@notice Creates a pool for the given two tokens and fee\n @param tokenA One of the two tokens in the desired pool\n @param tokenB The other of the two tokens in the desired pool\n @param tickSpacing The desired tick spacing for the pool\n @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. The call will\n revert if the pool already exists, the tick spacing is invalid, or the token arguments are invalid\n @return pool The address of the newly created pool"
									},
									"functionSelector": "232aa5ac",
									"id": 1047,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1043,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1036,
												"mutability": "mutable",
												"name": "tokenA",
												"nodeType": "VariableDeclaration",
												"scope": 1047,
												"src": "8737:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1035,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8737:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1038,
												"mutability": "mutable",
												"name": "tokenB",
												"nodeType": "VariableDeclaration",
												"scope": 1047,
												"src": "8753:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1037,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8753:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1040,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 1047,
												"src": "8769:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1039,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "8769:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1042,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 1047,
												"src": "8788:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1041,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "8788:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8736:73:3"
									},
									"returnParameters": {
										"id": 1046,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1045,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 1047,
												"src": "8844:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1044,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8844:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8843:14:3"
									},
									"scope": 1092,
									"src": "8717:141:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1048,
										"nodeType": "StructuredDocumentation",
										"src": "8864:144:3",
										"text": "@notice Updates the owner of the factory\n @dev Must be called by the current owner\n @param _owner The new owner of the factory"
									},
									"functionSelector": "13af4035",
									"id": 1053,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setOwner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1051,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1050,
												"mutability": "mutable",
												"name": "_owner",
												"nodeType": "VariableDeclaration",
												"scope": 1053,
												"src": "9031:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1049,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9031:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9030:16:3"
									},
									"returnParameters": {
										"id": 1052,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9055:0:3"
									},
									"scope": 1092,
									"src": "9013:43:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1054,
										"nodeType": "StructuredDocumentation",
										"src": "9062:182:3",
										"text": "@notice Updates the swapFeeManager of the factory\n @dev Must be called by the current swap fee manager\n @param _swapFeeManager The new swapFeeManager of the factory"
									},
									"functionSelector": "ffb4d9d1",
									"id": 1059,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setSwapFeeManager",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1057,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1056,
												"mutability": "mutable",
												"name": "_swapFeeManager",
												"nodeType": "VariableDeclaration",
												"scope": 1059,
												"src": "9276:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1055,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9276:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9275:25:3"
									},
									"returnParameters": {
										"id": 1058,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9309:0:3"
									},
									"scope": 1092,
									"src": "9249:61:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1060,
										"nodeType": "StructuredDocumentation",
										"src": "9316:179:3",
										"text": "@notice Updates the swapFeeModule of the factory\n @dev Must be called by the current swap fee manager\n @param _swapFeeModule The new swapFeeModule of the factory"
									},
									"functionSelector": "61b9c3ec",
									"id": 1065,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setSwapFeeModule",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1063,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1062,
												"mutability": "mutable",
												"name": "_swapFeeModule",
												"nodeType": "VariableDeclaration",
												"scope": 1065,
												"src": "9526:22:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1061,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9526:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9525:24:3"
									},
									"returnParameters": {
										"id": 1064,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9558:0:3"
									},
									"scope": 1092,
									"src": "9500:59:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1066,
										"nodeType": "StructuredDocumentation",
										"src": "9565:198:3",
										"text": "@notice Updates the unstakedFeeManager of the factory\n @dev Must be called by the current unstaked fee manager\n @param _unstakedFeeManager The new unstakedFeeManager of the factory"
									},
									"functionSelector": "93ce8627",
									"id": 1071,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setUnstakedFeeManager",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1069,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1068,
												"mutability": "mutable",
												"name": "_unstakedFeeManager",
												"nodeType": "VariableDeclaration",
												"scope": 1071,
												"src": "9799:27:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1067,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9799:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9798:29:3"
									},
									"returnParameters": {
										"id": 1070,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9836:0:3"
									},
									"scope": 1092,
									"src": "9768:69:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1072,
										"nodeType": "StructuredDocumentation",
										"src": "9843:195:3",
										"text": "@notice Updates the unstakedFeeModule of the factory\n @dev Must be called by the current unstaked fee manager\n @param _unstakedFeeModule The new unstakedFeeModule of the factory"
									},
									"functionSelector": "1b31d878",
									"id": 1077,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setUnstakedFeeModule",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1075,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1074,
												"mutability": "mutable",
												"name": "_unstakedFeeModule",
												"nodeType": "VariableDeclaration",
												"scope": 1077,
												"src": "10073:26:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1073,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10073:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10072:28:3"
									},
									"returnParameters": {
										"id": 1076,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10109:0:3"
									},
									"scope": 1092,
									"src": "10043:67:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1078,
										"nodeType": "StructuredDocumentation",
										"src": "10116:198:3",
										"text": "@notice Updates the defaultUnstakedFee of the factory\n @dev Must be called by the current unstaked fee manager\n @param _defaultUnstakedFee The new defaultUnstakedFee of the factory"
									},
									"functionSelector": "a2f97f42",
									"id": 1083,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setDefaultUnstakedFee",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1081,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1080,
												"mutability": "mutable",
												"name": "_defaultUnstakedFee",
												"nodeType": "VariableDeclaration",
												"scope": 1083,
												"src": "10350:26:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1079,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "10350:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10349:28:3"
									},
									"returnParameters": {
										"id": 1082,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10386:0:3"
									},
									"scope": 1092,
									"src": "10319:68:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1084,
										"nodeType": "StructuredDocumentation",
										"src": "10393:254:3",
										"text": "@notice Enables a certain tickSpacing\n @dev Tick spacings may never be removed once enabled\n @param tickSpacing The spacing between ticks to be enforced in the pool\n @param fee The default fee associated with a given tick spacing"
									},
									"functionSelector": "eee0fdb4",
									"id": 1091,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "enableTickSpacing",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1089,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1086,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 1091,
												"src": "10679:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1085,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "10679:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1088,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 1091,
												"src": "10698:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1087,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "10698:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10678:31:3"
									},
									"returnParameters": {
										"id": 1090,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10718:0:3"
									},
									"scope": 1092,
									"src": "10652:67:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1093,
							"src": "353:10368:3"
						}
					],
					"src": "45:10677:3"
				},
				"id": 3
			},
			"contracts/core/interfaces/ICLPool.sol": {
				"ast": {
					"absolutePath": "contracts/core/interfaces/ICLPool.sol",
					"exportedSymbols": {
						"ICLPool": [
							1114
						],
						"ICLPoolActions": [
							1544
						],
						"ICLPoolConstants": [
							1596
						],
						"ICLPoolDerivedState": [
							1627
						],
						"ICLPoolEvents": [
							1744
						],
						"ICLPoolOwnerActions": [
							1756
						],
						"ICLPoolState": [
							1932
						]
					},
					"id": 1115,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1094,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:4"
						},
						{
							"absolutePath": "contracts/core/interfaces/pool/ICLPoolConstants.sol",
							"file": "./pool/ICLPoolConstants.sol",
							"id": 1095,
							"nodeType": "ImportDirective",
							"scope": 1115,
							"sourceUnit": 1597,
							"src": "71:37:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/interfaces/pool/ICLPoolState.sol",
							"file": "./pool/ICLPoolState.sol",
							"id": 1096,
							"nodeType": "ImportDirective",
							"scope": 1115,
							"sourceUnit": 1933,
							"src": "109:33:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/interfaces/pool/ICLPoolDerivedState.sol",
							"file": "./pool/ICLPoolDerivedState.sol",
							"id": 1097,
							"nodeType": "ImportDirective",
							"scope": 1115,
							"sourceUnit": 1628,
							"src": "143:40:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/interfaces/pool/ICLPoolActions.sol",
							"file": "./pool/ICLPoolActions.sol",
							"id": 1098,
							"nodeType": "ImportDirective",
							"scope": 1115,
							"sourceUnit": 1545,
							"src": "184:35:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/interfaces/pool/ICLPoolOwnerActions.sol",
							"file": "./pool/ICLPoolOwnerActions.sol",
							"id": 1099,
							"nodeType": "ImportDirective",
							"scope": 1115,
							"sourceUnit": 1757,
							"src": "220:40:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/interfaces/pool/ICLPoolEvents.sol",
							"file": "./pool/ICLPoolEvents.sol",
							"id": 1100,
							"nodeType": "ImportDirective",
							"scope": 1115,
							"sourceUnit": 1745,
							"src": "261:34:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1102,
										"name": "ICLPoolConstants",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1596,
										"src": "574:16:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ICLPoolConstants_$1596",
											"typeString": "contract ICLPoolConstants"
										}
									},
									"id": 1103,
									"nodeType": "InheritanceSpecifier",
									"src": "574:16:4"
								},
								{
									"baseName": {
										"id": 1104,
										"name": "ICLPoolState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1932,
										"src": "596:12:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ICLPoolState_$1932",
											"typeString": "contract ICLPoolState"
										}
									},
									"id": 1105,
									"nodeType": "InheritanceSpecifier",
									"src": "596:12:4"
								},
								{
									"baseName": {
										"id": 1106,
										"name": "ICLPoolDerivedState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1627,
										"src": "614:19:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ICLPoolDerivedState_$1627",
											"typeString": "contract ICLPoolDerivedState"
										}
									},
									"id": 1107,
									"nodeType": "InheritanceSpecifier",
									"src": "614:19:4"
								},
								{
									"baseName": {
										"id": 1108,
										"name": "ICLPoolActions",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1544,
										"src": "639:14:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ICLPoolActions_$1544",
											"typeString": "contract ICLPoolActions"
										}
									},
									"id": 1109,
									"nodeType": "InheritanceSpecifier",
									"src": "639:14:4"
								},
								{
									"baseName": {
										"id": 1110,
										"name": "ICLPoolEvents",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1744,
										"src": "659:13:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ICLPoolEvents_$1744",
											"typeString": "contract ICLPoolEvents"
										}
									},
									"id": 1111,
									"nodeType": "InheritanceSpecifier",
									"src": "659:13:4"
								},
								{
									"baseName": {
										"id": 1112,
										"name": "ICLPoolOwnerActions",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1756,
										"src": "678:19:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ICLPoolOwnerActions_$1756",
											"typeString": "contract ICLPoolOwnerActions"
										}
									},
									"id": 1113,
									"nodeType": "InheritanceSpecifier",
									"src": "678:19:4"
								}
							],
							"contractDependencies": [
								1544,
								1596,
								1627,
								1744,
								1756,
								1932
							],
							"contractKind": "interface",
							"documentation": {
								"id": 1101,
								"nodeType": "StructuredDocumentation",
								"src": "297:252:4",
								"text": "@title The interface for a CL Pool\n @notice A CL pool facilitates swapping and automated market making between any two assets that strictly conform\n to the ERC20 specification\n @dev The pool interface is broken up into many smaller pieces"
							},
							"fullyImplemented": false,
							"id": 1114,
							"linearizedBaseContracts": [
								1114,
								1756,
								1744,
								1544,
								1627,
								1932,
								1596
							],
							"name": "ICLPool",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 1115,
							"src": "549:151:4"
						}
					],
					"src": "45:656:4"
				},
				"id": 4
			},
			"contracts/core/interfaces/IERC20Minimal.sol": {
				"ast": {
					"absolutePath": "contracts/core/interfaces/IERC20Minimal.sol",
					"exportedSymbols": {
						"IERC20Minimal": [
							1186
						]
					},
					"id": 1187,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1116,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1117,
								"nodeType": "StructuredDocumentation",
								"src": "71:119:5",
								"text": "@title Minimal ERC20 interface for CL\n @notice Contains a subset of the full ERC20 interface that is used in CL"
							},
							"fullyImplemented": false,
							"id": 1186,
							"linearizedBaseContracts": [
								1186
							],
							"name": "IERC20Minimal",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1118,
										"nodeType": "StructuredDocumentation",
										"src": "220:201:5",
										"text": "@notice Returns the balance of a token\n @param account The account for which to look up the number of tokens it has, i.e. its balance\n @return The number of tokens held by the account"
									},
									"functionSelector": "70a08231",
									"id": 1125,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1121,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1120,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 1125,
												"src": "445:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1119,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "444:17:5"
									},
									"returnParameters": {
										"id": 1124,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1123,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1125,
												"src": "485:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1122,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "485:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "484:9:5"
									},
									"scope": 1186,
									"src": "426:68:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1126,
										"nodeType": "StructuredDocumentation",
										"src": "500:333:5",
										"text": "@notice Transfers the amount of token from the `msg.sender` to the recipient\n @param recipient The account that will receive the amount transferred\n @param amount The number of tokens to send from the sender to the recipient\n @return Returns true for a successful transfer, false for an unsuccessful transfer"
									},
									"functionSelector": "a9059cbb",
									"id": 1135,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1131,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1128,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1135,
												"src": "856:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1127,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "856:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1130,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1135,
												"src": "875:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1129,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "875:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "855:35:5"
									},
									"returnParameters": {
										"id": 1134,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1133,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1135,
												"src": "909:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1132,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "909:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "908:6:5"
									},
									"scope": 1186,
									"src": "838:77:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1136,
										"nodeType": "StructuredDocumentation",
										"src": "921:250:5",
										"text": "@notice Returns the current allowance given to a spender by an owner\n @param owner The account of the token owner\n @param spender The account of the token spender\n @return The current allowance granted by `owner` to `spender`"
									},
									"functionSelector": "dd62ed3e",
									"id": 1145,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1141,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1138,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 1145,
												"src": "1195:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1137,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1195:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1140,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 1145,
												"src": "1210:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1139,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1210:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:32:5"
									},
									"returnParameters": {
										"id": 1144,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1143,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1145,
												"src": "1250:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1142,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1250:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1249:9:5"
									},
									"scope": 1186,
									"src": "1176:83:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1146,
										"nodeType": "StructuredDocumentation",
										"src": "1265:343:5",
										"text": "@notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\n @param spender The account which will be allowed to spend a given amount of the owners tokens\n @param amount The amount of tokens allowed to be used by `spender`\n @return Returns true for a successful approval, false for unsuccessful"
									},
									"functionSelector": "095ea7b3",
									"id": 1155,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1148,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 1155,
												"src": "1630:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1147,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1630:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1150,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1155,
												"src": "1647:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1149,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1647:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1629:33:5"
									},
									"returnParameters": {
										"id": 1154,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1153,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1155,
												"src": "1681:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1152,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1681:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1680:6:5"
									},
									"scope": 1186,
									"src": "1613:74:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1156,
										"nodeType": "StructuredDocumentation",
										"src": "1693:371:5",
										"text": "@notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\n @param sender The account from which the transfer will be initiated\n @param recipient The recipient of the transfer\n @param amount The amount of the transfer\n @return Returns true for a successful transfer, false for unsuccessful"
									},
									"functionSelector": "23b872dd",
									"id": 1167,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1158,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 1167,
												"src": "2091:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1157,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2091:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1160,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1167,
												"src": "2107:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1159,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2107:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1162,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1167,
												"src": "2126:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1161,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2126:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2090:51:5"
									},
									"returnParameters": {
										"id": 1166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1165,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1167,
												"src": "2160:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1164,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2160:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2159:6:5"
									},
									"scope": 1186,
									"src": "2069:97:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1168,
										"nodeType": "StructuredDocumentation",
										"src": "2172:369:5",
										"text": "@notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\n @param from The account from which the tokens were sent, i.e. the balance decreased\n @param to The account to which the tokens were sent, i.e. the balance increased\n @param value The amount of tokens that were transferred"
									},
									"id": 1176,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1175,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1170,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 1176,
												"src": "2561:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1169,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2561:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1172,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 1176,
												"src": "2583:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1171,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2583:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1174,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 1176,
												"src": "2603:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1173,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2603:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2560:57:5"
									},
									"src": "2546:72:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1177,
										"nodeType": "StructuredDocumentation",
										"src": "2624:321:5",
										"text": "@notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\n @param owner The account that approved spending of its tokens\n @param spender The account for which the spending allowance was modified\n @param value The new allowance from the owner to the spender"
									},
									"id": 1185,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1184,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1179,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 1185,
												"src": "2965:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1178,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2965:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1181,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 1185,
												"src": "2988:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1180,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2988:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1183,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 1185,
												"src": "3013:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1182,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3013:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2964:63:5"
									},
									"src": "2950:78:5"
								}
							],
							"scope": 1187,
							"src": "190:2840:5"
						}
					],
					"src": "45:2986:5"
				},
				"id": 5
			},
			"contracts/core/interfaces/IFactoryRegistry.sol": {
				"ast": {
					"absolutePath": "contracts/core/interfaces/IFactoryRegistry.sol",
					"exportedSymbols": {
						"IFactoryRegistry": [
							1214
						]
					},
					"id": 1215,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1188,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1214,
							"linearizedBaseContracts": [
								1214
							],
							"name": "IFactoryRegistry",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "9b140a85",
									"id": 1197,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1195,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1190,
												"mutability": "mutable",
												"name": "poolFactory",
												"nodeType": "VariableDeclaration",
												"scope": 1197,
												"src": "107:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1189,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "107:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1192,
												"mutability": "mutable",
												"name": "votingRewardsFactory",
												"nodeType": "VariableDeclaration",
												"scope": 1197,
												"src": "128:28:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1191,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "128:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1194,
												"mutability": "mutable",
												"name": "gaugeFactory",
												"nodeType": "VariableDeclaration",
												"scope": 1197,
												"src": "158:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1193,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "158:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "106:73:6"
									},
									"returnParameters": {
										"id": 1196,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "188:0:6"
									},
									"scope": 1214,
									"src": "90:99:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "d1ea0a1d",
									"id": 1204,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isPoolFactoryApproved",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1200,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1199,
												"mutability": "mutable",
												"name": "poolFactory",
												"nodeType": "VariableDeclaration",
												"scope": 1204,
												"src": "226:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1198,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "226:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "225:21:6"
									},
									"returnParameters": {
										"id": 1203,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1202,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1204,
												"src": "265:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1201,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "265:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "264:6:6"
									},
									"scope": 1214,
									"src": "195:76:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "1217afdb",
									"id": 1213,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factoriesToPoolFactory",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1207,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1206,
												"mutability": "mutable",
												"name": "poolFactory",
												"nodeType": "VariableDeclaration",
												"scope": 1213,
												"src": "309:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1205,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "309:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "308:21:6"
									},
									"returnParameters": {
										"id": 1212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1209,
												"mutability": "mutable",
												"name": "votingRewardsFactory",
												"nodeType": "VariableDeclaration",
												"scope": 1213,
												"src": "364:28:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1208,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "364:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1211,
												"mutability": "mutable",
												"name": "gaugeFactory",
												"nodeType": "VariableDeclaration",
												"scope": 1213,
												"src": "394:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1210,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "394:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "363:52:6"
									},
									"scope": 1214,
									"src": "277:139:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1215,
							"src": "57:361:6"
						}
					],
					"src": "32:387:6"
				},
				"id": 6
			},
			"contracts/core/interfaces/IVoter.sol": {
				"ast": {
					"absolutePath": "contracts/core/interfaces/IVoter.sol",
					"exportedSymbols": {
						"IFactoryRegistry": [
							1214
						],
						"IVoter": [
							1322
						],
						"IVotingEscrow": [
							1340
						]
					},
					"id": 1323,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1216,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:7"
						},
						{
							"id": 1217,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "56:19:7"
						},
						{
							"absolutePath": "contracts/core/interfaces/IVotingEscrow.sol",
							"file": "contracts/core/interfaces/IVotingEscrow.sol",
							"id": 1219,
							"nodeType": "ImportDirective",
							"scope": 1323,
							"sourceUnit": 1341,
							"src": "77:74:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1218,
										"name": "IVotingEscrow",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "85:13:7",
										"typeDescriptions": {}
									}
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/interfaces/IFactoryRegistry.sol",
							"file": "contracts/core/interfaces/IFactoryRegistry.sol",
							"id": 1221,
							"nodeType": "ImportDirective",
							"scope": 1323,
							"sourceUnit": 1215,
							"src": "152:80:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1220,
										"name": "IFactoryRegistry",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "160:16:7",
										"typeDescriptions": {}
									}
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1322,
							"linearizedBaseContracts": [
								1322
							],
							"name": "IVoter",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "1f850716",
									"id": 1226,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1222,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "268:2:7"
									},
									"returnParameters": {
										"id": 1225,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1224,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1226,
												"src": "294:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IVotingEscrow_$1340",
													"typeString": "contract IVotingEscrow"
												},
												"typeName": {
													"id": 1223,
													"name": "IVotingEscrow",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1340,
													"src": "294:13:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IVotingEscrow_$1340",
														"typeString": "contract IVotingEscrow"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "293:15:7"
									},
									"scope": 1322,
									"src": "257:52:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "7ac09bf7",
									"id": 1237,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "vote",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1235,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1228,
												"mutability": "mutable",
												"name": "_tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1237,
												"src": "329:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1227,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "329:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1231,
												"mutability": "mutable",
												"name": "_poolVote",
												"nodeType": "VariableDeclaration",
												"scope": 1237,
												"src": "347:28:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1229,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "347:7:7",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1230,
													"nodeType": "ArrayTypeName",
													"src": "347:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1234,
												"mutability": "mutable",
												"name": "_weights",
												"nodeType": "VariableDeclaration",
												"scope": 1237,
												"src": "377:27:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1232,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "377:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1233,
													"nodeType": "ArrayTypeName",
													"src": "377:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "328:77:7"
									},
									"returnParameters": {
										"id": 1236,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "414:0:7"
									},
									"scope": 1322,
									"src": "315:100:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "b9a09fd5",
									"id": 1244,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "gauges",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1240,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1239,
												"mutability": "mutable",
												"name": "_pool",
												"nodeType": "VariableDeclaration",
												"scope": 1244,
												"src": "437:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1238,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "437:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "436:15:7"
									},
									"returnParameters": {
										"id": 1243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1242,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1244,
												"src": "475:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1241,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "475:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "474:9:7"
									},
									"scope": 1322,
									"src": "421:63:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "c4f08165",
									"id": 1251,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "gaugeToFees",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1247,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1246,
												"mutability": "mutable",
												"name": "_gauge",
												"nodeType": "VariableDeclaration",
												"scope": 1251,
												"src": "511:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1245,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "511:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "510:16:7"
									},
									"returnParameters": {
										"id": 1250,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1249,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1251,
												"src": "550:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1248,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "550:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "549:9:7"
									},
									"scope": 1322,
									"src": "490:69:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "294a6aeb",
									"id": 1258,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "gaugeToBribes",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1254,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1253,
												"mutability": "mutable",
												"name": "_gauge",
												"nodeType": "VariableDeclaration",
												"scope": 1258,
												"src": "588:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1252,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "588:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "587:16:7"
									},
									"returnParameters": {
										"id": 1257,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1256,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1258,
												"src": "627:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1255,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "627:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "626:9:7"
									},
									"scope": 1322,
									"src": "565:71:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "794cea3c",
									"id": 1267,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createGauge",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1260,
												"mutability": "mutable",
												"name": "_poolFactory",
												"nodeType": "VariableDeclaration",
												"scope": 1267,
												"src": "663:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1259,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "663:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1262,
												"mutability": "mutable",
												"name": "_pool",
												"nodeType": "VariableDeclaration",
												"scope": 1267,
												"src": "685:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1261,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "685:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "662:37:7"
									},
									"returnParameters": {
										"id": 1266,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1265,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1267,
												"src": "718:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1264,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "718:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "717:9:7"
									},
									"scope": 1322,
									"src": "642:85:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "63453ae1",
									"id": 1272,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "distribute",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1270,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1269,
												"mutability": "mutable",
												"name": "gauge",
												"nodeType": "VariableDeclaration",
												"scope": 1272,
												"src": "753:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1268,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "753:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "752:15:7"
									},
									"returnParameters": {
										"id": 1271,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "776:0:7"
									},
									"scope": 1322,
									"src": "733:44:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "3bf0c9fb",
									"id": 1277,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factoryRegistry",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1273,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "807:2:7"
									},
									"returnParameters": {
										"id": 1276,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1275,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1277,
												"src": "833:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IFactoryRegistry_$1214",
													"typeString": "contract IFactoryRegistry"
												},
												"typeName": {
													"id": 1274,
													"name": "IFactoryRegistry",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1214,
													"src": "833:16:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IFactoryRegistry_$1214",
														"typeString": "contract IFactoryRegistry"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "832:18:7"
									},
									"scope": 1322,
									"src": "783:68:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1278,
										"nodeType": "StructuredDocumentation",
										"src": "857:116:7",
										"text": "@dev Utility to distribute to gauges of pools in array.\n @param _gauges Array of gauges to distribute to."
									},
									"functionSelector": "6138889b",
									"id": 1284,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "distribute",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1282,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1281,
												"mutability": "mutable",
												"name": "_gauges",
												"nodeType": "VariableDeclaration",
												"scope": 1284,
												"src": "998:24:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1279,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "998:7:7",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1280,
													"nodeType": "ArrayTypeName",
													"src": "998:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "997:26:7"
									},
									"returnParameters": {
										"id": 1283,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1032:0:7"
									},
									"scope": 1322,
									"src": "978:55:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "1703e5f9",
									"id": 1291,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isAlive",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1287,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1286,
												"mutability": "mutable",
												"name": "_gauge",
												"nodeType": "VariableDeclaration",
												"scope": 1291,
												"src": "1056:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1285,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1056:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1055:16:7"
									},
									"returnParameters": {
										"id": 1290,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1289,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1291,
												"src": "1095:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1288,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1095:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1094:6:7"
									},
									"scope": 1322,
									"src": "1039:62:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "992a7933",
									"id": 1296,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "killGauge",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1294,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1293,
												"mutability": "mutable",
												"name": "_gauge",
												"nodeType": "VariableDeclaration",
												"scope": 1296,
												"src": "1126:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1292,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1126:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1125:16:7"
									},
									"returnParameters": {
										"id": 1295,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1150:0:7"
									},
									"scope": 1322,
									"src": "1107:44:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "7778960e",
									"id": 1301,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "emergencyCouncil",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1297,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1182:2:7"
									},
									"returnParameters": {
										"id": 1300,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1299,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1301,
												"src": "1208:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1298,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1208:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1207:9:7"
									},
									"scope": 1322,
									"src": "1157:60:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1302,
										"nodeType": "StructuredDocumentation",
										"src": "1223:106:7",
										"text": "@notice Claim emissions from gauges.\n @param _gauges Array of gauges to collect emissions from."
									},
									"functionSelector": "f9f031df",
									"id": 1308,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "claimRewards",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1306,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1305,
												"mutability": "mutable",
												"name": "_gauges",
												"nodeType": "VariableDeclaration",
												"scope": 1308,
												"src": "1356:24:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1303,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "1356:7:7",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1304,
													"nodeType": "ArrayTypeName",
													"src": "1356:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1355:26:7"
									},
									"returnParameters": {
										"id": 1307,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1390:0:7"
									},
									"scope": 1322,
									"src": "1334:57:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1309,
										"nodeType": "StructuredDocumentation",
										"src": "1397:295:7",
										"text": "@notice Claim fees for a given NFT.\n @dev Utility to help batch fee claims.\n @param _fees    Array of FeesVotingReward contracts to collect from.\n @param _tokens  Array of tokens that are used as fees.\n @param _tokenId Id of veNFT that you wish to claim fees for."
									},
									"functionSelector": "666256aa",
									"id": 1321,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "claimFees",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1319,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1312,
												"mutability": "mutable",
												"name": "_fees",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "1716:22:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1310,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "1716:7:7",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1311,
													"nodeType": "ArrayTypeName",
													"src": "1716:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1316,
												"mutability": "mutable",
												"name": "_tokens",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "1740:26:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_array$_t_address_$dyn_memory_ptr_$dyn_memory_ptr",
													"typeString": "address[][]"
												},
												"typeName": {
													"baseType": {
														"baseType": {
															"id": 1313,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "1740:7:7",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1314,
														"nodeType": "ArrayTypeName",
														"src": "1740:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
															"typeString": "address[]"
														}
													},
													"id": 1315,
													"nodeType": "ArrayTypeName",
													"src": "1740:11:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_array$_t_address_$dyn_storage_$dyn_storage_ptr",
														"typeString": "address[][]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1318,
												"mutability": "mutable",
												"name": "_tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "1768:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1317,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1768:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1715:70:7"
									},
									"returnParameters": {
										"id": 1320,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1794:0:7"
									},
									"scope": 1322,
									"src": "1697:98:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1323,
							"src": "234:1563:7"
						}
					],
					"src": "32:1766:7"
				},
				"id": 7
			},
			"contracts/core/interfaces/IVotingEscrow.sol": {
				"ast": {
					"absolutePath": "contracts/core/interfaces/IVotingEscrow.sol",
					"exportedSymbols": {
						"IVotingEscrow": [
							1340
						]
					},
					"id": 1341,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1324,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1340,
							"linearizedBaseContracts": [
								1340
							],
							"name": "IVotingEscrow",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "85f2aef2",
									"id": 1329,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "team",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1325,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "100:2:8"
									},
									"returnParameters": {
										"id": 1328,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1327,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1329,
												"src": "121:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1326,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "121:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "120:9:8"
									},
									"scope": 1340,
									"src": "87:43:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1330,
										"nodeType": "StructuredDocumentation",
										"src": "136:259:8",
										"text": "@notice Deposit `_value` tokens for `msg.sender` and lock for `_lockDuration`\n @param _value Amount to deposit\n @param _lockDuration Number of seconds to lock tokens for (rounded down to nearest week)\n @return TokenId of created veNFT"
									},
									"functionSelector": "b52c05fe",
									"id": 1339,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createLock",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1335,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1332,
												"mutability": "mutable",
												"name": "_value",
												"nodeType": "VariableDeclaration",
												"scope": 1339,
												"src": "420:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1331,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "420:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1334,
												"mutability": "mutable",
												"name": "_lockDuration",
												"nodeType": "VariableDeclaration",
												"scope": 1339,
												"src": "436:21:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1333,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "436:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "419:39:8"
									},
									"returnParameters": {
										"id": 1338,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1337,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1339,
												"src": "477:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1336,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "477:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "476:9:8"
									},
									"scope": 1340,
									"src": "400:86:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1341,
							"src": "57:431:8"
						}
					],
					"src": "32:457:8"
				},
				"id": 8
			},
			"contracts/core/interfaces/callback/ICLMintCallback.sol": {
				"ast": {
					"absolutePath": "contracts/core/interfaces/callback/ICLMintCallback.sol",
					"exportedSymbols": {
						"ICLMintCallback": [
							1354
						]
					},
					"id": 1355,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1342,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1343,
								"nodeType": "StructuredDocumentation",
								"src": "71:130:9",
								"text": "@title Callback for ICLPoolActions#mint\n @notice Any contract that calls ICLPoolActions#mint must implement this interface"
							},
							"fullyImplemented": false,
							"id": 1354,
							"linearizedBaseContracts": [
								1354
							],
							"name": "ICLMintCallback",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1344,
										"nodeType": "StructuredDocumentation",
										"src": "233:557:9",
										"text": "@notice Called to `msg.sender` after minting liquidity to a position from ICLPool#mint.\n @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\n The caller of this method must be checked to be a CLPool deployed by the canonical CLFactory.\n @param amount0Owed The amount of token0 due to the pool for the minted liquidity\n @param amount1Owed The amount of token1 due to the pool for the minted liquidity\n @param data Any data passed through by the caller via the ICLPoolActions#mint call"
									},
									"functionSelector": "d3487997",
									"id": 1353,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "uniswapV3MintCallback",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1351,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1346,
												"mutability": "mutable",
												"name": "amount0Owed",
												"nodeType": "VariableDeclaration",
												"scope": 1353,
												"src": "826:19:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1345,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "826:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1348,
												"mutability": "mutable",
												"name": "amount1Owed",
												"nodeType": "VariableDeclaration",
												"scope": 1353,
												"src": "847:19:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1347,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "847:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1350,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 1353,
												"src": "868:19:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1349,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "868:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "825:63:9"
									},
									"returnParameters": {
										"id": 1352,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "897:0:9"
									},
									"scope": 1354,
									"src": "795:103:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1355,
							"src": "201:699:9"
						}
					],
					"src": "45:856:9"
				},
				"id": 9
			},
			"contracts/core/interfaces/callback/ICLSwapCallback.sol": {
				"ast": {
					"absolutePath": "contracts/core/interfaces/callback/ICLSwapCallback.sol",
					"exportedSymbols": {
						"ICLSwapCallback": [
							1368
						]
					},
					"id": 1369,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1356,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1357,
								"nodeType": "StructuredDocumentation",
								"src": "71:130:10",
								"text": "@title Callback for ICLPoolActions#swap\n @notice Any contract that calls ICLPoolActions#swap must implement this interface"
							},
							"fullyImplemented": false,
							"id": 1368,
							"linearizedBaseContracts": [
								1368
							],
							"name": "ICLSwapCallback",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1358,
										"nodeType": "StructuredDocumentation",
										"src": "233:870:10",
										"text": "@notice Called to `msg.sender` after executing a swap via ICLPool#swap.\n @dev In the implementation you must pay the pool tokens owed for the swap.\n The caller of this method must be checked to be a CLPool deployed by the canonical CLFactory.\n amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n @param data Any data passed through by the caller via the ICLPoolActions#swap call"
									},
									"functionSelector": "fa461e33",
									"id": 1367,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "uniswapV3SwapCallback",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1365,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1360,
												"mutability": "mutable",
												"name": "amount0Delta",
												"nodeType": "VariableDeclaration",
												"scope": 1367,
												"src": "1139:19:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1359,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1139:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1362,
												"mutability": "mutable",
												"name": "amount1Delta",
												"nodeType": "VariableDeclaration",
												"scope": 1367,
												"src": "1160:19:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1361,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1160:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1364,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 1367,
												"src": "1181:19:10",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1363,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1181:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1138:63:10"
									},
									"returnParameters": {
										"id": 1366,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1210:0:10"
									},
									"scope": 1368,
									"src": "1108:103:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1369,
							"src": "201:1012:10"
						}
					],
					"src": "45:1169:10"
				},
				"id": 10
			},
			"contracts/core/interfaces/pool/ICLPoolActions.sol": {
				"ast": {
					"absolutePath": "contracts/core/interfaces/pool/ICLPoolActions.sol",
					"exportedSymbols": {
						"ICLPoolActions": [
							1544
						]
					},
					"id": 1545,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1370,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:11"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1371,
								"nodeType": "StructuredDocumentation",
								"src": "71:102:11",
								"text": "@title Permissionless pool actions\n @notice Contains pool methods that can be called by anyone"
							},
							"fullyImplemented": false,
							"id": 1544,
							"linearizedBaseContracts": [
								1544
							],
							"name": "ICLPoolActions",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1372,
										"nodeType": "StructuredDocumentation",
										"src": "204:652:11",
										"text": "@notice Initialize function used in proxy deployment\n @dev Can be called once only\n Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n @dev not locked because it initializes unlocked\n @param _factory The CL factory contract address\n @param _token0 The first token of the pool by address sort order\n @param _token1 The second token of the pool by address sort order\n @param _tickSpacing The pool tick spacing\n @param _factoryRegistry The address of the factory registry managing the pool factory\n @param _sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96"
									},
									"functionSelector": "2071d884",
									"id": 1387,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1385,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1374,
												"mutability": "mutable",
												"name": "_factory",
												"nodeType": "VariableDeclaration",
												"scope": 1387,
												"src": "890:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1373,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "890:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1376,
												"mutability": "mutable",
												"name": "_token0",
												"nodeType": "VariableDeclaration",
												"scope": 1387,
												"src": "916:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1375,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "916:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1378,
												"mutability": "mutable",
												"name": "_token1",
												"nodeType": "VariableDeclaration",
												"scope": 1387,
												"src": "941:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1377,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "941:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1380,
												"mutability": "mutable",
												"name": "_tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 1387,
												"src": "966:18:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1379,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "966:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1382,
												"mutability": "mutable",
												"name": "_factoryRegistry",
												"nodeType": "VariableDeclaration",
												"scope": 1387,
												"src": "994:24:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1381,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "994:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1384,
												"mutability": "mutable",
												"name": "_sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 1387,
												"src": "1028:21:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1383,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1028:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "880:175:11"
									},
									"returnParameters": {
										"id": 1386,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1064:0:11"
									},
									"scope": 1544,
									"src": "861:204:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1388,
										"nodeType": "StructuredDocumentation",
										"src": "1071:227:11",
										"text": "@notice Initialize gauge and nft manager\n @dev Callable only once, by the gauge factory\n @param _gauge The gauge corresponding to this pool\n @param _nft The position manager used for position management"
									},
									"functionSelector": "1f7c3568",
									"id": 1395,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setGaugeAndPositionManager",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1393,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1390,
												"mutability": "mutable",
												"name": "_gauge",
												"nodeType": "VariableDeclaration",
												"scope": 1395,
												"src": "1339:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1389,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1339:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1392,
												"mutability": "mutable",
												"name": "_nft",
												"nodeType": "VariableDeclaration",
												"scope": 1395,
												"src": "1355:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1391,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1355:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1338:30:11"
									},
									"returnParameters": {
										"id": 1394,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1377:0:11"
									},
									"scope": 1544,
									"src": "1303:75:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1396,
										"nodeType": "StructuredDocumentation",
										"src": "1384:1022:11",
										"text": "@notice Adds liquidity for the given recipient/tickLower/tickUpper position\n @dev The caller of this method receives a callback in the form of ICLMintCallback#uniswapV3MintCallback\n in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n on tickLower, tickUpper, the amount of liquidity, and the current price.\n @param recipient The address for which the liquidity will be created\n @param tickLower The lower tick of the position in which to add liquidity\n @param tickUpper The upper tick of the position in which to add liquidity\n @param amount The amount of liquidity to mint\n @param data Any data that should be passed through to the callback\n @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
									},
									"functionSelector": "3c8a7d8d",
									"id": 1413,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1407,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1398,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1413,
												"src": "2425:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1397,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2425:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1400,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 1413,
												"src": "2444:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1399,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2444:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1402,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 1413,
												"src": "2461:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1401,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2461:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1404,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1413,
												"src": "2478:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1403,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2478:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1406,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 1413,
												"src": "2494:19:11",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1405,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2494:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2424:90:11"
									},
									"returnParameters": {
										"id": 1412,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1409,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1413,
												"src": "2549:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1408,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2549:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1411,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1413,
												"src": "2566:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1410,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2566:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2548:34:11"
									},
									"scope": 1544,
									"src": "2411:172:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1414,
										"nodeType": "StructuredDocumentation",
										"src": "2589:1053:11",
										"text": "@notice Collects tokens owed to a position\n @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n @param recipient The address which should receive the fees collected\n @param tickLower The lower tick of the position for which to collect fees\n @param tickUpper The upper tick of the position for which to collect fees\n @param amount0Requested How much token0 should be withdrawn from the fees owed\n @param amount1Requested How much token1 should be withdrawn from the fees owed\n @return amount0 The amount of fees collected in token0\n @return amount1 The amount of fees collected in token1"
									},
									"functionSelector": "4f1eb3d8",
									"id": 1431,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collect",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1425,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1416,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1431,
												"src": "3673:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1415,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3673:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1418,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 1431,
												"src": "3700:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1417,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3700:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1420,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 1431,
												"src": "3725:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1419,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3725:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1422,
												"mutability": "mutable",
												"name": "amount0Requested",
												"nodeType": "VariableDeclaration",
												"scope": 1431,
												"src": "3750:24:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1421,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3750:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1424,
												"mutability": "mutable",
												"name": "amount1Requested",
												"nodeType": "VariableDeclaration",
												"scope": 1431,
												"src": "3784:24:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1423,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3784:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3663:151:11"
									},
									"returnParameters": {
										"id": 1430,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1427,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1431,
												"src": "3833:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1426,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3833:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1429,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1431,
												"src": "3850:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1428,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3850:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3832:34:11"
									},
									"scope": 1544,
									"src": "3647:220:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1432,
										"nodeType": "StructuredDocumentation",
										"src": "3873:1131:11",
										"text": "@notice Collects tokens owed to a position\n @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n @param recipient The address which should receive the fees collected\n @param tickLower The lower tick of the position for which to collect fees\n @param tickUpper The upper tick of the position for which to collect fees\n @param amount0Requested How much token0 should be withdrawn from the fees owed\n @param amount1Requested How much token1 should be withdrawn from the fees owed\n @param owner Owner of the position in the pool (nft manager or gauge)\n @return amount0 The amount of fees collected in token0\n @return amount1 The amount of fees collected in token1"
									},
									"functionSelector": "31338374",
									"id": 1451,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collect",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1445,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1434,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1451,
												"src": "5035:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1433,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5035:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1436,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 1451,
												"src": "5062:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1435,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "5062:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1438,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 1451,
												"src": "5087:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1437,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "5087:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1440,
												"mutability": "mutable",
												"name": "amount0Requested",
												"nodeType": "VariableDeclaration",
												"scope": 1451,
												"src": "5112:24:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1439,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5112:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1442,
												"mutability": "mutable",
												"name": "amount1Requested",
												"nodeType": "VariableDeclaration",
												"scope": 1451,
												"src": "5146:24:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1441,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5146:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1444,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 1451,
												"src": "5180:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1443,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5180:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5025:174:11"
									},
									"returnParameters": {
										"id": 1450,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1447,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1451,
												"src": "5218:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1446,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5218:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1449,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1451,
												"src": "5235:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1448,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5235:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5217:34:11"
									},
									"scope": 1544,
									"src": "5009:243:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1452,
										"nodeType": "StructuredDocumentation",
										"src": "5258:631:11",
										"text": "@notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n @dev Fees must be collected separately via a call to #collect\n @param tickLower The lower tick of the position for which to burn liquidity\n @param tickUpper The upper tick of the position for which to burn liquidity\n @param amount How much liquidity to burn\n @return amount0 The amount of token0 sent to the recipient\n @return amount1 The amount of token1 sent to the recipient"
									},
									"functionSelector": "a34123a7",
									"id": 1465,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1459,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1454,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "5908:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1453,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "5908:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1456,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "5925:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1455,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "5925:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1458,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "5942:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1457,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5942:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5907:50:11"
									},
									"returnParameters": {
										"id": 1464,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1461,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "5992:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1460,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5992:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1463,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "6009:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1462,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6009:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5991:34:11"
									},
									"scope": 1544,
									"src": "5894:132:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1466,
										"nodeType": "StructuredDocumentation",
										"src": "6032:717:11",
										"text": "@notice Burn liquidity from the supplied owner and account tokens owed for the liquidity to the position\n @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n @dev Fees must be collected separately via a call to #collect\n @param tickLower The lower tick of the position for which to burn liquidity\n @param tickUpper The upper tick of the position for which to burn liquidity\n @param amount How much liquidity to burn\n @param owner Owner of the position in the pool (nft manager or gauge)\n @return amount0 The amount of token0 sent to the recipient\n @return amount1 The amount of token1 sent to the recipient"
									},
									"functionSelector": "6f89244c",
									"id": 1481,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1475,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1468,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 1481,
												"src": "6768:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1467,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "6768:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1470,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 1481,
												"src": "6785:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1469,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "6785:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1472,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1481,
												"src": "6802:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1471,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "6802:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1474,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 1481,
												"src": "6818:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1473,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6818:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6767:65:11"
									},
									"returnParameters": {
										"id": 1480,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1477,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1481,
												"src": "6867:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1476,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6867:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1479,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1481,
												"src": "6884:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1478,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6884:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6866:34:11"
									},
									"scope": 1544,
									"src": "6754:147:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1482,
										"nodeType": "StructuredDocumentation",
										"src": "6907:478:11",
										"text": "@notice Convert existing liquidity into staked liquidity\n @notice Only callable by the gauge associated with this pool\n @param stakedLiquidityDelta The amount by which to increase or decrease the staked liquidity\n @param tickLower The lower tick of the position for which to stake liquidity\n @param tickUpper The upper tick of the position for which to stake liquidity\n @param positionUpdate If the nft and gauge position should be updated"
									},
									"functionSelector": "4ed6210f",
									"id": 1493,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "stake",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1491,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1484,
												"mutability": "mutable",
												"name": "stakedLiquidityDelta",
												"nodeType": "VariableDeclaration",
												"scope": 1493,
												"src": "7405:27:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 1483,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "7405:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1486,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 1493,
												"src": "7434:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1485,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "7434:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1488,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 1493,
												"src": "7451:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1487,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "7451:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1490,
												"mutability": "mutable",
												"name": "positionUpdate",
												"nodeType": "VariableDeclaration",
												"scope": 1493,
												"src": "7468:19:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1489,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7468:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7404:84:11"
									},
									"returnParameters": {
										"id": 1492,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7497:0:11"
									},
									"scope": 1544,
									"src": "7390:108:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1494,
										"nodeType": "StructuredDocumentation",
										"src": "7504:1008:11",
										"text": "@notice Swap token0 for token1, or token1 for token0\n @dev The caller of this method receives a callback in the form of ICLSwapCallback#uniswapV3SwapCallback\n @param recipient The address to receive the output of the swap\n @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n value after the swap. If one for zero, the price cannot be greater than this value after the swap\n @param data Any data to be passed through to the callback\n @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
									},
									"functionSelector": "128acb08",
									"id": 1511,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "swap",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1505,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1496,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1511,
												"src": "8540:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1495,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8540:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1498,
												"mutability": "mutable",
												"name": "zeroForOne",
												"nodeType": "VariableDeclaration",
												"scope": 1511,
												"src": "8567:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1497,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8567:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1500,
												"mutability": "mutable",
												"name": "amountSpecified",
												"nodeType": "VariableDeclaration",
												"scope": 1511,
												"src": "8592:22:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1499,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "8592:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1502,
												"mutability": "mutable",
												"name": "sqrtPriceLimitX96",
												"nodeType": "VariableDeclaration",
												"scope": 1511,
												"src": "8624:25:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1501,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "8624:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1504,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 1511,
												"src": "8659:19:11",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1503,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8659:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8530:154:11"
									},
									"returnParameters": {
										"id": 1510,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1507,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1511,
												"src": "8703:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1506,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "8703:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1509,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1511,
												"src": "8719:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1508,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "8719:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8702:32:11"
									},
									"scope": 1544,
									"src": "8517:218:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1512,
										"nodeType": "StructuredDocumentation",
										"src": "8741:650:11",
										"text": "@notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n @dev The caller of this method receives a callback in the form of ICLFlashCallback#uniswapV3FlashCallback\n @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n with 0 amount{0,1} and sending the donation amount(s) from the callback\n @param recipient The address which will receive the token0 and token1 amounts\n @param amount0 The amount of token0 to send\n @param amount1 The amount of token1 to send\n @param data Any data to be passed through to the callback"
									},
									"functionSelector": "490e6cbc",
									"id": 1523,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "flash",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1521,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1514,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1523,
												"src": "9411:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1513,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9411:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1516,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1523,
												"src": "9430:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1515,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9430:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1518,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1523,
												"src": "9447:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1517,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9447:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1520,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 1523,
												"src": "9464:19:11",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1519,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9464:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9410:74:11"
									},
									"returnParameters": {
										"id": 1522,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9493:0:11"
									},
									"scope": 1544,
									"src": "9396:98:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1524,
										"nodeType": "StructuredDocumentation",
										"src": "9500:367:11",
										"text": "@notice Increase the maximum number of price and liquidity observations that this pool will store\n @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n the input observationCardinalityNext.\n @param observationCardinalityNext The desired minimum number of observations for the pool to store"
									},
									"functionSelector": "32148f67",
									"id": 1529,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseObservationCardinalityNext",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1527,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1526,
												"mutability": "mutable",
												"name": "observationCardinalityNext",
												"nodeType": "VariableDeclaration",
												"scope": 1529,
												"src": "9916:33:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1525,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "9916:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9915:35:11"
									},
									"returnParameters": {
										"id": 1528,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9959:0:11"
									},
									"scope": 1544,
									"src": "9872:88:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1530,
										"nodeType": "StructuredDocumentation",
										"src": "9966:142:11",
										"text": "@notice Updates rewardGrowthGlobalX128 every time when any tick is crossed,\n or when any position is staked/unstaked from the gauge"
									},
									"functionSelector": "1b410960",
									"id": 1533,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateRewardsGrowthGlobal",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1531,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10147:2:11"
									},
									"returnParameters": {
										"id": 1532,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10158:0:11"
									},
									"scope": 1544,
									"src": "10113:46:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1534,
										"nodeType": "StructuredDocumentation",
										"src": "10165:293:11",
										"text": "@notice Syncs rewards with gauge\n @param rewardRate the rate rewards being distributed during the epoch\n @param rewardReserve the available rewards to be distributed during the epoch\n @param periodFinish the end of the current period of rewards, updated once per epoch"
									},
									"functionSelector": "60a73f9b",
									"id": 1543,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "syncReward",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1541,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1536,
												"mutability": "mutable",
												"name": "rewardRate",
												"nodeType": "VariableDeclaration",
												"scope": 1543,
												"src": "10483:18:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1535,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10483:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1538,
												"mutability": "mutable",
												"name": "rewardReserve",
												"nodeType": "VariableDeclaration",
												"scope": 1543,
												"src": "10503:21:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1537,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10503:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1540,
												"mutability": "mutable",
												"name": "periodFinish",
												"nodeType": "VariableDeclaration",
												"scope": 1543,
												"src": "10526:20:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1539,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10526:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10482:65:11"
									},
									"returnParameters": {
										"id": 1542,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10556:0:11"
									},
									"scope": 1544,
									"src": "10463:94:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1545,
							"src": "173:10386:11"
						}
					],
					"src": "45:10515:11"
				},
				"id": 11
			},
			"contracts/core/interfaces/pool/ICLPoolConstants.sol": {
				"ast": {
					"absolutePath": "contracts/core/interfaces/pool/ICLPoolConstants.sol",
					"exportedSymbols": {
						"ICLPoolConstants": [
							1596
						]
					},
					"id": 1597,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1546,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:12"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1547,
								"nodeType": "StructuredDocumentation",
								"src": "71:218:12",
								"text": "@title Pool state that never changes\n @notice These parameters are not defined as immutable (due to proxy pattern) but are effectively immutable.\n @notice i.e., the methods will always return the same values"
							},
							"fullyImplemented": false,
							"id": 1596,
							"linearizedBaseContracts": [
								1596
							],
							"name": "ICLPoolConstants",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1548,
										"nodeType": "StructuredDocumentation",
										"src": "322:131:12",
										"text": "@notice The contract that deployed the pool, which must adhere to the ICLFactory interface\n @return The contract address"
									},
									"functionSelector": "c45a0155",
									"id": 1553,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factory",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1549,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "474:2:12"
									},
									"returnParameters": {
										"id": 1552,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1551,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1553,
												"src": "500:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1550,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "500:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "499:9:12"
									},
									"scope": 1596,
									"src": "458:51:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1554,
										"nodeType": "StructuredDocumentation",
										"src": "515:113:12",
										"text": "@notice The first of the two tokens of the pool, sorted by address\n @return The token contract address"
									},
									"functionSelector": "0dfe1681",
									"id": 1559,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "token0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1555,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "648:2:12"
									},
									"returnParameters": {
										"id": 1558,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1557,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1559,
												"src": "674:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1556,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "674:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "673:9:12"
									},
									"scope": 1596,
									"src": "633:50:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1560,
										"nodeType": "StructuredDocumentation",
										"src": "689:114:12",
										"text": "@notice The second of the two tokens of the pool, sorted by address\n @return The token contract address"
									},
									"functionSelector": "d21220a7",
									"id": 1565,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "token1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1561,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "823:2:12"
									},
									"returnParameters": {
										"id": 1564,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1563,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1565,
												"src": "849:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1562,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "849:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "848:9:12"
									},
									"scope": 1596,
									"src": "808:50:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1566,
										"nodeType": "StructuredDocumentation",
										"src": "864:91:12",
										"text": "@notice The gauge corresponding to this pool\n @return The gauge contract address"
									},
									"functionSelector": "a6f19c84",
									"id": 1571,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "gauge",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1567,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "974:2:12"
									},
									"returnParameters": {
										"id": 1570,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1569,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1571,
												"src": "1000:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1568,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1000:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "999:9:12"
									},
									"scope": 1596,
									"src": "960:49:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1572,
										"nodeType": "StructuredDocumentation",
										"src": "1015:76:12",
										"text": "@notice The nft manager\n @return The nft manager contract address"
									},
									"functionSelector": "47ccca02",
									"id": 1577,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nft",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1573,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1108:2:12"
									},
									"returnParameters": {
										"id": 1576,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1575,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1577,
												"src": "1134:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1574,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1134:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1133:9:12"
									},
									"scope": 1596,
									"src": "1096:47:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1578,
										"nodeType": "StructuredDocumentation",
										"src": "1149:145:12",
										"text": "@notice The factory registry that manages pool <> gauge <> reward factory relationships\n @return The factory registry contract address"
									},
									"functionSelector": "3bf0c9fb",
									"id": 1583,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factoryRegistry",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1579,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1323:2:12"
									},
									"returnParameters": {
										"id": 1582,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1581,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1583,
												"src": "1349:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1580,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1349:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1348:9:12"
									},
									"scope": 1596,
									"src": "1299:59:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1584,
										"nodeType": "StructuredDocumentation",
										"src": "1364:358:12",
										"text": "@notice The pool tick spacing\n @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n This value is an int24 to avoid casting even though it is always positive.\n @return The tick spacing"
									},
									"functionSelector": "d0c93a7c",
									"id": 1589,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tickSpacing",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1585,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1747:2:12"
									},
									"returnParameters": {
										"id": 1588,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1587,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1589,
												"src": "1773:5:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1586,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1773:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1772:7:12"
									},
									"scope": 1596,
									"src": "1727:53:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1590,
										"nodeType": "StructuredDocumentation",
										"src": "1786:363:12",
										"text": "@notice The maximum amount of position liquidity that can use any tick in the range\n @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n @return The max amount of liquidity per tick"
									},
									"functionSelector": "70cf754a",
									"id": 1595,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxLiquidityPerTick",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1591,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2182:2:12"
									},
									"returnParameters": {
										"id": 1594,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1593,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1595,
												"src": "2208:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1592,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2208:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2207:9:12"
									},
									"scope": 1596,
									"src": "2154:63:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1597,
							"src": "289:1930:12"
						}
					],
					"src": "45:2175:12"
				},
				"id": 12
			},
			"contracts/core/interfaces/pool/ICLPoolDerivedState.sol": {
				"ast": {
					"absolutePath": "contracts/core/interfaces/pool/ICLPoolDerivedState.sol",
					"exportedSymbols": {
						"ICLPoolDerivedState": [
							1627
						]
					},
					"id": 1628,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1598,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:13"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1599,
								"nodeType": "StructuredDocumentation",
								"src": "71:222:13",
								"text": "@title Pool state that is not stored\n @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n blockchain. The functions here may have variable gas costs."
							},
							"fullyImplemented": false,
							"id": 1627,
							"linearizedBaseContracts": [
								1627
							],
							"name": "ICLPoolDerivedState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1600,
										"nodeType": "StructuredDocumentation",
										"src": "329:1045:13",
										"text": "@notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n you must call it with secondsAgos = [3600, 0].\n @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n timestamp"
									},
									"functionSelector": "883bdbfd",
									"id": 1612,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "observe",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1604,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1603,
												"mutability": "mutable",
												"name": "secondsAgos",
												"nodeType": "VariableDeclaration",
												"scope": 1612,
												"src": "1396:29:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint32_$dyn_calldata_ptr",
													"typeString": "uint32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1601,
														"name": "uint32",
														"nodeType": "ElementaryTypeName",
														"src": "1396:6:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"id": 1602,
													"nodeType": "ArrayTypeName",
													"src": "1396:8:13",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
														"typeString": "uint32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1395:31:13"
									},
									"returnParameters": {
										"id": 1611,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1607,
												"mutability": "mutable",
												"name": "tickCumulatives",
												"nodeType": "VariableDeclaration",
												"scope": 1612,
												"src": "1474:30:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_int56_$dyn_memory_ptr",
													"typeString": "int56[]"
												},
												"typeName": {
													"baseType": {
														"id": 1605,
														"name": "int56",
														"nodeType": "ElementaryTypeName",
														"src": "1474:5:13",
														"typeDescriptions": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														}
													},
													"id": 1606,
													"nodeType": "ArrayTypeName",
													"src": "1474:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_int56_$dyn_storage_ptr",
														"typeString": "int56[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1610,
												"mutability": "mutable",
												"name": "secondsPerLiquidityCumulativeX128s",
												"nodeType": "VariableDeclaration",
												"scope": 1612,
												"src": "1506:51:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint160_$dyn_memory_ptr",
													"typeString": "uint160[]"
												},
												"typeName": {
													"baseType": {
														"id": 1608,
														"name": "uint160",
														"nodeType": "ElementaryTypeName",
														"src": "1506:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"id": 1609,
													"nodeType": "ArrayTypeName",
													"src": "1506:9:13",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint160_$dyn_storage_ptr",
														"typeString": "uint160[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1473:85:13"
									},
									"scope": 1627,
									"src": "1379:180:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1613,
										"nodeType": "StructuredDocumentation",
										"src": "1565:771:13",
										"text": "@notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n snapshot is taken and the second snapshot is taken.\n @param tickLower The lower tick of the range\n @param tickUpper The upper tick of the range\n @return tickCumulativeInside The snapshot of the tick accumulator for the range\n @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n @return secondsInside The snapshot of seconds per liquidity for the range"
									},
									"functionSelector": "a38807f2",
									"id": 1626,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "snapshotCumulativesInside",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1618,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1615,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 1626,
												"src": "2376:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1614,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2376:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1617,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 1626,
												"src": "2393:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1616,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2393:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2375:34:13"
									},
									"returnParameters": {
										"id": 1625,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1620,
												"mutability": "mutable",
												"name": "tickCumulativeInside",
												"nodeType": "VariableDeclaration",
												"scope": 1626,
												"src": "2457:26:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 1619,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "2457:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1622,
												"mutability": "mutable",
												"name": "secondsPerLiquidityInsideX128",
												"nodeType": "VariableDeclaration",
												"scope": 1626,
												"src": "2485:37:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1621,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "2485:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1624,
												"mutability": "mutable",
												"name": "secondsInside",
												"nodeType": "VariableDeclaration",
												"scope": 1626,
												"src": "2524:20:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1623,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "2524:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2456:89:13"
									},
									"scope": 1627,
									"src": "2341:205:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1628,
							"src": "293:2255:13"
						}
					],
					"src": "45:2504:13"
				},
				"id": 13
			},
			"contracts/core/interfaces/pool/ICLPoolEvents.sol": {
				"ast": {
					"absolutePath": "contracts/core/interfaces/pool/ICLPoolEvents.sol",
					"exportedSymbols": {
						"ICLPoolEvents": [
							1744
						]
					},
					"id": 1745,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1629,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:14"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1630,
								"nodeType": "StructuredDocumentation",
								"src": "71:88:14",
								"text": "@title Events emitted by a pool\n @notice Contains all events emitted by the pool"
							},
							"fullyImplemented": true,
							"id": 1744,
							"linearizedBaseContracts": [
								1744
							],
							"name": "ICLPoolEvents",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1631,
										"nodeType": "StructuredDocumentation",
										"src": "189:344:14",
										"text": "@notice Emitted exactly once by a pool when #initialize is first called on the pool\n @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
									},
									"id": 1637,
									"name": "Initialize",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1636,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1633,
												"indexed": false,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 1637,
												"src": "555:20:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1632,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "555:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1635,
												"indexed": false,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 1637,
												"src": "577:10:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1634,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "577:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "554:34:14"
									},
									"src": "538:51:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1638,
										"nodeType": "StructuredDocumentation",
										"src": "595:551:14",
										"text": "@notice Emitted when liquidity is minted for a given position\n @param sender The address that minted the liquidity\n @param owner The owner of the position and recipient of any minted liquidity\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity minted to the position range\n @param amount0 How much token0 was required for the minted liquidity\n @param amount1 How much token1 was required for the minted liquidity"
									},
									"id": 1654,
									"name": "Mint",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1653,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1640,
												"indexed": false,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 1654,
												"src": "1171:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1639,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1171:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1642,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 1654,
												"src": "1195:21:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1641,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1195:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1644,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 1654,
												"src": "1226:23:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1643,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1226:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1646,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 1654,
												"src": "1259:23:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1645,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1259:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1648,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1654,
												"src": "1292:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1647,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1292:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1650,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1654,
												"src": "1316:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1649,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1316:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1652,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1654,
												"src": "1341:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1651,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1341:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1161:201:14"
									},
									"src": "1151:212:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1655,
										"nodeType": "StructuredDocumentation",
										"src": "1369:493:14",
										"text": "@notice Emitted when fees are collected by the owner of a position\n @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n @param owner The owner of the position for which fees are collected\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount0 The amount of token0 fees collected\n @param amount1 The amount of token1 fees collected"
									},
									"id": 1669,
									"name": "Collect",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1668,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1657,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 1669,
												"src": "1890:21:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1656,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1890:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1659,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1669,
												"src": "1921:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1658,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1921:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1661,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 1669,
												"src": "1948:23:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1660,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1948:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1663,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 1669,
												"src": "1981:23:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1662,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1981:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1665,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1669,
												"src": "2014:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1664,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2014:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1667,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1669,
												"src": "2039:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1666,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2039:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1880:180:14"
									},
									"src": "1867:194:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1670,
										"nodeType": "StructuredDocumentation",
										"src": "2067:523:14",
										"text": "@notice Emitted when a position's liquidity is removed\n @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n @param owner The owner of the position for which liquidity is removed\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity to remove\n @param amount0 The amount of token0 withdrawn\n @param amount1 The amount of token1 withdrawn"
									},
									"id": 1684,
									"name": "Burn",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1683,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1672,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 1684,
												"src": "2615:21:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1671,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2615:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1674,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 1684,
												"src": "2646:23:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1673,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2646:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1676,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 1684,
												"src": "2679:23:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1675,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2679:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1678,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1684,
												"src": "2712:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1677,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2712:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1680,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1684,
												"src": "2736:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1679,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2736:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1682,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1684,
												"src": "2761:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1681,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2761:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2605:177:14"
									},
									"src": "2595:188:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1685,
										"nodeType": "StructuredDocumentation",
										"src": "2789:600:14",
										"text": "@notice Emitted by the pool for any swaps between token0 and token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the output of the swap\n @param amount0 The delta of the token0 balance of the pool\n @param amount1 The delta of the token1 balance of the pool\n @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n @param liquidity The liquidity of the pool after the swap\n @param tick The log base 1.0001 of price of the pool after the swap"
									},
									"id": 1701,
									"name": "Swap",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1700,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1687,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 1701,
												"src": "3414:22:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1686,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3414:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1689,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1701,
												"src": "3446:25:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1688,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3446:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1691,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1701,
												"src": "3481:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1690,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "3481:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1693,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1701,
												"src": "3505:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1692,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "3505:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1695,
												"indexed": false,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 1701,
												"src": "3529:20:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1694,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "3529:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1697,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 1701,
												"src": "3559:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1696,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3559:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1699,
												"indexed": false,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 1701,
												"src": "3586:10:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1698,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3586:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3404:198:14"
									},
									"src": "3394:209:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1702,
										"nodeType": "StructuredDocumentation",
										"src": "3609:562:14",
										"text": "@notice Emitted by the pool for any flashes of token0/token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the tokens from flash\n @param amount0 The amount of token0 that was flashed\n @param amount1 The amount of token1 that was flashed\n @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee"
									},
									"id": 1716,
									"name": "Flash",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1715,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1704,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 1716,
												"src": "4197:22:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1703,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4197:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1706,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1716,
												"src": "4229:25:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1705,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4229:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1708,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1716,
												"src": "4264:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1707,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4264:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1710,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1716,
												"src": "4289:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1709,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4289:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1712,
												"indexed": false,
												"mutability": "mutable",
												"name": "paid0",
												"nodeType": "VariableDeclaration",
												"scope": 1716,
												"src": "4314:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1711,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4314:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1714,
												"indexed": false,
												"mutability": "mutable",
												"name": "paid1",
												"nodeType": "VariableDeclaration",
												"scope": 1716,
												"src": "4337:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1713,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4337:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4187:169:14"
									},
									"src": "4176:181:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1717,
										"nodeType": "StructuredDocumentation",
										"src": "4363:451:14",
										"text": "@notice Emitted by the pool for increases to the number of observations that can be stored\n @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n just before a mint/swap/burn.\n @param observationCardinalityNextOld The previous value of the next observation cardinality\n @param observationCardinalityNextNew The updated value of the next observation cardinality"
									},
									"id": 1723,
									"name": "IncreaseObservationCardinalityNext",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1722,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1719,
												"indexed": false,
												"mutability": "mutable",
												"name": "observationCardinalityNextOld",
												"nodeType": "VariableDeclaration",
												"scope": 1723,
												"src": "4869:36:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1718,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "4869:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1721,
												"indexed": false,
												"mutability": "mutable",
												"name": "observationCardinalityNextNew",
												"nodeType": "VariableDeclaration",
												"scope": 1723,
												"src": "4907:36:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1720,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "4907:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4859:90:14"
									},
									"src": "4819:131:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1724,
										"nodeType": "StructuredDocumentation",
										"src": "4956:370:14",
										"text": "@notice Emitted when the protocol fee is changed by the pool\n @param feeProtocol0Old The previous value of the token0 protocol fee\n @param feeProtocol1Old The previous value of the token1 protocol fee\n @param feeProtocol0New The updated value of the token0 protocol fee\n @param feeProtocol1New The updated value of the token1 protocol fee"
									},
									"id": 1734,
									"name": "SetFeeProtocol",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1733,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1726,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol0Old",
												"nodeType": "VariableDeclaration",
												"scope": 1734,
												"src": "5352:21:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1725,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5352:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1728,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol1Old",
												"nodeType": "VariableDeclaration",
												"scope": 1734,
												"src": "5375:21:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1727,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5375:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1730,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol0New",
												"nodeType": "VariableDeclaration",
												"scope": 1734,
												"src": "5398:21:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1729,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5398:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1732,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol1New",
												"nodeType": "VariableDeclaration",
												"scope": 1734,
												"src": "5421:21:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1731,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5421:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5351:92:14"
									},
									"src": "5331:113:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1735,
										"nodeType": "StructuredDocumentation",
										"src": "5450:310:14",
										"text": "@notice Emitted when the collected protocol fees are withdrawn by the gauge\n @param recipient The address that receives the collected protocol fees\n @param amount0 The amount of token0 protocol fees that is withdrawn\n @param amount0 The amount of token1 protocol fees that is withdrawn"
									},
									"id": 1743,
									"name": "CollectFees",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1742,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1737,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1743,
												"src": "5783:25:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1736,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5783:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1739,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1743,
												"src": "5810:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1738,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5810:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1741,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1743,
												"src": "5827:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1740,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5827:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5782:61:14"
									},
									"src": "5765:79:14"
								}
							],
							"scope": 1745,
							"src": "159:5687:14"
						}
					],
					"src": "45:5802:14"
				},
				"id": 14
			},
			"contracts/core/interfaces/pool/ICLPoolOwnerActions.sol": {
				"ast": {
					"absolutePath": "contracts/core/interfaces/pool/ICLPoolOwnerActions.sol",
					"exportedSymbols": {
						"ICLPoolOwnerActions": [
							1756
						]
					},
					"id": 1757,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1746,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:15"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1747,
								"nodeType": "StructuredDocumentation",
								"src": "71:116:15",
								"text": "@title Permissioned pool actions\n @notice Contains pool methods that may only be called by the factory owner"
							},
							"fullyImplemented": false,
							"id": 1756,
							"linearizedBaseContracts": [
								1756
							],
							"name": "ICLPoolOwnerActions",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1748,
										"nodeType": "StructuredDocumentation",
										"src": "223:169:15",
										"text": "@notice Collect the gauge fee accrued to the pool\n @return amount0 The gauge fee collected in token0\n @return amount1 The gauge fee collected in token1"
									},
									"functionSelector": "c8796572",
									"id": 1755,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collectFees",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1749,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "417:2:15"
									},
									"returnParameters": {
										"id": 1754,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1751,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1755,
												"src": "438:15:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1750,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "438:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1753,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1755,
												"src": "455:15:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1752,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "455:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "437:34:15"
									},
									"scope": 1756,
									"src": "397:75:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1757,
							"src": "187:287:15"
						}
					],
					"src": "45:430:15"
				},
				"id": 15
			},
			"contracts/core/interfaces/pool/ICLPoolState.sol": {
				"ast": {
					"absolutePath": "contracts/core/interfaces/pool/ICLPoolState.sol",
					"exportedSymbols": {
						"ICLPoolState": [
							1932
						]
					},
					"id": 1933,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1758,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:16"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1759,
								"nodeType": "StructuredDocumentation",
								"src": "71:169:16",
								"text": "@title Pool state that can change\n @notice These methods compose the pool's state, and can change with any frequency including multiple times\n per transaction"
							},
							"fullyImplemented": false,
							"id": 1932,
							"linearizedBaseContracts": [
								1932
							],
							"name": "ICLPoolState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1760,
										"nodeType": "StructuredDocumentation",
										"src": "269:835:16",
										"text": "@notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n when accessed externally.\n @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n tick The current tick of the pool, i.e. according to the last tick transition that was run.\n This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n boundary.\n observationIndex The index of the last oracle observation that was written,\n observationCardinality The current maximum number of observations stored in the pool,\n observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n unlocked Whether the pool is currently locked to reentrancy"
									},
									"functionSelector": "3850c7bd",
									"id": 1775,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "slot0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1761,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1123:2:16"
									},
									"returnParameters": {
										"id": 1774,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1763,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 1775,
												"src": "1186:20:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1762,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1186:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1765,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 1775,
												"src": "1220:10:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1764,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1220:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1767,
												"mutability": "mutable",
												"name": "observationIndex",
												"nodeType": "VariableDeclaration",
												"scope": 1775,
												"src": "1244:23:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1766,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1244:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1769,
												"mutability": "mutable",
												"name": "observationCardinality",
												"nodeType": "VariableDeclaration",
												"scope": 1775,
												"src": "1281:29:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1768,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1281:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1771,
												"mutability": "mutable",
												"name": "observationCardinalityNext",
												"nodeType": "VariableDeclaration",
												"scope": 1775,
												"src": "1324:33:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1770,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1324:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1773,
												"mutability": "mutable",
												"name": "unlocked",
												"nodeType": "VariableDeclaration",
												"scope": 1775,
												"src": "1371:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1772,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1371:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1172:222:16"
									},
									"scope": 1932,
									"src": "1109:286:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1776,
										"nodeType": "StructuredDocumentation",
										"src": "1401:182:16",
										"text": "@notice The pool's swap & flash fee in pips, i.e. 1e-6\n @dev Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.\n @return The swap & flash fee"
									},
									"functionSelector": "ddca3f43",
									"id": 1781,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "fee",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1777,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1600:2:16"
									},
									"returnParameters": {
										"id": 1780,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1779,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1781,
												"src": "1626:6:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1778,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1626:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1625:8:16"
									},
									"scope": 1932,
									"src": "1588:46:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1782,
										"nodeType": "StructuredDocumentation",
										"src": "1640:174:16",
										"text": "@notice The pool's unstaked fee in pips, i.e. 1e-6\n @dev Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.\n @return The unstaked fee"
									},
									"functionSelector": "b64cc67b",
									"id": 1787,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unstakedFee",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1783,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1839:2:16"
									},
									"returnParameters": {
										"id": 1786,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1785,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1787,
												"src": "1865:6:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1784,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1865:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1864:8:16"
									},
									"scope": 1932,
									"src": "1819:54:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1788,
										"nodeType": "StructuredDocumentation",
										"src": "1879:168:16",
										"text": "@notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"
									},
									"functionSelector": "f3058399",
									"id": 1793,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeGrowthGlobal0X128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1789,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2081:2:16"
									},
									"returnParameters": {
										"id": 1792,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1791,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1793,
												"src": "2107:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1790,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2107:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2106:9:16"
									},
									"scope": 1932,
									"src": "2052:64:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1794,
										"nodeType": "StructuredDocumentation",
										"src": "2122:168:16",
										"text": "@notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"
									},
									"functionSelector": "46141319",
									"id": 1799,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeGrowthGlobal1X128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1795,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2324:2:16"
									},
									"returnParameters": {
										"id": 1798,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1797,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1799,
												"src": "2350:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1796,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2350:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2349:9:16"
									},
									"scope": 1932,
									"src": "2295:64:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1800,
										"nodeType": "StructuredDocumentation",
										"src": "2365:176:16",
										"text": "@notice The reward growth as a Q128.128 rewards of emission collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"
									},
									"functionSelector": "57806ada",
									"id": 1805,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "rewardGrowthGlobalX128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1801,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2577:2:16"
									},
									"returnParameters": {
										"id": 1804,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1803,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1805,
												"src": "2603:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1802,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2603:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2602:9:16"
									},
									"scope": 1932,
									"src": "2546:66:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1806,
										"nodeType": "StructuredDocumentation",
										"src": "2618:141:16",
										"text": "@notice The amounts of token0 and token1 that are owed to the gauge\n @dev Gauge fees will never exceed uint128 max in either token"
									},
									"functionSelector": "293833ba",
									"id": 1813,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "gaugeFees",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1807,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2782:2:16"
									},
									"returnParameters": {
										"id": 1812,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1809,
												"mutability": "mutable",
												"name": "token0",
												"nodeType": "VariableDeclaration",
												"scope": 1813,
												"src": "2808:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1808,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2808:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1811,
												"mutability": "mutable",
												"name": "token1",
												"nodeType": "VariableDeclaration",
												"scope": 1813,
												"src": "2824:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1810,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2824:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2807:32:16"
									},
									"scope": 1932,
									"src": "2764:76:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1814,
										"nodeType": "StructuredDocumentation",
										"src": "2846:51:16",
										"text": "@notice the emission rate of time-based farming"
									},
									"functionSelector": "7b0a47ee",
									"id": 1819,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "rewardRate",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1815,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2921:2:16"
									},
									"returnParameters": {
										"id": 1818,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1817,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1819,
												"src": "2947:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1816,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2947:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2946:9:16"
									},
									"scope": 1932,
									"src": "2902:54:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1820,
										"nodeType": "StructuredDocumentation",
										"src": "2962:106:16",
										"text": "@notice acts as a virtual reserve that holds information on how many rewards are yet to be distributed"
									},
									"functionSelector": "cab64bcd",
									"id": 1825,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "rewardReserve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1821,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3095:2:16"
									},
									"returnParameters": {
										"id": 1824,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1823,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1825,
												"src": "3121:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1822,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3121:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3120:9:16"
									},
									"scope": 1932,
									"src": "3073:57:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1826,
										"nodeType": "StructuredDocumentation",
										"src": "3136:63:16",
										"text": "@notice timestamp of the end of the current epoch's rewards"
									},
									"functionSelector": "ebe2b12b",
									"id": 1831,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "periodFinish",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1827,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3225:2:16"
									},
									"returnParameters": {
										"id": 1830,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1829,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1831,
												"src": "3251:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1828,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3251:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3250:9:16"
									},
									"scope": 1932,
									"src": "3204:56:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1832,
										"nodeType": "StructuredDocumentation",
										"src": "3266:67:16",
										"text": "@notice last time the rewardReserve and rewardRate were updated"
									},
									"functionSelector": "d0b06f5d",
									"id": 1837,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "lastUpdated",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1833,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3358:2:16"
									},
									"returnParameters": {
										"id": 1836,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1835,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1837,
												"src": "3384:6:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1834,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "3384:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3383:8:16"
									},
									"scope": 1932,
									"src": "3338:54:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1838,
										"nodeType": "StructuredDocumentation",
										"src": "3398:284:16",
										"text": "@notice tracks total rewards distributed when no staked liquidity in active tick for epoch ending at periodFinish\n @notice this amount is rolled over on the next call to notifyRewardAmount\n @dev rollover will always be smaller than the rewards distributed that epoch"
									},
									"functionSelector": "b056b49a",
									"id": 1843,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "rollover",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1839,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3704:2:16"
									},
									"returnParameters": {
										"id": 1842,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1841,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1843,
												"src": "3730:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1840,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3730:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3729:9:16"
									},
									"scope": 1932,
									"src": "3687:52:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1844,
										"nodeType": "StructuredDocumentation",
										"src": "3745:200:16",
										"text": "@notice The currently in range liquidity available to the pool\n @dev This value has no relationship to the total liquidity across all ticks\n @dev This value includes staked liquidity"
									},
									"functionSelector": "1a686502",
									"id": 1849,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "liquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1845,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3968:2:16"
									},
									"returnParameters": {
										"id": 1848,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1847,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1849,
												"src": "3994:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1846,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3994:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3993:9:16"
									},
									"scope": 1932,
									"src": "3950:53:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1850,
										"nodeType": "StructuredDocumentation",
										"src": "4009:164:16",
										"text": "@notice The currently in range staked liquidity available to the pool\n @dev This value has no relationship to the total staked liquidity across all ticks"
									},
									"functionSelector": "3ab04b20",
									"id": 1855,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "stakedLiquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1851,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4202:2:16"
									},
									"returnParameters": {
										"id": 1854,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1853,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1855,
												"src": "4228:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1852,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4228:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4227:9:16"
									},
									"scope": 1932,
									"src": "4178:59:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1856,
										"nodeType": "StructuredDocumentation",
										"src": "4243:1463:16",
										"text": "@notice Look up information about a specific tick in the pool\n @param tick The tick to look up\n @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n tick upper,\n liquidityNet how much liquidity changes when the pool price crosses the tick,\n stakedLiquidityNet how much staked liquidity changes when the pool price crosses the tick,\n feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n rewardGrowthOutsideX128 the reward growth on the other side of the tick from the current tick in emission token\n tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n secondsOutside the seconds spent on the other side of the tick from the current tick,\n initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n In addition, these values are only relative and must be used only in comparison to previous snapshots for\n a specific position."
									},
									"functionSelector": "f30dba93",
									"id": 1881,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ticks",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1859,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1858,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 1881,
												"src": "5726:10:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1857,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "5726:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5725:12:16"
									},
									"returnParameters": {
										"id": 1880,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1861,
												"mutability": "mutable",
												"name": "liquidityGross",
												"nodeType": "VariableDeclaration",
												"scope": 1881,
												"src": "5798:22:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1860,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5798:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1863,
												"mutability": "mutable",
												"name": "liquidityNet",
												"nodeType": "VariableDeclaration",
												"scope": 1881,
												"src": "5834:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 1862,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "5834:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1865,
												"mutability": "mutable",
												"name": "stakedLiquidityNet",
												"nodeType": "VariableDeclaration",
												"scope": 1881,
												"src": "5867:25:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 1864,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "5867:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1867,
												"mutability": "mutable",
												"name": "feeGrowthOutside0X128",
												"nodeType": "VariableDeclaration",
												"scope": 1881,
												"src": "5906:29:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1866,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5906:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1869,
												"mutability": "mutable",
												"name": "feeGrowthOutside1X128",
												"nodeType": "VariableDeclaration",
												"scope": 1881,
												"src": "5949:29:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1868,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5949:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1871,
												"mutability": "mutable",
												"name": "rewardGrowthOutsideX128",
												"nodeType": "VariableDeclaration",
												"scope": 1881,
												"src": "5992:31:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1870,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5992:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1873,
												"mutability": "mutable",
												"name": "tickCumulativeOutside",
												"nodeType": "VariableDeclaration",
												"scope": 1881,
												"src": "6037:27:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 1872,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "6037:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1875,
												"mutability": "mutable",
												"name": "secondsPerLiquidityOutsideX128",
												"nodeType": "VariableDeclaration",
												"scope": 1881,
												"src": "6078:38:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1874,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "6078:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1877,
												"mutability": "mutable",
												"name": "secondsOutside",
												"nodeType": "VariableDeclaration",
												"scope": 1881,
												"src": "6130:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1876,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "6130:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1879,
												"mutability": "mutable",
												"name": "initialized",
												"nodeType": "VariableDeclaration",
												"scope": 1881,
												"src": "6165:16:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1878,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6165:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5784:407:16"
									},
									"scope": 1932,
									"src": "5711:481:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1882,
										"nodeType": "StructuredDocumentation",
										"src": "6198:99:16",
										"text": "@notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
									},
									"functionSelector": "5339c296",
									"id": 1889,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tickBitmap",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1885,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1884,
												"mutability": "mutable",
												"name": "wordPosition",
												"nodeType": "VariableDeclaration",
												"scope": 1889,
												"src": "6322:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int16",
													"typeString": "int16"
												},
												"typeName": {
													"id": 1883,
													"name": "int16",
													"nodeType": "ElementaryTypeName",
													"src": "6322:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int16",
														"typeString": "int16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6321:20:16"
									},
									"returnParameters": {
										"id": 1888,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1887,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1889,
												"src": "6365:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1886,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6365:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6364:9:16"
									},
									"scope": 1932,
									"src": "6302:72:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1890,
										"nodeType": "StructuredDocumentation",
										"src": "6380:700:16",
										"text": "@notice Returns the information about a position by the position's key\n @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n @return _liquidity The amount of liquidity in the position,\n Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
									},
									"functionSelector": "514ea4bf",
									"id": 1905,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "positions",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1893,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1892,
												"mutability": "mutable",
												"name": "key",
												"nodeType": "VariableDeclaration",
												"scope": 1905,
												"src": "7104:11:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1891,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7104:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7103:13:16"
									},
									"returnParameters": {
										"id": 1904,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1895,
												"mutability": "mutable",
												"name": "_liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 1905,
												"src": "7177:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1894,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "7177:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1897,
												"mutability": "mutable",
												"name": "feeGrowthInside0LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 1905,
												"src": "7209:32:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1896,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7209:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1899,
												"mutability": "mutable",
												"name": "feeGrowthInside1LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 1905,
												"src": "7255:32:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1898,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7255:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1901,
												"mutability": "mutable",
												"name": "tokensOwed0",
												"nodeType": "VariableDeclaration",
												"scope": 1905,
												"src": "7301:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1900,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "7301:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1903,
												"mutability": "mutable",
												"name": "tokensOwed1",
												"nodeType": "VariableDeclaration",
												"scope": 1905,
												"src": "7334:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1902,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "7334:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7163:200:16"
									},
									"scope": 1932,
									"src": "7085:279:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1906,
										"nodeType": "StructuredDocumentation",
										"src": "7370:749:16",
										"text": "@notice Returns data about a specific observation index\n @param index The element of the observations array to fetch\n @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n ago, rather than at a specific index in the array.\n @return blockTimestamp The timestamp of the observation,\n Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n Returns initialized whether the observation has been initialized and the values are safe to use"
									},
									"functionSelector": "252c09d7",
									"id": 1919,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "observations",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1909,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1908,
												"mutability": "mutable",
												"name": "index",
												"nodeType": "VariableDeclaration",
												"scope": 1919,
												"src": "8146:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1907,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8146:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8145:15:16"
									},
									"returnParameters": {
										"id": 1918,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1911,
												"mutability": "mutable",
												"name": "blockTimestamp",
												"nodeType": "VariableDeclaration",
												"scope": 1919,
												"src": "8221:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1910,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "8221:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1913,
												"mutability": "mutable",
												"name": "tickCumulative",
												"nodeType": "VariableDeclaration",
												"scope": 1919,
												"src": "8256:20:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 1912,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "8256:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1915,
												"mutability": "mutable",
												"name": "secondsPerLiquidityCumulativeX128",
												"nodeType": "VariableDeclaration",
												"scope": 1919,
												"src": "8290:41:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1914,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "8290:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1917,
												"mutability": "mutable",
												"name": "initialized",
												"nodeType": "VariableDeclaration",
												"scope": 1919,
												"src": "8345:16:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1916,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8345:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8207:164:16"
									},
									"scope": 1932,
									"src": "8124:248:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1920,
										"nodeType": "StructuredDocumentation",
										"src": "8378:541:16",
										"text": "@notice Returns data about reward growth within a tick range.\n RewardGrowthGlobalX128 can be supplied as a parameter for claimable reward calculations.\n @dev Used in gauge reward/earned calculations\n @param tickLower The lower tick of the range\n @param tickUpper The upper tick of the range\n @param _rewardGrowthGlobalX128 a calculated rewardGrowthGlobalX128 or 0 (in case of 0 it means we use the rewardGrowthGlobalX128 from state)\n @return rewardGrowthInsideX128 The reward growth in the range"
									},
									"functionSelector": "a16368c9",
									"id": 1931,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getRewardGrowthInside",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1927,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1922,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 1931,
												"src": "8955:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1921,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "8955:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1924,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 1931,
												"src": "8972:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1923,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "8972:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1926,
												"mutability": "mutable",
												"name": "_rewardGrowthGlobalX128",
												"nodeType": "VariableDeclaration",
												"scope": 1931,
												"src": "8989:31:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1925,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8989:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8954:67:16"
									},
									"returnParameters": {
										"id": 1930,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1929,
												"mutability": "mutable",
												"name": "rewardGrowthInsideX128",
												"nodeType": "VariableDeclaration",
												"scope": 1931,
												"src": "9069:30:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1928,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9069:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9068:32:16"
									},
									"scope": 1932,
									"src": "8924:177:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1933,
							"src": "240:8863:16"
						}
					],
					"src": "45:9059:16"
				},
				"id": 16
			},
			"contracts/core/libraries/BitMath.sol": {
				"ast": {
					"absolutePath": "contracts/core/libraries/BitMath.sol",
					"exportedSymbols": {
						"BitMath": [
							2211
						]
					},
					"id": 2212,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1934,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:17"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1935,
								"nodeType": "StructuredDocumentation",
								"src": "71:116:17",
								"text": "@title BitMath\n @dev This library provides functionality for computing bit properties of an unsigned integer"
							},
							"fullyImplemented": true,
							"id": 2211,
							"linearizedBaseContracts": [
								2211
							],
							"name": "BitMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2048,
										"nodeType": "Block",
										"src": "742:660:17",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1946,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1944,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1938,
																"src": "760:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1945,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "764:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "760:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1943,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "752:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1947,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "752:14:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1948,
												"nodeType": "ExpressionStatement",
												"src": "752:14:17"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1951,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1949,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1938,
														"src": "781:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"hexValue": "3078313030303030303030303030303030303030303030303030303030303030303030",
														"id": 1950,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "786:35:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
															"typeString": "int_const 3402...(31 digits omitted)...1456"
														},
														"value": "0x100000000000000000000000000000000"
													},
													"src": "781:40:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1961,
												"nodeType": "IfStatement",
												"src": "777:102:17",
												"trueBody": {
													"id": 1960,
													"nodeType": "Block",
													"src": "823:56:17",
													"statements": [
														{
															"expression": {
																"id": 1954,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1952,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1938,
																	"src": "837:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "313238",
																	"id": 1953,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "843:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "837:9:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1955,
															"nodeType": "ExpressionStatement",
															"src": "837:9:17"
														},
														{
															"expression": {
																"id": 1958,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1956,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1941,
																	"src": "860:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "313238",
																	"id": 1957,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "865:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "860:8:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 1959,
															"nodeType": "ExpressionStatement",
															"src": "860:8:17"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1964,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1962,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1938,
														"src": "892:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"hexValue": "30783130303030303030303030303030303030",
														"id": 1963,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "897:19:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_18446744073709551616_by_1",
															"typeString": "int_const 18446744073709551616"
														},
														"value": "0x10000000000000000"
													},
													"src": "892:24:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1974,
												"nodeType": "IfStatement",
												"src": "888:84:17",
												"trueBody": {
													"id": 1973,
													"nodeType": "Block",
													"src": "918:54:17",
													"statements": [
														{
															"expression": {
																"id": 1967,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1965,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1938,
																	"src": "932:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "3634",
																	"id": 1966,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "938:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "932:8:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1968,
															"nodeType": "ExpressionStatement",
															"src": "932:8:17"
														},
														{
															"expression": {
																"id": 1971,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1969,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1941,
																	"src": "954:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "3634",
																	"id": 1970,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "959:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "954:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 1972,
															"nodeType": "ExpressionStatement",
															"src": "954:7:17"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1977,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1975,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1938,
														"src": "985:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"hexValue": "3078313030303030303030",
														"id": 1976,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "990:11:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_4294967296_by_1",
															"typeString": "int_const 4294967296"
														},
														"value": "0x100000000"
													},
													"src": "985:16:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1987,
												"nodeType": "IfStatement",
												"src": "981:76:17",
												"trueBody": {
													"id": 1986,
													"nodeType": "Block",
													"src": "1003:54:17",
													"statements": [
														{
															"expression": {
																"id": 1980,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1978,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1938,
																	"src": "1017:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "3332",
																	"id": 1979,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1023:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "1017:8:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1981,
															"nodeType": "ExpressionStatement",
															"src": "1017:8:17"
														},
														{
															"expression": {
																"id": 1984,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1982,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1941,
																	"src": "1039:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "3332",
																	"id": 1983,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1044:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "1039:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 1985,
															"nodeType": "ExpressionStatement",
															"src": "1039:7:17"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1990,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1988,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1938,
														"src": "1070:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"hexValue": "30783130303030",
														"id": 1989,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1075:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_65536_by_1",
															"typeString": "int_const 65536"
														},
														"value": "0x10000"
													},
													"src": "1070:12:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2000,
												"nodeType": "IfStatement",
												"src": "1066:72:17",
												"trueBody": {
													"id": 1999,
													"nodeType": "Block",
													"src": "1084:54:17",
													"statements": [
														{
															"expression": {
																"id": 1993,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1991,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1938,
																	"src": "1098:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "3136",
																	"id": 1992,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1104:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "1098:8:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1994,
															"nodeType": "ExpressionStatement",
															"src": "1098:8:17"
														},
														{
															"expression": {
																"id": 1997,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1995,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1941,
																	"src": "1120:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "3136",
																	"id": 1996,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1125:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "1120:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 1998,
															"nodeType": "ExpressionStatement",
															"src": "1120:7:17"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2003,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2001,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1938,
														"src": "1151:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"hexValue": "3078313030",
														"id": 2002,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1156:5:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_256_by_1",
															"typeString": "int_const 256"
														},
														"value": "0x100"
													},
													"src": "1151:10:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2013,
												"nodeType": "IfStatement",
												"src": "1147:68:17",
												"trueBody": {
													"id": 2012,
													"nodeType": "Block",
													"src": "1163:52:17",
													"statements": [
														{
															"expression": {
																"id": 2006,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2004,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1938,
																	"src": "1177:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "38",
																	"id": 2005,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1183:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "1177:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2007,
															"nodeType": "ExpressionStatement",
															"src": "1177:7:17"
														},
														{
															"expression": {
																"id": 2010,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2008,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1941,
																	"src": "1198:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "38",
																	"id": 2009,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1203:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "1198:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 2011,
															"nodeType": "ExpressionStatement",
															"src": "1198:6:17"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2016,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2014,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1938,
														"src": "1228:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"hexValue": "30783130",
														"id": 2015,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1233:4:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_16_by_1",
															"typeString": "int_const 16"
														},
														"value": "0x10"
													},
													"src": "1228:9:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2026,
												"nodeType": "IfStatement",
												"src": "1224:67:17",
												"trueBody": {
													"id": 2025,
													"nodeType": "Block",
													"src": "1239:52:17",
													"statements": [
														{
															"expression": {
																"id": 2019,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2017,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1938,
																	"src": "1253:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 2018,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1259:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "1253:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2020,
															"nodeType": "ExpressionStatement",
															"src": "1253:7:17"
														},
														{
															"expression": {
																"id": 2023,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2021,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1941,
																	"src": "1274:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 2022,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1279:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "1274:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 2024,
															"nodeType": "ExpressionStatement",
															"src": "1274:6:17"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2029,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2027,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1938,
														"src": "1304:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"hexValue": "307834",
														"id": 2028,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1309:3:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_4_by_1",
															"typeString": "int_const 4"
														},
														"value": "0x4"
													},
													"src": "1304:8:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2039,
												"nodeType": "IfStatement",
												"src": "1300:66:17",
												"trueBody": {
													"id": 2038,
													"nodeType": "Block",
													"src": "1314:52:17",
													"statements": [
														{
															"expression": {
																"id": 2032,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2030,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1938,
																	"src": "1328:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "32",
																	"id": 2031,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1334:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "1328:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2033,
															"nodeType": "ExpressionStatement",
															"src": "1328:7:17"
														},
														{
															"expression": {
																"id": 2036,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2034,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1941,
																	"src": "1349:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "32",
																	"id": 2035,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1354:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "1349:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 2037,
															"nodeType": "ExpressionStatement",
															"src": "1349:6:17"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2042,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2040,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1938,
														"src": "1379:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"hexValue": "307832",
														"id": 2041,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1384:3:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_2_by_1",
															"typeString": "int_const 2"
														},
														"value": "0x2"
													},
													"src": "1379:8:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2047,
												"nodeType": "IfStatement",
												"src": "1375:20:17",
												"trueBody": {
													"expression": {
														"id": 2045,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2043,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1941,
															"src": "1389:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "Assignment",
														"operator": "+=",
														"rightHandSide": {
															"hexValue": "31",
															"id": 2044,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1394:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1389:6:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"id": 2046,
													"nodeType": "ExpressionStatement",
													"src": "1389:6:17"
												}
											}
										]
									},
									"documentation": {
										"id": 1936,
										"nodeType": "StructuredDocumentation",
										"src": "209:457:17",
										"text": "@notice Returns the index of the most significant bit of the number,\n     where the least significant bit is at index 0 and the most significant bit is at index 255\n @dev The function satisfies the property:\n     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\n @param x the value for which to compute the most significant bit, must be greater than 0\n @return r the index of the most significant bit"
									},
									"id": 2049,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mostSignificantBit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1939,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1938,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 2049,
												"src": "699:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1937,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "699:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "698:11:17"
									},
									"returnParameters": {
										"id": 1942,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1941,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 2049,
												"src": "733:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1940,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "733:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "732:9:17"
									},
									"scope": 2211,
									"src": "671:731:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2209,
										"nodeType": "Block",
										"src": "1965:822:17",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2060,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2058,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2052,
																"src": "1983:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2059,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1987:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1983:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2057,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1975:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 2061,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1975:14:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2062,
												"nodeType": "ExpressionStatement",
												"src": "1975:14:17"
											},
											{
												"expression": {
													"id": 2065,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2063,
														"name": "r",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2055,
														"src": "2000:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "323535",
														"id": 2064,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2004:3:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_255_by_1",
															"typeString": "int_const 255"
														},
														"value": "255"
													},
													"src": "2000:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 2066,
												"nodeType": "ExpressionStatement",
												"src": "2000:7:17"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2075,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2073,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2067,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2052,
															"src": "2021:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 2070,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2030:7:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint128_$",
																			"typeString": "type(uint128)"
																		},
																		"typeName": {
																			"id": 2069,
																			"name": "uint128",
																			"nodeType": "ElementaryTypeName",
																			"src": "2030:7:17",
																			"typeDescriptions": {}
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_uint128_$",
																			"typeString": "type(uint128)"
																		}
																	],
																	"id": 2068,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "2025:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 2071,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2025:13:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_uint128",
																	"typeString": "type(uint128)"
																}
															},
															"id": 2072,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "max",
															"nodeType": "MemberAccess",
															"src": "2025:17:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														"src": "2021:21:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2074,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2045:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2021:25:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2085,
													"nodeType": "Block",
													"src": "2087:34:17",
													"statements": [
														{
															"expression": {
																"id": 2083,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2081,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2052,
																	"src": "2101:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "313238",
																	"id": 2082,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2107:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "2101:9:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2084,
															"nodeType": "ExpressionStatement",
															"src": "2101:9:17"
														}
													]
												},
												"id": 2086,
												"nodeType": "IfStatement",
												"src": "2017:104:17",
												"trueBody": {
													"id": 2080,
													"nodeType": "Block",
													"src": "2048:33:17",
													"statements": [
														{
															"expression": {
																"id": 2078,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2076,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2055,
																	"src": "2062:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "313238",
																	"id": 2077,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2067:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "2062:8:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 2079,
															"nodeType": "ExpressionStatement",
															"src": "2062:8:17"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2095,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2093,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2087,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2052,
															"src": "2134:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 2090,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2143:6:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint64_$",
																			"typeString": "type(uint64)"
																		},
																		"typeName": {
																			"id": 2089,
																			"name": "uint64",
																			"nodeType": "ElementaryTypeName",
																			"src": "2143:6:17",
																			"typeDescriptions": {}
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_uint64_$",
																			"typeString": "type(uint64)"
																		}
																	],
																	"id": 2088,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "2138:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 2091,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2138:12:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_uint64",
																	"typeString": "type(uint64)"
																}
															},
															"id": 2092,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "max",
															"nodeType": "MemberAccess",
															"src": "2138:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"src": "2134:20:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2094,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2157:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2134:24:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2105,
													"nodeType": "Block",
													"src": "2198:33:17",
													"statements": [
														{
															"expression": {
																"id": 2103,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2101,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2052,
																	"src": "2212:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "3634",
																	"id": 2102,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2218:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "2212:8:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2104,
															"nodeType": "ExpressionStatement",
															"src": "2212:8:17"
														}
													]
												},
												"id": 2106,
												"nodeType": "IfStatement",
												"src": "2130:101:17",
												"trueBody": {
													"id": 2100,
													"nodeType": "Block",
													"src": "2160:32:17",
													"statements": [
														{
															"expression": {
																"id": 2098,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2096,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2055,
																	"src": "2174:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "3634",
																	"id": 2097,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2179:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "2174:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 2099,
															"nodeType": "ExpressionStatement",
															"src": "2174:7:17"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2115,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2113,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2107,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2052,
															"src": "2244:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 2110,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2253:6:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint32_$",
																			"typeString": "type(uint32)"
																		},
																		"typeName": {
																			"id": 2109,
																			"name": "uint32",
																			"nodeType": "ElementaryTypeName",
																			"src": "2253:6:17",
																			"typeDescriptions": {}
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_uint32_$",
																			"typeString": "type(uint32)"
																		}
																	],
																	"id": 2108,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "2248:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 2111,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2248:12:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_uint32",
																	"typeString": "type(uint32)"
																}
															},
															"id": 2112,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "max",
															"nodeType": "MemberAccess",
															"src": "2248:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														"src": "2244:20:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2114,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2267:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2244:24:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2125,
													"nodeType": "Block",
													"src": "2308:33:17",
													"statements": [
														{
															"expression": {
																"id": 2123,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2121,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2052,
																	"src": "2322:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "3332",
																	"id": 2122,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2328:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "2322:8:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2124,
															"nodeType": "ExpressionStatement",
															"src": "2322:8:17"
														}
													]
												},
												"id": 2126,
												"nodeType": "IfStatement",
												"src": "2240:101:17",
												"trueBody": {
													"id": 2120,
													"nodeType": "Block",
													"src": "2270:32:17",
													"statements": [
														{
															"expression": {
																"id": 2118,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2116,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2055,
																	"src": "2284:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "3332",
																	"id": 2117,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2289:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "2284:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 2119,
															"nodeType": "ExpressionStatement",
															"src": "2284:7:17"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2135,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2133,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2127,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2052,
															"src": "2354:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 2130,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2363:6:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint16_$",
																			"typeString": "type(uint16)"
																		},
																		"typeName": {
																			"id": 2129,
																			"name": "uint16",
																			"nodeType": "ElementaryTypeName",
																			"src": "2363:6:17",
																			"typeDescriptions": {}
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_uint16_$",
																			"typeString": "type(uint16)"
																		}
																	],
																	"id": 2128,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "2358:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 2131,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2358:12:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_uint16",
																	"typeString": "type(uint16)"
																}
															},
															"id": 2132,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "max",
															"nodeType": "MemberAccess",
															"src": "2358:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														},
														"src": "2354:20:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2134,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2377:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2354:24:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2145,
													"nodeType": "Block",
													"src": "2418:33:17",
													"statements": [
														{
															"expression": {
																"id": 2143,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2141,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2052,
																	"src": "2432:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "3136",
																	"id": 2142,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2438:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "2432:8:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2144,
															"nodeType": "ExpressionStatement",
															"src": "2432:8:17"
														}
													]
												},
												"id": 2146,
												"nodeType": "IfStatement",
												"src": "2350:101:17",
												"trueBody": {
													"id": 2140,
													"nodeType": "Block",
													"src": "2380:32:17",
													"statements": [
														{
															"expression": {
																"id": 2138,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2136,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2055,
																	"src": "2394:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "3136",
																	"id": 2137,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2399:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "2394:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 2139,
															"nodeType": "ExpressionStatement",
															"src": "2394:7:17"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2155,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2153,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2147,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2052,
															"src": "2464:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 2150,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2473:5:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint8_$",
																			"typeString": "type(uint8)"
																		},
																		"typeName": {
																			"id": 2149,
																			"name": "uint8",
																			"nodeType": "ElementaryTypeName",
																			"src": "2473:5:17",
																			"typeDescriptions": {}
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_uint8_$",
																			"typeString": "type(uint8)"
																		}
																	],
																	"id": 2148,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "2468:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 2151,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2468:11:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_uint8",
																	"typeString": "type(uint8)"
																}
															},
															"id": 2152,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "max",
															"nodeType": "MemberAccess",
															"src": "2468:15:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"src": "2464:19:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2154,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2486:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2464:23:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2165,
													"nodeType": "Block",
													"src": "2526:32:17",
													"statements": [
														{
															"expression": {
																"id": 2163,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2161,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2052,
																	"src": "2540:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "38",
																	"id": 2162,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2546:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "2540:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2164,
															"nodeType": "ExpressionStatement",
															"src": "2540:7:17"
														}
													]
												},
												"id": 2166,
												"nodeType": "IfStatement",
												"src": "2460:98:17",
												"trueBody": {
													"id": 2160,
													"nodeType": "Block",
													"src": "2489:31:17",
													"statements": [
														{
															"expression": {
																"id": 2158,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2156,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2055,
																	"src": "2503:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "38",
																	"id": 2157,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2508:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "2503:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 2159,
															"nodeType": "ExpressionStatement",
															"src": "2503:6:17"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2171,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2169,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2167,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2052,
															"src": "2571:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307866",
															"id": 2168,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2575:3:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_15_by_1",
																"typeString": "int_const 15"
															},
															"value": "0xf"
														},
														"src": "2571:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2170,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2581:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2571:11:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2181,
													"nodeType": "Block",
													"src": "2621:32:17",
													"statements": [
														{
															"expression": {
																"id": 2179,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2177,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2052,
																	"src": "2635:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 2178,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2641:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "2635:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2180,
															"nodeType": "ExpressionStatement",
															"src": "2635:7:17"
														}
													]
												},
												"id": 2182,
												"nodeType": "IfStatement",
												"src": "2567:86:17",
												"trueBody": {
													"id": 2176,
													"nodeType": "Block",
													"src": "2584:31:17",
													"statements": [
														{
															"expression": {
																"id": 2174,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2172,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2055,
																	"src": "2598:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 2173,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2603:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "2598:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 2175,
															"nodeType": "ExpressionStatement",
															"src": "2598:6:17"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2187,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2185,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2183,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2052,
															"src": "2666:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307833",
															"id": 2184,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2670:3:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_3_by_1",
																"typeString": "int_const 3"
															},
															"value": "0x3"
														},
														"src": "2666:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2186,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2676:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2666:11:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2197,
													"nodeType": "Block",
													"src": "2716:32:17",
													"statements": [
														{
															"expression": {
																"id": 2195,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2193,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2052,
																	"src": "2730:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "32",
																	"id": 2194,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2736:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "2730:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2196,
															"nodeType": "ExpressionStatement",
															"src": "2730:7:17"
														}
													]
												},
												"id": 2198,
												"nodeType": "IfStatement",
												"src": "2662:86:17",
												"trueBody": {
													"id": 2192,
													"nodeType": "Block",
													"src": "2679:31:17",
													"statements": [
														{
															"expression": {
																"id": 2190,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2188,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2055,
																	"src": "2693:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "32",
																	"id": 2189,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2698:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "2693:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 2191,
															"nodeType": "ExpressionStatement",
															"src": "2693:6:17"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2203,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2201,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2199,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2052,
															"src": "2761:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307831",
															"id": 2200,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2765:3:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "0x1"
														},
														"src": "2761:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2202,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2771:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2761:11:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2208,
												"nodeType": "IfStatement",
												"src": "2757:23:17",
												"trueBody": {
													"expression": {
														"id": 2206,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2204,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2055,
															"src": "2774:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "Assignment",
														"operator": "-=",
														"rightHandSide": {
															"hexValue": "31",
															"id": 2205,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2779:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "2774:6:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"id": 2207,
													"nodeType": "ExpressionStatement",
													"src": "2774:6:17"
												}
											}
										]
									},
									"documentation": {
										"id": 2050,
										"nodeType": "StructuredDocumentation",
										"src": "1408:480:17",
										"text": "@notice Returns the index of the least significant bit of the number,\n     where the least significant bit is at index 0 and the most significant bit is at index 255\n @dev The function satisfies the property:\n     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\n @param x the value for which to compute the least significant bit, must be greater than 0\n @return r the index of the least significant bit"
									},
									"id": 2210,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "leastSignificantBit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2053,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2052,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 2210,
												"src": "1922:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2051,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1922:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1921:11:17"
									},
									"returnParameters": {
										"id": 2056,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2055,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 2210,
												"src": "1956:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2054,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1956:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1955:9:17"
									},
									"scope": 2211,
									"src": "1893:894:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2212,
							"src": "187:2602:17"
						}
					],
					"src": "45:2745:17"
				},
				"id": 17
			},
			"contracts/core/libraries/FixedPoint128.sol": {
				"ast": {
					"absolutePath": "contracts/core/libraries/FixedPoint128.sol",
					"exportedSymbols": {
						"FixedPoint128": [
							2218
						]
					},
					"id": 2219,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2213,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:18"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2214,
								"nodeType": "StructuredDocumentation",
								"src": "71:140:18",
								"text": "@title FixedPoint128\n @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)"
							},
							"fullyImplemented": true,
							"id": 2218,
							"linearizedBaseContracts": [
								2218
							],
							"name": "FixedPoint128",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 2217,
									"mutability": "constant",
									"name": "Q128",
									"nodeType": "VariableDeclaration",
									"scope": 2218,
									"src": "239:68:18",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2215,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "239:7:18",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3078313030303030303030303030303030303030303030303030303030303030303030",
										"id": 2216,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "272:35:18",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
											"typeString": "int_const 3402...(31 digits omitted)...1456"
										},
										"value": "0x100000000000000000000000000000000"
									},
									"visibility": "internal"
								}
							],
							"scope": 2219,
							"src": "211:99:18"
						}
					],
					"src": "45:266:18"
				},
				"id": 18
			},
			"contracts/core/libraries/FixedPoint96.sol": {
				"ast": {
					"absolutePath": "contracts/core/libraries/FixedPoint96.sol",
					"exportedSymbols": {
						"FixedPoint96": [
							2228
						]
					},
					"id": 2229,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2220,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:19"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2221,
								"nodeType": "StructuredDocumentation",
								"src": "71:174:19",
								"text": "@title FixedPoint96\n @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\n @dev Used in SqrtPriceMath.sol"
							},
							"fullyImplemented": true,
							"id": 2228,
							"linearizedBaseContracts": [
								2228
							],
							"name": "FixedPoint96",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 2224,
									"mutability": "constant",
									"name": "RESOLUTION",
									"nodeType": "VariableDeclaration",
									"scope": 2228,
									"src": "272:39:19",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 2222,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "272:5:19",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "3936",
										"id": 2223,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "309:2:19",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_96_by_1",
											"typeString": "int_const 96"
										},
										"value": "96"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2227,
									"mutability": "constant",
									"name": "Q96",
									"nodeType": "VariableDeclaration",
									"scope": 2228,
									"src": "317:59:19",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2225,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "317:7:19",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "307831303030303030303030303030303030303030303030303030",
										"id": 2226,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "349:27:19",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_79228162514264337593543950336_by_1",
											"typeString": "int_const 79228162514264337593543950336"
										},
										"value": "0x1000000000000000000000000"
									},
									"visibility": "internal"
								}
							],
							"scope": 2229,
							"src": "245:134:19"
						}
					],
					"src": "45:335:19"
				},
				"id": 19
			},
			"contracts/core/libraries/FullMath.sol": {
				"ast": {
					"absolutePath": "contracts/core/libraries/FullMath.sol",
					"exportedSymbols": {
						"FullMath": [
							2401
						]
					},
					"id": 2402,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2230,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:31:20"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2231,
								"nodeType": "StructuredDocumentation",
								"src": "65:297:20",
								"text": "@title Contains 512-bit math functions\n @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits"
							},
							"fullyImplemented": true,
							"id": 2401,
							"linearizedBaseContracts": [
								2401
							],
							"name": "FullMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2356,
										"nodeType": "Block",
										"src": "847:3648:20",
										"statements": [
											{
												"assignments": [
													2244
												],
												"declarations": [
													{
														"constant": false,
														"id": 2244,
														"mutability": "mutable",
														"name": "prod0",
														"nodeType": "VariableDeclaration",
														"scope": 2356,
														"src": "1160:13:20",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2243,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1160:7:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2245,
												"nodeType": "VariableDeclarationStatement",
												"src": "1160:13:20"
											},
											{
												"assignments": [
													2247
												],
												"declarations": [
													{
														"constant": false,
														"id": 2247,
														"mutability": "mutable",
														"name": "prod1",
														"nodeType": "VariableDeclaration",
														"scope": 2356,
														"src": "1228:13:20",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2246,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1228:7:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2248,
												"nodeType": "VariableDeclarationStatement",
												"src": "1228:13:20"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "1304:141:20",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1318:30:20",
															"value": {
																"arguments": [
																	{
																		"name": "a",
																		"nodeType": "YulIdentifier",
																		"src": "1335:1:20"
																	},
																	{
																		"name": "b",
																		"nodeType": "YulIdentifier",
																		"src": "1338:1:20"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1345:1:20",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "1341:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1341:6:20"
																	}
																],
																"functionName": {
																	"name": "mulmod",
																	"nodeType": "YulIdentifier",
																	"src": "1328:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "1328:20:20"
															},
															"variables": [
																{
																	"name": "mm",
																	"nodeType": "YulTypedName",
																	"src": "1322:2:20",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1361:18:20",
															"value": {
																"arguments": [
																	{
																		"name": "a",
																		"nodeType": "YulIdentifier",
																		"src": "1374:1:20"
																	},
																	{
																		"name": "b",
																		"nodeType": "YulIdentifier",
																		"src": "1377:1:20"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "1370:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "1370:9:20"
															},
															"variableNames": [
																{
																	"name": "prod0",
																	"nodeType": "YulIdentifier",
																	"src": "1361:5:20"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1392:43:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "mm",
																				"nodeType": "YulIdentifier",
																				"src": "1409:2:20"
																			},
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "1413:5:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1405:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1405:14:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "mm",
																				"nodeType": "YulIdentifier",
																				"src": "1424:2:20"
																			},
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "1428:5:20"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1421:2:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1421:13:20"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "1401:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "1401:34:20"
															},
															"variableNames": [
																{
																	"name": "prod1",
																	"nodeType": "YulIdentifier",
																	"src": "1392:5:20"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2234,
														"isOffset": false,
														"isSlot": false,
														"src": "1335:1:20",
														"valueSize": 1
													},
													{
														"declaration": 2234,
														"isOffset": false,
														"isSlot": false,
														"src": "1374:1:20",
														"valueSize": 1
													},
													{
														"declaration": 2236,
														"isOffset": false,
														"isSlot": false,
														"src": "1338:1:20",
														"valueSize": 1
													},
													{
														"declaration": 2236,
														"isOffset": false,
														"isSlot": false,
														"src": "1377:1:20",
														"valueSize": 1
													},
													{
														"declaration": 2244,
														"isOffset": false,
														"isSlot": false,
														"src": "1361:5:20",
														"valueSize": 1
													},
													{
														"declaration": 2244,
														"isOffset": false,
														"isSlot": false,
														"src": "1413:5:20",
														"valueSize": 1
													},
													{
														"declaration": 2244,
														"isOffset": false,
														"isSlot": false,
														"src": "1428:5:20",
														"valueSize": 1
													},
													{
														"declaration": 2247,
														"isOffset": false,
														"isSlot": false,
														"src": "1392:5:20",
														"valueSize": 1
													}
												],
												"id": 2249,
												"nodeType": "InlineAssembly",
												"src": "1295:150:20"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2252,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2250,
														"name": "prod1",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2247,
														"src": "1517:5:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2251,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1526:1:20",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1517:10:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2263,
												"nodeType": "IfStatement",
												"src": "1513:179:20",
												"trueBody": {
													"id": 2262,
													"nodeType": "Block",
													"src": "1529:163:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2256,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2254,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2238,
																			"src": "1551:11:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 2255,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1565:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1551:15:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 2253,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "1543:7:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																		"typeString": "function (bool) pure"
																	}
																},
																"id": 2257,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1543:24:20",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2258,
															"nodeType": "ExpressionStatement",
															"src": "1543:24:20"
														},
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "1590:65:20",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1608:33:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "prod0",
																					"nodeType": "YulIdentifier",
																					"src": "1622:5:20"
																				},
																				{
																					"name": "denominator",
																					"nodeType": "YulIdentifier",
																					"src": "1629:11:20"
																				}
																			],
																			"functionName": {
																				"name": "div",
																				"nodeType": "YulIdentifier",
																				"src": "1618:3:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1618:23:20"
																		},
																		"variableNames": [
																			{
																				"name": "result",
																				"nodeType": "YulIdentifier",
																				"src": "1608:6:20"
																			}
																		]
																	}
																]
															},
															"evmVersion": "istanbul",
															"externalReferences": [
																{
																	"declaration": 2238,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "1629:11:20",
																	"valueSize": 1
																},
																{
																	"declaration": 2244,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "1622:5:20",
																	"valueSize": 1
																},
																{
																	"declaration": 2241,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "1608:6:20",
																	"valueSize": 1
																}
															],
															"id": 2259,
															"nodeType": "InlineAssembly",
															"src": "1581:74:20"
														},
														{
															"expression": {
																"id": 2260,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2241,
																"src": "1675:6:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 2242,
															"id": 2261,
															"nodeType": "Return",
															"src": "1668:13:20"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2267,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2265,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2238,
																"src": "1805:11:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 2266,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2247,
																"src": "1819:5:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1805:19:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2264,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1797:7:20",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 2268,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1797:28:20",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2269,
												"nodeType": "ExpressionStatement",
												"src": "1797:28:20"
											},
											{
												"assignments": [
													2271
												],
												"declarations": [
													{
														"constant": false,
														"id": 2271,
														"mutability": "mutable",
														"name": "remainder",
														"nodeType": "VariableDeclaration",
														"scope": 2356,
														"src": "2102:17:20",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2270,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2102:7:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2272,
												"nodeType": "VariableDeclarationStatement",
												"src": "2102:17:20"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2138:62:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2152:38:20",
															"value": {
																"arguments": [
																	{
																		"name": "a",
																		"nodeType": "YulIdentifier",
																		"src": "2172:1:20"
																	},
																	{
																		"name": "b",
																		"nodeType": "YulIdentifier",
																		"src": "2175:1:20"
																	},
																	{
																		"name": "denominator",
																		"nodeType": "YulIdentifier",
																		"src": "2178:11:20"
																	}
																],
																"functionName": {
																	"name": "mulmod",
																	"nodeType": "YulIdentifier",
																	"src": "2165:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "2165:25:20"
															},
															"variableNames": [
																{
																	"name": "remainder",
																	"nodeType": "YulIdentifier",
																	"src": "2152:9:20"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2234,
														"isOffset": false,
														"isSlot": false,
														"src": "2172:1:20",
														"valueSize": 1
													},
													{
														"declaration": 2236,
														"isOffset": false,
														"isSlot": false,
														"src": "2175:1:20",
														"valueSize": 1
													},
													{
														"declaration": 2238,
														"isOffset": false,
														"isSlot": false,
														"src": "2178:11:20",
														"valueSize": 1
													},
													{
														"declaration": 2271,
														"isOffset": false,
														"isSlot": false,
														"src": "2152:9:20",
														"valueSize": 1
													}
												],
												"id": 2273,
												"nodeType": "InlineAssembly",
												"src": "2129:71:20"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2273:108:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2287:41:20",
															"value": {
																"arguments": [
																	{
																		"name": "prod1",
																		"nodeType": "YulIdentifier",
																		"src": "2300:5:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "remainder",
																				"nodeType": "YulIdentifier",
																				"src": "2310:9:20"
																			},
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "2321:5:20"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "2307:2:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2307:20:20"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "2296:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "2296:32:20"
															},
															"variableNames": [
																{
																	"name": "prod1",
																	"nodeType": "YulIdentifier",
																	"src": "2287:5:20"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2341:30:20",
															"value": {
																"arguments": [
																	{
																		"name": "prod0",
																		"nodeType": "YulIdentifier",
																		"src": "2354:5:20"
																	},
																	{
																		"name": "remainder",
																		"nodeType": "YulIdentifier",
																		"src": "2361:9:20"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "2350:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "2350:21:20"
															},
															"variableNames": [
																{
																	"name": "prod0",
																	"nodeType": "YulIdentifier",
																	"src": "2341:5:20"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2244,
														"isOffset": false,
														"isSlot": false,
														"src": "2321:5:20",
														"valueSize": 1
													},
													{
														"declaration": 2244,
														"isOffset": false,
														"isSlot": false,
														"src": "2341:5:20",
														"valueSize": 1
													},
													{
														"declaration": 2244,
														"isOffset": false,
														"isSlot": false,
														"src": "2354:5:20",
														"valueSize": 1
													},
													{
														"declaration": 2247,
														"isOffset": false,
														"isSlot": false,
														"src": "2287:5:20",
														"valueSize": 1
													},
													{
														"declaration": 2247,
														"isOffset": false,
														"isSlot": false,
														"src": "2300:5:20",
														"valueSize": 1
													},
													{
														"declaration": 2271,
														"isOffset": false,
														"isSlot": false,
														"src": "2310:9:20",
														"valueSize": 1
													},
													{
														"declaration": 2271,
														"isOffset": false,
														"isSlot": false,
														"src": "2361:9:20",
														"valueSize": 1
													}
												],
												"id": 2274,
												"nodeType": "InlineAssembly",
												"src": "2264:117:20"
											},
											{
												"assignments": [
													2276
												],
												"declarations": [
													{
														"constant": false,
														"id": 2276,
														"mutability": "mutable",
														"name": "twos",
														"nodeType": "VariableDeclaration",
														"scope": 2356,
														"src": "2530:12:20",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2275,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2530:7:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2281,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2280,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2278,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "-",
														"prefix": true,
														"src": "2545:12:20",
														"subExpression": {
															"id": 2277,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2238,
															"src": "2546:11:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&",
													"rightExpression": {
														"id": 2279,
														"name": "denominator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2238,
														"src": "2560:11:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2545:26:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2530:41:20"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2636:61:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2650:37:20",
															"value": {
																"arguments": [
																	{
																		"name": "denominator",
																		"nodeType": "YulIdentifier",
																		"src": "2669:11:20"
																	},
																	{
																		"name": "twos",
																		"nodeType": "YulIdentifier",
																		"src": "2682:4:20"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "2665:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "2665:22:20"
															},
															"variableNames": [
																{
																	"name": "denominator",
																	"nodeType": "YulIdentifier",
																	"src": "2650:11:20"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2238,
														"isOffset": false,
														"isSlot": false,
														"src": "2650:11:20",
														"valueSize": 1
													},
													{
														"declaration": 2238,
														"isOffset": false,
														"isSlot": false,
														"src": "2669:11:20",
														"valueSize": 1
													},
													{
														"declaration": 2276,
														"isOffset": false,
														"isSlot": false,
														"src": "2682:4:20",
														"valueSize": 1
													}
												],
												"id": 2282,
												"nodeType": "InlineAssembly",
												"src": "2627:70:20"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2770:49:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2784:25:20",
															"value": {
																"arguments": [
																	{
																		"name": "prod0",
																		"nodeType": "YulIdentifier",
																		"src": "2797:5:20"
																	},
																	{
																		"name": "twos",
																		"nodeType": "YulIdentifier",
																		"src": "2804:4:20"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "2793:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "2793:16:20"
															},
															"variableNames": [
																{
																	"name": "prod0",
																	"nodeType": "YulIdentifier",
																	"src": "2784:5:20"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2244,
														"isOffset": false,
														"isSlot": false,
														"src": "2784:5:20",
														"valueSize": 1
													},
													{
														"declaration": 2244,
														"isOffset": false,
														"isSlot": false,
														"src": "2797:5:20",
														"valueSize": 1
													},
													{
														"declaration": 2276,
														"isOffset": false,
														"isSlot": false,
														"src": "2804:4:20",
														"valueSize": 1
													}
												],
												"id": 2283,
												"nodeType": "InlineAssembly",
												"src": "2761:58:20"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "3007:63:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3021:39:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3041:1:20",
																						"type": "",
																						"value": "0"
																					},
																					{
																						"name": "twos",
																						"nodeType": "YulIdentifier",
																						"src": "3044:4:20"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "3037:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3037:12:20"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "3051:4:20"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "3033:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3033:23:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3058:1:20",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3029:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "3029:31:20"
															},
															"variableNames": [
																{
																	"name": "twos",
																	"nodeType": "YulIdentifier",
																	"src": "3021:4:20"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2276,
														"isOffset": false,
														"isSlot": false,
														"src": "3021:4:20",
														"valueSize": 1
													},
													{
														"declaration": 2276,
														"isOffset": false,
														"isSlot": false,
														"src": "3044:4:20",
														"valueSize": 1
													},
													{
														"declaration": 2276,
														"isOffset": false,
														"isSlot": false,
														"src": "3051:4:20",
														"valueSize": 1
													}
												],
												"id": 2284,
												"nodeType": "InlineAssembly",
												"src": "2998:72:20"
											},
											{
												"expression": {
													"id": 2289,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2285,
														"name": "prod0",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2244,
														"src": "3079:5:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "|=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2288,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2286,
															"name": "prod1",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2247,
															"src": "3088:5:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"id": 2287,
															"name": "twos",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2276,
															"src": "3096:4:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3088:12:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3079:21:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2290,
												"nodeType": "ExpressionStatement",
												"src": "3079:21:20"
											},
											{
												"assignments": [
													2292
												],
												"declarations": [
													{
														"constant": false,
														"id": 2292,
														"mutability": "mutable",
														"name": "inv",
														"nodeType": "VariableDeclaration",
														"scope": 2356,
														"src": "3434:11:20",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2291,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3434:7:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2299,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2298,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2295,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "33",
																	"id": 2293,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3449:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_3_by_1",
																		"typeString": "int_const 3"
																	},
																	"value": "3"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2294,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2238,
																	"src": "3453:11:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3449:15:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2296,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "3448:17:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "^",
													"rightExpression": {
														"hexValue": "32",
														"id": 2297,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3468:1:20",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_2_by_1",
															"typeString": "int_const 2"
														},
														"value": "2"
													},
													"src": "3448:21:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3434:35:20"
											},
											{
												"expression": {
													"id": 2306,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2300,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2292,
														"src": "3684:3:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2305,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 2301,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3691:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2304,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2302,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2238,
																"src": "3695:11:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2303,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2292,
																"src": "3709:3:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3695:17:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3691:21:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3684:28:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2307,
												"nodeType": "ExpressionStatement",
												"src": "3684:28:20"
											},
											{
												"expression": {
													"id": 2314,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2308,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2292,
														"src": "3742:3:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2313,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 2309,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3749:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2312,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2310,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2238,
																"src": "3753:11:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2311,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2292,
																"src": "3767:3:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3753:17:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3749:21:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3742:28:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2315,
												"nodeType": "ExpressionStatement",
												"src": "3742:28:20"
											},
											{
												"expression": {
													"id": 2322,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2316,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2292,
														"src": "3801:3:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2321,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 2317,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3808:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2320,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2318,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2238,
																"src": "3812:11:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2319,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2292,
																"src": "3826:3:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3812:17:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3808:21:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3801:28:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2323,
												"nodeType": "ExpressionStatement",
												"src": "3801:28:20"
											},
											{
												"expression": {
													"id": 2330,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2324,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2292,
														"src": "3860:3:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2329,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 2325,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3867:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2328,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2326,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2238,
																"src": "3871:11:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2327,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2292,
																"src": "3885:3:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3871:17:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3867:21:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3860:28:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2331,
												"nodeType": "ExpressionStatement",
												"src": "3860:28:20"
											},
											{
												"expression": {
													"id": 2338,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2332,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2292,
														"src": "3919:3:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2337,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 2333,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3926:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2336,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2334,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2238,
																"src": "3930:11:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2335,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2292,
																"src": "3944:3:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3930:17:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3926:21:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3919:28:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2339,
												"nodeType": "ExpressionStatement",
												"src": "3919:28:20"
											},
											{
												"expression": {
													"id": 2346,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2340,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2292,
														"src": "3979:3:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2345,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 2341,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3986:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2344,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2342,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2238,
																"src": "3990:11:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2343,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2292,
																"src": "4004:3:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3990:17:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3986:21:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3979:28:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2347,
												"nodeType": "ExpressionStatement",
												"src": "3979:28:20"
											},
											{
												"expression": {
													"id": 2352,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2348,
														"name": "result",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2241,
														"src": "4445:6:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2351,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2349,
															"name": "prod0",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2244,
															"src": "4454:5:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"id": 2350,
															"name": "inv",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2292,
															"src": "4462:3:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "4454:11:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4445:20:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2353,
												"nodeType": "ExpressionStatement",
												"src": "4445:20:20"
											},
											{
												"expression": {
													"id": 2354,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2241,
													"src": "4482:6:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2242,
												"id": 2355,
												"nodeType": "Return",
												"src": "4475:13:20"
											}
										]
									},
									"documentation": {
										"id": 2232,
										"nodeType": "StructuredDocumentation",
										"src": "385:359:20",
										"text": "@notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @param a The multiplicand\n @param b The multiplier\n @param denominator The divisor\n @return result The 256-bit result\n @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv"
									},
									"id": 2357,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2239,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2234,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2357,
												"src": "765:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2233,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "765:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2236,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2357,
												"src": "776:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2235,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "776:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2238,
												"mutability": "mutable",
												"name": "denominator",
												"nodeType": "VariableDeclaration",
												"scope": 2357,
												"src": "787:19:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2237,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "787:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "764:43:20"
									},
									"returnParameters": {
										"id": 2242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2241,
												"mutability": "mutable",
												"name": "result",
												"nodeType": "VariableDeclaration",
												"scope": 2357,
												"src": "831:14:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2240,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "831:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "830:16:20"
									},
									"scope": 2401,
									"src": "749:3746:20",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2399,
										"nodeType": "Block",
										"src": "4885:177:20",
										"statements": [
											{
												"expression": {
													"id": 2375,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2369,
														"name": "result",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2367,
														"src": "4895:6:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2371,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2360,
																"src": "4911:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 2372,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2362,
																"src": "4914:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 2373,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2364,
																"src": "4917:11:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 2370,
															"name": "mulDiv",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2357,
															"src": "4904:6:20",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 2374,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4904:25:20",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4895:34:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2376,
												"nodeType": "ExpressionStatement",
												"src": "4895:34:20"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2383,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 2378,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2360,
																"src": "4950:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 2379,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2362,
																"src": "4953:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 2380,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2364,
																"src": "4956:11:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 2377,
															"name": "mulmod",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967280,
															"src": "4943:6:20",
															"typeDescriptions": {
																"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 2381,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4943:25:20",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2382,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4971:1:20",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4943:29:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2398,
												"nodeType": "IfStatement",
												"src": "4939:117:20",
												"trueBody": {
													"id": 2397,
													"nodeType": "Block",
													"src": "4974:82:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2391,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2385,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2367,
																			"src": "4996:6:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"expression": {
																				"arguments": [
																					{
																						"id": 2388,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "5010:7:20",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						},
																						"typeName": {
																							"id": 2387,
																							"name": "uint256",
																							"nodeType": "ElementaryTypeName",
																							"src": "5010:7:20",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						}
																					],
																					"id": 2386,
																					"name": "type",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967269,
																					"src": "5005:4:20",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																						"typeString": "function () pure"
																					}
																				},
																				"id": 2389,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "5005:13:20",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_meta_type_t_uint256",
																					"typeString": "type(uint256)"
																				}
																			},
																			"id": 2390,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "max",
																			"nodeType": "MemberAccess",
																			"src": "5005:17:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4996:26:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 2384,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "4988:7:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																		"typeString": "function (bool) pure"
																	}
																},
																"id": 2392,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4988:35:20",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2393,
															"nodeType": "ExpressionStatement",
															"src": "4988:35:20"
														},
														{
															"expression": {
																"id": 2395,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "5037:8:20",
																"subExpression": {
																	"id": 2394,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2367,
																	"src": "5037:6:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2396,
															"nodeType": "ExpressionStatement",
															"src": "5037:8:20"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2358,
										"nodeType": "StructuredDocumentation",
										"src": "4501:271:20",
										"text": "@notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @param a The multiplicand\n @param b The multiplier\n @param denominator The divisor\n @return result The 256-bit result"
									},
									"id": 2400,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDivRoundingUp",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2365,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2360,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2400,
												"src": "4803:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2359,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4803:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2362,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2400,
												"src": "4814:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2361,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4814:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2364,
												"mutability": "mutable",
												"name": "denominator",
												"nodeType": "VariableDeclaration",
												"scope": 2400,
												"src": "4825:19:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2363,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4825:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4802:43:20"
									},
									"returnParameters": {
										"id": 2368,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2367,
												"mutability": "mutable",
												"name": "result",
												"nodeType": "VariableDeclaration",
												"scope": 2400,
												"src": "4869:14:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2366,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4869:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4868:16:20"
									},
									"scope": 2401,
									"src": "4777:285:20",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2402,
							"src": "362:4702:20"
						}
					],
					"src": "32:5033:20"
				},
				"id": 20
			},
			"contracts/core/libraries/LiquidityMath.sol": {
				"ast": {
					"absolutePath": "contracts/core/libraries/LiquidityMath.sol",
					"exportedSymbols": {
						"LiquidityMath": [
							2453
						]
					},
					"id": 2454,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2403,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:21"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2404,
								"nodeType": "StructuredDocumentation",
								"src": "71:38:21",
								"text": "@title Math library for liquidity"
							},
							"fullyImplemented": true,
							"id": 2453,
							"linearizedBaseContracts": [
								2453
							],
							"name": "LiquidityMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2451,
										"nodeType": "Block",
										"src": "456:163:21",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													},
													"id": 2416,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2414,
														"name": "y",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2409,
														"src": "470:1:21",
														"typeDescriptions": {
															"typeIdentifier": "t_int128",
															"typeString": "int128"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"hexValue": "30",
														"id": 2415,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "474:1:21",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "470:5:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2449,
													"nodeType": "Block",
													"src": "548:65:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		},
																		"id": 2445,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"id": 2442,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"id": 2435,
																						"name": "z",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2412,
																						"src": "571:1:21",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint128",
																							"typeString": "uint128"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"commonType": {
																							"typeIdentifier": "t_uint128",
																							"typeString": "uint128"
																						},
																						"id": 2441,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 2436,
																							"name": "x",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2407,
																							"src": "575:1:21",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint128",
																								"typeString": "uint128"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "+",
																						"rightExpression": {
																							"arguments": [
																								{
																									"id": 2439,
																									"name": "y",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2409,
																									"src": "587:1:21",
																									"typeDescriptions": {
																										"typeIdentifier": "t_int128",
																										"typeString": "int128"
																									}
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_int128",
																										"typeString": "int128"
																									}
																								],
																								"id": 2438,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"nodeType": "ElementaryTypeNameExpression",
																								"src": "579:7:21",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_uint128_$",
																									"typeString": "type(uint128)"
																								},
																								"typeName": {
																									"id": 2437,
																									"name": "uint128",
																									"nodeType": "ElementaryTypeName",
																									"src": "579:7:21",
																									"typeDescriptions": {}
																								}
																							},
																							"id": 2440,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"kind": "typeConversion",
																							"lValueRequested": false,
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "579:10:21",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint128",
																								"typeString": "uint128"
																							}
																						},
																						"src": "575:14:21",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint128",
																							"typeString": "uint128"
																						}
																					},
																					"src": "571:18:21",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint128",
																						"typeString": "uint128"
																					}
																				}
																			],
																			"id": 2443,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "570:20:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"id": 2444,
																			"name": "x",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2407,
																			"src": "594:1:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		},
																		"src": "570:25:21",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "4c41",
																		"id": 2446,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "597:4:21",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_ce8fc98a1432efc8ba166615239eb1702fbbbd0ddab9a5952502a98483035383",
																			"typeString": "literal_string \"LA\""
																		},
																		"value": "LA"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_ce8fc98a1432efc8ba166615239eb1702fbbbd0ddab9a5952502a98483035383",
																			"typeString": "literal_string \"LA\""
																		}
																	],
																	"id": 2434,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "562:7:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 2447,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "562:40:21",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2448,
															"nodeType": "ExpressionStatement",
															"src": "562:40:21"
														}
													]
												},
												"id": 2450,
												"nodeType": "IfStatement",
												"src": "466:147:21",
												"trueBody": {
													"id": 2433,
													"nodeType": "Block",
													"src": "477:65:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		},
																		"id": 2429,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"id": 2426,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"id": 2418,
																						"name": "z",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2412,
																						"src": "500:1:21",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint128",
																							"typeString": "uint128"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"commonType": {
																							"typeIdentifier": "t_uint128",
																							"typeString": "uint128"
																						},
																						"id": 2425,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 2419,
																							"name": "x",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2407,
																							"src": "504:1:21",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint128",
																								"typeString": "uint128"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "-",
																						"rightExpression": {
																							"arguments": [
																								{
																									"id": 2423,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "UnaryOperation",
																									"operator": "-",
																									"prefix": true,
																									"src": "516:2:21",
																									"subExpression": {
																										"id": 2422,
																										"name": "y",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 2409,
																										"src": "517:1:21",
																										"typeDescriptions": {
																											"typeIdentifier": "t_int128",
																											"typeString": "int128"
																										}
																									},
																									"typeDescriptions": {
																										"typeIdentifier": "t_int128",
																										"typeString": "int128"
																									}
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_int128",
																										"typeString": "int128"
																									}
																								],
																								"id": 2421,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"nodeType": "ElementaryTypeNameExpression",
																								"src": "508:7:21",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_uint128_$",
																									"typeString": "type(uint128)"
																								},
																								"typeName": {
																									"id": 2420,
																									"name": "uint128",
																									"nodeType": "ElementaryTypeName",
																									"src": "508:7:21",
																									"typeDescriptions": {}
																								}
																							},
																							"id": 2424,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"kind": "typeConversion",
																							"lValueRequested": false,
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "508:11:21",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint128",
																								"typeString": "uint128"
																							}
																						},
																						"src": "504:15:21",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint128",
																							"typeString": "uint128"
																						}
																					},
																					"src": "500:19:21",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint128",
																						"typeString": "uint128"
																					}
																				}
																			],
																			"id": 2427,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "499:21:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"id": 2428,
																			"name": "x",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2407,
																			"src": "523:1:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		},
																		"src": "499:25:21",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "4c53",
																		"id": 2430,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "526:4:21",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_2be2231ccd52e7fedf30c30a3dfa3d6c9d9d3400159e305398a7b6d437f56985",
																			"typeString": "literal_string \"LS\""
																		},
																		"value": "LS"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_2be2231ccd52e7fedf30c30a3dfa3d6c9d9d3400159e305398a7b6d437f56985",
																			"typeString": "literal_string \"LS\""
																		}
																	],
																	"id": 2417,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "491:7:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 2431,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "491:40:21",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2432,
															"nodeType": "ExpressionStatement",
															"src": "491:40:21"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2405,
										"nodeType": "StructuredDocumentation",
										"src": "137:241:21",
										"text": "@notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\n @param x The liquidity before change\n @param y The delta by which liquidity should be changed\n @return z The liquidity delta"
									},
									"id": 2452,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "addDelta",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2410,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2407,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 2452,
												"src": "401:9:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2406,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "401:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2409,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 2452,
												"src": "412:8:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 2408,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "412:6:21",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "400:21:21"
									},
									"returnParameters": {
										"id": 2413,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2412,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 2452,
												"src": "445:9:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2411,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "444:11:21"
									},
									"scope": 2453,
									"src": "383:236:21",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2454,
							"src": "109:512:21"
						}
					],
					"src": "45:577:21"
				},
				"id": 21
			},
			"contracts/core/libraries/LowGasSafeMath.sol": {
				"ast": {
					"absolutePath": "contracts/core/libraries/LowGasSafeMath.sol",
					"exportedSymbols": {
						"LowGasSafeMath": [
							2583
						]
					},
					"id": 2584,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2455,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:22"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2456,
								"nodeType": "StructuredDocumentation",
								"src": "71:178:22",
								"text": "@title Optimized overflow and underflow safe math operations\n @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost"
							},
							"fullyImplemented": true,
							"id": 2583,
							"linearizedBaseContracts": [
								2583
							],
							"name": "LowGasSafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2477,
										"nodeType": "Block",
										"src": "504:42:22",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2474,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"id": 2471,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2467,
																			"name": "z",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2464,
																			"src": "523:1:22",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2470,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2468,
																				"name": "x",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2459,
																				"src": "527:1:22",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"id": 2469,
																				"name": "y",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2461,
																				"src": "531:1:22",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "527:5:22",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "523:9:22",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2472,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "522:11:22",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 2473,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2459,
																"src": "537:1:22",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "522:16:22",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2466,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "514:7:22",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 2475,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "514:25:22",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2476,
												"nodeType": "ExpressionStatement",
												"src": "514:25:22"
											}
										]
									},
									"documentation": {
										"id": 2457,
										"nodeType": "StructuredDocumentation",
										"src": "278:152:22",
										"text": "@notice Returns x + y, reverts if sum overflows uint256\n @param x The augend\n @param y The addend\n @return z The sum of x and y"
									},
									"id": 2478,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2462,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2459,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 2478,
												"src": "448:9:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2458,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "448:7:22",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2461,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 2478,
												"src": "459:9:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2460,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "459:7:22",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "447:22:22"
									},
									"returnParameters": {
										"id": 2465,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2464,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 2478,
												"src": "493:9:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2463,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "493:7:22",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "492:11:22"
									},
									"scope": 2583,
									"src": "435:111:22",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2499,
										"nodeType": "Block",
										"src": "779:42:22",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2496,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"id": 2493,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2489,
																			"name": "z",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2486,
																			"src": "798:1:22",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2492,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2490,
																				"name": "x",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2481,
																				"src": "802:1:22",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 2491,
																				"name": "y",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2483,
																				"src": "806:1:22",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "802:5:22",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "798:9:22",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2494,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "797:11:22",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 2495,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2481,
																"src": "812:1:22",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "797:16:22",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2488,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "789:7:22",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 2497,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "789:25:22",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2498,
												"nodeType": "ExpressionStatement",
												"src": "789:25:22"
											}
										]
									},
									"documentation": {
										"id": 2479,
										"nodeType": "StructuredDocumentation",
										"src": "552:153:22",
										"text": "@notice Returns x - y, reverts if underflows\n @param x The minuend\n @param y The subtrahend\n @return z The difference of x and y"
									},
									"id": 2500,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2484,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2481,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 2500,
												"src": "723:9:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2480,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "723:7:22",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2483,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 2500,
												"src": "734:9:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2482,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "734:7:22",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "722:22:22"
									},
									"returnParameters": {
										"id": 2487,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2486,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 2500,
												"src": "768:9:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2485,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "768:7:22",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "767:11:22"
									},
									"scope": 2583,
									"src": "710:111:22",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2527,
										"nodeType": "Block",
										"src": "1055:56:22",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2524,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2513,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2511,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2503,
																	"src": "1073:1:22",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 2512,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1078:1:22",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "1073:6:22",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2523,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2521,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"id": 2518,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"id": 2514,
																					"name": "z",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2508,
																					"src": "1084:1:22",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "=",
																				"rightHandSide": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2517,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 2515,
																						"name": "x",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2503,
																						"src": "1088:1:22",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 2516,
																						"name": "y",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2505,
																						"src": "1092:1:22",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "1088:5:22",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "1084:9:22",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 2519,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "1083:11:22",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2520,
																		"name": "x",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2503,
																		"src": "1097:1:22",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1083:15:22",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 2522,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2505,
																	"src": "1102:1:22",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1083:20:22",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1073:30:22",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2510,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1065:7:22",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 2525,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1065:39:22",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2526,
												"nodeType": "ExpressionStatement",
												"src": "1065:39:22"
											}
										]
									},
									"documentation": {
										"id": 2501,
										"nodeType": "StructuredDocumentation",
										"src": "827:154:22",
										"text": "@notice Returns x * y, reverts if overflows\n @param x The multiplicand\n @param y The multiplier\n @return z The product of x and y"
									},
									"id": 2528,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2506,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2503,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 2528,
												"src": "999:9:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2502,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "999:7:22",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2505,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 2528,
												"src": "1010:9:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2504,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1010:7:22",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "998:22:22"
									},
									"returnParameters": {
										"id": 2509,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2508,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 2528,
												"src": "1044:9:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2507,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1044:7:22",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1043:11:22"
									},
									"scope": 2583,
									"src": "986:125:22",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2554,
										"nodeType": "Block",
										"src": "1342:54:22",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2551,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 2546,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"id": 2543,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 2539,
																				"name": "z",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2536,
																				"src": "1361:1:22",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"commonType": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				},
																				"id": 2542,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2540,
																					"name": "x",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2531,
																					"src": "1365:1:22",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"id": 2541,
																					"name": "y",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2533,
																					"src": "1369:1:22",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				},
																				"src": "1365:5:22",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "1361:9:22",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 2544,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1360:11:22",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"id": 2545,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2531,
																	"src": "1375:1:22",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "1360:16:22",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 2549,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2547,
																			"name": "y",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2533,
																			"src": "1381:1:22",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 2548,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1386:1:22",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1381:6:22",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 2550,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1380:8:22",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1360:28:22",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2538,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1352:7:22",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 2552,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1352:37:22",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2553,
												"nodeType": "ExpressionStatement",
												"src": "1352:37:22"
											}
										]
									},
									"documentation": {
										"id": 2529,
										"nodeType": "StructuredDocumentation",
										"src": "1117:154:22",
										"text": "@notice Returns x + y, reverts if overflows or underflows\n @param x The augend\n @param y The addend\n @return z The sum of x and y"
									},
									"id": 2555,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2534,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2531,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 2555,
												"src": "1289:8:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2530,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1289:6:22",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2533,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 2555,
												"src": "1299:8:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2532,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1299:6:22",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1288:20:22"
									},
									"returnParameters": {
										"id": 2537,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2536,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 2555,
												"src": "1332:8:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2535,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1332:6:22",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1331:10:22"
									},
									"scope": 2583,
									"src": "1276:120:22",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2581,
										"nodeType": "Block",
										"src": "1639:54:22",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2578,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 2573,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"id": 2570,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 2566,
																				"name": "z",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2563,
																				"src": "1658:1:22",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"commonType": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				},
																				"id": 2569,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2567,
																					"name": "x",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2558,
																					"src": "1662:1:22",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 2568,
																					"name": "y",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2560,
																					"src": "1666:1:22",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				},
																				"src": "1662:5:22",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "1658:9:22",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 2571,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1657:11:22",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"id": 2572,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2558,
																	"src": "1672:1:22",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "1657:16:22",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 2576,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2574,
																			"name": "y",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2560,
																			"src": "1678:1:22",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 2575,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1683:1:22",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1678:6:22",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 2577,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1677:8:22",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1657:28:22",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2565,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1649:7:22",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 2579,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1649:37:22",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2580,
												"nodeType": "ExpressionStatement",
												"src": "1649:37:22"
											}
										]
									},
									"documentation": {
										"id": 2556,
										"nodeType": "StructuredDocumentation",
										"src": "1402:166:22",
										"text": "@notice Returns x - y, reverts if overflows or underflows\n @param x The minuend\n @param y The subtrahend\n @return z The difference of x and y"
									},
									"id": 2582,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2561,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2558,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 2582,
												"src": "1586:8:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2557,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1586:6:22",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2560,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 2582,
												"src": "1596:8:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2559,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1596:6:22",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1585:20:22"
									},
									"returnParameters": {
										"id": 2564,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2563,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 2582,
												"src": "1629:8:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2562,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1629:6:22",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1628:10:22"
									},
									"scope": 2583,
									"src": "1573:120:22",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2584,
							"src": "249:1446:22"
						}
					],
					"src": "45:1651:22"
				},
				"id": 22
			},
			"contracts/core/libraries/Position.sol": {
				"ast": {
					"absolutePath": "contracts/core/libraries/Position.sol",
					"exportedSymbols": {
						"FixedPoint128": [
							2218
						],
						"FullMath": [
							2401
						],
						"LiquidityMath": [
							2453
						],
						"Position": [
							2768
						]
					},
					"id": 2769,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2585,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:31:23"
						},
						{
							"absolutePath": "contracts/core/libraries/FullMath.sol",
							"file": "./FullMath.sol",
							"id": 2586,
							"nodeType": "ImportDirective",
							"scope": 2769,
							"sourceUnit": 2402,
							"src": "78:24:23",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/FixedPoint128.sol",
							"file": "./FixedPoint128.sol",
							"id": 2587,
							"nodeType": "ImportDirective",
							"scope": 2769,
							"sourceUnit": 2219,
							"src": "103:29:23",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/LiquidityMath.sol",
							"file": "./LiquidityMath.sol",
							"id": 2588,
							"nodeType": "ImportDirective",
							"scope": 2769,
							"sourceUnit": 2454,
							"src": "133:29:23",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2589,
								"nodeType": "StructuredDocumentation",
								"src": "164:201:23",
								"text": "@title Position\n @notice Positions represent an owner address' liquidity between a lower and upper tick boundary\n @dev Positions store additional state for tracking fees owed to the position"
							},
							"fullyImplemented": true,
							"id": 2768,
							"linearizedBaseContracts": [
								2768
							],
							"name": "Position",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Position.Info",
									"id": 2600,
									"members": [
										{
											"constant": false,
											"id": 2591,
											"mutability": "mutable",
											"name": "liquidity",
											"nodeType": "VariableDeclaration",
											"scope": 2600,
											"src": "512:17:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 2590,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "512:7:23",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2593,
											"mutability": "mutable",
											"name": "feeGrowthInside0LastX128",
											"nodeType": "VariableDeclaration",
											"scope": 2600,
											"src": "631:32:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2592,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "631:7:23",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2595,
											"mutability": "mutable",
											"name": "feeGrowthInside1LastX128",
											"nodeType": "VariableDeclaration",
											"scope": 2600,
											"src": "673:32:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2594,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "673:7:23",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2597,
											"mutability": "mutable",
											"name": "tokensOwed0",
											"nodeType": "VariableDeclaration",
											"scope": 2600,
											"src": "779:19:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 2596,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "779:7:23",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2599,
											"mutability": "mutable",
											"name": "tokensOwed1",
											"nodeType": "VariableDeclaration",
											"scope": 2600,
											"src": "808:19:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 2598,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "808:7:23",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Info",
									"nodeType": "StructDefinition",
									"scope": 2768,
									"src": "432:402:23",
									"visibility": "public"
								},
								{
									"body": {
										"id": 2629,
										"nodeType": "Block",
										"src": "1445:90:23",
										"statements": [
											{
												"expression": {
													"id": 2627,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2616,
														"name": "position",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2614,
														"src": "1455:8:23",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$2600_storage_ptr",
															"typeString": "struct Position.Info storage pointer"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"baseExpression": {
															"id": 2617,
															"name": "self",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2605,
															"src": "1466:4:23",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Info_$2600_storage_$",
																"typeString": "mapping(bytes32 => struct Position.Info storage ref)"
															}
														},
														"id": 2626,
														"indexExpression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 2621,
																			"name": "owner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2607,
																			"src": "1498:5:23",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 2622,
																			"name": "tickLower",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2609,
																			"src": "1505:9:23",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		},
																		{
																			"id": 2623,
																			"name": "tickUpper",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2611,
																			"src": "1516:9:23",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			},
																			{
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		],
																		"expression": {
																			"id": 2619,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "1481:3:23",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 2620,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "encodePacked",
																		"nodeType": "MemberAccess",
																		"src": "1481:16:23",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function () pure returns (bytes memory)"
																		}
																	},
																	"id": 2624,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1481:45:23",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 2618,
																"name": "keccak256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967288,
																"src": "1471:9:23",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																	"typeString": "function (bytes memory) pure returns (bytes32)"
																}
															},
															"id": 2625,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1471:56:23",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "1466:62:23",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$2600_storage",
															"typeString": "struct Position.Info storage ref"
														}
													},
													"src": "1455:73:23",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Info_$2600_storage_ptr",
														"typeString": "struct Position.Info storage pointer"
													}
												},
												"id": 2628,
												"nodeType": "ExpressionStatement",
												"src": "1455:73:23"
											}
										]
									},
									"documentation": {
										"id": 2601,
										"nodeType": "StructuredDocumentation",
										"src": "840:416:23",
										"text": "@notice Returns the Info struct of a position, given an owner and position boundaries\n @param self The mapping containing all user positions\n @param owner The address of the position owner\n @param tickLower The lower tick boundary of the position\n @param tickUpper The upper tick boundary of the position\n @return position The position info struct of the given owners' position"
									},
									"id": 2630,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "get",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2612,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2605,
												"mutability": "mutable",
												"name": "self",
												"nodeType": "VariableDeclaration",
												"scope": 2630,
												"src": "1274:37:23",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Info_$2600_storage_$",
													"typeString": "mapping(bytes32 => struct Position.Info)"
												},
												"typeName": {
													"id": 2604,
													"keyType": {
														"id": 2602,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "1282:7:23",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Mapping",
													"src": "1274:24:23",
													"typeDescriptions": {
														"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Info_$2600_storage_$",
														"typeString": "mapping(bytes32 => struct Position.Info)"
													},
													"valueType": {
														"id": 2603,
														"name": "Info",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 2600,
														"src": "1293:4:23",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$2600_storage_ptr",
															"typeString": "struct Position.Info"
														}
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2607,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 2630,
												"src": "1313:13:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2606,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1313:7:23",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2609,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 2630,
												"src": "1328:15:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 2608,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1328:5:23",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2611,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 2630,
												"src": "1345:15:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 2610,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1345:5:23",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1273:88:23"
									},
									"returnParameters": {
										"id": 2615,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2614,
												"mutability": "mutable",
												"name": "position",
												"nodeType": "VariableDeclaration",
												"scope": 2630,
												"src": "1409:30:23",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Info_$2600_storage_ptr",
													"typeString": "struct Position.Info"
												},
												"typeName": {
													"id": 2613,
													"name": "Position.Info",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2600,
													"src": "1409:13:23",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Info_$2600_storage_ptr",
														"typeString": "struct Position.Info"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1408:32:23"
									},
									"scope": 2768,
									"src": "1261:274:23",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2766,
										"nodeType": "Block",
										"src": "2279:1380:23",
										"statements": [
											{
												"assignments": [
													2645
												],
												"declarations": [
													{
														"constant": false,
														"id": 2645,
														"mutability": "mutable",
														"name": "_self",
														"nodeType": "VariableDeclaration",
														"scope": 2766,
														"src": "2289:17:23",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$2600_memory_ptr",
															"typeString": "struct Position.Info"
														},
														"typeName": {
															"id": 2644,
															"name": "Info",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 2600,
															"src": "2289:4:23",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$2600_storage_ptr",
																"typeString": "struct Position.Info"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2647,
												"initialValue": {
													"id": 2646,
													"name": "self",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2633,
													"src": "2309:4:23",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Info_$2600_storage_ptr",
														"typeString": "struct Position.Info storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2289:24:23"
											},
											{
												"assignments": [
													2649
												],
												"declarations": [
													{
														"constant": false,
														"id": 2649,
														"mutability": "mutable",
														"name": "liquidityNext",
														"nodeType": "VariableDeclaration",
														"scope": 2766,
														"src": "2324:21:23",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														},
														"typeName": {
															"id": 2648,
															"name": "uint128",
															"nodeType": "ElementaryTypeName",
															"src": "2324:7:23",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2650,
												"nodeType": "VariableDeclarationStatement",
												"src": "2324:21:23"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													},
													"id": 2653,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2651,
														"name": "liquidityDelta",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2635,
														"src": "2359:14:23",
														"typeDescriptions": {
															"typeIdentifier": "t_int128",
															"typeString": "int128"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2652,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2377:1:23",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2359:19:23",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2677,
													"nodeType": "Block",
													"src": "2534:96:23",
													"statements": [
														{
															"expression": {
																"id": 2675,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2668,
																	"name": "liquidityNext",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2649,
																	"src": "2548:13:23",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"expression": {
																				"id": 2671,
																				"name": "_self",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2645,
																				"src": "2587:5:23",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Info_$2600_memory_ptr",
																					"typeString": "struct Position.Info memory"
																				}
																			},
																			"id": 2672,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "liquidity",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 2591,
																			"src": "2587:15:23",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		},
																		{
																			"id": 2673,
																			"name": "liquidityDelta",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2635,
																			"src": "2604:14:23",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int128",
																				"typeString": "int128"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			},
																			{
																				"typeIdentifier": "t_int128",
																				"typeString": "int128"
																			}
																		],
																		"expression": {
																			"id": 2669,
																			"name": "LiquidityMath",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2453,
																			"src": "2564:13:23",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_LiquidityMath_$2453_$",
																				"typeString": "type(library LiquidityMath)"
																			}
																		},
																		"id": 2670,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "addDelta",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2452,
																		"src": "2564:22:23",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint128_$_t_int128_$returns$_t_uint128_$",
																			"typeString": "function (uint128,int128) pure returns (uint128)"
																		}
																	},
																	"id": 2674,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2564:55:23",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"src": "2548:71:23",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"id": 2676,
															"nodeType": "ExpressionStatement",
															"src": "2548:71:23"
														}
													]
												},
												"id": 2678,
												"nodeType": "IfStatement",
												"src": "2355:275:23",
												"trueBody": {
													"id": 2667,
													"nodeType": "Block",
													"src": "2380:148:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		},
																		"id": 2658,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 2655,
																				"name": "_self",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2645,
																				"src": "2402:5:23",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Info_$2600_memory_ptr",
																					"typeString": "struct Position.Info memory"
																				}
																			},
																			"id": 2656,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "liquidity",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 2591,
																			"src": "2402:15:23",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 2657,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2420:1:23",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "2402:19:23",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "4e50",
																		"id": 2659,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2423:4:23",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_ebb814de87c671cfe97a338672e9700a9288a1a6d16839e238618b2b7f2aa86d",
																			"typeString": "literal_string \"NP\""
																		},
																		"value": "NP"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_ebb814de87c671cfe97a338672e9700a9288a1a6d16839e238618b2b7f2aa86d",
																			"typeString": "literal_string \"NP\""
																		}
																	],
																	"id": 2654,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "2394:7:23",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 2660,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2394:34:23",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2661,
															"nodeType": "ExpressionStatement",
															"src": "2394:34:23"
														},
														{
															"expression": {
																"id": 2665,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2662,
																	"name": "liquidityNext",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2649,
																	"src": "2486:13:23",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"id": 2663,
																		"name": "_self",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2645,
																		"src": "2502:5:23",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Info_$2600_memory_ptr",
																			"typeString": "struct Position.Info memory"
																		}
																	},
																	"id": 2664,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "liquidity",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2591,
																	"src": "2502:15:23",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"src": "2486:31:23",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"id": 2666,
															"nodeType": "ExpressionStatement",
															"src": "2486:31:23"
														}
													]
												}
											},
											{
												"assignments": [
													2680
												],
												"declarations": [
													{
														"constant": false,
														"id": 2680,
														"mutability": "mutable",
														"name": "tokensOwed0",
														"nodeType": "VariableDeclaration",
														"scope": 2766,
														"src": "2640:19:23",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														},
														"typeName": {
															"id": 2679,
															"name": "uint128",
															"nodeType": "ElementaryTypeName",
															"src": "2640:7:23",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2681,
												"nodeType": "VariableDeclarationStatement",
												"src": "2640:19:23"
											},
											{
												"assignments": [
													2683
												],
												"declarations": [
													{
														"constant": false,
														"id": 2683,
														"mutability": "mutable",
														"name": "tokensOwed1",
														"nodeType": "VariableDeclaration",
														"scope": 2766,
														"src": "2669:19:23",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														},
														"typeName": {
															"id": 2682,
															"name": "uint128",
															"nodeType": "ElementaryTypeName",
															"src": "2669:7:23",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2684,
												"nodeType": "VariableDeclarationStatement",
												"src": "2669:19:23"
											},
											{
												"condition": {
													"id": 2686,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "2702:7:23",
													"subExpression": {
														"id": 2685,
														"name": "staked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2641,
														"src": "2703:6:23",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2722,
												"nodeType": "IfStatement",
												"src": "2698:490:23",
												"trueBody": {
													"id": 2721,
													"nodeType": "Block",
													"src": "2711:477:23",
													"statements": [
														{
															"expression": {
																"id": 2702,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2687,
																	"name": "tokensOwed0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2680,
																	"src": "2767:11:23",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2695,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 2692,
																						"name": "feeGrowthInside0X128",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2637,
																						"src": "2843:20:23",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "-",
																					"rightExpression": {
																						"expression": {
																							"id": 2693,
																							"name": "_self",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2645,
																							"src": "2866:5:23",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_Info_$2600_memory_ptr",
																								"typeString": "struct Position.Info memory"
																							}
																						},
																						"id": 2694,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "feeGrowthInside0LastX128",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2593,
																						"src": "2866:30:23",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "2843:53:23",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"expression": {
																						"id": 2696,
																						"name": "_self",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2645,
																						"src": "2898:5:23",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Info_$2600_memory_ptr",
																							"typeString": "struct Position.Info memory"
																						}
																					},
																					"id": 2697,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "liquidity",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2591,
																					"src": "2898:15:23",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint128",
																						"typeString": "uint128"
																					}
																				},
																				{
																					"expression": {
																						"id": 2698,
																						"name": "FixedPoint128",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2218,
																						"src": "2915:13:23",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_FixedPoint128_$2218_$",
																							"typeString": "type(library FixedPoint128)"
																						}
																					},
																					"id": 2699,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "Q128",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2217,
																					"src": "2915:18:23",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint128",
																						"typeString": "uint128"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"id": 2690,
																					"name": "FullMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2401,
																					"src": "2806:8:23",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_FullMath_$2401_$",
																						"typeString": "type(library FullMath)"
																					}
																				},
																				"id": 2691,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "mulDiv",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2357,
																				"src": "2806:15:23",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																					"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																				}
																			},
																			"id": 2700,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2806:145:23",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 2689,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2781:7:23",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint128_$",
																			"typeString": "type(uint128)"
																		},
																		"typeName": {
																			"id": 2688,
																			"name": "uint128",
																			"nodeType": "ElementaryTypeName",
																			"src": "2781:7:23",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2701,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2781:184:23",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"src": "2767:198:23",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"id": 2703,
															"nodeType": "ExpressionStatement",
															"src": "2767:198:23"
														},
														{
															"expression": {
																"id": 2719,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2704,
																	"name": "tokensOwed1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2683,
																	"src": "2979:11:23",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2712,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 2709,
																						"name": "feeGrowthInside1X128",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2639,
																						"src": "3055:20:23",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "-",
																					"rightExpression": {
																						"expression": {
																							"id": 2710,
																							"name": "_self",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2645,
																							"src": "3078:5:23",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_Info_$2600_memory_ptr",
																								"typeString": "struct Position.Info memory"
																							}
																						},
																						"id": 2711,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "feeGrowthInside1LastX128",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2595,
																						"src": "3078:30:23",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "3055:53:23",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"expression": {
																						"id": 2713,
																						"name": "_self",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2645,
																						"src": "3110:5:23",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Info_$2600_memory_ptr",
																							"typeString": "struct Position.Info memory"
																						}
																					},
																					"id": 2714,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "liquidity",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2591,
																					"src": "3110:15:23",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint128",
																						"typeString": "uint128"
																					}
																				},
																				{
																					"expression": {
																						"id": 2715,
																						"name": "FixedPoint128",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2218,
																						"src": "3127:13:23",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_FixedPoint128_$2218_$",
																							"typeString": "type(library FixedPoint128)"
																						}
																					},
																					"id": 2716,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "Q128",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2217,
																					"src": "3127:18:23",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint128",
																						"typeString": "uint128"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"id": 2707,
																					"name": "FullMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2401,
																					"src": "3018:8:23",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_FullMath_$2401_$",
																						"typeString": "type(library FullMath)"
																					}
																				},
																				"id": 2708,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "mulDiv",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2357,
																				"src": "3018:15:23",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																					"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																				}
																			},
																			"id": 2717,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "3018:145:23",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 2706,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2993:7:23",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint128_$",
																			"typeString": "type(uint128)"
																		},
																		"typeName": {
																			"id": 2705,
																			"name": "uint128",
																			"nodeType": "ElementaryTypeName",
																			"src": "2993:7:23",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2718,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2993:184:23",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"src": "2979:198:23",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"id": 2720,
															"nodeType": "ExpressionStatement",
															"src": "2979:198:23"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													},
													"id": 2725,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2723,
														"name": "liquidityDelta",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2635,
														"src": "3233:14:23",
														"typeDescriptions": {
															"typeIdentifier": "t_int128",
															"typeString": "int128"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2724,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3251:1:23",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3233:19:23",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2732,
												"nodeType": "IfStatement",
												"src": "3229:55:23",
												"trueBody": {
													"expression": {
														"id": 2730,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"expression": {
																"id": 2726,
																"name": "self",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2633,
																"src": "3254:4:23",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Info_$2600_storage_ptr",
																	"typeString": "struct Position.Info storage pointer"
																}
															},
															"id": 2728,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"memberName": "liquidity",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2591,
															"src": "3254:14:23",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"id": 2729,
															"name": "liquidityNext",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2649,
															"src": "3271:13:23",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														"src": "3254:30:23",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"id": 2731,
													"nodeType": "ExpressionStatement",
													"src": "3254:30:23"
												}
											},
											{
												"expression": {
													"id": 2737,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 2733,
															"name": "self",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2633,
															"src": "3294:4:23",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$2600_storage_ptr",
																"typeString": "struct Position.Info storage pointer"
															}
														},
														"id": 2735,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "feeGrowthInside0LastX128",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2593,
														"src": "3294:29:23",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2736,
														"name": "feeGrowthInside0X128",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2637,
														"src": "3326:20:23",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3294:52:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2738,
												"nodeType": "ExpressionStatement",
												"src": "3294:52:23"
											},
											{
												"expression": {
													"id": 2743,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 2739,
															"name": "self",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2633,
															"src": "3356:4:23",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$2600_storage_ptr",
																"typeString": "struct Position.Info storage pointer"
															}
														},
														"id": 2741,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "feeGrowthInside1LastX128",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2595,
														"src": "3356:29:23",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2742,
														"name": "feeGrowthInside1X128",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2639,
														"src": "3388:20:23",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3356:52:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2744,
												"nodeType": "ExpressionStatement",
												"src": "3356:52:23"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2751,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														},
														"id": 2747,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2745,
															"name": "tokensOwed0",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2680,
															"src": "3422:11:23",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 2746,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3436:1:23",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "3422:15:23",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														},
														"id": 2750,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2748,
															"name": "tokensOwed1",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2683,
															"src": "3441:11:23",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 2749,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3455:1:23",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "3441:15:23",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3422:34:23",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2765,
												"nodeType": "IfStatement",
												"src": "3418:235:23",
												"trueBody": {
													"id": 2764,
													"nodeType": "Block",
													"src": "3458:195:23",
													"statements": [
														{
															"expression": {
																"id": 2756,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 2752,
																		"name": "self",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2633,
																		"src": "3566:4:23",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Info_$2600_storage_ptr",
																			"typeString": "struct Position.Info storage pointer"
																		}
																	},
																	"id": 2754,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "tokensOwed0",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2597,
																	"src": "3566:16:23",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 2755,
																	"name": "tokensOwed0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2680,
																	"src": "3586:11:23",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"src": "3566:31:23",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"id": 2757,
															"nodeType": "ExpressionStatement",
															"src": "3566:31:23"
														},
														{
															"expression": {
																"id": 2762,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 2758,
																		"name": "self",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2633,
																		"src": "3611:4:23",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Info_$2600_storage_ptr",
																			"typeString": "struct Position.Info storage pointer"
																		}
																	},
																	"id": 2760,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "tokensOwed1",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2599,
																	"src": "3611:16:23",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 2761,
																	"name": "tokensOwed1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2683,
																	"src": "3631:11:23",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"src": "3611:31:23",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"id": 2763,
															"nodeType": "ExpressionStatement",
															"src": "3611:31:23"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2631,
										"nodeType": "StructuredDocumentation",
										"src": "1541:547:23",
										"text": "@notice Credits accumulated fees to a user's position\n @param self The individual position to update\n @param liquidityDelta The change in pool liquidity as a result of the position update\n @param feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries\n @param feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries\n @param staked Signifies if the position is staked in the gauge or not"
									},
									"id": 2767,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "update",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2642,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2633,
												"mutability": "mutable",
												"name": "self",
												"nodeType": "VariableDeclaration",
												"scope": 2767,
												"src": "2118:17:23",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Info_$2600_storage_ptr",
													"typeString": "struct Position.Info"
												},
												"typeName": {
													"id": 2632,
													"name": "Info",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2600,
													"src": "2118:4:23",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Info_$2600_storage_ptr",
														"typeString": "struct Position.Info"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2635,
												"mutability": "mutable",
												"name": "liquidityDelta",
												"nodeType": "VariableDeclaration",
												"scope": 2767,
												"src": "2145:21:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 2634,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "2145:6:23",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2637,
												"mutability": "mutable",
												"name": "feeGrowthInside0X128",
												"nodeType": "VariableDeclaration",
												"scope": 2767,
												"src": "2176:28:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2636,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2176:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2639,
												"mutability": "mutable",
												"name": "feeGrowthInside1X128",
												"nodeType": "VariableDeclaration",
												"scope": 2767,
												"src": "2214:28:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2638,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2214:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2641,
												"mutability": "mutable",
												"name": "staked",
												"nodeType": "VariableDeclaration",
												"scope": 2767,
												"src": "2252:11:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2640,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2252:4:23",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2108:161:23"
									},
									"returnParameters": {
										"id": 2643,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2279:0:23"
									},
									"scope": 2768,
									"src": "2093:1566:23",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2769,
							"src": "365:3296:23"
						}
					],
					"src": "45:3617:23"
				},
				"id": 23
			},
			"contracts/core/libraries/SafeCast.sol": {
				"ast": {
					"absolutePath": "contracts/core/libraries/SafeCast.sol",
					"exportedSymbols": {
						"SafeCast": [
							2838
						]
					},
					"id": 2839,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2770,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:24"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2771,
								"nodeType": "StructuredDocumentation",
								"src": "71:94:24",
								"text": "@title Safe casting methods\n @notice Contains methods for safely casting between types"
							},
							"fullyImplemented": true,
							"id": 2838,
							"linearizedBaseContracts": [
								2838
							],
							"name": "SafeCast",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2791,
										"nodeType": "Block",
										"src": "421:47:24",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2788,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"id": 2785,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2780,
																			"name": "z",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2777,
																			"src": "440:1:24",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"arguments": [
																				{
																					"id": 2783,
																					"name": "y",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2774,
																					"src": "452:1:24",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 2782,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "444:7:24",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint160_$",
																					"typeString": "type(uint160)"
																				},
																				"typeName": {
																					"id": 2781,
																					"name": "uint160",
																					"nodeType": "ElementaryTypeName",
																					"src": "444:7:24",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 2784,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "444:10:24",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"src": "440:14:24",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	}
																],
																"id": 2786,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "439:16:24",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 2787,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2774,
																"src": "459:1:24",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "439:21:24",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2779,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "431:7:24",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 2789,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "431:30:24",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2790,
												"nodeType": "ExpressionStatement",
												"src": "431:30:24"
											}
										]
									},
									"documentation": {
										"id": 2772,
										"nodeType": "StructuredDocumentation",
										"src": "188:164:24",
										"text": "@notice Cast a uint256 to a uint160, revert on overflow\n @param y The uint256 to be downcasted\n @return z The downcasted integer, now type uint160"
									},
									"id": 2792,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toUint160",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2775,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2774,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 2792,
												"src": "376:9:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2773,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "376:7:24",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "375:11:24"
									},
									"returnParameters": {
										"id": 2778,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2777,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 2792,
												"src": "410:9:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 2776,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "410:7:24",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "409:11:24"
									},
									"scope": 2838,
									"src": "357:111:24",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2812,
										"nodeType": "Block",
										"src": "713:46:24",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															"id": 2809,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"id": 2806,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2801,
																			"name": "z",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2798,
																			"src": "732:1:24",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int128",
																				"typeString": "int128"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"arguments": [
																				{
																					"id": 2804,
																					"name": "y",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2795,
																					"src": "743:1:24",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				],
																				"id": 2803,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "736:6:24",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_int128_$",
																					"typeString": "type(int128)"
																				},
																				"typeName": {
																					"id": 2802,
																					"name": "int128",
																					"nodeType": "ElementaryTypeName",
																					"src": "736:6:24",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 2805,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "736:9:24",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_int128",
																				"typeString": "int128"
																			}
																		},
																		"src": "732:13:24",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int128",
																			"typeString": "int128"
																		}
																	}
																],
																"id": 2807,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "731:15:24",
																"typeDescriptions": {
																	"typeIdentifier": "t_int128",
																	"typeString": "int128"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 2808,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2795,
																"src": "750:1:24",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"src": "731:20:24",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2800,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "723:7:24",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 2810,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "723:29:24",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2811,
												"nodeType": "ExpressionStatement",
												"src": "723:29:24"
											}
										]
									},
									"documentation": {
										"id": 2793,
										"nodeType": "StructuredDocumentation",
										"src": "474:173:24",
										"text": "@notice Cast a int256 to a int128, revert on overflow or underflow\n @param y The int256 to be downcasted\n @return z The downcasted integer, now type int128"
									},
									"id": 2813,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toInt128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2796,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2795,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 2813,
												"src": "670:8:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2794,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "670:6:24",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "669:10:24"
									},
									"returnParameters": {
										"id": 2799,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2798,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 2813,
												"src": "703:8:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 2797,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "703:6:24",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "702:10:24"
									},
									"scope": 2838,
									"src": "652:107:24",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2836,
										"nodeType": "Block",
										"src": "986:61:24",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2826,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2822,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2816,
																"src": "1004:1:24",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819968_by_1",
																	"typeString": "int_const 5789...(69 digits omitted)...9968"
																},
																"id": 2825,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2823,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1008:1:24",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "323535",
																	"id": 2824,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1013:3:24",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_255_by_1",
																		"typeString": "int_const 255"
																	},
																	"value": "255"
																},
																"src": "1008:8:24",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819968_by_1",
																	"typeString": "int_const 5789...(69 digits omitted)...9968"
																}
															},
															"src": "1004:12:24",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2821,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "996:7:24",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 2827,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "996:21:24",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2828,
												"nodeType": "ExpressionStatement",
												"src": "996:21:24"
											},
											{
												"expression": {
													"id": 2834,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2829,
														"name": "z",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2819,
														"src": "1027:1:24",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2832,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2816,
																"src": "1038:1:24",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 2831,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1031:6:24",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_int256_$",
																"typeString": "type(int256)"
															},
															"typeName": {
																"id": 2830,
																"name": "int256",
																"nodeType": "ElementaryTypeName",
																"src": "1031:6:24",
																"typeDescriptions": {}
															}
														},
														"id": 2833,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1031:9:24",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "1027:13:24",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"id": 2835,
												"nodeType": "ExpressionStatement",
												"src": "1027:13:24"
											}
										]
									},
									"documentation": {
										"id": 2814,
										"nodeType": "StructuredDocumentation",
										"src": "765:154:24",
										"text": "@notice Cast a uint256 to a int256, revert on overflow\n @param y The uint256 to be casted\n @return z The casted integer, now type int256"
									},
									"id": 2837,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toInt256",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2817,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2816,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 2837,
												"src": "942:9:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2815,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "942:7:24",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "941:11:24"
									},
									"returnParameters": {
										"id": 2820,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2819,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 2837,
												"src": "976:8:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2818,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "976:6:24",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "975:10:24"
									},
									"scope": 2838,
									"src": "924:123:24",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2839,
							"src": "165:884:24"
						}
					],
					"src": "45:1005:24"
				},
				"id": 24
			},
			"contracts/core/libraries/SqrtPriceMath.sol": {
				"ast": {
					"absolutePath": "contracts/core/libraries/SqrtPriceMath.sol",
					"exportedSymbols": {
						"FixedPoint96": [
							2228
						],
						"FullMath": [
							2401
						],
						"LowGasSafeMath": [
							2583
						],
						"SafeCast": [
							2838
						],
						"SqrtPriceMath": [
							3355
						],
						"UnsafeMath": [
							4832
						]
					},
					"id": 3356,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2840,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:25"
						},
						{
							"absolutePath": "contracts/core/libraries/LowGasSafeMath.sol",
							"file": "./LowGasSafeMath.sol",
							"id": 2841,
							"nodeType": "ImportDirective",
							"scope": 3356,
							"sourceUnit": 2584,
							"src": "71:30:25",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/SafeCast.sol",
							"file": "./SafeCast.sol",
							"id": 2842,
							"nodeType": "ImportDirective",
							"scope": 3356,
							"sourceUnit": 2839,
							"src": "102:24:25",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/FullMath.sol",
							"file": "./FullMath.sol",
							"id": 2843,
							"nodeType": "ImportDirective",
							"scope": 3356,
							"sourceUnit": 2402,
							"src": "128:24:25",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/UnsafeMath.sol",
							"file": "./UnsafeMath.sol",
							"id": 2844,
							"nodeType": "ImportDirective",
							"scope": 3356,
							"sourceUnit": 4833,
							"src": "153:26:25",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/FixedPoint96.sol",
							"file": "./FixedPoint96.sol",
							"id": 2845,
							"nodeType": "ImportDirective",
							"scope": 3356,
							"sourceUnit": 2229,
							"src": "180:28:25",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2846,
								"nodeType": "StructuredDocumentation",
								"src": "210:167:25",
								"text": "@title Functions based on Q64.96 sqrt price and liquidity\n @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas"
							},
							"fullyImplemented": true,
							"id": 3355,
							"linearizedBaseContracts": [
								3355
							],
							"name": "SqrtPriceMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 2849,
									"libraryName": {
										"id": 2847,
										"name": "LowGasSafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2583,
										"src": "411:14:25",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_LowGasSafeMath_$2583",
											"typeString": "library LowGasSafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "405:33:25",
									"typeName": {
										"id": 2848,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "430:7:25",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"id": 2852,
									"libraryName": {
										"id": 2850,
										"name": "SafeCast",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2838,
										"src": "449:8:25",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeCast_$2838",
											"typeString": "library SafeCast"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "443:27:25",
									"typeName": {
										"id": 2851,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "462:7:25",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"body": {
										"id": 2972,
										"nodeType": "Block",
										"src": "1583:1206:25",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2868,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2866,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2859,
														"src": "1709:6:25",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2867,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1719:1:25",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1709:11:25",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2871,
												"nodeType": "IfStatement",
												"src": "1705:32:25",
												"trueBody": {
													"expression": {
														"id": 2869,
														"name": "sqrtPX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2855,
														"src": "1729:8:25",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"functionReturnParameters": 2865,
													"id": 2870,
													"nodeType": "Return",
													"src": "1722:15:25"
												}
											},
											{
												"assignments": [
													2873
												],
												"declarations": [
													{
														"constant": false,
														"id": 2873,
														"mutability": "mutable",
														"name": "numerator1",
														"nodeType": "VariableDeclaration",
														"scope": 2972,
														"src": "1747:18:25",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2872,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1747:7:25",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2881,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2880,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 2876,
																"name": "liquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2857,
																"src": "1776:9:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															],
															"id": 2875,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1768:7:25",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 2874,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1768:7:25",
																"typeDescriptions": {}
															}
														},
														"id": 2877,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1768:18:25",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"expression": {
															"id": 2878,
															"name": "FixedPoint96",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2228,
															"src": "1790:12:25",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_FixedPoint96_$2228_$",
																"typeString": "type(library FixedPoint96)"
															}
														},
														"id": 2879,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "RESOLUTION",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2224,
														"src": "1790:23:25",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "1768:45:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1747:66:25"
											},
											{
												"condition": {
													"id": 2882,
													"name": "add",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2861,
													"src": "1828:3:25",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2970,
													"nodeType": "Block",
													"src": "2339:444:25",
													"statements": [
														{
															"assignments": [
																2936
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2936,
																	"mutability": "mutable",
																	"name": "product",
																	"nodeType": "VariableDeclaration",
																	"scope": 2970,
																	"src": "2353:15:25",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 2935,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2353:7:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2937,
															"nodeType": "VariableDeclarationStatement",
															"src": "2353:15:25"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 2952,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2948,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2946,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"components": [
																						{
																							"id": 2943,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftHandSide": {
																								"id": 2939,
																								"name": "product",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2936,
																								"src": "2549:7:25",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "Assignment",
																							"operator": "=",
																							"rightHandSide": {
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 2942,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 2940,
																									"name": "amount",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2859,
																									"src": "2559:6:25",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"id": 2941,
																									"name": "sqrtPX96",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2855,
																									"src": "2568:8:25",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint160",
																										"typeString": "uint160"
																									}
																								},
																								"src": "2559:17:25",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "2549:27:25",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 2944,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "2548:29:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2945,
																					"name": "amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2859,
																					"src": "2580:6:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "2548:38:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"id": 2947,
																				"name": "sqrtPX96",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2855,
																				"src": "2590:8:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"src": "2548:50:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2951,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2949,
																				"name": "numerator1",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2873,
																				"src": "2602:10:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">",
																			"rightExpression": {
																				"id": 2950,
																				"name": "product",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2936,
																				"src": "2615:7:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "2602:20:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "2548:74:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 2938,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "2540:7:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																		"typeString": "function (bool) pure"
																	}
																},
																"id": 2953,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2540:83:25",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2954,
															"nodeType": "ExpressionStatement",
															"src": "2540:83:25"
														},
														{
															"assignments": [
																2956
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2956,
																	"mutability": "mutable",
																	"name": "denominator",
																	"nodeType": "VariableDeclaration",
																	"scope": 2970,
																	"src": "2637:19:25",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 2955,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2637:7:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2960,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2959,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2957,
																	"name": "numerator1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2873,
																	"src": "2659:10:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 2958,
																	"name": "product",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2936,
																	"src": "2672:7:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2659:20:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "2637:42:25"
														},
														{
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"arguments": [
																			{
																				"id": 2963,
																				"name": "numerator1",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2873,
																				"src": "2726:10:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"id": 2964,
																				"name": "sqrtPX96",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2855,
																				"src": "2738:8:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			{
																				"id": 2965,
																				"name": "denominator",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2956,
																				"src": "2748:11:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 2961,
																				"name": "FullMath",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2401,
																				"src": "2700:8:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_FullMath_$2401_$",
																					"typeString": "type(library FullMath)"
																				}
																			},
																			"id": 2962,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "mulDivRoundingUp",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 2400,
																			"src": "2700:25:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																			}
																		},
																		"id": 2966,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2700:60:25",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2967,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "toUint160",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2792,
																	"src": "2700:70:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint160_$bound_to$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (uint160)"
																	}
																},
																"id": 2968,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2700:72:25",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"functionReturnParameters": 2865,
															"id": 2969,
															"nodeType": "Return",
															"src": "2693:79:25"
														}
													]
												},
												"id": 2971,
												"nodeType": "IfStatement",
												"src": "1824:959:25",
												"trueBody": {
													"id": 2934,
													"nodeType": "Block",
													"src": "1833:500:25",
													"statements": [
														{
															"assignments": [
																2884
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2884,
																	"mutability": "mutable",
																	"name": "product",
																	"nodeType": "VariableDeclaration",
																	"scope": 2934,
																	"src": "1847:15:25",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 2883,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1847:7:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2885,
															"nodeType": "VariableDeclarationStatement",
															"src": "1847:15:25"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2895,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2893,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"id": 2890,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"id": 2886,
																					"name": "product",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2884,
																					"src": "1881:7:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "=",
																				"rightHandSide": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2889,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 2887,
																						"name": "amount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2859,
																						"src": "1891:6:25",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 2888,
																						"name": "sqrtPX96",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2855,
																						"src": "1900:8:25",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint160",
																							"typeString": "uint160"
																						}
																					},
																					"src": "1891:17:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "1881:27:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 2891,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "1880:29:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2892,
																		"name": "amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2859,
																		"src": "1912:6:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1880:38:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 2894,
																	"name": "sqrtPX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2855,
																	"src": "1922:8:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "1880:50:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2918,
															"nodeType": "IfStatement",
															"src": "1876:343:25",
															"trueBody": {
																"id": 2917,
																"nodeType": "Block",
																"src": "1932:287:25",
																"statements": [
																	{
																		"assignments": [
																			2897
																		],
																		"declarations": [
																			{
																				"constant": false,
																				"id": 2897,
																				"mutability": "mutable",
																				"name": "denominator",
																				"nodeType": "VariableDeclaration",
																				"scope": 2917,
																				"src": "1950:19:25",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"typeName": {
																					"id": 2896,
																					"name": "uint256",
																					"nodeType": "ElementaryTypeName",
																					"src": "1950:7:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"id": 2901,
																		"initialValue": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2900,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2898,
																				"name": "numerator1",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2873,
																				"src": "1972:10:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"id": 2899,
																				"name": "product",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2884,
																				"src": "1985:7:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "1972:20:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "VariableDeclarationStatement",
																		"src": "1950:42:25"
																	},
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2904,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2902,
																				"name": "denominator",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2897,
																				"src": "2014:11:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">=",
																			"rightExpression": {
																				"id": 2903,
																				"name": "numerator1",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2873,
																				"src": "2029:10:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "2014:25:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"id": 2916,
																		"nodeType": "IfStatement",
																		"src": "2010:195:25",
																		"trueBody": {
																			"id": 2915,
																			"nodeType": "Block",
																			"src": "2041:164:25",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"id": 2909,
																										"name": "numerator1",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 2873,
																										"src": "2151:10:25",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									{
																										"id": 2910,
																										"name": "sqrtPX96",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 2855,
																										"src": "2163:8:25",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint160",
																											"typeString": "uint160"
																										}
																									},
																									{
																										"id": 2911,
																										"name": "denominator",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 2897,
																										"src": "2173:11:25",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										},
																										{
																											"typeIdentifier": "t_uint160",
																											"typeString": "uint160"
																										},
																										{
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									],
																									"expression": {
																										"id": 2907,
																										"name": "FullMath",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 2401,
																										"src": "2125:8:25",
																										"typeDescriptions": {
																											"typeIdentifier": "t_type$_t_contract$_FullMath_$2401_$",
																											"typeString": "type(library FullMath)"
																										}
																									},
																									"id": 2908,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"memberName": "mulDivRoundingUp",
																									"nodeType": "MemberAccess",
																									"referencedDeclaration": 2400,
																									"src": "2125:25:25",
																									"typeDescriptions": {
																										"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																										"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																									}
																								},
																								"id": 2912,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "functionCall",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "2125:60:25",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							],
																							"id": 2906,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "2117:7:25",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_uint160_$",
																								"typeString": "type(uint160)"
																							},
																							"typeName": {
																								"id": 2905,
																								"name": "uint160",
																								"nodeType": "ElementaryTypeName",
																								"src": "2117:7:25",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 2913,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "2117:69:25",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint160",
																							"typeString": "uint160"
																						}
																					},
																					"functionReturnParameters": 2865,
																					"id": 2914,
																					"nodeType": "Return",
																					"src": "2110:76:25"
																				}
																			]
																		}
																	}
																]
															}
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 2923,
																				"name": "numerator1",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2873,
																				"src": "2273:10:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"arguments": [
																					{
																						"id": 2929,
																						"name": "amount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2859,
																						"src": "2313:6:25",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					],
																					"expression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 2926,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 2924,
																									"name": "numerator1",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2873,
																									"src": "2286:10:25",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "/",
																								"rightExpression": {
																									"id": 2925,
																									"name": "sqrtPX96",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2855,
																									"src": "2299:8:25",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint160",
																										"typeString": "uint160"
																									}
																								},
																								"src": "2286:21:25",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 2927,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "2285:23:25",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"id": 2928,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "add",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2478,
																					"src": "2285:27:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																						"typeString": "function (uint256,uint256) pure returns (uint256)"
																					}
																				},
																				"id": 2930,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "2285:35:25",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 2921,
																				"name": "UnsafeMath",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4832,
																				"src": "2248:10:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_UnsafeMath_$4832_$",
																					"typeString": "type(library UnsafeMath)"
																				}
																			},
																			"id": 2922,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "divRoundingUp",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 4831,
																			"src": "2248:24:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256,uint256) pure returns (uint256)"
																			}
																		},
																		"id": 2931,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2248:73:25",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 2920,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2240:7:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint160_$",
																		"typeString": "type(uint160)"
																	},
																	"typeName": {
																		"id": 2919,
																		"name": "uint160",
																		"nodeType": "ElementaryTypeName",
																		"src": "2240:7:25",
																		"typeDescriptions": {}
																	}
																},
																"id": 2932,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2240:82:25",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"functionReturnParameters": 2865,
															"id": 2933,
															"nodeType": "Return",
															"src": "2233:89:25"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2853,
										"nodeType": "StructuredDocumentation",
										"src": "476:932:25",
										"text": "@notice Gets the next sqrt price given a delta of token0\n @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\n far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\n price less in order to not send too much output.\n The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\n if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\n @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\n @param liquidity The amount of usable liquidity\n @param amount How much of token0 to add or remove from virtual reserves\n @param add Whether to add or remove the amount of token0\n @return The price after adding or removing amount, depending on add"
									},
									"id": 2973,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getNextSqrtPriceFromAmount0RoundingUp",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2862,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2855,
												"mutability": "mutable",
												"name": "sqrtPX96",
												"nodeType": "VariableDeclaration",
												"scope": 2973,
												"src": "1460:16:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 2854,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1460:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2857,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 2973,
												"src": "1478:17:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2856,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1478:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2859,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 2973,
												"src": "1497:14:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2858,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1497:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2861,
												"mutability": "mutable",
												"name": "add",
												"nodeType": "VariableDeclaration",
												"scope": 2973,
												"src": "1513:8:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2860,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1513:4:25",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1459:63:25"
									},
									"returnParameters": {
										"id": 2865,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2864,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2973,
												"src": "1570:7:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 2863,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1570:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1569:9:25"
									},
									"scope": 3355,
									"src": "1413:1376:25",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3067,
										"nodeType": "Block",
										"src": "3787:907:25",
										"statements": [
											{
												"condition": {
													"id": 2987,
													"name": "add",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2982,
													"src": "3955:3:25",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 3065,
													"nodeType": "Block",
													"src": "4279:409:25",
													"statements": [
														{
															"assignments": [
																3026
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 3026,
																	"mutability": "mutable",
																	"name": "quotient",
																	"nodeType": "VariableDeclaration",
																	"scope": 3065,
																	"src": "4293:16:25",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 3025,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "4293:7:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 3051,
															"initialValue": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3033,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3027,
																				"name": "amount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2980,
																				"src": "4330:6:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<=",
																			"rightExpression": {
																				"expression": {
																					"arguments": [
																						{
																							"id": 3030,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "4345:7:25",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_uint160_$",
																								"typeString": "type(uint160)"
																							},
																							"typeName": {
																								"id": 3029,
																								"name": "uint160",
																								"nodeType": "ElementaryTypeName",
																								"src": "4345:7:25",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_type$_t_uint160_$",
																								"typeString": "type(uint160)"
																							}
																						],
																						"id": 3028,
																						"name": "type",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967269,
																						"src": "4340:4:25",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																							"typeString": "function () pure"
																						}
																					},
																					"id": 3031,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "4340:13:25",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_meta_type_t_uint160",
																						"typeString": "type(uint160)"
																					}
																				},
																				"id": 3032,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "max",
																				"nodeType": "MemberAccess",
																				"src": "4340:17:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"src": "4330:27:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"arguments": [
																				{
																					"id": 3044,
																					"name": "amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2980,
																					"src": "4499:6:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"expression": {
																						"id": 3045,
																						"name": "FixedPoint96",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2228,
																						"src": "4507:12:25",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_FixedPoint96_$2228_$",
																							"typeString": "type(library FixedPoint96)"
																						}
																					},
																					"id": 3046,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "Q96",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2227,
																					"src": "4507:16:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 3047,
																					"name": "liquidity",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2978,
																					"src": "4525:9:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint128",
																						"typeString": "uint128"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint128",
																						"typeString": "uint128"
																					}
																				],
																				"expression": {
																					"id": 3042,
																					"name": "FullMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2401,
																					"src": "4473:8:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_FullMath_$2401_$",
																						"typeString": "type(library FullMath)"
																					}
																				},
																				"id": 3043,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "mulDivRoundingUp",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2400,
																				"src": "4473:25:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																					"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																				}
																			},
																			"id": 3048,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "4473:62:25",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 3049,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "4330:205:25",
																		"trueExpression": {
																			"arguments": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3039,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 3036,
																						"name": "amount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2980,
																						"src": "4405:6:25",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"expression": {
																							"id": 3037,
																							"name": "FixedPoint96",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2228,
																							"src": "4415:12:25",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_contract$_FixedPoint96_$2228_$",
																								"typeString": "type(library FixedPoint96)"
																							}
																						},
																						"id": 3038,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "RESOLUTION",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2224,
																						"src": "4415:23:25",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint8",
																							"typeString": "uint8"
																						}
																					},
																					"src": "4405:33:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 3040,
																					"name": "liquidity",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2978,
																					"src": "4440:9:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint128",
																						"typeString": "uint128"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint128",
																						"typeString": "uint128"
																					}
																				],
																				"expression": {
																					"id": 3034,
																					"name": "UnsafeMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4832,
																					"src": "4380:10:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_UnsafeMath_$4832_$",
																						"typeString": "type(library UnsafeMath)"
																					}
																				},
																				"id": 3035,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "divRoundingUp",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 4831,
																				"src": "4380:24:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																					"typeString": "function (uint256,uint256) pure returns (uint256)"
																				}
																			},
																			"id": 3041,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "4380:70:25",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 3050,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "4312:237:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "4293:256:25"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 3055,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 3053,
																			"name": "sqrtPX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2976,
																			"src": "4572:8:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">",
																		"rightExpression": {
																			"id": 3054,
																			"name": "quotient",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3026,
																			"src": "4583:8:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4572:19:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 3052,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "4564:7:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																		"typeString": "function (bool) pure"
																	}
																},
																"id": 3056,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4564:28:25",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 3057,
															"nodeType": "ExpressionStatement",
															"src": "4564:28:25"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 3062,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 3060,
																			"name": "sqrtPX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2976,
																			"src": "4657:8:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 3061,
																			"name": "quotient",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3026,
																			"src": "4668:8:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4657:19:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 3059,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4649:7:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint160_$",
																		"typeString": "type(uint160)"
																	},
																	"typeName": {
																		"id": 3058,
																		"name": "uint160",
																		"nodeType": "ElementaryTypeName",
																		"src": "4649:7:25",
																		"typeDescriptions": {}
																	}
																},
																"id": 3063,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4649:28:25",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"functionReturnParameters": 2986,
															"id": 3064,
															"nodeType": "Return",
															"src": "4642:35:25"
														}
													]
												},
												"id": 3066,
												"nodeType": "IfStatement",
												"src": "3951:737:25",
												"trueBody": {
													"id": 3024,
													"nodeType": "Block",
													"src": "3960:313:25",
													"statements": [
														{
															"assignments": [
																2989
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2989,
																	"mutability": "mutable",
																	"name": "quotient",
																	"nodeType": "VariableDeclaration",
																	"scope": 3024,
																	"src": "3974:16:25",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 2988,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "3974:7:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 3013,
															"initialValue": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2996,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2990,
																				"name": "amount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2980,
																				"src": "4011:6:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<=",
																			"rightExpression": {
																				"expression": {
																					"arguments": [
																						{
																							"id": 2993,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "4026:7:25",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_uint160_$",
																								"typeString": "type(uint160)"
																							},
																							"typeName": {
																								"id": 2992,
																								"name": "uint160",
																								"nodeType": "ElementaryTypeName",
																								"src": "4026:7:25",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_type$_t_uint160_$",
																								"typeString": "type(uint160)"
																							}
																						],
																						"id": 2991,
																						"name": "type",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967269,
																						"src": "4021:4:25",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																							"typeString": "function () pure"
																						}
																					},
																					"id": 2994,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "4021:13:25",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_meta_type_t_uint160",
																						"typeString": "type(uint160)"
																					}
																				},
																				"id": 2995,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "max",
																				"nodeType": "MemberAccess",
																				"src": "4021:17:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"src": "4011:27:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"arguments": [
																				{
																					"id": 3006,
																					"name": "amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2980,
																					"src": "4147:6:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"expression": {
																						"id": 3007,
																						"name": "FixedPoint96",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2228,
																						"src": "4155:12:25",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_FixedPoint96_$2228_$",
																							"typeString": "type(library FixedPoint96)"
																						}
																					},
																					"id": 3008,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "Q96",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2227,
																					"src": "4155:16:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 3009,
																					"name": "liquidity",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2978,
																					"src": "4173:9:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint128",
																						"typeString": "uint128"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint128",
																						"typeString": "uint128"
																					}
																				],
																				"expression": {
																					"id": 3004,
																					"name": "FullMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2401,
																					"src": "4131:8:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_FullMath_$2401_$",
																						"typeString": "type(library FullMath)"
																					}
																				},
																				"id": 3005,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "mulDiv",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2357,
																				"src": "4131:15:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																					"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																				}
																			},
																			"id": 3010,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "4131:52:25",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 3011,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "4011:172:25",
																		"trueExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3003,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 3000,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 2997,
																							"name": "amount",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2980,
																							"src": "4062:6:25",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "<<",
																						"rightExpression": {
																							"expression": {
																								"id": 2998,
																								"name": "FixedPoint96",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2228,
																								"src": "4072:12:25",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_contract$_FixedPoint96_$2228_$",
																									"typeString": "type(library FixedPoint96)"
																								}
																							},
																							"id": 2999,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "RESOLUTION",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 2224,
																							"src": "4072:23:25",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint8",
																								"typeString": "uint8"
																							}
																						},
																						"src": "4062:33:25",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 3001,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "4061:35:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "/",
																			"rightExpression": {
																				"id": 3002,
																				"name": "liquidity",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2978,
																				"src": "4099:9:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			},
																			"src": "4061:47:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 3012,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3993:204:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3974:223:25"
														},
														{
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"arguments": [
																			{
																				"id": 3019,
																				"name": "quotient",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2989,
																				"src": "4241:8:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"arguments": [
																					{
																						"id": 3016,
																						"name": "sqrtPX96",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2976,
																						"src": "4227:8:25",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint160",
																							"typeString": "uint160"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_uint160",
																							"typeString": "uint160"
																						}
																					],
																					"id": 3015,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "4219:7:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 3014,
																						"name": "uint256",
																						"nodeType": "ElementaryTypeName",
																						"src": "4219:7:25",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 3017,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "4219:17:25",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 3018,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "add",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 2478,
																			"src": "4219:21:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																				"typeString": "function (uint256,uint256) pure returns (uint256)"
																			}
																		},
																		"id": 3020,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4219:31:25",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3021,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "toUint160",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2792,
																	"src": "4219:41:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint160_$bound_to$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (uint160)"
																	}
																},
																"id": 3022,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4219:43:25",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"functionReturnParameters": 2986,
															"id": 3023,
															"nodeType": "Return",
															"src": "4212:50:25"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2974,
										"nodeType": "StructuredDocumentation",
										"src": "2795:815:25",
										"text": "@notice Gets the next sqrt price given a delta of token1\n @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\n far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\n price less in order to not send too much output.\n The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\n @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\n @param liquidity The amount of usable liquidity\n @param amount How much of token1 to add, or remove, from virtual reserves\n @param add Whether to add, or remove, the amount of token1\n @return The price after adding or removing `amount`"
									},
									"id": 3068,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getNextSqrtPriceFromAmount1RoundingDown",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2983,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2976,
												"mutability": "mutable",
												"name": "sqrtPX96",
												"nodeType": "VariableDeclaration",
												"scope": 3068,
												"src": "3664:16:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 2975,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "3664:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2978,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 3068,
												"src": "3682:17:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2977,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3682:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2980,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 3068,
												"src": "3701:14:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2979,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3701:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2982,
												"mutability": "mutable",
												"name": "add",
												"nodeType": "VariableDeclaration",
												"scope": 3068,
												"src": "3717:8:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2981,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3717:4:25",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3663:63:25"
									},
									"returnParameters": {
										"id": 2986,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2985,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 3068,
												"src": "3774:7:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 2984,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "3774:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3773:9:25"
									},
									"scope": 3355,
									"src": "3615:1079:25",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3109,
										"nodeType": "Block",
										"src": "5419:344:25",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															"id": 3085,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3083,
																"name": "sqrtPX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3071,
																"src": "5437:8:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3084,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5448:1:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "5437:12:25",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 3082,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5429:7:25",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 3086,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5429:21:25",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3087,
												"nodeType": "ExpressionStatement",
												"src": "5429:21:25"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															},
															"id": 3091,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3089,
																"name": "liquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3073,
																"src": "5468:9:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3090,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5480:1:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "5468:13:25",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 3088,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5460:7:25",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 3092,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5460:22:25",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3093,
												"nodeType": "ExpressionStatement",
												"src": "5460:22:25"
											},
											{
												"expression": {
													"condition": {
														"id": 3094,
														"name": "zeroForOne",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3077,
														"src": "5566:10:25",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"arguments": [
															{
																"id": 3102,
																"name": "sqrtPX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3071,
																"src": "5720:8:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															{
																"id": 3103,
																"name": "liquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3073,
																"src": "5730:9:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															{
																"id": 3104,
																"name": "amountIn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3075,
																"src": "5741:8:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "74727565",
																"id": 3105,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5751:4:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																{
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															],
															"id": 3101,
															"name": "getNextSqrtPriceFromAmount1RoundingDown",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3068,
															"src": "5680:39:25",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint128_$_t_uint256_$_t_bool_$returns$_t_uint160_$",
																"typeString": "function (uint160,uint128,uint256,bool) pure returns (uint160)"
															}
														},
														"id": 3106,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5680:76:25",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"id": 3107,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "5566:190:25",
													"trueExpression": {
														"arguments": [
															{
																"id": 3096,
																"name": "sqrtPX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3071,
																"src": "5629:8:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															{
																"id": 3097,
																"name": "liquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3073,
																"src": "5639:9:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															{
																"id": 3098,
																"name": "amountIn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3075,
																"src": "5650:8:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "74727565",
																"id": 3099,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5660:4:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																{
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															],
															"id": 3095,
															"name": "getNextSqrtPriceFromAmount0RoundingUp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2973,
															"src": "5591:37:25",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint128_$_t_uint256_$_t_bool_$returns$_t_uint160_$",
																"typeString": "function (uint160,uint128,uint256,bool) pure returns (uint160)"
															}
														},
														"id": 3100,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5591:74:25",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"functionReturnParameters": 3081,
												"id": 3108,
												"nodeType": "Return",
												"src": "5559:197:25"
											}
										]
									},
									"documentation": {
										"id": 3069,
										"nodeType": "StructuredDocumentation",
										"src": "4700:538:25",
										"text": "@notice Gets the next sqrt price given an input amount of token0 or token1\n @dev Throws if price or liquidity are 0, or if the next price is out of bounds\n @param sqrtPX96 The starting price, i.e., before accounting for the input amount\n @param liquidity The amount of usable liquidity\n @param amountIn How much of token0, or token1, is being swapped in\n @param zeroForOne Whether the amount in is token0 or token1\n @return sqrtQX96 The price after adding the input amount to token0 or token1"
									},
									"id": 3110,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getNextSqrtPriceFromInput",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3078,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3071,
												"mutability": "mutable",
												"name": "sqrtPX96",
												"nodeType": "VariableDeclaration",
												"scope": 3110,
												"src": "5278:16:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3070,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "5278:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3073,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 3110,
												"src": "5296:17:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 3072,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5296:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3075,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 3110,
												"src": "5315:16:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3074,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5315:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3077,
												"mutability": "mutable",
												"name": "zeroForOne",
												"nodeType": "VariableDeclaration",
												"scope": 3110,
												"src": "5333:15:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3076,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5333:4:25",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5277:72:25"
									},
									"returnParameters": {
										"id": 3081,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3080,
												"mutability": "mutable",
												"name": "sqrtQX96",
												"nodeType": "VariableDeclaration",
												"scope": 3110,
												"src": "5397:16:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3079,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "5397:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5396:18:25"
									},
									"scope": 3355,
									"src": "5243:520:25",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3151,
										"nodeType": "Block",
										"src": "6487:342:25",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															"id": 3127,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3125,
																"name": "sqrtPX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3113,
																"src": "6505:8:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3126,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6516:1:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "6505:12:25",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 3124,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6497:7:25",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 3128,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6497:21:25",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3129,
												"nodeType": "ExpressionStatement",
												"src": "6497:21:25"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															},
															"id": 3133,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3131,
																"name": "liquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3115,
																"src": "6536:9:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3132,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6548:1:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "6536:13:25",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 3130,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6528:7:25",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 3134,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6528:22:25",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3135,
												"nodeType": "ExpressionStatement",
												"src": "6528:22:25"
											},
											{
												"expression": {
													"condition": {
														"id": 3136,
														"name": "zeroForOne",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3119,
														"src": "6628:10:25",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"arguments": [
															{
																"id": 3144,
																"name": "sqrtPX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3113,
																"src": "6784:8:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															{
																"id": 3145,
																"name": "liquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3115,
																"src": "6794:9:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															{
																"id": 3146,
																"name": "amountOut",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3117,
																"src": "6805:9:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "66616c7365",
																"id": 3147,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6816:5:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																{
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															],
															"id": 3143,
															"name": "getNextSqrtPriceFromAmount0RoundingUp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2973,
															"src": "6746:37:25",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint128_$_t_uint256_$_t_bool_$returns$_t_uint160_$",
																"typeString": "function (uint160,uint128,uint256,bool) pure returns (uint160)"
															}
														},
														"id": 3148,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6746:76:25",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"id": 3149,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "6628:194:25",
													"trueExpression": {
														"arguments": [
															{
																"id": 3138,
																"name": "sqrtPX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3113,
																"src": "6693:8:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															{
																"id": 3139,
																"name": "liquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3115,
																"src": "6703:9:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															{
																"id": 3140,
																"name": "amountOut",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3117,
																"src": "6714:9:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "66616c7365",
																"id": 3141,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6725:5:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																{
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															],
															"id": 3137,
															"name": "getNextSqrtPriceFromAmount1RoundingDown",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3068,
															"src": "6653:39:25",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint128_$_t_uint256_$_t_bool_$returns$_t_uint160_$",
																"typeString": "function (uint160,uint128,uint256,bool) pure returns (uint160)"
															}
														},
														"id": 3142,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6653:78:25",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"functionReturnParameters": 3123,
												"id": 3150,
												"nodeType": "Return",
												"src": "6621:201:25"
											}
										]
									},
									"documentation": {
										"id": 3111,
										"nodeType": "StructuredDocumentation",
										"src": "5769:535:25",
										"text": "@notice Gets the next sqrt price given an output amount of token0 or token1\n @dev Throws if price or liquidity are 0 or the next price is out of bounds\n @param sqrtPX96 The starting price before accounting for the output amount\n @param liquidity The amount of usable liquidity\n @param amountOut How much of token0, or token1, is being swapped out\n @param zeroForOne Whether the amount out is token0 or token1\n @return sqrtQX96 The price after removing the output amount of token0 or token1"
									},
									"id": 3152,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getNextSqrtPriceFromOutput",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3120,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3113,
												"mutability": "mutable",
												"name": "sqrtPX96",
												"nodeType": "VariableDeclaration",
												"scope": 3152,
												"src": "6345:16:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3112,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "6345:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3115,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 3152,
												"src": "6363:17:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 3114,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "6363:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3117,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 3152,
												"src": "6382:17:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3116,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6382:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3119,
												"mutability": "mutable",
												"name": "zeroForOne",
												"nodeType": "VariableDeclaration",
												"scope": 3152,
												"src": "6401:15:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3118,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6401:4:25",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6344:73:25"
									},
									"returnParameters": {
										"id": 3123,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3122,
												"mutability": "mutable",
												"name": "sqrtQX96",
												"nodeType": "VariableDeclaration",
												"scope": 3152,
												"src": "6465:16:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3121,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "6465:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6464:18:25"
									},
									"scope": 3355,
									"src": "6309:520:25",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3221,
										"nodeType": "Block",
										"src": "7549:519:25",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 3168,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3166,
														"name": "sqrtRatioAX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3155,
														"src": "7563:13:25",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 3167,
														"name": "sqrtRatioBX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3157,
														"src": "7579:13:25",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "7563:29:25",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3177,
												"nodeType": "IfStatement",
												"src": "7559:98:25",
												"trueBody": {
													"expression": {
														"id": 3175,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"components": [
																{
																	"id": 3169,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3155,
																	"src": "7595:13:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																{
																	"id": 3170,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3157,
																	"src": "7610:13:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"id": 3171,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "TupleExpression",
															"src": "7594:30:25",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint160_$_t_uint160_$",
																"typeString": "tuple(uint160,uint160)"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"components": [
																{
																	"id": 3172,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3157,
																	"src": "7628:13:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																{
																	"id": 3173,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3155,
																	"src": "7643:13:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"id": 3174,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "7627:30:25",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint160_$_t_uint160_$",
																"typeString": "tuple(uint160,uint160)"
															}
														},
														"src": "7594:63:25",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 3176,
													"nodeType": "ExpressionStatement",
													"src": "7594:63:25"
												}
											},
											{
												"assignments": [
													3179
												],
												"declarations": [
													{
														"constant": false,
														"id": 3179,
														"mutability": "mutable",
														"name": "numerator1",
														"nodeType": "VariableDeclaration",
														"scope": 3221,
														"src": "7668:18:25",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3178,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7668:7:25",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3187,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3186,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 3182,
																"name": "liquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3159,
																"src": "7697:9:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															],
															"id": 3181,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7689:7:25",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 3180,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "7689:7:25",
																"typeDescriptions": {}
															}
														},
														"id": 3183,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7689:18:25",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"expression": {
															"id": 3184,
															"name": "FixedPoint96",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2228,
															"src": "7711:12:25",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_FixedPoint96_$2228_$",
																"typeString": "type(library FixedPoint96)"
															}
														},
														"id": 3185,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "RESOLUTION",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2224,
														"src": "7711:23:25",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "7689:45:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7668:66:25"
											},
											{
												"assignments": [
													3189
												],
												"declarations": [
													{
														"constant": false,
														"id": 3189,
														"mutability": "mutable",
														"name": "numerator2",
														"nodeType": "VariableDeclaration",
														"scope": 3221,
														"src": "7744:18:25",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3188,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7744:7:25",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3193,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 3192,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3190,
														"name": "sqrtRatioBX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3157,
														"src": "7765:13:25",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 3191,
														"name": "sqrtRatioAX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3155,
														"src": "7781:13:25",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "7765:29:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7744:50:25"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															"id": 3197,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3195,
																"name": "sqrtRatioAX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3155,
																"src": "7813:13:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3196,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7829:1:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "7813:17:25",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 3194,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7805:7:25",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 3198,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7805:26:25",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3199,
												"nodeType": "ExpressionStatement",
												"src": "7805:26:25"
											},
											{
												"expression": {
													"condition": {
														"id": 3200,
														"name": "roundUp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3161,
														"src": "7849:7:25",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 3218,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 3213,
																	"name": "numerator1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3179,
																	"src": "8007:10:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 3214,
																	"name": "numerator2",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3189,
																	"src": "8019:10:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 3215,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3157,
																	"src": "8031:13:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																],
																"expression": {
																	"id": 3211,
																	"name": "FullMath",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2401,
																	"src": "7991:8:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_FullMath_$2401_$",
																		"typeString": "type(library FullMath)"
																	}
																},
																"id": 3212,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "mulDiv",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2357,
																"src": "7991:15:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 3216,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7991:54:25",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"id": 3217,
															"name": "sqrtRatioAX96",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3155,
															"src": "8048:13:25",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"src": "7991:70:25",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 3219,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "7849:212:25",
													"trueExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 3205,
																		"name": "numerator1",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3179,
																		"src": "7922:10:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 3206,
																		"name": "numerator2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3189,
																		"src": "7934:10:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 3207,
																		"name": "sqrtRatioBX96",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3157,
																		"src": "7946:13:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	],
																	"expression": {
																		"id": 3203,
																		"name": "FullMath",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2401,
																		"src": "7896:8:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_FullMath_$2401_$",
																			"typeString": "type(library FullMath)"
																		}
																	},
																	"id": 3204,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "mulDivRoundingUp",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2400,
																	"src": "7896:25:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																	}
																},
																"id": 3208,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7896:64:25",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 3209,
																"name": "sqrtRatioAX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3155,
																"src": "7962:13:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															],
															"expression": {
																"id": 3201,
																"name": "UnsafeMath",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4832,
																"src": "7871:10:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_UnsafeMath_$4832_$",
																	"typeString": "type(library UnsafeMath)"
																}
															},
															"id": 3202,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "divRoundingUp",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 4831,
															"src": "7871:24:25",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 3210,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7871:105:25",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3165,
												"id": 3220,
												"nodeType": "Return",
												"src": "7842:219:25"
											}
										]
									},
									"documentation": {
										"id": 3153,
										"nodeType": "StructuredDocumentation",
										"src": "6835:537:25",
										"text": "@notice Gets the amount0 delta between two prices\n @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\n i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\n @param sqrtRatioAX96 A sqrt price\n @param sqrtRatioBX96 Another sqrt price\n @param liquidity The amount of usable liquidity\n @param roundUp Whether to round the amount up or down\n @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices"
									},
									"id": 3222,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAmount0Delta",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3155,
												"mutability": "mutable",
												"name": "sqrtRatioAX96",
												"nodeType": "VariableDeclaration",
												"scope": 3222,
												"src": "7402:21:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3154,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "7402:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3157,
												"mutability": "mutable",
												"name": "sqrtRatioBX96",
												"nodeType": "VariableDeclaration",
												"scope": 3222,
												"src": "7425:21:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3156,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "7425:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3159,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 3222,
												"src": "7448:17:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 3158,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "7448:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3161,
												"mutability": "mutable",
												"name": "roundUp",
												"nodeType": "VariableDeclaration",
												"scope": 3222,
												"src": "7467:12:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3160,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7467:4:25",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7401:79:25"
									},
									"returnParameters": {
										"id": 3165,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3164,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 3222,
												"src": "7528:15:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3163,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7528:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7527:17:25"
									},
									"scope": 3355,
									"src": "7377:691:25",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3269,
										"nodeType": "Block",
										"src": "8695:330:25",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 3238,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3236,
														"name": "sqrtRatioAX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3225,
														"src": "8709:13:25",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 3237,
														"name": "sqrtRatioBX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3227,
														"src": "8725:13:25",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "8709:29:25",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3247,
												"nodeType": "IfStatement",
												"src": "8705:98:25",
												"trueBody": {
													"expression": {
														"id": 3245,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"components": [
																{
																	"id": 3239,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3225,
																	"src": "8741:13:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																{
																	"id": 3240,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3227,
																	"src": "8756:13:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"id": 3241,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "TupleExpression",
															"src": "8740:30:25",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint160_$_t_uint160_$",
																"typeString": "tuple(uint160,uint160)"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"components": [
																{
																	"id": 3242,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3227,
																	"src": "8774:13:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																{
																	"id": 3243,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3225,
																	"src": "8789:13:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"id": 3244,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "8773:30:25",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint160_$_t_uint160_$",
																"typeString": "tuple(uint160,uint160)"
															}
														},
														"src": "8740:63:25",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 3246,
													"nodeType": "ExpressionStatement",
													"src": "8740:63:25"
												}
											},
											{
												"expression": {
													"condition": {
														"id": 3248,
														"name": "roundUp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3231,
														"src": "8821:7:25",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"arguments": [
															{
																"id": 3260,
																"name": "liquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3229,
																"src": "8959:9:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															{
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 3263,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3261,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3227,
																	"src": "8970:13:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 3262,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3225,
																	"src": "8986:13:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "8970:29:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															{
																"expression": {
																	"id": 3264,
																	"name": "FixedPoint96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2228,
																	"src": "9001:12:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_FixedPoint96_$2228_$",
																		"typeString": "type(library FixedPoint96)"
																	}
																},
																"id": 3265,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "Q96",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2227,
																"src": "9001:16:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																},
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 3258,
																"name": "FullMath",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2401,
																"src": "8943:8:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_FullMath_$2401_$",
																	"typeString": "type(library FullMath)"
																}
															},
															"id": 3259,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "mulDiv",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2357,
															"src": "8943:15:25",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 3266,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8943:75:25",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 3267,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "8821:197:25",
													"trueExpression": {
														"arguments": [
															{
																"id": 3251,
																"name": "liquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3229,
																"src": "8869:9:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															{
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 3254,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3252,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3227,
																	"src": "8880:13:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 3253,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3225,
																	"src": "8896:13:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "8880:29:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															{
																"expression": {
																	"id": 3255,
																	"name": "FixedPoint96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2228,
																	"src": "8911:12:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_FixedPoint96_$2228_$",
																		"typeString": "type(library FixedPoint96)"
																	}
																},
																"id": 3256,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "Q96",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2227,
																"src": "8911:16:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																},
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 3249,
																"name": "FullMath",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2401,
																"src": "8843:8:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_FullMath_$2401_$",
																	"typeString": "type(library FullMath)"
																}
															},
															"id": 3250,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "mulDivRoundingUp",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2400,
															"src": "8843:25:25",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 3257,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8843:85:25",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3235,
												"id": 3268,
												"nodeType": "Return",
												"src": "8814:204:25"
											}
										]
									},
									"documentation": {
										"id": 3223,
										"nodeType": "StructuredDocumentation",
										"src": "8074:444:25",
										"text": "@notice Gets the amount1 delta between two prices\n @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\n @param sqrtRatioAX96 A sqrt price\n @param sqrtRatioBX96 Another sqrt price\n @param liquidity The amount of usable liquidity\n @param roundUp Whether to round the amount up, or down\n @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices"
									},
									"id": 3270,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAmount1Delta",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3232,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3225,
												"mutability": "mutable",
												"name": "sqrtRatioAX96",
												"nodeType": "VariableDeclaration",
												"scope": 3270,
												"src": "8548:21:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3224,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "8548:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3227,
												"mutability": "mutable",
												"name": "sqrtRatioBX96",
												"nodeType": "VariableDeclaration",
												"scope": 3270,
												"src": "8571:21:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3226,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "8571:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3229,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 3270,
												"src": "8594:17:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 3228,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "8594:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3231,
												"mutability": "mutable",
												"name": "roundUp",
												"nodeType": "VariableDeclaration",
												"scope": 3270,
												"src": "8613:12:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3230,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8613:4:25",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8547:79:25"
									},
									"returnParameters": {
										"id": 3235,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3234,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 3270,
												"src": "8674:15:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3233,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8674:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8673:17:25"
									},
									"scope": 3355,
									"src": "8523:502:25",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3311,
										"nodeType": "Block",
										"src": "9525:234:25",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int128",
															"typeString": "int128"
														},
														"id": 3284,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3282,
															"name": "liquidity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3277,
															"src": "9542:9:25",
															"typeDescriptions": {
																"typeIdentifier": "t_int128",
																"typeString": "int128"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"hexValue": "30",
															"id": 3283,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9554:1:25",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "9542:13:25",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"arguments": [
																	{
																		"id": 3299,
																		"name": "sqrtRatioAX96",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3273,
																		"src": "9686:13:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	},
																	{
																		"id": 3300,
																		"name": "sqrtRatioBX96",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3275,
																		"src": "9701:13:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"id": 3303,
																				"name": "liquidity",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3277,
																				"src": "9724:9:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int128",
																					"typeString": "int128"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_int128",
																					"typeString": "int128"
																				}
																			],
																			"id": 3302,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "9716:7:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint128_$",
																				"typeString": "type(uint128)"
																			},
																			"typeName": {
																				"id": 3301,
																				"name": "uint128",
																				"nodeType": "ElementaryTypeName",
																				"src": "9716:7:25",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 3304,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9716:18:25",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		}
																	},
																	{
																		"hexValue": "74727565",
																		"id": 3305,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9736:4:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		},
																		{
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		},
																		{
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		},
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 3298,
																	"name": "getAmount0Delta",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		3222,
																		3312
																	],
																	"referencedDeclaration": 3222,
																	"src": "9670:15:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_bool_$returns$_t_uint256_$",
																		"typeString": "function (uint160,uint160,uint128,bool) pure returns (uint256)"
																	}
																},
																"id": 3306,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9670:71:25",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3307,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "toInt256",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2837,
															"src": "9670:80:25",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256) pure returns (int256)"
															}
														},
														"id": 3308,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9670:82:25",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 3309,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "9542:210:25",
													"trueExpression": {
														"id": 3297,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "-",
														"prefix": true,
														"src": "9570:85:25",
														"subExpression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"expression": {
																	"arguments": [
																		{
																			"id": 3286,
																			"name": "sqrtRatioAX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3273,
																			"src": "9587:13:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		{
																			"id": 3287,
																			"name": "sqrtRatioBX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3275,
																			"src": "9602:13:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		{
																			"arguments": [
																				{
																					"id": 3291,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "-",
																					"prefix": true,
																					"src": "9625:10:25",
																					"subExpression": {
																						"id": 3290,
																						"name": "liquidity",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3277,
																						"src": "9626:9:25",
																						"typeDescriptions": {
																							"typeIdentifier": "t_int128",
																							"typeString": "int128"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_int128",
																						"typeString": "int128"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_int128",
																						"typeString": "int128"
																					}
																				],
																				"id": 3289,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "9617:7:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint128_$",
																					"typeString": "type(uint128)"
																				},
																				"typeName": {
																					"id": 3288,
																					"name": "uint128",
																					"nodeType": "ElementaryTypeName",
																					"src": "9617:7:25",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 3292,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "9617:19:25",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		},
																		{
																			"hexValue": "66616c7365",
																			"id": 3293,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "bool",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9638:5:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"value": "false"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			{
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			},
																			{
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		],
																		"id": 3285,
																		"name": "getAmount0Delta",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			3222,
																			3312
																		],
																		"referencedDeclaration": 3222,
																		"src": "9571:15:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_bool_$returns$_t_uint256_$",
																			"typeString": "function (uint160,uint160,uint128,bool) pure returns (uint256)"
																		}
																	},
																	"id": 3294,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9571:73:25",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 3295,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "toInt256",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2837,
																"src": "9571:82:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (int256)"
																}
															},
															"id": 3296,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9571:84:25",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3281,
												"id": 3310,
												"nodeType": "Return",
												"src": "9535:217:25"
											}
										]
									},
									"documentation": {
										"id": 3271,
										"nodeType": "StructuredDocumentation",
										"src": "9031:333:25",
										"text": "@notice Helper that gets signed token0 delta\n @param sqrtRatioAX96 A sqrt price\n @param sqrtRatioBX96 Another sqrt price\n @param liquidity The change in liquidity for which to compute the amount0 delta\n @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices"
									},
									"id": 3312,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAmount0Delta",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3278,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3273,
												"mutability": "mutable",
												"name": "sqrtRatioAX96",
												"nodeType": "VariableDeclaration",
												"scope": 3312,
												"src": "9394:21:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3272,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "9394:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3275,
												"mutability": "mutable",
												"name": "sqrtRatioBX96",
												"nodeType": "VariableDeclaration",
												"scope": 3312,
												"src": "9417:21:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3274,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "9417:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3277,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 3312,
												"src": "9440:16:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 3276,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "9440:6:25",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9393:64:25"
									},
									"returnParameters": {
										"id": 3281,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3280,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 3312,
												"src": "9505:14:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3279,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "9505:6:25",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9504:16:25"
									},
									"scope": 3355,
									"src": "9369:390:25",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3353,
										"nodeType": "Block",
										"src": "10259:234:25",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int128",
															"typeString": "int128"
														},
														"id": 3326,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3324,
															"name": "liquidity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3319,
															"src": "10276:9:25",
															"typeDescriptions": {
																"typeIdentifier": "t_int128",
																"typeString": "int128"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"hexValue": "30",
															"id": 3325,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10288:1:25",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "10276:13:25",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"arguments": [
																	{
																		"id": 3341,
																		"name": "sqrtRatioAX96",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3315,
																		"src": "10420:13:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	},
																	{
																		"id": 3342,
																		"name": "sqrtRatioBX96",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3317,
																		"src": "10435:13:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"id": 3345,
																				"name": "liquidity",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3319,
																				"src": "10458:9:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int128",
																					"typeString": "int128"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_int128",
																					"typeString": "int128"
																				}
																			],
																			"id": 3344,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10450:7:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint128_$",
																				"typeString": "type(uint128)"
																			},
																			"typeName": {
																				"id": 3343,
																				"name": "uint128",
																				"nodeType": "ElementaryTypeName",
																				"src": "10450:7:25",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 3346,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10450:18:25",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		}
																	},
																	{
																		"hexValue": "74727565",
																		"id": 3347,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10470:4:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		},
																		{
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		},
																		{
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		},
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 3340,
																	"name": "getAmount1Delta",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		3270,
																		3354
																	],
																	"referencedDeclaration": 3270,
																	"src": "10404:15:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_bool_$returns$_t_uint256_$",
																		"typeString": "function (uint160,uint160,uint128,bool) pure returns (uint256)"
																	}
																},
																"id": 3348,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10404:71:25",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3349,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "toInt256",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2837,
															"src": "10404:80:25",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256) pure returns (int256)"
															}
														},
														"id": 3350,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10404:82:25",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 3351,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "10276:210:25",
													"trueExpression": {
														"id": 3339,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "-",
														"prefix": true,
														"src": "10304:85:25",
														"subExpression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"expression": {
																	"arguments": [
																		{
																			"id": 3328,
																			"name": "sqrtRatioAX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3315,
																			"src": "10321:13:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		{
																			"id": 3329,
																			"name": "sqrtRatioBX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3317,
																			"src": "10336:13:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		{
																			"arguments": [
																				{
																					"id": 3333,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "-",
																					"prefix": true,
																					"src": "10359:10:25",
																					"subExpression": {
																						"id": 3332,
																						"name": "liquidity",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3319,
																						"src": "10360:9:25",
																						"typeDescriptions": {
																							"typeIdentifier": "t_int128",
																							"typeString": "int128"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_int128",
																						"typeString": "int128"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_int128",
																						"typeString": "int128"
																					}
																				],
																				"id": 3331,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "10351:7:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint128_$",
																					"typeString": "type(uint128)"
																				},
																				"typeName": {
																					"id": 3330,
																					"name": "uint128",
																					"nodeType": "ElementaryTypeName",
																					"src": "10351:7:25",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 3334,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10351:19:25",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		},
																		{
																			"hexValue": "66616c7365",
																			"id": 3335,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "bool",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10372:5:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"value": "false"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			{
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			},
																			{
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		],
																		"id": 3327,
																		"name": "getAmount1Delta",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			3270,
																			3354
																		],
																		"referencedDeclaration": 3270,
																		"src": "10305:15:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_bool_$returns$_t_uint256_$",
																			"typeString": "function (uint160,uint160,uint128,bool) pure returns (uint256)"
																		}
																	},
																	"id": 3336,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "10305:73:25",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 3337,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "toInt256",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2837,
																"src": "10305:82:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (int256)"
																}
															},
															"id": 3338,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10305:84:25",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3323,
												"id": 3352,
												"nodeType": "Return",
												"src": "10269:217:25"
											}
										]
									},
									"documentation": {
										"id": 3313,
										"nodeType": "StructuredDocumentation",
										"src": "9765:333:25",
										"text": "@notice Helper that gets signed token1 delta\n @param sqrtRatioAX96 A sqrt price\n @param sqrtRatioBX96 Another sqrt price\n @param liquidity The change in liquidity for which to compute the amount1 delta\n @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices"
									},
									"id": 3354,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAmount1Delta",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3320,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3315,
												"mutability": "mutable",
												"name": "sqrtRatioAX96",
												"nodeType": "VariableDeclaration",
												"scope": 3354,
												"src": "10128:21:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3314,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "10128:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3317,
												"mutability": "mutable",
												"name": "sqrtRatioBX96",
												"nodeType": "VariableDeclaration",
												"scope": 3354,
												"src": "10151:21:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3316,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "10151:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3319,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 3354,
												"src": "10174:16:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 3318,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "10174:6:25",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10127:64:25"
									},
									"returnParameters": {
										"id": 3323,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3322,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 3354,
												"src": "10239:14:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3321,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "10239:6:25",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10238:16:25"
									},
									"scope": 3355,
									"src": "10103:390:25",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3356,
							"src": "377:10118:25"
						}
					],
					"src": "45:10451:25"
				},
				"id": 25
			},
			"contracts/core/libraries/Tick.sol": {
				"ast": {
					"absolutePath": "contracts/core/libraries/Tick.sol",
					"exportedSymbols": {
						"LiquidityMath": [
							2453
						],
						"LowGasSafeMath": [
							2583
						],
						"SafeCast": [
							2838
						],
						"Tick": [
							3974
						],
						"TickMath": [
							4765
						]
					},
					"id": 3975,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3357,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:31:26"
						},
						{
							"absolutePath": "contracts/core/libraries/LowGasSafeMath.sol",
							"file": "./LowGasSafeMath.sol",
							"id": 3358,
							"nodeType": "ImportDirective",
							"scope": 3975,
							"sourceUnit": 2584,
							"src": "78:30:26",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/SafeCast.sol",
							"file": "./SafeCast.sol",
							"id": 3359,
							"nodeType": "ImportDirective",
							"scope": 3975,
							"sourceUnit": 2839,
							"src": "109:24:26",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/TickMath.sol",
							"file": "./TickMath.sol",
							"id": 3360,
							"nodeType": "ImportDirective",
							"scope": 3975,
							"sourceUnit": 4766,
							"src": "135:24:26",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/core/libraries/LiquidityMath.sol",
							"file": "./LiquidityMath.sol",
							"id": 3361,
							"nodeType": "ImportDirective",
							"scope": 3975,
							"sourceUnit": 2454,
							"src": "160:29:26",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 3362,
								"nodeType": "StructuredDocumentation",
								"src": "191:101:26",
								"text": "@title Tick\n @notice Contains functions for managing tick processes and relevant calculations"
							},
							"fullyImplemented": true,
							"id": 3974,
							"linearizedBaseContracts": [
								3974
							],
							"name": "Tick",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 3365,
									"libraryName": {
										"id": 3363,
										"name": "LowGasSafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2583,
										"src": "317:14:26",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_LowGasSafeMath_$2583",
											"typeString": "library LowGasSafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "311:32:26",
									"typeName": {
										"id": 3364,
										"name": "int256",
										"nodeType": "ElementaryTypeName",
										"src": "336:6:26",
										"typeDescriptions": {
											"typeIdentifier": "t_int256",
											"typeString": "int256"
										}
									}
								},
								{
									"id": 3368,
									"libraryName": {
										"id": 3366,
										"name": "SafeCast",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2838,
										"src": "354:8:26",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeCast_$2838",
											"typeString": "library SafeCast"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "348:26:26",
									"typeName": {
										"id": 3367,
										"name": "int256",
										"nodeType": "ElementaryTypeName",
										"src": "367:6:26",
										"typeDescriptions": {
											"typeIdentifier": "t_int256",
											"typeString": "int256"
										}
									}
								},
								{
									"canonicalName": "Tick.Info",
									"id": 3389,
									"members": [
										{
											"constant": false,
											"id": 3370,
											"mutability": "mutable",
											"name": "liquidityGross",
											"nodeType": "VariableDeclaration",
											"scope": 3389,
											"src": "579:22:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 3369,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "579:7:26",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3372,
											"mutability": "mutable",
											"name": "liquidityNet",
											"nodeType": "VariableDeclaration",
											"scope": 3389,
											"src": "776:19:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int128",
												"typeString": "int128"
											},
											"typeName": {
												"id": 3371,
												"name": "int128",
												"nodeType": "ElementaryTypeName",
												"src": "776:6:26",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3374,
											"mutability": "mutable",
											"name": "stakedLiquidityNet",
											"nodeType": "VariableDeclaration",
											"scope": 3389,
											"src": "922:25:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int128",
												"typeString": "int128"
											},
											"typeName": {
												"id": 3373,
												"name": "int128",
												"nodeType": "ElementaryTypeName",
												"src": "922:6:26",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3376,
											"mutability": "mutable",
											"name": "feeGrowthOutside0X128",
											"nodeType": "VariableDeclaration",
											"scope": 3389,
											"src": "1170:29:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3375,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1170:7:26",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3378,
											"mutability": "mutable",
											"name": "feeGrowthOutside1X128",
											"nodeType": "VariableDeclaration",
											"scope": 3389,
											"src": "1209:29:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3377,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1209:7:26",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3380,
											"mutability": "mutable",
											"name": "rewardGrowthOutsideX128",
											"nodeType": "VariableDeclaration",
											"scope": 3389,
											"src": "1464:31:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3379,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1464:7:26",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3382,
											"mutability": "mutable",
											"name": "tickCumulativeOutside",
											"nodeType": "VariableDeclaration",
											"scope": 3389,
											"src": "1572:27:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int56",
												"typeString": "int56"
											},
											"typeName": {
												"id": 3381,
												"name": "int56",
												"nodeType": "ElementaryTypeName",
												"src": "1572:5:26",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3384,
											"mutability": "mutable",
											"name": "secondsPerLiquidityOutsideX128",
											"nodeType": "VariableDeclaration",
											"scope": 3389,
											"src": "1823:38:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint160",
												"typeString": "uint160"
											},
											"typeName": {
												"id": 3383,
												"name": "uint160",
												"nodeType": "ElementaryTypeName",
												"src": "1823:7:26",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3386,
											"mutability": "mutable",
											"name": "secondsOutside",
											"nodeType": "VariableDeclaration",
											"scope": 3389,
											"src": "2066:21:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint32",
												"typeString": "uint32"
											},
											"typeName": {
												"id": 3385,
												"name": "uint32",
												"nodeType": "ElementaryTypeName",
												"src": "2066:6:26",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3388,
											"mutability": "mutable",
											"name": "initialized",
											"nodeType": "VariableDeclaration",
											"scope": 3389,
											"src": "2312:16:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 3387,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "2312:4:26",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Info",
									"nodeType": "StructDefinition",
									"scope": 3974,
									"src": "436:1899:26",
									"visibility": "public"
								},
								{
									"canonicalName": "Tick.LiquidityNets",
									"id": 3394,
									"members": [
										{
											"constant": false,
											"id": 3391,
											"mutability": "mutable",
											"name": "liquidityNet",
											"nodeType": "VariableDeclaration",
											"scope": 3394,
											"src": "2372:19:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int128",
												"typeString": "int128"
											},
											"typeName": {
												"id": 3390,
												"name": "int128",
												"nodeType": "ElementaryTypeName",
												"src": "2372:6:26",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3393,
											"mutability": "mutable",
											"name": "stakedLiquidityNet",
											"nodeType": "VariableDeclaration",
											"scope": 3394,
											"src": "2401:25:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int128",
												"typeString": "int128"
											},
											"typeName": {
												"id": 3392,
												"name": "int128",
												"nodeType": "ElementaryTypeName",
												"src": "2401:6:26",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "LiquidityNets",
									"nodeType": "StructDefinition",
									"scope": 3974,
									"src": "2341:92:26",
									"visibility": "public"
								},
								{
									"body": {
										"id": 3444,
										"nodeType": "Block",
										"src": "2919:271:26",
										"statements": [
											{
												"assignments": [
													3403
												],
												"declarations": [
													{
														"constant": false,
														"id": 3403,
														"mutability": "mutable",
														"name": "minTick",
														"nodeType": "VariableDeclaration",
														"scope": 3444,
														"src": "2929:13:26",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 3402,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "2929:5:26",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3411,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													},
													"id": 3410,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																},
																"id": 3407,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 3404,
																		"name": "TickMath",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4765,
																		"src": "2946:8:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_TickMath_$4765_$",
																			"typeString": "type(library TickMath)"
																		}
																	},
																	"id": 3405,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "MIN_TICK",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 4238,
																	"src": "2946:17:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 3406,
																	"name": "tickSpacing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3397,
																	"src": "2966:11:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																"src": "2946:31:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															}
														],
														"id": 3408,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2945:33:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 3409,
														"name": "tickSpacing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3397,
														"src": "2981:11:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "2945:47:26",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2929:63:26"
											},
											{
												"assignments": [
													3413
												],
												"declarations": [
													{
														"constant": false,
														"id": 3413,
														"mutability": "mutable",
														"name": "maxTick",
														"nodeType": "VariableDeclaration",
														"scope": 3444,
														"src": "3002:13:26",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 3412,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "3002:5:26",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3421,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													},
													"id": 3420,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																},
																"id": 3417,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 3414,
																		"name": "TickMath",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4765,
																		"src": "3019:8:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_TickMath_$4765_$",
																			"typeString": "type(library TickMath)"
																		}
																	},
																	"id": 3415,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "MAX_TICK",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 4243,
																	"src": "3019:17:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 3416,
																	"name": "tickSpacing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3397,
																	"src": "3039:11:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																"src": "3019:31:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															}
														],
														"id": 3418,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "3018:33:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 3419,
														"name": "tickSpacing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3397,
														"src": "3054:11:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "3018:47:26",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3002:63:26"
											},
											{
												"assignments": [
													3423
												],
												"declarations": [
													{
														"constant": false,
														"id": 3423,
														"mutability": "mutable",
														"name": "numTicks",
														"nodeType": "VariableDeclaration",
														"scope": 3444,
														"src": "3075:15:26",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint24",
															"typeString": "uint24"
														},
														"typeName": {
															"id": 3422,
															"name": "uint24",
															"nodeType": "ElementaryTypeName",
															"src": "3075:6:26",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3435,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													},
													"id": 3434,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																},
																"id": 3431,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			},
																			"id": 3428,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3426,
																				"name": "maxTick",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3413,
																				"src": "3101:7:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int24",
																					"typeString": "int24"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 3427,
																				"name": "minTick",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3403,
																				"src": "3111:7:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int24",
																					"typeString": "int24"
																				}
																			},
																			"src": "3101:17:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		}
																	],
																	"id": 3429,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3100:19:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 3430,
																	"name": "tickSpacing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3397,
																	"src": "3122:11:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																"src": "3100:33:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															],
															"id": 3425,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3093:6:26",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint24_$",
																"typeString": "type(uint24)"
															},
															"typeName": {
																"id": 3424,
																"name": "uint24",
																"nodeType": "ElementaryTypeName",
																"src": "3093:6:26",
																"typeDescriptions": {}
															}
														},
														"id": 3432,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3093:41:26",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint24",
															"typeString": "uint24"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"hexValue": "31",
														"id": 3433,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3137:1:26",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "3093:45:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3075:63:26"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													},
													"id": 3442,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 3438,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3160:7:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint128_$",
																		"typeString": "type(uint128)"
																	},
																	"typeName": {
																		"id": 3437,
																		"name": "uint128",
																		"nodeType": "ElementaryTypeName",
																		"src": "3160:7:26",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint128_$",
																		"typeString": "type(uint128)"
																	}
																],
																"id": 3436,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "3155:4:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 3439,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3155:13:26",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint128",
																"typeString": "type(uint128)"
															}
														},
														"id": 3440,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "3155:17:26",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 3441,
														"name": "numTicks",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3423,
														"src": "3175:8:26",
														"typeDescriptions": {
															"typeIdentifier": "t_uint24",
															"typeString": "uint24"
														}
													},
													"src": "3155:28:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"functionReturnParameters": 3401,
												"id": 3443,
												"nodeType": "Return",
												"src": "3148:35:26"
											}
										]
									},
									"documentation": {
										"id": 3395,
										"nodeType": "StructuredDocumentation",
										"src": "2439:382:26",
										"text": "@notice Derives max liquidity per tick from given tick spacing\n @dev Executed within the pool constructor\n @param tickSpacing The amount of required tick separation, realized in multiples of `tickSpacing`\n     e.g., a tickSpacing of 3 requires ticks to be initialized every 3rd tick i.e., ..., -6, -3, 0, 3, 6, ...\n @return The max liquidity per tick"
									},
									"id": 3445,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tickSpacingToMaxLiquidityPerTick",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3398,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3397,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 3445,
												"src": "2868:17:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 3396,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2868:5:26",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2867:19:26"
									},
									"returnParameters": {
										"id": 3401,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3400,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 3445,
												"src": "2910:7:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 3399,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2910:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2909:9:26"
									},
									"scope": 3974,
									"src": "2826:364:26",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3567,
										"nodeType": "Block",
										"src": "4286:1249:26",
										"statements": [
											{
												"assignments": [
													3468
												],
												"declarations": [
													{
														"constant": false,
														"id": 3468,
														"mutability": "mutable",
														"name": "lower",
														"nodeType": "VariableDeclaration",
														"scope": 3567,
														"src": "4296:18:26",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
															"typeString": "struct Tick.Info"
														},
														"typeName": {
															"id": 3467,
															"name": "Info",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 3389,
															"src": "4296:4:26",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																"typeString": "struct Tick.Info"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3472,
												"initialValue": {
													"baseExpression": {
														"id": 3469,
														"name": "self",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3450,
														"src": "4317:4:26",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3389_storage_$",
															"typeString": "mapping(int24 => struct Tick.Info storage ref)"
														}
													},
													"id": 3471,
													"indexExpression": {
														"id": 3470,
														"name": "tickLower",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3452,
														"src": "4322:9:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4317:15:26",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Info_$3389_storage",
														"typeString": "struct Tick.Info storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4296:36:26"
											},
											{
												"assignments": [
													3474
												],
												"declarations": [
													{
														"constant": false,
														"id": 3474,
														"mutability": "mutable",
														"name": "upper",
														"nodeType": "VariableDeclaration",
														"scope": 3567,
														"src": "4342:18:26",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
															"typeString": "struct Tick.Info"
														},
														"typeName": {
															"id": 3473,
															"name": "Info",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 3389,
															"src": "4342:4:26",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																"typeString": "struct Tick.Info"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3478,
												"initialValue": {
													"baseExpression": {
														"id": 3475,
														"name": "self",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3450,
														"src": "4363:4:26",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3389_storage_$",
															"typeString": "mapping(int24 => struct Tick.Info storage ref)"
														}
													},
													"id": 3477,
													"indexExpression": {
														"id": 3476,
														"name": "tickUpper",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3454,
														"src": "4368:9:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4363:15:26",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Info_$3389_storage",
														"typeString": "struct Tick.Info storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4342:36:26"
											},
											{
												"assignments": [
													3480
												],
												"declarations": [
													{
														"constant": false,
														"id": 3480,
														"mutability": "mutable",
														"name": "feeGrowthBelow0X128",
														"nodeType": "VariableDeclaration",
														"scope": 3567,
														"src": "4427:27:26",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3479,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4427:7:26",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3481,
												"nodeType": "VariableDeclarationStatement",
												"src": "4427:27:26"
											},
											{
												"assignments": [
													3483
												],
												"declarations": [
													{
														"constant": false,
														"id": 3483,
														"mutability": "mutable",
														"name": "feeGrowthBelow1X128",
														"nodeType": "VariableDeclaration",
														"scope": 3567,
														"src": "4464:27:26",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3482,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4464:7:26",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3484,
												"nodeType": "VariableDeclarationStatement",
												"src": "4464:27:26"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													},
													"id": 3487,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3485,
														"name": "tickCurrent",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3456,
														"src": "4505:11:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"id": 3486,
														"name": "tickLower",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3452,
														"src": "4520:9:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "4505:24:26",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 3513,
													"nodeType": "Block",
													"src": "4674:183:26",
													"statements": [
														{
															"expression": {
																"id": 3504,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3499,
																	"name": "feeGrowthBelow0X128",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3480,
																	"src": "4688:19:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3503,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3500,
																		"name": "feeGrowthGlobal0X128",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3458,
																		"src": "4710:20:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"expression": {
																			"id": 3501,
																			"name": "lower",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3468,
																			"src": "4733:5:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																				"typeString": "struct Tick.Info storage pointer"
																			}
																		},
																		"id": 3502,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "feeGrowthOutside0X128",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 3376,
																		"src": "4733:27:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4710:50:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4688:72:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3505,
															"nodeType": "ExpressionStatement",
															"src": "4688:72:26"
														},
														{
															"expression": {
																"id": 3511,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3506,
																	"name": "feeGrowthBelow1X128",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3483,
																	"src": "4774:19:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3510,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3507,
																		"name": "feeGrowthGlobal1X128",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3460,
																		"src": "4796:20:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"expression": {
																			"id": 3508,
																			"name": "lower",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3468,
																			"src": "4819:5:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																				"typeString": "struct Tick.Info storage pointer"
																			}
																		},
																		"id": 3509,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "feeGrowthOutside1X128",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 3378,
																		"src": "4819:27:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4796:50:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4774:72:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3512,
															"nodeType": "ExpressionStatement",
															"src": "4774:72:26"
														}
													]
												},
												"id": 3514,
												"nodeType": "IfStatement",
												"src": "4501:356:26",
												"trueBody": {
													"id": 3498,
													"nodeType": "Block",
													"src": "4531:137:26",
													"statements": [
														{
															"expression": {
																"id": 3491,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3488,
																	"name": "feeGrowthBelow0X128",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3480,
																	"src": "4545:19:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"id": 3489,
																		"name": "lower",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3468,
																		"src": "4567:5:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																			"typeString": "struct Tick.Info storage pointer"
																		}
																	},
																	"id": 3490,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "feeGrowthOutside0X128",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3376,
																	"src": "4567:27:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4545:49:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3492,
															"nodeType": "ExpressionStatement",
															"src": "4545:49:26"
														},
														{
															"expression": {
																"id": 3496,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3493,
																	"name": "feeGrowthBelow1X128",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3483,
																	"src": "4608:19:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"id": 3494,
																		"name": "lower",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3468,
																		"src": "4630:5:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																			"typeString": "struct Tick.Info storage pointer"
																		}
																	},
																	"id": 3495,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "feeGrowthOutside1X128",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3378,
																	"src": "4630:27:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4608:49:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3497,
															"nodeType": "ExpressionStatement",
															"src": "4608:49:26"
														}
													]
												}
											},
											{
												"assignments": [
													3516
												],
												"declarations": [
													{
														"constant": false,
														"id": 3516,
														"mutability": "mutable",
														"name": "feeGrowthAbove0X128",
														"nodeType": "VariableDeclaration",
														"scope": 3567,
														"src": "4905:27:26",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3515,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4905:7:26",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3517,
												"nodeType": "VariableDeclarationStatement",
												"src": "4905:27:26"
											},
											{
												"assignments": [
													3519
												],
												"declarations": [
													{
														"constant": false,
														"id": 3519,
														"mutability": "mutable",
														"name": "feeGrowthAbove1X128",
														"nodeType": "VariableDeclaration",
														"scope": 3567,
														"src": "4942:27:26",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3518,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4942:7:26",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3520,
												"nodeType": "VariableDeclarationStatement",
												"src": "4942:27:26"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													},
													"id": 3523,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3521,
														"name": "tickCurrent",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3456,
														"src": "4983:11:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 3522,
														"name": "tickUpper",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3454,
														"src": "4997:9:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "4983:23:26",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 3549,
													"nodeType": "Block",
													"src": "5151:183:26",
													"statements": [
														{
															"expression": {
																"id": 3540,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3535,
																	"name": "feeGrowthAbove0X128",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3516,
																	"src": "5165:19:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3539,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3536,
																		"name": "feeGrowthGlobal0X128",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3458,
																		"src": "5187:20:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"expression": {
																			"id": 3537,
																			"name": "upper",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3474,
																			"src": "5210:5:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																				"typeString": "struct Tick.Info storage pointer"
																			}
																		},
																		"id": 3538,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "feeGrowthOutside0X128",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 3376,
																		"src": "5210:27:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5187:50:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5165:72:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3541,
															"nodeType": "ExpressionStatement",
															"src": "5165:72:26"
														},
														{
															"expression": {
																"id": 3547,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3542,
																	"name": "feeGrowthAbove1X128",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3519,
																	"src": "5251:19:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3546,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3543,
																		"name": "feeGrowthGlobal1X128",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3460,
																		"src": "5273:20:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"expression": {
																			"id": 3544,
																			"name": "upper",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3474,
																			"src": "5296:5:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																				"typeString": "struct Tick.Info storage pointer"
																			}
																		},
																		"id": 3545,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "feeGrowthOutside1X128",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 3378,
																		"src": "5296:27:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5273:50:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5251:72:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3548,
															"nodeType": "ExpressionStatement",
															"src": "5251:72:26"
														}
													]
												},
												"id": 3550,
												"nodeType": "IfStatement",
												"src": "4979:355:26",
												"trueBody": {
													"id": 3534,
													"nodeType": "Block",
													"src": "5008:137:26",
													"statements": [
														{
															"expression": {
																"id": 3527,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3524,
																	"name": "feeGrowthAbove0X128",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3516,
																	"src": "5022:19:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"id": 3525,
																		"name": "upper",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3474,
																		"src": "5044:5:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																			"typeString": "struct Tick.Info storage pointer"
																		}
																	},
																	"id": 3526,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "feeGrowthOutside0X128",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3376,
																	"src": "5044:27:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5022:49:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3528,
															"nodeType": "ExpressionStatement",
															"src": "5022:49:26"
														},
														{
															"expression": {
																"id": 3532,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3529,
																	"name": "feeGrowthAbove1X128",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3519,
																	"src": "5085:19:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"id": 3530,
																		"name": "upper",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3474,
																		"src": "5107:5:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																			"typeString": "struct Tick.Info storage pointer"
																		}
																	},
																	"id": 3531,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "feeGrowthOutside1X128",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3378,
																	"src": "5107:27:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5085:49:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3533,
															"nodeType": "ExpressionStatement",
															"src": "5085:49:26"
														}
													]
												}
											},
											{
												"expression": {
													"id": 3557,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3551,
														"name": "feeGrowthInside0X128",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3463,
														"src": "5344:20:26",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 3556,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3554,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3552,
																"name": "feeGrowthGlobal0X128",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3458,
																"src": "5367:20:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 3553,
																"name": "feeGrowthBelow0X128",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3480,
																"src": "5390:19:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5367:42:26",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"id": 3555,
															"name": "feeGrowthAbove0X128",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3516,
															"src": "5412:19:26",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "5367:64:26",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5344:87:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 3558,
												"nodeType": "ExpressionStatement",
												"src": "5344:87:26"
											},
											{
												"expression": {
													"id": 3565,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3559,
														"name": "feeGrowthInside1X128",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3465,
														"src": "5441:20:26",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 3564,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3562,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3560,
																"name": "feeGrowthGlobal1X128",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3460,
																"src": "5464:20:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 3561,
																"name": "feeGrowthBelow1X128",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3483,
																"src": "5487:19:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5464:42:26",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"id": 3563,
															"name": "feeGrowthAbove1X128",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3519,
															"src": "5509:19:26",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "5464:64:26",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5441:87:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 3566,
												"nodeType": "ExpressionStatement",
												"src": "5441:87:26"
											}
										]
									},
									"documentation": {
										"id": 3446,
										"nodeType": "StructuredDocumentation",
										"src": "3196:765:26",
										"text": "@notice Retrieves fee growth data\n @param self The mapping containing all tick information for initialized ticks\n @param tickLower The lower tick boundary of the position\n @param tickUpper The upper tick boundary of the position\n @param tickCurrent The current tick\n @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\n @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\n @return feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries\n @return feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries"
									},
									"id": 3568,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getFeeGrowthInside",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3461,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3450,
												"mutability": "mutable",
												"name": "self",
												"nodeType": "VariableDeclaration",
												"scope": 3568,
												"src": "4003:40:26",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3389_storage_$",
													"typeString": "mapping(int24 => struct Tick.Info)"
												},
												"typeName": {
													"id": 3449,
													"keyType": {
														"id": 3447,
														"name": "int24",
														"nodeType": "ElementaryTypeName",
														"src": "4011:5:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Mapping",
													"src": "4003:27:26",
													"typeDescriptions": {
														"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3389_storage_$",
														"typeString": "mapping(int24 => struct Tick.Info)"
													},
													"valueType": {
														"id": 3448,
														"name": "Tick.Info",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 3389,
														"src": "4020:9:26",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
															"typeString": "struct Tick.Info"
														}
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3452,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 3568,
												"src": "4053:15:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 3451,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "4053:5:26",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3454,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 3568,
												"src": "4078:15:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 3453,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "4078:5:26",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3456,
												"mutability": "mutable",
												"name": "tickCurrent",
												"nodeType": "VariableDeclaration",
												"scope": 3568,
												"src": "4103:17:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 3455,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "4103:5:26",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3458,
												"mutability": "mutable",
												"name": "feeGrowthGlobal0X128",
												"nodeType": "VariableDeclaration",
												"scope": 3568,
												"src": "4130:28:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3457,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4130:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3460,
												"mutability": "mutable",
												"name": "feeGrowthGlobal1X128",
												"nodeType": "VariableDeclaration",
												"scope": 3568,
												"src": "4168:28:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3459,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4168:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3993:209:26"
									},
									"returnParameters": {
										"id": 3466,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3463,
												"mutability": "mutable",
												"name": "feeGrowthInside0X128",
												"nodeType": "VariableDeclaration",
												"scope": 3568,
												"src": "4226:28:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3462,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4226:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3465,
												"mutability": "mutable",
												"name": "feeGrowthInside1X128",
												"nodeType": "VariableDeclaration",
												"scope": 3568,
												"src": "4256:28:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3464,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4256:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4225:60:26"
									},
									"scope": 3974,
									"src": "3966:1569:26",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3647,
										"nodeType": "Block",
										"src": "5800:818:26",
										"statements": [
											{
												"assignments": [
													3586
												],
												"declarations": [
													{
														"constant": false,
														"id": 3586,
														"mutability": "mutable",
														"name": "lower",
														"nodeType": "VariableDeclaration",
														"scope": 3647,
														"src": "5810:18:26",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
															"typeString": "struct Tick.Info"
														},
														"typeName": {
															"id": 3585,
															"name": "Info",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 3389,
															"src": "5810:4:26",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																"typeString": "struct Tick.Info"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3590,
												"initialValue": {
													"baseExpression": {
														"id": 3587,
														"name": "self",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3572,
														"src": "5831:4:26",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3389_storage_$",
															"typeString": "mapping(int24 => struct Tick.Info storage ref)"
														}
													},
													"id": 3589,
													"indexExpression": {
														"id": 3588,
														"name": "tickLower",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3574,
														"src": "5836:9:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "5831:15:26",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Info_$3389_storage",
														"typeString": "struct Tick.Info storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5810:36:26"
											},
											{
												"assignments": [
													3592
												],
												"declarations": [
													{
														"constant": false,
														"id": 3592,
														"mutability": "mutable",
														"name": "upper",
														"nodeType": "VariableDeclaration",
														"scope": 3647,
														"src": "5856:18:26",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
															"typeString": "struct Tick.Info"
														},
														"typeName": {
															"id": 3591,
															"name": "Info",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 3389,
															"src": "5856:4:26",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																"typeString": "struct Tick.Info"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3596,
												"initialValue": {
													"baseExpression": {
														"id": 3593,
														"name": "self",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3572,
														"src": "5877:4:26",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3389_storage_$",
															"typeString": "mapping(int24 => struct Tick.Info storage ref)"
														}
													},
													"id": 3595,
													"indexExpression": {
														"id": 3594,
														"name": "tickUpper",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3576,
														"src": "5882:9:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "5877:15:26",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Info_$3389_storage",
														"typeString": "struct Tick.Info storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5856:36:26"
											},
											{
												"assignments": [
													3598
												],
												"declarations": [
													{
														"constant": false,
														"id": 3598,
														"mutability": "mutable",
														"name": "rewardGrowthBelowX128",
														"nodeType": "VariableDeclaration",
														"scope": 3647,
														"src": "5944:29:26",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3597,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5944:7:26",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3599,
												"nodeType": "VariableDeclarationStatement",
												"src": "5944:29:26"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													},
													"id": 3602,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3600,
														"name": "tickCurrent",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3578,
														"src": "5987:11:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"id": 3601,
														"name": "tickLower",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3574,
														"src": "6002:9:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "5987:24:26",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 3616,
													"nodeType": "Block",
													"src": "6097:103:26",
													"statements": [
														{
															"expression": {
																"id": 3614,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3609,
																	"name": "rewardGrowthBelowX128",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3598,
																	"src": "6111:21:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3613,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3610,
																		"name": "rewardGrowthGlobalX128",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3580,
																		"src": "6135:22:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"expression": {
																			"id": 3611,
																			"name": "lower",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3586,
																			"src": "6160:5:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																				"typeString": "struct Tick.Info storage pointer"
																			}
																		},
																		"id": 3612,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "rewardGrowthOutsideX128",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 3380,
																		"src": "6160:29:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6135:54:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6111:78:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3615,
															"nodeType": "ExpressionStatement",
															"src": "6111:78:26"
														}
													]
												},
												"id": 3617,
												"nodeType": "IfStatement",
												"src": "5983:217:26",
												"trueBody": {
													"id": 3608,
													"nodeType": "Block",
													"src": "6013:78:26",
													"statements": [
														{
															"expression": {
																"id": 3606,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3603,
																	"name": "rewardGrowthBelowX128",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3598,
																	"src": "6027:21:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"id": 3604,
																		"name": "lower",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3586,
																		"src": "6051:5:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																			"typeString": "struct Tick.Info storage pointer"
																		}
																	},
																	"id": 3605,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "rewardGrowthOutsideX128",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3380,
																	"src": "6051:29:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6027:53:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3607,
															"nodeType": "ExpressionStatement",
															"src": "6027:53:26"
														}
													]
												}
											},
											{
												"assignments": [
													3619
												],
												"declarations": [
													{
														"constant": false,
														"id": 3619,
														"mutability": "mutable",
														"name": "rewardGrowthAboveX128",
														"nodeType": "VariableDeclaration",
														"scope": 3647,
														"src": "6251:29:26",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3618,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6251:7:26",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3620,
												"nodeType": "VariableDeclarationStatement",
												"src": "6251:29:26"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													},
													"id": 3623,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3621,
														"name": "tickCurrent",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3578,
														"src": "6294:11:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 3622,
														"name": "tickUpper",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3576,
														"src": "6308:9:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "6294:23:26",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 3637,
													"nodeType": "Block",
													"src": "6403:103:26",
													"statements": [
														{
															"expression": {
																"id": 3635,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3630,
																	"name": "rewardGrowthAboveX128",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3619,
																	"src": "6417:21:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3634,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3631,
																		"name": "rewardGrowthGlobalX128",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3580,
																		"src": "6441:22:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"expression": {
																			"id": 3632,
																			"name": "upper",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3592,
																			"src": "6466:5:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																				"typeString": "struct Tick.Info storage pointer"
																			}
																		},
																		"id": 3633,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "rewardGrowthOutsideX128",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 3380,
																		"src": "6466:29:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6441:54:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6417:78:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3636,
															"nodeType": "ExpressionStatement",
															"src": "6417:78:26"
														}
													]
												},
												"id": 3638,
												"nodeType": "IfStatement",
												"src": "6290:216:26",
												"trueBody": {
													"id": 3629,
													"nodeType": "Block",
													"src": "6319:78:26",
													"statements": [
														{
															"expression": {
																"id": 3627,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3624,
																	"name": "rewardGrowthAboveX128",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3619,
																	"src": "6333:21:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"id": 3625,
																		"name": "upper",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3592,
																		"src": "6357:5:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																			"typeString": "struct Tick.Info storage pointer"
																		}
																	},
																	"id": 3626,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "rewardGrowthOutsideX128",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3380,
																	"src": "6357:29:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6333:53:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3628,
															"nodeType": "ExpressionStatement",
															"src": "6333:53:26"
														}
													]
												}
											},
											{
												"expression": {
													"id": 3645,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3639,
														"name": "rewardGrowthInsideX128",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3583,
														"src": "6516:22:26",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 3644,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3642,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3640,
																"name": "rewardGrowthGlobalX128",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3580,
																"src": "6541:22:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 3641,
																"name": "rewardGrowthBelowX128",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3598,
																"src": "6566:21:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6541:46:26",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"id": 3643,
															"name": "rewardGrowthAboveX128",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3619,
															"src": "6590:21:26",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "6541:70:26",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6516:95:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 3646,
												"nodeType": "ExpressionStatement",
												"src": "6516:95:26"
											}
										]
									},
									"id": 3648,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getRewardGrowthInside",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3581,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3572,
												"mutability": "mutable",
												"name": "self",
												"nodeType": "VariableDeclaration",
												"scope": 3648,
												"src": "5581:40:26",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3389_storage_$",
													"typeString": "mapping(int24 => struct Tick.Info)"
												},
												"typeName": {
													"id": 3571,
													"keyType": {
														"id": 3569,
														"name": "int24",
														"nodeType": "ElementaryTypeName",
														"src": "5589:5:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Mapping",
													"src": "5581:27:26",
													"typeDescriptions": {
														"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3389_storage_$",
														"typeString": "mapping(int24 => struct Tick.Info)"
													},
													"valueType": {
														"id": 3570,
														"name": "Tick.Info",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 3389,
														"src": "5598:9:26",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
															"typeString": "struct Tick.Info"
														}
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3574,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 3648,
												"src": "5631:15:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 3573,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "5631:5:26",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3576,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 3648,
												"src": "5656:15:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 3575,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "5656:5:26",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3578,
												"mutability": "mutable",
												"name": "tickCurrent",
												"nodeType": "VariableDeclaration",
												"scope": 3648,
												"src": "5681:17:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 3577,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "5681:5:26",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3580,
												"mutability": "mutable",
												"name": "rewardGrowthGlobalX128",
												"nodeType": "VariableDeclaration",
												"scope": 3648,
												"src": "5708:30:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3579,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5708:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5571:173:26"
									},
									"returnParameters": {
										"id": 3584,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3583,
												"mutability": "mutable",
												"name": "rewardGrowthInsideX128",
												"nodeType": "VariableDeclaration",
												"scope": 3648,
												"src": "5768:30:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3582,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5768:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5767:32:26"
									},
									"scope": 3974,
									"src": "5541:1077:26",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3805,
										"nodeType": "Block",
										"src": "8360:1350:26",
										"statements": [
											{
												"assignments": [
													3683
												],
												"declarations": [
													{
														"constant": false,
														"id": 3683,
														"mutability": "mutable",
														"name": "info",
														"nodeType": "VariableDeclaration",
														"scope": 3805,
														"src": "8370:22:26",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
															"typeString": "struct Tick.Info"
														},
														"typeName": {
															"id": 3682,
															"name": "Tick.Info",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 3389,
															"src": "8370:9:26",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																"typeString": "struct Tick.Info"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3687,
												"initialValue": {
													"baseExpression": {
														"id": 3684,
														"name": "self",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3653,
														"src": "8395:4:26",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3389_storage_$",
															"typeString": "mapping(int24 => struct Tick.Info storage ref)"
														}
													},
													"id": 3686,
													"indexExpression": {
														"id": 3685,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3655,
														"src": "8400:4:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8395:10:26",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Info_$3389_storage",
														"typeString": "struct Tick.Info storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8370:35:26"
											},
											{
												"assignments": [
													3689
												],
												"declarations": [
													{
														"constant": false,
														"id": 3689,
														"mutability": "mutable",
														"name": "liquidityGrossBefore",
														"nodeType": "VariableDeclaration",
														"scope": 3805,
														"src": "8416:28:26",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														},
														"typeName": {
															"id": 3688,
															"name": "uint128",
															"nodeType": "ElementaryTypeName",
															"src": "8416:7:26",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3692,
												"initialValue": {
													"expression": {
														"id": 3690,
														"name": "info",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3683,
														"src": "8447:4:26",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
															"typeString": "struct Tick.Info storage pointer"
														}
													},
													"id": 3691,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "liquidityGross",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 3370,
													"src": "8447:19:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8416:50:26"
											},
											{
												"assignments": [
													3694
												],
												"declarations": [
													{
														"constant": false,
														"id": 3694,
														"mutability": "mutable",
														"name": "liquidityGrossAfter",
														"nodeType": "VariableDeclaration",
														"scope": 3805,
														"src": "8476:27:26",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														},
														"typeName": {
															"id": 3693,
															"name": "uint128",
															"nodeType": "ElementaryTypeName",
															"src": "8476:7:26",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3700,
												"initialValue": {
													"arguments": [
														{
															"id": 3697,
															"name": "liquidityGrossBefore",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3689,
															"src": "8529:20:26",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														{
															"id": 3698,
															"name": "liquidityDelta",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3659,
															"src": "8551:14:26",
															"typeDescriptions": {
																"typeIdentifier": "t_int128",
																"typeString": "int128"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															},
															{
																"typeIdentifier": "t_int128",
																"typeString": "int128"
															}
														],
														"expression": {
															"id": 3695,
															"name": "LiquidityMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2453,
															"src": "8506:13:26",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_LiquidityMath_$2453_$",
																"typeString": "type(library LiquidityMath)"
															}
														},
														"id": 3696,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "addDelta",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2452,
														"src": "8506:22:26",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint128_$_t_int128_$returns$_t_uint128_$",
															"typeString": "function (uint128,int128) pure returns (uint128)"
														}
													},
													"id": 3699,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8506:60:26",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8476:90:26"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															},
															"id": 3704,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3702,
																"name": "liquidityGrossAfter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3694,
																"src": "8585:19:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 3703,
																"name": "maxLiquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3675,
																"src": "8608:12:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"src": "8585:35:26",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4c4f",
															"id": 3705,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8622:4:26",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_df0e8e403ea3fe54c7efb80492fa8f6599886b9c5435c1772b8d6400862c8c48",
																"typeString": "literal_string \"LO\""
															},
															"value": "LO"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_df0e8e403ea3fe54c7efb80492fa8f6599886b9c5435c1772b8d6400862c8c48",
																"typeString": "literal_string \"LO\""
															}
														],
														"id": 3701,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8577:7:26",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3706,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8577:50:26",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3707,
												"nodeType": "ExpressionStatement",
												"src": "8577:50:26"
											},
											{
												"expression": {
													"id": 3718,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3708,
														"name": "flipped",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3678,
														"src": "8638:7:26",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 3717,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	},
																	"id": 3711,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3709,
																		"name": "liquidityGrossAfter",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3694,
																		"src": "8649:19:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 3710,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8672:1:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "8649:24:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																}
															],
															"id": 3712,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "8648:26:26",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	},
																	"id": 3715,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3713,
																		"name": "liquidityGrossBefore",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3689,
																		"src": "8679:20:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 3714,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8703:1:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "8679:25:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																}
															],
															"id": 3716,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "8678:27:26",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "8648:57:26",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "8638:67:26",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3719,
												"nodeType": "ExpressionStatement",
												"src": "8638:67:26"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													},
													"id": 3722,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3720,
														"name": "liquidityGrossBefore",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3689,
														"src": "8720:20:26",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 3721,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8744:1:26",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8720:25:26",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3771,
												"nodeType": "IfStatement",
												"src": "8716:643:26",
												"trueBody": {
													"id": 3770,
													"nodeType": "Block",
													"src": "8747:612:26",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																},
																"id": 3725,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3723,
																	"name": "tick",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3655,
																	"src": "8877:4:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"id": 3724,
																	"name": "tickCurrent",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3657,
																	"src": "8885:11:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																"src": "8877:19:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 3763,
															"nodeType": "IfStatement",
															"src": "8873:439:26",
															"trueBody": {
																"id": 3762,
																"nodeType": "Block",
																"src": "8898:414:26",
																"statements": [
																	{
																		"expression": {
																			"id": 3730,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"expression": {
																					"id": 3726,
																					"name": "info",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3683,
																					"src": "8916:4:26",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																						"typeString": "struct Tick.Info storage pointer"
																					}
																				},
																				"id": 3728,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"memberName": "feeGrowthOutside0X128",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 3376,
																				"src": "8916:26:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 3729,
																				"name": "feeGrowthGlobal0X128",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3661,
																				"src": "8945:20:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "8916:49:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 3731,
																		"nodeType": "ExpressionStatement",
																		"src": "8916:49:26"
																	},
																	{
																		"expression": {
																			"id": 3736,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"expression": {
																					"id": 3732,
																					"name": "info",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3683,
																					"src": "8983:4:26",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																						"typeString": "struct Tick.Info storage pointer"
																					}
																				},
																				"id": 3734,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"memberName": "feeGrowthOutside1X128",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 3378,
																				"src": "8983:26:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 3735,
																				"name": "feeGrowthGlobal1X128",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3663,
																				"src": "9012:20:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "8983:49:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 3737,
																		"nodeType": "ExpressionStatement",
																		"src": "8983:49:26"
																	},
																	{
																		"expression": {
																			"id": 3742,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"expression": {
																					"id": 3738,
																					"name": "info",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3683,
																					"src": "9050:4:26",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																						"typeString": "struct Tick.Info storage pointer"
																					}
																				},
																				"id": 3740,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"memberName": "rewardGrowthOutsideX128",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 3380,
																				"src": "9050:28:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 3741,
																				"name": "rewardGrowthGlobalX128",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3665,
																				"src": "9081:22:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9050:53:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 3743,
																		"nodeType": "ExpressionStatement",
																		"src": "9050:53:26"
																	},
																	{
																		"expression": {
																			"id": 3748,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"expression": {
																					"id": 3744,
																					"name": "info",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3683,
																					"src": "9121:4:26",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																						"typeString": "struct Tick.Info storage pointer"
																					}
																				},
																				"id": 3746,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"memberName": "secondsPerLiquidityOutsideX128",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 3384,
																				"src": "9121:35:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 3747,
																				"name": "secondsPerLiquidityCumulativeX128",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3667,
																				"src": "9159:33:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"src": "9121:71:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"id": 3749,
																		"nodeType": "ExpressionStatement",
																		"src": "9121:71:26"
																	},
																	{
																		"expression": {
																			"id": 3754,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"expression": {
																					"id": 3750,
																					"name": "info",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3683,
																					"src": "9210:4:26",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																						"typeString": "struct Tick.Info storage pointer"
																					}
																				},
																				"id": 3752,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"memberName": "tickCumulativeOutside",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 3382,
																				"src": "9210:26:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int56",
																					"typeString": "int56"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 3753,
																				"name": "tickCumulative",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3669,
																				"src": "9239:14:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int56",
																					"typeString": "int56"
																				}
																			},
																			"src": "9210:43:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int56",
																				"typeString": "int56"
																			}
																		},
																		"id": 3755,
																		"nodeType": "ExpressionStatement",
																		"src": "9210:43:26"
																	},
																	{
																		"expression": {
																			"id": 3760,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"expression": {
																					"id": 3756,
																					"name": "info",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3683,
																					"src": "9271:4:26",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																						"typeString": "struct Tick.Info storage pointer"
																					}
																				},
																				"id": 3758,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"memberName": "secondsOutside",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 3386,
																				"src": "9271:19:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint32",
																					"typeString": "uint32"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 3759,
																				"name": "time",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3671,
																				"src": "9293:4:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint32",
																					"typeString": "uint32"
																				}
																			},
																			"src": "9271:26:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint32",
																				"typeString": "uint32"
																			}
																		},
																		"id": 3761,
																		"nodeType": "ExpressionStatement",
																		"src": "9271:26:26"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 3768,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 3764,
																		"name": "info",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3683,
																		"src": "9325:4:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																			"typeString": "struct Tick.Info storage pointer"
																		}
																	},
																	"id": 3766,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "initialized",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3388,
																	"src": "9325:16:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 3767,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9344:4:26",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "9325:23:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 3769,
															"nodeType": "ExpressionStatement",
															"src": "9325:23:26"
														}
													]
												}
											},
											{
												"expression": {
													"id": 3776,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 3772,
															"name": "info",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3683,
															"src": "9369:4:26",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																"typeString": "struct Tick.Info storage pointer"
															}
														},
														"id": 3774,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "liquidityGross",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3370,
														"src": "9369:19:26",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 3775,
														"name": "liquidityGrossAfter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3694,
														"src": "9391:19:26",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"src": "9369:41:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"id": 3777,
												"nodeType": "ExpressionStatement",
												"src": "9369:41:26"
											},
											{
												"expression": {
													"id": 3803,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 3778,
															"name": "info",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3683,
															"src": "9536:4:26",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																"typeString": "struct Tick.Info storage pointer"
															}
														},
														"id": 3780,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "liquidityNet",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3372,
														"src": "9536:17:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int128",
															"typeString": "int128"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"condition": {
															"id": 3781,
															"name": "upper",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3673,
															"src": "9556:5:26",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseExpression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"expression": {
																	"arguments": [
																		{
																			"id": 3798,
																			"name": "liquidityDelta",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3659,
																			"src": "9677:14:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int128",
																				"typeString": "int128"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int128",
																				"typeString": "int128"
																			}
																		],
																		"expression": {
																			"arguments": [
																				{
																					"expression": {
																						"id": 3794,
																						"name": "info",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3683,
																						"src": "9654:4:26",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																							"typeString": "struct Tick.Info storage pointer"
																						}
																					},
																					"id": 3795,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "liquidityNet",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 3372,
																					"src": "9654:17:26",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int128",
																						"typeString": "int128"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_int128",
																						"typeString": "int128"
																					}
																				],
																				"id": 3793,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "9647:6:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_int256_$",
																					"typeString": "type(int256)"
																				},
																				"typeName": {
																					"id": 3792,
																					"name": "int256",
																					"nodeType": "ElementaryTypeName",
																					"src": "9647:6:26",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 3796,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "9647:25:26",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"id": 3797,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "add",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2555,
																		"src": "9647:29:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$",
																			"typeString": "function (int256,int256) pure returns (int256)"
																		}
																	},
																	"id": 3799,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9647:45:26",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"id": 3800,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "toInt128",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2813,
																"src": "9647:54:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_int128_$bound_to$_t_int256_$",
																	"typeString": "function (int256) pure returns (int128)"
																}
															},
															"id": 3801,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9647:56:26",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_int128",
																"typeString": "int128"
															}
														},
														"id": 3802,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "Conditional",
														"src": "9556:147:26",
														"trueExpression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"expression": {
																	"arguments": [
																		{
																			"id": 3788,
																			"name": "liquidityDelta",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3659,
																			"src": "9606:14:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int128",
																				"typeString": "int128"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int128",
																				"typeString": "int128"
																			}
																		],
																		"expression": {
																			"arguments": [
																				{
																					"expression": {
																						"id": 3784,
																						"name": "info",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3683,
																						"src": "9583:4:26",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																							"typeString": "struct Tick.Info storage pointer"
																						}
																					},
																					"id": 3785,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "liquidityNet",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 3372,
																					"src": "9583:17:26",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int128",
																						"typeString": "int128"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_int128",
																						"typeString": "int128"
																					}
																				],
																				"id": 3783,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "9576:6:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_int256_$",
																					"typeString": "type(int256)"
																				},
																				"typeName": {
																					"id": 3782,
																					"name": "int256",
																					"nodeType": "ElementaryTypeName",
																					"src": "9576:6:26",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 3786,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "9576:25:26",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"id": 3787,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sub",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2582,
																		"src": "9576:29:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$",
																			"typeString": "function (int256,int256) pure returns (int256)"
																		}
																	},
																	"id": 3789,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9576:45:26",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"id": 3790,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "toInt128",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2813,
																"src": "9576:54:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_int128_$bound_to$_t_int256_$",
																	"typeString": "function (int256) pure returns (int128)"
																}
															},
															"id": 3791,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9576:56:26",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_int128",
																"typeString": "int128"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_int128",
															"typeString": "int128"
														}
													},
													"src": "9536:167:26",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"id": 3804,
												"nodeType": "ExpressionStatement",
												"src": "9536:167:26"
											}
										]
									},
									"documentation": {
										"id": 3649,
										"nodeType": "StructuredDocumentation",
										"src": "6624:1281:26",
										"text": "@notice Updates a tick and returns true if the tick was flipped from initialized to uninitialized, or vice versa\n @param self The mapping containing all tick information for initialized ticks\n @param tick The tick that will be updated\n @param tickCurrent The current tick\n @param liquidityDelta A new amount of liquidity to be added (subtracted) when tick is crossed from left to right (right to left)\n @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\n @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\n @param rewardGrowthGlobalX128 The all-time global reward growth, per unit of liquidity\n @param secondsPerLiquidityCumulativeX128 The all-time seconds per max(1, liquidity) of the pool\n @param tickCumulative The tick * time elapsed since the pool was first initialized\n @param time The current block timestamp cast to a uint32\n @param upper true for updating a position's upper tick, or false for updating a position's lower tick\n @param maxLiquidity The maximum liquidity allocation for a single tick\n @return flipped Whether the tick was flipped from initialized to uninitialized, or vice versa"
									},
									"id": 3806,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "update",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3676,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3653,
												"mutability": "mutable",
												"name": "self",
												"nodeType": "VariableDeclaration",
												"scope": 3806,
												"src": "7935:40:26",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3389_storage_$",
													"typeString": "mapping(int24 => struct Tick.Info)"
												},
												"typeName": {
													"id": 3652,
													"keyType": {
														"id": 3650,
														"name": "int24",
														"nodeType": "ElementaryTypeName",
														"src": "7943:5:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Mapping",
													"src": "7935:27:26",
													"typeDescriptions": {
														"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3389_storage_$",
														"typeString": "mapping(int24 => struct Tick.Info)"
													},
													"valueType": {
														"id": 3651,
														"name": "Tick.Info",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 3389,
														"src": "7952:9:26",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
															"typeString": "struct Tick.Info"
														}
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3655,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 3806,
												"src": "7985:10:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 3654,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "7985:5:26",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3657,
												"mutability": "mutable",
												"name": "tickCurrent",
												"nodeType": "VariableDeclaration",
												"scope": 3806,
												"src": "8005:17:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 3656,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "8005:5:26",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3659,
												"mutability": "mutable",
												"name": "liquidityDelta",
												"nodeType": "VariableDeclaration",
												"scope": 3806,
												"src": "8032:21:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 3658,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "8032:6:26",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3661,
												"mutability": "mutable",
												"name": "feeGrowthGlobal0X128",
												"nodeType": "VariableDeclaration",
												"scope": 3806,
												"src": "8063:28:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3660,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8063:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3663,
												"mutability": "mutable",
												"name": "feeGrowthGlobal1X128",
												"nodeType": "VariableDeclaration",
												"scope": 3806,
												"src": "8101:28:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3662,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8101:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3665,
												"mutability": "mutable",
												"name": "rewardGrowthGlobalX128",
												"nodeType": "VariableDeclaration",
												"scope": 3806,
												"src": "8139:30:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3664,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8139:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3667,
												"mutability": "mutable",
												"name": "secondsPerLiquidityCumulativeX128",
												"nodeType": "VariableDeclaration",
												"scope": 3806,
												"src": "8179:41:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3666,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "8179:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3669,
												"mutability": "mutable",
												"name": "tickCumulative",
												"nodeType": "VariableDeclaration",
												"scope": 3806,
												"src": "8230:20:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 3668,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "8230:5:26",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3671,
												"mutability": "mutable",
												"name": "time",
												"nodeType": "VariableDeclaration",
												"scope": 3806,
												"src": "8260:11:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 3670,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "8260:6:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3673,
												"mutability": "mutable",
												"name": "upper",
												"nodeType": "VariableDeclaration",
												"scope": 3806,
												"src": "8281:10:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3672,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8281:4:26",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3675,
												"mutability": "mutable",
												"name": "maxLiquidity",
												"nodeType": "VariableDeclaration",
												"scope": 3806,
												"src": "8301:20:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 3674,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "8301:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7925:402:26"
									},
									"returnParameters": {
										"id": 3679,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3678,
												"mutability": "mutable",
												"name": "flipped",
												"nodeType": "VariableDeclaration",
												"scope": 3806,
												"src": "8346:12:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3677,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8346:4:26",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8345:14:26"
									},
									"scope": 3974,
									"src": "7910:1800:26",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3855,
										"nodeType": "Block",
										"src": "10468:381:26",
										"statements": [
											{
												"assignments": [
													3823
												],
												"declarations": [
													{
														"constant": false,
														"id": 3823,
														"mutability": "mutable",
														"name": "info",
														"nodeType": "VariableDeclaration",
														"scope": 3855,
														"src": "10478:22:26",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
															"typeString": "struct Tick.Info"
														},
														"typeName": {
															"id": 3822,
															"name": "Tick.Info",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 3389,
															"src": "10478:9:26",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																"typeString": "struct Tick.Info"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3827,
												"initialValue": {
													"baseExpression": {
														"id": 3824,
														"name": "self",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3811,
														"src": "10503:4:26",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3389_storage_$",
															"typeString": "mapping(int24 => struct Tick.Info storage ref)"
														}
													},
													"id": 3826,
													"indexExpression": {
														"id": 3825,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3813,
														"src": "10508:4:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "10503:10:26",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Info_$3389_storage",
														"typeString": "struct Tick.Info storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10478:35:26"
											},
											{
												"expression": {
													"id": 3853,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 3828,
															"name": "info",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3823,
															"src": "10645:4:26",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																"typeString": "struct Tick.Info storage pointer"
															}
														},
														"id": 3830,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "stakedLiquidityNet",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3374,
														"src": "10645:23:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int128",
															"typeString": "int128"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"condition": {
															"id": 3831,
															"name": "upper",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3817,
															"src": "10671:5:26",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseExpression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"expression": {
																	"arguments": [
																		{
																			"id": 3848,
																			"name": "stakedLiquidityDelta",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3815,
																			"src": "10810:20:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int128",
																				"typeString": "int128"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int128",
																				"typeString": "int128"
																			}
																		],
																		"expression": {
																			"arguments": [
																				{
																					"expression": {
																						"id": 3844,
																						"name": "info",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3823,
																						"src": "10781:4:26",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																							"typeString": "struct Tick.Info storage pointer"
																						}
																					},
																					"id": 3845,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "stakedLiquidityNet",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 3374,
																					"src": "10781:23:26",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int128",
																						"typeString": "int128"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_int128",
																						"typeString": "int128"
																					}
																				],
																				"id": 3843,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "10774:6:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_int256_$",
																					"typeString": "type(int256)"
																				},
																				"typeName": {
																					"id": 3842,
																					"name": "int256",
																					"nodeType": "ElementaryTypeName",
																					"src": "10774:6:26",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 3846,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10774:31:26",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"id": 3847,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "add",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2555,
																		"src": "10774:35:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$",
																			"typeString": "function (int256,int256) pure returns (int256)"
																		}
																	},
																	"id": 3849,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "10774:57:26",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"id": 3850,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "toInt128",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2813,
																"src": "10774:66:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_int128_$bound_to$_t_int256_$",
																	"typeString": "function (int256) pure returns (int128)"
																}
															},
															"id": 3851,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10774:68:26",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_int128",
																"typeString": "int128"
															}
														},
														"id": 3852,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "Conditional",
														"src": "10671:171:26",
														"trueExpression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"expression": {
																	"arguments": [
																		{
																			"id": 3838,
																			"name": "stakedLiquidityDelta",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3815,
																			"src": "10727:20:26",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int128",
																				"typeString": "int128"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int128",
																				"typeString": "int128"
																			}
																		],
																		"expression": {
																			"arguments": [
																				{
																					"expression": {
																						"id": 3834,
																						"name": "info",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3823,
																						"src": "10698:4:26",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																							"typeString": "struct Tick.Info storage pointer"
																						}
																					},
																					"id": 3835,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "stakedLiquidityNet",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 3374,
																					"src": "10698:23:26",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int128",
																						"typeString": "int128"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_int128",
																						"typeString": "int128"
																					}
																				],
																				"id": 3833,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "10691:6:26",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_int256_$",
																					"typeString": "type(int256)"
																				},
																				"typeName": {
																					"id": 3832,
																					"name": "int256",
																					"nodeType": "ElementaryTypeName",
																					"src": "10691:6:26",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 3836,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10691:31:26",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"id": 3837,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sub",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2582,
																		"src": "10691:35:26",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$",
																			"typeString": "function (int256,int256) pure returns (int256)"
																		}
																	},
																	"id": 3839,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "10691:57:26",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"id": 3840,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "toInt128",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2813,
																"src": "10691:66:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_int128_$bound_to$_t_int256_$",
																	"typeString": "function (int256) pure returns (int128)"
																}
															},
															"id": 3841,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10691:68:26",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_int128",
																"typeString": "int128"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_int128",
															"typeString": "int128"
														}
													},
													"src": "10645:197:26",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"id": 3854,
												"nodeType": "ExpressionStatement",
												"src": "10645:197:26"
											}
										]
									},
									"documentation": {
										"id": 3807,
										"nodeType": "StructuredDocumentation",
										"src": "9716:610:26",
										"text": "@notice Updates the staked liquidity component of a tick. Assumes tick is already initialized with an existing position.\n @notice We reuse existing liquidity for staking, so there is no change in liquidity\n @param self The mapping containing all tick information for initialized ticks\n @param tick The tick that will be updated\n @param stakedLiquidityDelta The amount of staked liquidity to be added (subtracted) when tick is crossed from left to right (right to left)\n @param upper true for updating a position's upper tick, or false for updating a position's lower tick"
									},
									"id": 3856,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "updateStake",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3818,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3811,
												"mutability": "mutable",
												"name": "self",
												"nodeType": "VariableDeclaration",
												"scope": 3856,
												"src": "10352:40:26",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3389_storage_$",
													"typeString": "mapping(int24 => struct Tick.Info)"
												},
												"typeName": {
													"id": 3810,
													"keyType": {
														"id": 3808,
														"name": "int24",
														"nodeType": "ElementaryTypeName",
														"src": "10360:5:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Mapping",
													"src": "10352:27:26",
													"typeDescriptions": {
														"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3389_storage_$",
														"typeString": "mapping(int24 => struct Tick.Info)"
													},
													"valueType": {
														"id": 3809,
														"name": "Tick.Info",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 3389,
														"src": "10369:9:26",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
															"typeString": "struct Tick.Info"
														}
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3813,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 3856,
												"src": "10394:10:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 3812,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "10394:5:26",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3815,
												"mutability": "mutable",
												"name": "stakedLiquidityDelta",
												"nodeType": "VariableDeclaration",
												"scope": 3856,
												"src": "10406:27:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 3814,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "10406:6:26",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3817,
												"mutability": "mutable",
												"name": "upper",
												"nodeType": "VariableDeclaration",
												"scope": 3856,
												"src": "10435:10:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3816,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10435:4:26",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10351:95:26"
									},
									"returnParameters": {
										"id": 3819,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10468:0:26"
									},
									"scope": 3974,
									"src": "10331:518:26",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3871,
										"nodeType": "Block",
										"src": "11114:34:26",
										"statements": [
											{
												"expression": {
													"id": 3869,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "11124:17:26",
													"subExpression": {
														"baseExpression": {
															"id": 3866,
															"name": "self",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3861,
															"src": "11131:4:26",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3389_storage_$",
																"typeString": "mapping(int24 => struct Tick.Info storage ref)"
															}
														},
														"id": 3868,
														"indexExpression": {
															"id": 3867,
															"name": "tick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3863,
															"src": "11136:4:26",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11131:10:26",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$3389_storage",
															"typeString": "struct Tick.Info storage ref"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3870,
												"nodeType": "ExpressionStatement",
												"src": "11124:17:26"
											}
										]
									},
									"documentation": {
										"id": 3857,
										"nodeType": "StructuredDocumentation",
										"src": "10855:176:26",
										"text": "@notice Clears tick data\n @param self The mapping containing all initialized tick information for initialized ticks\n @param tick The tick that will be cleared"
									},
									"id": 3872,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "clear",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3864,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3861,
												"mutability": "mutable",
												"name": "self",
												"nodeType": "VariableDeclaration",
												"scope": 3872,
												"src": "11051:40:26",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3389_storage_$",
													"typeString": "mapping(int24 => struct Tick.Info)"
												},
												"typeName": {
													"id": 3860,
													"keyType": {
														"id": 3858,
														"name": "int24",
														"nodeType": "ElementaryTypeName",
														"src": "11059:5:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Mapping",
													"src": "11051:27:26",
													"typeDescriptions": {
														"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3389_storage_$",
														"typeString": "mapping(int24 => struct Tick.Info)"
													},
													"valueType": {
														"id": 3859,
														"name": "Tick.Info",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 3389,
														"src": "11068:9:26",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
															"typeString": "struct Tick.Info"
														}
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3863,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 3872,
												"src": "11093:10:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 3862,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "11093:5:26",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11050:54:26"
									},
									"returnParameters": {
										"id": 3865,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11114:0:26"
									},
									"scope": 3974,
									"src": "11036:112:26",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3972,
										"nodeType": "Block",
										"src": "12382:687:26",
										"statements": [
											{
												"assignments": [
													3899
												],
												"declarations": [
													{
														"constant": false,
														"id": 3899,
														"mutability": "mutable",
														"name": "info",
														"nodeType": "VariableDeclaration",
														"scope": 3972,
														"src": "12392:22:26",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
															"typeString": "struct Tick.Info"
														},
														"typeName": {
															"id": 3898,
															"name": "Tick.Info",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 3389,
															"src": "12392:9:26",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																"typeString": "struct Tick.Info"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3903,
												"initialValue": {
													"baseExpression": {
														"id": 3900,
														"name": "self",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3877,
														"src": "12417:4:26",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3389_storage_$",
															"typeString": "mapping(int24 => struct Tick.Info storage ref)"
														}
													},
													"id": 3902,
													"indexExpression": {
														"id": 3901,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3879,
														"src": "12422:4:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "12417:10:26",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Info_$3389_storage",
														"typeString": "struct Tick.Info storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12392:35:26"
											},
											{
												"expression": {
													"id": 3911,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 3904,
															"name": "info",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3899,
															"src": "12437:4:26",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																"typeString": "struct Tick.Info storage pointer"
															}
														},
														"id": 3906,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "feeGrowthOutside0X128",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3376,
														"src": "12437:26:26",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 3910,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3907,
															"name": "feeGrowthGlobal0X128",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3881,
															"src": "12466:20:26",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"expression": {
																"id": 3908,
																"name": "info",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3899,
																"src": "12489:4:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																	"typeString": "struct Tick.Info storage pointer"
																}
															},
															"id": 3909,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "feeGrowthOutside0X128",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3376,
															"src": "12489:26:26",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "12466:49:26",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "12437:78:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 3912,
												"nodeType": "ExpressionStatement",
												"src": "12437:78:26"
											},
											{
												"expression": {
													"id": 3920,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 3913,
															"name": "info",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3899,
															"src": "12525:4:26",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																"typeString": "struct Tick.Info storage pointer"
															}
														},
														"id": 3915,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "feeGrowthOutside1X128",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3378,
														"src": "12525:26:26",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 3919,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3916,
															"name": "feeGrowthGlobal1X128",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3883,
															"src": "12554:20:26",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"expression": {
																"id": 3917,
																"name": "info",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3899,
																"src": "12577:4:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																	"typeString": "struct Tick.Info storage pointer"
																}
															},
															"id": 3918,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "feeGrowthOutside1X128",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3378,
															"src": "12577:26:26",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "12554:49:26",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "12525:78:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 3921,
												"nodeType": "ExpressionStatement",
												"src": "12525:78:26"
											},
											{
												"expression": {
													"id": 3929,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 3922,
															"name": "info",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3899,
															"src": "12613:4:26",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																"typeString": "struct Tick.Info storage pointer"
															}
														},
														"id": 3924,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "rewardGrowthOutsideX128",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3380,
														"src": "12613:28:26",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 3928,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3925,
															"name": "rewardGrowthGlobalX128",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3891,
															"src": "12644:22:26",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"expression": {
																"id": 3926,
																"name": "info",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3899,
																"src": "12669:4:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																	"typeString": "struct Tick.Info storage pointer"
																}
															},
															"id": 3927,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "rewardGrowthOutsideX128",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3380,
															"src": "12669:28:26",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "12644:53:26",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "12613:84:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 3930,
												"nodeType": "ExpressionStatement",
												"src": "12613:84:26"
											},
											{
												"expression": {
													"id": 3938,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 3931,
															"name": "info",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3899,
															"src": "12707:4:26",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																"typeString": "struct Tick.Info storage pointer"
															}
														},
														"id": 3933,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "secondsPerLiquidityOutsideX128",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3384,
														"src": "12707:35:26",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"id": 3937,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3934,
															"name": "secondsPerLiquidityCumulativeX128",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3885,
															"src": "12745:33:26",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"expression": {
																"id": 3935,
																"name": "info",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3899,
																"src": "12781:4:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																	"typeString": "struct Tick.Info storage pointer"
																}
															},
															"id": 3936,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "secondsPerLiquidityOutsideX128",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3384,
															"src": "12781:35:26",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"src": "12745:71:26",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "12707:109:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"id": 3939,
												"nodeType": "ExpressionStatement",
												"src": "12707:109:26"
											},
											{
												"expression": {
													"id": 3947,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 3940,
															"name": "info",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3899,
															"src": "12826:4:26",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																"typeString": "struct Tick.Info storage pointer"
															}
														},
														"id": 3942,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "tickCumulativeOutside",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3382,
														"src": "12826:26:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														},
														"id": 3946,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3943,
															"name": "tickCumulative",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3887,
															"src": "12855:14:26",
															"typeDescriptions": {
																"typeIdentifier": "t_int56",
																"typeString": "int56"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"expression": {
																"id": 3944,
																"name": "info",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3899,
																"src": "12872:4:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																	"typeString": "struct Tick.Info storage pointer"
																}
															},
															"id": 3945,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "tickCumulativeOutside",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3382,
															"src": "12872:26:26",
															"typeDescriptions": {
																"typeIdentifier": "t_int56",
																"typeString": "int56"
															}
														},
														"src": "12855:43:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														}
													},
													"src": "12826:72:26",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"id": 3948,
												"nodeType": "ExpressionStatement",
												"src": "12826:72:26"
											},
											{
												"expression": {
													"id": 3956,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 3949,
															"name": "info",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3899,
															"src": "12908:4:26",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																"typeString": "struct Tick.Info storage pointer"
															}
														},
														"id": 3951,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "secondsOutside",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3386,
														"src": "12908:19:26",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														},
														"id": 3955,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3952,
															"name": "time",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3889,
															"src": "12930:4:26",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"expression": {
																"id": 3953,
																"name": "info",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3899,
																"src": "12937:4:26",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																	"typeString": "struct Tick.Info storage pointer"
																}
															},
															"id": 3954,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "secondsOutside",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3386,
															"src": "12937:19:26",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														"src": "12930:26:26",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"src": "12908:48:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"id": 3957,
												"nodeType": "ExpressionStatement",
												"src": "12908:48:26"
											},
											{
												"expression": {
													"id": 3963,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 3958,
															"name": "nets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3894,
															"src": "12966:4:26",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_LiquidityNets_$3394_memory_ptr",
																"typeString": "struct Tick.LiquidityNets memory"
															}
														},
														"id": 3960,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "liquidityNet",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3391,
														"src": "12966:17:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int128",
															"typeString": "int128"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 3961,
															"name": "info",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3899,
															"src": "12986:4:26",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																"typeString": "struct Tick.Info storage pointer"
															}
														},
														"id": 3962,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "liquidityNet",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3372,
														"src": "12986:17:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int128",
															"typeString": "int128"
														}
													},
													"src": "12966:37:26",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"id": 3964,
												"nodeType": "ExpressionStatement",
												"src": "12966:37:26"
											},
											{
												"expression": {
													"id": 3970,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 3965,
															"name": "nets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3894,
															"src": "13013:4:26",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_LiquidityNets_$3394_memory_ptr",
																"typeString": "struct Tick.LiquidityNets memory"
															}
														},
														"id": 3967,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "stakedLiquidityNet",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3393,
														"src": "13013:23:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int128",
															"typeString": "int128"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 3968,
															"name": "info",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3899,
															"src": "13039:4:26",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
																"typeString": "struct Tick.Info storage pointer"
															}
														},
														"id": 3969,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "stakedLiquidityNet",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3374,
														"src": "13039:23:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int128",
															"typeString": "int128"
														}
													},
													"src": "13013:49:26",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"id": 3971,
												"nodeType": "ExpressionStatement",
												"src": "13013:49:26"
											}
										]
									},
									"documentation": {
										"id": 3873,
										"nodeType": "StructuredDocumentation",
										"src": "11154:869:26",
										"text": "@notice Transitions to next tick as needed by price movement\n @param self The mapping containing all tick information for initialized ticks\n @param tick The destination tick of the transition\n @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\n @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\n @param secondsPerLiquidityCumulativeX128 The current seconds per liquidity\n @param tickCumulative The tick * time elapsed since the pool was first initialized\n @param time The current block.timestamp\n @param rewardGrowthGlobalX128 The all-time global reward growth, per unit of liquidity\n @return nets The amount of liquidity and staked liquidity added (subtracted) when tick is crossed from left to right (right to left)"
									},
									"id": 3973,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "cross",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3892,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3877,
												"mutability": "mutable",
												"name": "self",
												"nodeType": "VariableDeclaration",
												"scope": 3973,
												"src": "12052:40:26",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3389_storage_$",
													"typeString": "mapping(int24 => struct Tick.Info)"
												},
												"typeName": {
													"id": 3876,
													"keyType": {
														"id": 3874,
														"name": "int24",
														"nodeType": "ElementaryTypeName",
														"src": "12060:5:26",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Mapping",
													"src": "12052:27:26",
													"typeDescriptions": {
														"typeIdentifier": "t_mapping$_t_int24_$_t_struct$_Info_$3389_storage_$",
														"typeString": "mapping(int24 => struct Tick.Info)"
													},
													"valueType": {
														"id": 3875,
														"name": "Tick.Info",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 3389,
														"src": "12069:9:26",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Info_$3389_storage_ptr",
															"typeString": "struct Tick.Info"
														}
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3879,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 3973,
												"src": "12102:10:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 3878,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "12102:5:26",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3881,
												"mutability": "mutable",
												"name": "feeGrowthGlobal0X128",
												"nodeType": "VariableDeclaration",
												"scope": 3973,
												"src": "12122:28:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3880,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12122:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3883,
												"mutability": "mutable",
												"name": "feeGrowthGlobal1X128",
												"nodeType": "VariableDeclaration",
												"scope": 3973,
												"src": "12160:28:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3882,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12160:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3885,
												"mutability": "mutable",
												"name": "secondsPerLiquidityCumulativeX128",
												"nodeType": "VariableDeclaration",
												"scope": 3973,
												"src": "12198:41:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3884,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "12198:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3887,
												"mutability": "mutable",
												"name": "tickCumulative",
												"nodeType": "VariableDeclaration",
												"scope": 3973,
												"src": "12249:20:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 3886,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "12249:5:26",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3889,
												"mutability": "mutable",
												"name": "time",
												"nodeType": "VariableDeclaration",
												"scope": 3973,
												"src": "12279:11:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 3888,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "12279:6:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3891,
												"mutability": "mutable",
												"name": "rewardGrowthGlobalX128",
												"nodeType": "VariableDeclaration",
												"scope": 3973,
												"src": "12300:30:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3890,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12300:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12042:294:26"
									},
									"returnParameters": {
										"id": 3895,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3894,
												"mutability": "mutable",
												"name": "nets",
												"nodeType": "VariableDeclaration",
												"scope": 3973,
												"src": "12355:25:26",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_LiquidityNets_$3394_memory_ptr",
													"typeString": "struct Tick.LiquidityNets"
												},
												"typeName": {
													"id": 3893,
													"name": "LiquidityNets",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 3394,
													"src": "12355:13:26",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_LiquidityNets_$3394_storage_ptr",
														"typeString": "struct Tick.LiquidityNets"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12354:27:26"
									},
									"scope": 3974,
									"src": "12028:1041:26",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3975,
							"src": "292:12779:26"
						}
					],
					"src": "45:13027:26"
				},
				"id": 26
			},
			"contracts/core/libraries/TickBitmap.sol": {
				"ast": {
					"absolutePath": "contracts/core/libraries/TickBitmap.sol",
					"exportedSymbols": {
						"BitMath": [
							2211
						],
						"TickBitmap": [
							4230
						]
					},
					"id": 4231,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3976,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:27"
						},
						{
							"absolutePath": "contracts/core/libraries/BitMath.sol",
							"file": "./BitMath.sol",
							"id": 3977,
							"nodeType": "ImportDirective",
							"scope": 4231,
							"sourceUnit": 2212,
							"src": "71:23:27",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 3978,
								"nodeType": "StructuredDocumentation",
								"src": "96:243:27",
								"text": "@title Packed tick initialized state library\n @notice Stores a packed mapping of tick index to its initialized state\n @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word."
							},
							"fullyImplemented": true,
							"id": 4230,
							"linearizedBaseContracts": [
								4230
							],
							"name": "TickBitmap",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 4006,
										"nodeType": "Block",
										"src": "775:79:27",
										"statements": [
											{
												"expression": {
													"id": 3995,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3988,
														"name": "wordPos",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3984,
														"src": "785:7:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int16",
															"typeString": "int16"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																},
																"id": 3993,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3991,
																	"name": "tick",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3981,
																	"src": "801:4:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3992,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "809:1:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "801:9:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															],
															"id": 3990,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "795:5:27",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_int16_$",
																"typeString": "type(int16)"
															},
															"typeName": {
																"id": 3989,
																"name": "int16",
																"nodeType": "ElementaryTypeName",
																"src": "795:5:27",
																"typeDescriptions": {}
															}
														},
														"id": 3994,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "795:16:27",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int16",
															"typeString": "int16"
														}
													},
													"src": "785:26:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int16",
														"typeString": "int16"
													}
												},
												"id": 3996,
												"nodeType": "ExpressionStatement",
												"src": "785:26:27"
											},
											{
												"expression": {
													"id": 4004,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3997,
														"name": "bitPos",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3986,
														"src": "821:6:27",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																},
																"id": 4002,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 4000,
																	"name": "tick",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3981,
																	"src": "836:4:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "%",
																"rightExpression": {
																	"hexValue": "323536",
																	"id": 4001,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "843:3:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_256_by_1",
																		"typeString": "int_const 256"
																	},
																	"value": "256"
																},
																"src": "836:10:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															],
															"id": 3999,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "830:5:27",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint8_$",
																"typeString": "type(uint8)"
															},
															"typeName": {
																"id": 3998,
																"name": "uint8",
																"nodeType": "ElementaryTypeName",
																"src": "830:5:27",
																"typeDescriptions": {}
															}
														},
														"id": 4003,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "830:17:27",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "821:26:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 4005,
												"nodeType": "ExpressionStatement",
												"src": "821:26:27"
											}
										]
									},
									"documentation": {
										"id": 3979,
										"nodeType": "StructuredDocumentation",
										"src": "364:325:27",
										"text": "@notice Computes the position in the mapping where the initialized bit for a tick lives\n @param tick The tick for which to compute the position\n @return wordPos The key in the mapping containing the word in which the bit is stored\n @return bitPos The bit position in the word where the flag is stored"
									},
									"id": 4007,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "position",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3982,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3981,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 4007,
												"src": "712:10:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 3980,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "712:5:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "711:12:27"
									},
									"returnParameters": {
										"id": 3987,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3984,
												"mutability": "mutable",
												"name": "wordPos",
												"nodeType": "VariableDeclaration",
												"scope": 4007,
												"src": "746:13:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int16",
													"typeString": "int16"
												},
												"typeName": {
													"id": 3983,
													"name": "int16",
													"nodeType": "ElementaryTypeName",
													"src": "746:5:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int16",
														"typeString": "int16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3986,
												"mutability": "mutable",
												"name": "bitPos",
												"nodeType": "VariableDeclaration",
												"scope": 4007,
												"src": "761:12:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 3985,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "761:5:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "745:29:27"
									},
									"scope": 4230,
									"src": "694:160:27",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 4049,
										"nodeType": "Block",
										"src": "1208:220:27",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															},
															"id": 4024,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																},
																"id": 4022,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 4020,
																	"name": "tick",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4014,
																	"src": "1226:4:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "%",
																"rightExpression": {
																	"id": 4021,
																	"name": "tickSpacing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4016,
																	"src": "1233:11:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																"src": "1226:18:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 4023,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1248:1:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1226:23:27",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 4019,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1218:7:27",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 4025,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1218:32:27",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4026,
												"nodeType": "ExpressionStatement",
												"src": "1218:32:27"
											},
											{
												"assignments": [
													4028,
													4030
												],
												"declarations": [
													{
														"constant": false,
														"id": 4028,
														"mutability": "mutable",
														"name": "wordPos",
														"nodeType": "VariableDeclaration",
														"scope": 4049,
														"src": "1295:13:27",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int16",
															"typeString": "int16"
														},
														"typeName": {
															"id": 4027,
															"name": "int16",
															"nodeType": "ElementaryTypeName",
															"src": "1295:5:27",
															"typeDescriptions": {
																"typeIdentifier": "t_int16",
																"typeString": "int16"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 4030,
														"mutability": "mutable",
														"name": "bitPos",
														"nodeType": "VariableDeclaration",
														"scope": 4049,
														"src": "1310:12:27",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"typeName": {
															"id": 4029,
															"name": "uint8",
															"nodeType": "ElementaryTypeName",
															"src": "1310:5:27",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4036,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															},
															"id": 4034,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 4032,
																"name": "tick",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4014,
																"src": "1335:4:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 4033,
																"name": "tickSpacing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4016,
																"src": "1342:11:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"src": "1335:18:27",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														],
														"id": 4031,
														"name": "position",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4007,
														"src": "1326:8:27",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_int24_$returns$_t_int16_$_t_uint8_$",
															"typeString": "function (int24) pure returns (int16,uint8)"
														}
													},
													"id": 4035,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1326:28:27",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_int16_$_t_uint8_$",
														"typeString": "tuple(int16,uint8)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1294:60:27"
											},
											{
												"assignments": [
													4038
												],
												"declarations": [
													{
														"constant": false,
														"id": 4038,
														"mutability": "mutable",
														"name": "mask",
														"nodeType": "VariableDeclaration",
														"scope": 4049,
														"src": "1364:12:27",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 4037,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1364:7:27",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4042,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4041,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 4039,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1379:1:27",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"id": 4040,
														"name": "bitPos",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4030,
														"src": "1384:6:27",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "1379:11:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1364:26:27"
											},
											{
												"expression": {
													"id": 4047,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 4043,
															"name": "self",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4012,
															"src": "1400:4:27",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_int16_$_t_uint256_$",
																"typeString": "mapping(int16 => uint256)"
															}
														},
														"id": 4045,
														"indexExpression": {
															"id": 4044,
															"name": "wordPos",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4028,
															"src": "1405:7:27",
															"typeDescriptions": {
																"typeIdentifier": "t_int16",
																"typeString": "int16"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1400:13:27",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "^=",
													"rightHandSide": {
														"id": 4046,
														"name": "mask",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4038,
														"src": "1417:4:27",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1400:21:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 4048,
												"nodeType": "ExpressionStatement",
												"src": "1400:21:27"
											}
										]
									},
									"documentation": {
										"id": 4008,
										"nodeType": "StructuredDocumentation",
										"src": "860:245:27",
										"text": "@notice Flips the initialized state for a given tick from false to true, or vice versa\n @param self The mapping in which to flip the tick\n @param tick The tick to flip\n @param tickSpacing The spacing between usable ticks"
									},
									"id": 4050,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "flipTick",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4017,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4012,
												"mutability": "mutable",
												"name": "self",
												"nodeType": "VariableDeclaration",
												"scope": 4050,
												"src": "1128:38:27",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_int16_$_t_uint256_$",
													"typeString": "mapping(int16 => uint256)"
												},
												"typeName": {
													"id": 4011,
													"keyType": {
														"id": 4009,
														"name": "int16",
														"nodeType": "ElementaryTypeName",
														"src": "1136:5:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int16",
															"typeString": "int16"
														}
													},
													"nodeType": "Mapping",
													"src": "1128:25:27",
													"typeDescriptions": {
														"typeIdentifier": "t_mapping$_t_int16_$_t_uint256_$",
														"typeString": "mapping(int16 => uint256)"
													},
													"valueType": {
														"id": 4010,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "1145:7:27",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4014,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 4050,
												"src": "1168:10:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 4013,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1168:5:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4016,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 4050,
												"src": "1180:17:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 4015,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1180:5:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1127:71:27"
									},
									"returnParameters": {
										"id": 4018,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1208:0:27"
									},
									"scope": 4230,
									"src": "1110:318:27",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 4228,
										"nodeType": "Block",
										"src": "2380:1707:27",
										"statements": [
											{
												"assignments": [
													4069
												],
												"declarations": [
													{
														"constant": false,
														"id": 4069,
														"mutability": "mutable",
														"name": "compressed",
														"nodeType": "VariableDeclaration",
														"scope": 4228,
														"src": "2390:16:27",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 4068,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "2390:5:27",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4073,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													},
													"id": 4072,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 4070,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4057,
														"src": "2409:4:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 4071,
														"name": "tickSpacing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4059,
														"src": "2416:11:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "2409:18:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2390:37:27"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 4082,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"id": 4076,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4074,
															"name": "tick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4057,
															"src": "2441:4:27",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"hexValue": "30",
															"id": 4075,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2448:1:27",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "2441:8:27",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"id": 4081,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															},
															"id": 4079,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 4077,
																"name": "tick",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4057,
																"src": "2453:4:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"id": 4078,
																"name": "tickSpacing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4059,
																"src": "2460:11:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"src": "2453:18:27",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "30",
															"id": 4080,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2475:1:27",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "2453:23:27",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "2441:35:27",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4086,
												"nodeType": "IfStatement",
												"src": "2437:53:27",
												"trueBody": {
													"expression": {
														"id": 4084,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": false,
														"src": "2478:12:27",
														"subExpression": {
															"id": 4083,
															"name": "compressed",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4069,
															"src": "2478:10:27",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"id": 4085,
													"nodeType": "ExpressionStatement",
													"src": "2478:12:27"
												}
											},
											{
												"condition": {
													"id": 4087,
													"name": "lte",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 4061,
													"src": "2540:3:27",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 4226,
													"nodeType": "Block",
													"src": "3267:814:27",
													"statements": [
														{
															"assignments": [
																4154,
																4156
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 4154,
																	"mutability": "mutable",
																	"name": "wordPos",
																	"nodeType": "VariableDeclaration",
																	"scope": 4226,
																	"src": "3379:13:27",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int16",
																		"typeString": "int16"
																	},
																	"typeName": {
																		"id": 4153,
																		"name": "int16",
																		"nodeType": "ElementaryTypeName",
																		"src": "3379:5:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int16",
																			"typeString": "int16"
																		}
																	},
																	"visibility": "internal"
																},
																{
																	"constant": false,
																	"id": 4156,
																	"mutability": "mutable",
																	"name": "bitPos",
																	"nodeType": "VariableDeclaration",
																	"scope": 4226,
																	"src": "3394:12:27",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	"typeName": {
																		"id": 4155,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "3394:5:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 4162,
															"initialValue": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		},
																		"id": 4160,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4158,
																			"name": "compressed",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4069,
																			"src": "3419:10:27",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 4159,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3432:1:27",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "3419:14:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	],
																	"id": 4157,
																	"name": "position",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4007,
																	"src": "3410:8:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_int24_$returns$_t_int16_$_t_uint8_$",
																		"typeString": "function (int24) pure returns (int16,uint8)"
																	}
																},
																"id": 4161,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3410:24:27",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_int16_$_t_uint8_$",
																	"typeString": "tuple(int16,uint8)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3378:56:27"
														},
														{
															"assignments": [
																4164
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 4164,
																	"mutability": "mutable",
																	"name": "mask",
																	"nodeType": "VariableDeclaration",
																	"scope": 4226,
																	"src": "3506:12:27",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 4163,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "3506:7:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 4173,
															"initialValue": {
																"id": 4172,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "~",
																"prefix": true,
																"src": "3521:20:27",
																"subExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 4170,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 4167,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"hexValue": "31",
																							"id": 4165,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "3524:1:27",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_1_by_1",
																								"typeString": "int_const 1"
																							},
																							"value": "1"
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "<<",
																						"rightExpression": {
																							"id": 4166,
																							"name": "bitPos",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4156,
																							"src": "3529:6:27",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint8",
																								"typeString": "uint8"
																							}
																						},
																						"src": "3524:11:27",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 4168,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "3523:13:27",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 4169,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3539:1:27",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "3523:17:27",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 4171,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3522:19:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3506:35:27"
														},
														{
															"assignments": [
																4175
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 4175,
																	"mutability": "mutable",
																	"name": "masked",
																	"nodeType": "VariableDeclaration",
																	"scope": 4226,
																	"src": "3555:14:27",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 4174,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "3555:7:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 4181,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 4180,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"baseExpression": {
																		"id": 4176,
																		"name": "self",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4055,
																		"src": "3572:4:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_int16_$_t_uint256_$",
																			"typeString": "mapping(int16 => uint256)"
																		}
																	},
																	"id": 4178,
																	"indexExpression": {
																		"id": 4177,
																		"name": "wordPos",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4154,
																		"src": "3577:7:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int16",
																			"typeString": "int16"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "3572:13:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 4179,
																	"name": "mask",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4164,
																	"src": "3588:4:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3572:20:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3555:37:27"
														},
														{
															"expression": {
																"id": 4186,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 4182,
																	"name": "initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4066,
																	"src": "3717:11:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 4185,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 4183,
																		"name": "masked",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4175,
																		"src": "3731:6:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "!=",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 4184,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3741:1:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "3731:11:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "3717:25:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 4187,
															"nodeType": "ExpressionStatement",
															"src": "3717:25:27"
														},
														{
															"expression": {
																"id": 4224,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 4188,
																	"name": "next",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4064,
																	"src": "3866:4:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"condition": {
																		"id": 4189,
																		"name": "initialized",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4066,
																		"src": "3873:11:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"commonType": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		},
																		"id": 4222,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_int24",
																						"typeString": "int24"
																					},
																					"id": 4219,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"commonType": {
																							"typeIdentifier": "t_int24",
																							"typeString": "int24"
																						},
																						"id": 4208,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 4206,
																							"name": "compressed",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4069,
																							"src": "4007:10:27",
																							"typeDescriptions": {
																								"typeIdentifier": "t_int24",
																								"typeString": "int24"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "+",
																						"rightExpression": {
																							"hexValue": "31",
																							"id": 4207,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "4020:1:27",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_1_by_1",
																								"typeString": "int_const 1"
																							},
																							"value": "1"
																						},
																						"src": "4007:14:27",
																						"typeDescriptions": {
																							"typeIdentifier": "t_int24",
																							"typeString": "int24"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "+",
																					"rightExpression": {
																						"arguments": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint8",
																									"typeString": "uint8"
																								},
																								"id": 4217,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"expression": {
																										"arguments": [
																											{
																												"id": 4213,
																												"isConstant": false,
																												"isLValue": false,
																												"isPure": true,
																												"lValueRequested": false,
																												"nodeType": "ElementaryTypeNameExpression",
																												"src": "4035:5:27",
																												"typeDescriptions": {
																													"typeIdentifier": "t_type$_t_uint8_$",
																													"typeString": "type(uint8)"
																												},
																												"typeName": {
																													"id": 4212,
																													"name": "uint8",
																													"nodeType": "ElementaryTypeName",
																													"src": "4035:5:27",
																													"typeDescriptions": {}
																												}
																											}
																										],
																										"expression": {
																											"argumentTypes": [
																												{
																													"typeIdentifier": "t_type$_t_uint8_$",
																													"typeString": "type(uint8)"
																												}
																											],
																											"id": 4211,
																											"name": "type",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 4294967269,
																											"src": "4030:4:27",
																											"typeDescriptions": {
																												"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																												"typeString": "function () pure"
																											}
																										},
																										"id": 4214,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "functionCall",
																										"lValueRequested": false,
																										"names": [],
																										"nodeType": "FunctionCall",
																										"src": "4030:11:27",
																										"tryCall": false,
																										"typeDescriptions": {
																											"typeIdentifier": "t_magic_meta_type_t_uint8",
																											"typeString": "type(uint8)"
																										}
																									},
																									"id": 4215,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"lValueRequested": false,
																									"memberName": "max",
																									"nodeType": "MemberAccess",
																									"src": "4030:15:27",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint8",
																										"typeString": "uint8"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "-",
																								"rightExpression": {
																									"id": 4216,
																									"name": "bitPos",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 4156,
																									"src": "4048:6:27",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint8",
																										"typeString": "uint8"
																									}
																								},
																								"src": "4030:24:27",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint8",
																									"typeString": "uint8"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint8",
																									"typeString": "uint8"
																								}
																							],
																							"id": 4210,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "4024:5:27",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_int24_$",
																								"typeString": "type(int24)"
																							},
																							"typeName": {
																								"id": 4209,
																								"name": "int24",
																								"nodeType": "ElementaryTypeName",
																								"src": "4024:5:27",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 4218,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "4024:31:27",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_int24",
																							"typeString": "int24"
																						}
																					},
																					"src": "4007:48:27",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int24",
																						"typeString": "int24"
																					}
																				}
																			],
																			"id": 4220,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "4006:50:27",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 4221,
																			"name": "tickSpacing",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4059,
																			"src": "4059:11:27",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		},
																		"src": "4006:64:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	},
																	"id": 4223,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "3873:197:27",
																	"trueExpression": {
																		"commonType": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		},
																		"id": 4205,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_int24",
																						"typeString": "int24"
																					},
																					"id": 4202,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"commonType": {
																							"typeIdentifier": "t_int24",
																							"typeString": "int24"
																						},
																						"id": 4192,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 4190,
																							"name": "compressed",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4069,
																							"src": "3904:10:27",
																							"typeDescriptions": {
																								"typeIdentifier": "t_int24",
																								"typeString": "int24"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "+",
																						"rightExpression": {
																							"hexValue": "31",
																							"id": 4191,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "3917:1:27",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_1_by_1",
																								"typeString": "int_const 1"
																							},
																							"value": "1"
																						},
																						"src": "3904:14:27",
																						"typeDescriptions": {
																							"typeIdentifier": "t_int24",
																							"typeString": "int24"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "+",
																					"rightExpression": {
																						"arguments": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint8",
																									"typeString": "uint8"
																								},
																								"id": 4200,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"arguments": [
																										{
																											"id": 4197,
																											"name": "masked",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 4175,
																											"src": "3955:6:27",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										}
																									],
																									"expression": {
																										"argumentTypes": [
																											{
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										],
																										"expression": {
																											"id": 4195,
																											"name": "BitMath",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 2211,
																											"src": "3927:7:27",
																											"typeDescriptions": {
																												"typeIdentifier": "t_type$_t_contract$_BitMath_$2211_$",
																												"typeString": "type(library BitMath)"
																											}
																										},
																										"id": 4196,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "leastSignificantBit",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 2210,
																										"src": "3927:27:27",
																										"typeDescriptions": {
																											"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint8_$",
																											"typeString": "function (uint256) pure returns (uint8)"
																										}
																									},
																									"id": 4198,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"kind": "functionCall",
																									"lValueRequested": false,
																									"names": [],
																									"nodeType": "FunctionCall",
																									"src": "3927:35:27",
																									"tryCall": false,
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint8",
																										"typeString": "uint8"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "-",
																								"rightExpression": {
																									"id": 4199,
																									"name": "bitPos",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 4156,
																									"src": "3965:6:27",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint8",
																										"typeString": "uint8"
																									}
																								},
																								"src": "3927:44:27",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint8",
																									"typeString": "uint8"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint8",
																									"typeString": "uint8"
																								}
																							],
																							"id": 4194,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "3921:5:27",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_int24_$",
																								"typeString": "type(int24)"
																							},
																							"typeName": {
																								"id": 4193,
																								"name": "int24",
																								"nodeType": "ElementaryTypeName",
																								"src": "3921:5:27",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 4201,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "3921:51:27",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_int24",
																							"typeString": "int24"
																						}
																					},
																					"src": "3904:68:27",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int24",
																						"typeString": "int24"
																					}
																				}
																			],
																			"id": 4203,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "3903:70:27",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 4204,
																			"name": "tickSpacing",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4059,
																			"src": "3976:11:27",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		},
																		"src": "3903:84:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																"src": "3866:204:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"id": 4225,
															"nodeType": "ExpressionStatement",
															"src": "3866:204:27"
														}
													]
												},
												"id": 4227,
												"nodeType": "IfStatement",
												"src": "2536:1545:27",
												"trueBody": {
													"id": 4152,
													"nodeType": "Block",
													"src": "2545:716:27",
													"statements": [
														{
															"assignments": [
																4089,
																4091
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 4089,
																	"mutability": "mutable",
																	"name": "wordPos",
																	"nodeType": "VariableDeclaration",
																	"scope": 4152,
																	"src": "2560:13:27",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int16",
																		"typeString": "int16"
																	},
																	"typeName": {
																		"id": 4088,
																		"name": "int16",
																		"nodeType": "ElementaryTypeName",
																		"src": "2560:5:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int16",
																			"typeString": "int16"
																		}
																	},
																	"visibility": "internal"
																},
																{
																	"constant": false,
																	"id": 4091,
																	"mutability": "mutable",
																	"name": "bitPos",
																	"nodeType": "VariableDeclaration",
																	"scope": 4152,
																	"src": "2575:12:27",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	"typeName": {
																		"id": 4090,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "2575:5:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 4095,
															"initialValue": {
																"arguments": [
																	{
																		"id": 4093,
																		"name": "compressed",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4069,
																		"src": "2600:10:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	],
																	"id": 4092,
																	"name": "position",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4007,
																	"src": "2591:8:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_int24_$returns$_t_int16_$_t_uint8_$",
																		"typeString": "function (int24) pure returns (int16,uint8)"
																	}
																},
																"id": 4094,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2591:20:27",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_int16_$_t_uint8_$",
																	"typeString": "tuple(int16,uint8)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "2559:52:27"
														},
														{
															"assignments": [
																4097
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 4097,
																	"mutability": "mutable",
																	"name": "mask",
																	"nodeType": "VariableDeclaration",
																	"scope": 4152,
																	"src": "2692:12:27",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 4096,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2692:7:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 4109,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 4108,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 4103,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 4100,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"hexValue": "31",
																					"id": 4098,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "2708:1:27",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1_by_1",
																						"typeString": "int_const 1"
																					},
																					"value": "1"
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<<",
																				"rightExpression": {
																					"id": 4099,
																					"name": "bitPos",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4091,
																					"src": "2713:6:27",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint8",
																						"typeString": "uint8"
																					}
																				},
																				"src": "2708:11:27",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 4101,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "2707:13:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 4102,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2723:1:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "2707:17:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 4106,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "31",
																				"id": 4104,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2728:1:27",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<<",
																			"rightExpression": {
																				"id": 4105,
																				"name": "bitPos",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4091,
																				"src": "2733:6:27",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"src": "2728:11:27",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 4107,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "2727:13:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2707:33:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "2692:48:27"
														},
														{
															"assignments": [
																4111
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 4111,
																	"mutability": "mutable",
																	"name": "masked",
																	"nodeType": "VariableDeclaration",
																	"scope": 4152,
																	"src": "2754:14:27",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 4110,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2754:7:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 4117,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 4116,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"baseExpression": {
																		"id": 4112,
																		"name": "self",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4055,
																		"src": "2771:4:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_int16_$_t_uint256_$",
																			"typeString": "mapping(int16 => uint256)"
																		}
																	},
																	"id": 4114,
																	"indexExpression": {
																		"id": 4113,
																		"name": "wordPos",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4089,
																		"src": "2776:7:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int16",
																			"typeString": "int16"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2771:13:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 4115,
																	"name": "mask",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4097,
																	"src": "2787:4:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2771:20:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "2754:37:27"
														},
														{
															"expression": {
																"id": 4122,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 4118,
																	"name": "initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4066,
																	"src": "2924:11:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 4121,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 4119,
																		"name": "masked",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4111,
																		"src": "2938:6:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "!=",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 4120,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2948:1:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "2938:11:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "2924:25:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 4123,
															"nodeType": "ExpressionStatement",
															"src": "2924:25:27"
														},
														{
															"expression": {
																"id": 4150,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 4124,
																	"name": "next",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4064,
																	"src": "3073:4:27",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"condition": {
																		"id": 4125,
																		"name": "initialized",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4066,
																		"src": "3080:11:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"commonType": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		},
																		"id": 4148,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_int24",
																						"typeString": "int24"
																					},
																					"id": 4145,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 4140,
																						"name": "compressed",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4069,
																						"src": "3209:10:27",
																						"typeDescriptions": {
																							"typeIdentifier": "t_int24",
																							"typeString": "int24"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "-",
																					"rightExpression": {
																						"arguments": [
																							{
																								"id": 4143,
																								"name": "bitPos",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4091,
																								"src": "3228:6:27",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint8",
																									"typeString": "uint8"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint8",
																									"typeString": "uint8"
																								}
																							],
																							"id": 4142,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "3222:5:27",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_int24_$",
																								"typeString": "type(int24)"
																							},
																							"typeName": {
																								"id": 4141,
																								"name": "int24",
																								"nodeType": "ElementaryTypeName",
																								"src": "3222:5:27",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 4144,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "3222:13:27",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_int24",
																							"typeString": "int24"
																						}
																					},
																					"src": "3209:26:27",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int24",
																						"typeString": "int24"
																					}
																				}
																			],
																			"id": 4146,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "3208:28:27",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 4147,
																			"name": "tickSpacing",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4059,
																			"src": "3239:11:27",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		},
																		"src": "3208:42:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	},
																	"id": 4149,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "3080:170:27",
																	"trueExpression": {
																		"commonType": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		},
																		"id": 4139,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_int24",
																						"typeString": "int24"
																					},
																					"id": 4136,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 4126,
																						"name": "compressed",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4069,
																						"src": "3111:10:27",
																						"typeDescriptions": {
																							"typeIdentifier": "t_int24",
																							"typeString": "int24"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "-",
																					"rightExpression": {
																						"arguments": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint8",
																									"typeString": "uint8"
																								},
																								"id": 4134,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 4129,
																									"name": "bitPos",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 4091,
																									"src": "3130:6:27",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint8",
																										"typeString": "uint8"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "-",
																								"rightExpression": {
																									"arguments": [
																										{
																											"id": 4132,
																											"name": "masked",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 4111,
																											"src": "3166:6:27",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										}
																									],
																									"expression": {
																										"argumentTypes": [
																											{
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										],
																										"expression": {
																											"id": 4130,
																											"name": "BitMath",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 2211,
																											"src": "3139:7:27",
																											"typeDescriptions": {
																												"typeIdentifier": "t_type$_t_contract$_BitMath_$2211_$",
																												"typeString": "type(library BitMath)"
																											}
																										},
																										"id": 4131,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "mostSignificantBit",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 2049,
																										"src": "3139:26:27",
																										"typeDescriptions": {
																											"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint8_$",
																											"typeString": "function (uint256) pure returns (uint8)"
																										}
																									},
																									"id": 4133,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"kind": "functionCall",
																									"lValueRequested": false,
																									"names": [],
																									"nodeType": "FunctionCall",
																									"src": "3139:34:27",
																									"tryCall": false,
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint8",
																										"typeString": "uint8"
																									}
																								},
																								"src": "3130:43:27",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint8",
																									"typeString": "uint8"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint8",
																									"typeString": "uint8"
																								}
																							],
																							"id": 4128,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "3124:5:27",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_int24_$",
																								"typeString": "type(int24)"
																							},
																							"typeName": {
																								"id": 4127,
																								"name": "int24",
																								"nodeType": "ElementaryTypeName",
																								"src": "3124:5:27",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 4135,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "3124:50:27",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_int24",
																							"typeString": "int24"
																						}
																					},
																					"src": "3111:63:27",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int24",
																						"typeString": "int24"
																					}
																				}
																			],
																			"id": 4137,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "3110:65:27",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 4138,
																			"name": "tickSpacing",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4059,
																			"src": "3178:11:27",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		},
																		"src": "3110:79:27",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																"src": "3073:177:27",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"id": 4151,
															"nodeType": "ExpressionStatement",
															"src": "3073:177:27"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 4051,
										"nodeType": "StructuredDocumentation",
										"src": "1434:727:27",
										"text": "@notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\n to the left (less than or equal to) or right (greater than) of the given tick\n @param self The mapping in which to compute the next initialized tick\n @param tick The starting tick\n @param tickSpacing The spacing between usable ticks\n @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\n @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\n @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks"
									},
									"id": 4229,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "nextInitializedTickWithinOneWord",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4062,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4055,
												"mutability": "mutable",
												"name": "self",
												"nodeType": "VariableDeclaration",
												"scope": 4229,
												"src": "2217:38:27",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_int16_$_t_uint256_$",
													"typeString": "mapping(int16 => uint256)"
												},
												"typeName": {
													"id": 4054,
													"keyType": {
														"id": 4052,
														"name": "int16",
														"nodeType": "ElementaryTypeName",
														"src": "2225:5:27",
														"typeDescriptions": {
															"typeIdentifier": "t_int16",
															"typeString": "int16"
														}
													},
													"nodeType": "Mapping",
													"src": "2217:25:27",
													"typeDescriptions": {
														"typeIdentifier": "t_mapping$_t_int16_$_t_uint256_$",
														"typeString": "mapping(int16 => uint256)"
													},
													"valueType": {
														"id": 4053,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "2234:7:27",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4057,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 4229,
												"src": "2265:10:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 4056,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2265:5:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4059,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 4229,
												"src": "2285:17:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 4058,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2285:5:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4061,
												"mutability": "mutable",
												"name": "lte",
												"nodeType": "VariableDeclaration",
												"scope": 4229,
												"src": "2312:8:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 4060,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2312:4:27",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2207:119:27"
									},
									"returnParameters": {
										"id": 4067,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4064,
												"mutability": "mutable",
												"name": "next",
												"nodeType": "VariableDeclaration",
												"scope": 4229,
												"src": "2350:10:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 4063,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2350:5:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4066,
												"mutability": "mutable",
												"name": "initialized",
												"nodeType": "VariableDeclaration",
												"scope": 4229,
												"src": "2362:16:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 4065,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2362:4:27",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2349:30:27"
									},
									"scope": 4230,
									"src": "2166:1921:27",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 4231,
							"src": "339:3750:27"
						}
					],
					"src": "45:4045:27"
				},
				"id": 27
			},
			"contracts/core/libraries/TickMath.sol": {
				"ast": {
					"absolutePath": "contracts/core/libraries/TickMath.sol",
					"exportedSymbols": {
						"TickMath": [
							4765
						]
					},
					"id": 4766,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 4232,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:31:28"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 4233,
								"nodeType": "StructuredDocumentation",
								"src": "78:235:28",
								"text": "@title Math library for computing sqrt prices from ticks and vice versa\n @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n prices between 2**-128 and 2**128"
							},
							"fullyImplemented": true,
							"id": 4765,
							"linearizedBaseContracts": [
								4765
							],
							"name": "TickMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"documentation": {
										"id": 4234,
										"nodeType": "StructuredDocumentation",
										"src": "336:108:28",
										"text": "@dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"
									},
									"id": 4238,
									"mutability": "constant",
									"name": "MIN_TICK",
									"nodeType": "VariableDeclaration",
									"scope": 4765,
									"src": "449:42:28",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_int24",
										"typeString": "int24"
									},
									"typeName": {
										"id": 4235,
										"name": "int24",
										"nodeType": "ElementaryTypeName",
										"src": "449:5:28",
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"value": {
										"id": 4237,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "-",
										"prefix": true,
										"src": "484:7:28",
										"subExpression": {
											"hexValue": "383837323732",
											"id": 4236,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "485:6:28",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_887272_by_1",
												"typeString": "int_const 887272"
											},
											"value": "887272"
										},
										"typeDescriptions": {
											"typeIdentifier": "t_rational_minus_887272_by_1",
											"typeString": "int_const -887272"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 4239,
										"nodeType": "StructuredDocumentation",
										"src": "497:107:28",
										"text": "@dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"
									},
									"id": 4243,
									"mutability": "constant",
									"name": "MAX_TICK",
									"nodeType": "VariableDeclaration",
									"scope": 4765,
									"src": "609:44:28",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_int24",
										"typeString": "int24"
									},
									"typeName": {
										"id": 4240,
										"name": "int24",
										"nodeType": "ElementaryTypeName",
										"src": "609:5:28",
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"value": {
										"id": 4242,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "-",
										"prefix": true,
										"src": "644:9:28",
										"subExpression": {
											"id": 4241,
											"name": "MIN_TICK",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4238,
											"src": "645:8:28",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											}
										},
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 4244,
										"nodeType": "StructuredDocumentation",
										"src": "660:116:28",
										"text": "@dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"
									},
									"id": 4247,
									"mutability": "constant",
									"name": "MIN_SQRT_RATIO",
									"nodeType": "VariableDeclaration",
									"scope": 4765,
									"src": "781:53:28",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint160",
										"typeString": "uint160"
									},
									"typeName": {
										"id": 4245,
										"name": "uint160",
										"nodeType": "ElementaryTypeName",
										"src": "781:7:28",
										"typeDescriptions": {
											"typeIdentifier": "t_uint160",
											"typeString": "uint160"
										}
									},
									"value": {
										"hexValue": "34323935313238373339",
										"id": 4246,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "824:10:28",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_4295128739_by_1",
											"typeString": "int_const 4295128739"
										},
										"value": "4295128739"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 4248,
										"nodeType": "StructuredDocumentation",
										"src": "840:116:28",
										"text": "@dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"
									},
									"id": 4251,
									"mutability": "constant",
									"name": "MAX_SQRT_RATIO",
									"nodeType": "VariableDeclaration",
									"scope": 4765,
									"src": "961:92:28",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint160",
										"typeString": "uint160"
									},
									"typeName": {
										"id": 4249,
										"name": "uint160",
										"nodeType": "ElementaryTypeName",
										"src": "961:7:28",
										"typeDescriptions": {
											"typeIdentifier": "t_uint160",
											"typeString": "uint160"
										}
									},
									"value": {
										"hexValue": "31343631343436373033343835323130313033323837323733303532323033393838383232333738373233393730333432",
										"id": 4250,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1004:49:28",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1461446703485210103287273052203988822378723970342_by_1",
											"typeString": "int_const 1461...(41 digits omitted)...0342"
										},
										"value": "1461446703485210103287273052203988822378723970342"
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 4624,
										"nodeType": "Block",
										"src": "1447:2495:28",
										"statements": [
											{
												"assignments": [
													4260
												],
												"declarations": [
													{
														"constant": false,
														"id": 4260,
														"mutability": "mutable",
														"name": "absTick",
														"nodeType": "VariableDeclaration",
														"scope": 4624,
														"src": "1457:15:28",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 4259,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1457:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4280,
												"initialValue": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"id": 4263,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4261,
															"name": "tick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4254,
															"src": "1475:4:28",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"hexValue": "30",
															"id": 4262,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1482:1:28",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1475:8:28",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 4276,
																		"name": "tick",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4254,
																		"src": "1526:4:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	],
																	"id": 4275,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1519:6:28",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_int256_$",
																		"typeString": "type(int256)"
																	},
																	"typeName": {
																		"id": 4274,
																		"name": "int256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1519:6:28",
																		"typeDescriptions": {}
																	}
																},
																"id": 4277,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1519:12:28",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															],
															"id": 4273,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1511:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 4272,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1511:7:28",
																"typeDescriptions": {}
															}
														},
														"id": 4278,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1511:21:28",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4279,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1475:57:28",
													"trueExpression": {
														"arguments": [
															{
																"id": 4270,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "-",
																"prefix": true,
																"src": "1494:13:28",
																"subExpression": {
																	"arguments": [
																		{
																			"id": 4268,
																			"name": "tick",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4254,
																			"src": "1502:4:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		],
																		"id": 4267,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "1495:6:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 4266,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "1495:6:28",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 4269,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1495:12:28",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															],
															"id": 4265,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1486:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 4264,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1486:7:28",
																"typeDescriptions": {}
															}
														},
														"id": 4271,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1486:22:28",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1457:75:28"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4287,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 4282,
																"name": "absTick",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4260,
																"src": "1550:7:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 4285,
																		"name": "MAX_TICK",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4243,
																		"src": "1569:8:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	],
																	"id": 4284,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1561:7:28",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 4283,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1561:7:28",
																		"typeDescriptions": {}
																	}
																},
																"id": 4286,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1561:17:28",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1550:28:28",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54",
															"id": 4288,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1580:3:28",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_846b7b6deb1cfa110d0ea7ec6162a7123b761785528db70cceed5143183b11fc",
																"typeString": "literal_string \"T\""
															},
															"value": "T"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_846b7b6deb1cfa110d0ea7ec6162a7123b761785528db70cceed5143183b11fc",
																"typeString": "literal_string \"T\""
															}
														],
														"id": 4281,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1542:7:28",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 4289,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1542:42:28",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4290,
												"nodeType": "ExpressionStatement",
												"src": "1542:42:28"
											},
											{
												"assignments": [
													4292
												],
												"declarations": [
													{
														"constant": false,
														"id": 4292,
														"mutability": "mutable",
														"name": "ratio",
														"nodeType": "VariableDeclaration",
														"scope": 4624,
														"src": "1595:13:28",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 4291,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1595:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4301,
												"initialValue": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4297,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4295,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 4293,
																"name": "absTick",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4260,
																"src": "1611:7:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"hexValue": "307831",
																"id": 4294,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1621:3:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "0x1"
															},
															"src": "1611:13:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "30",
															"id": 4296,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1628:1:28",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1611:18:28",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"hexValue": "3078313030303030303030303030303030303030303030303030303030303030303030",
														"id": 4299,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1669:35:28",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
															"typeString": "int_const 3402...(31 digits omitted)...1456"
														},
														"value": "0x100000000000000000000000000000000"
													},
													"id": 4300,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1611:93:28",
													"trueExpression": {
														"hexValue": "30786666666362393333626436666164333761613264313632643161353934303031",
														"id": 4298,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1632:34:28",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_340265354078544963557816517032075149313_by_1",
															"typeString": "int_const 3402...(31 digits omitted)...9313"
														},
														"value": "0xfffcb933bd6fad37aa2d162d1a594001"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint136",
														"typeString": "uint136"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1595:109:28"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4306,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4304,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4302,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4260,
															"src": "1718:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307832",
															"id": 4303,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1728:3:28",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "0x2"
														},
														"src": "1718:13:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4305,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1735:1:28",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1718:18:28",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4316,
												"nodeType": "IfStatement",
												"src": "1714:83:28",
												"trueBody": {
													"expression": {
														"id": 4314,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4307,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4292,
															"src": "1738:5:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4313,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4310,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4308,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4292,
																			"src": "1747:5:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666663937323732333733643431333235396134363939303538306532313361",
																			"id": 4309,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1755:34:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340248342086729790484326174814286782778_by_1",
																				"typeString": "int_const 3402...(31 digits omitted)...2778"
																			},
																			"value": "0xfff97272373d413259a46990580e213a"
																		},
																		"src": "1747:42:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4311,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1746:44:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4312,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1794:3:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1746:51:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1738:59:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4315,
													"nodeType": "ExpressionStatement",
													"src": "1738:59:28"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4321,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4319,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4317,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4260,
															"src": "1811:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307834",
															"id": 4318,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1821:3:28",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_4_by_1",
																"typeString": "int_const 4"
															},
															"value": "0x4"
														},
														"src": "1811:13:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4320,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1828:1:28",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1811:18:28",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4331,
												"nodeType": "IfStatement",
												"src": "1807:83:28",
												"trueBody": {
													"expression": {
														"id": 4329,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4322,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4292,
															"src": "1831:5:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4328,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4325,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4323,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4292,
																			"src": "1840:5:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666663265353066356636353639333265663132333537636633633766646363",
																			"id": 4324,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1848:34:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340214320654664324051920982716015181260_by_1",
																				"typeString": "int_const 3402...(31 digits omitted)...1260"
																			},
																			"value": "0xfff2e50f5f656932ef12357cf3c7fdcc"
																		},
																		"src": "1840:42:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4326,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1839:44:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4327,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1887:3:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1839:51:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1831:59:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4330,
													"nodeType": "ExpressionStatement",
													"src": "1831:59:28"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4336,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4334,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4332,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4260,
															"src": "1904:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307838",
															"id": 4333,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1914:3:28",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_8_by_1",
																"typeString": "int_const 8"
															},
															"value": "0x8"
														},
														"src": "1904:13:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4335,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1921:1:28",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1904:18:28",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4346,
												"nodeType": "IfStatement",
												"src": "1900:83:28",
												"trueBody": {
													"expression": {
														"id": 4344,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4337,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4292,
															"src": "1924:5:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4343,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4340,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4338,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4292,
																			"src": "1933:5:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666653563616361376531306534653631633336323465616130393431636430",
																			"id": 4339,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1941:34:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340146287995602323631171512101879684304_by_1",
																				"typeString": "int_const 3401...(31 digits omitted)...4304"
																			},
																			"value": "0xffe5caca7e10e4e61c3624eaa0941cd0"
																		},
																		"src": "1933:42:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4341,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1932:44:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4342,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1980:3:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1932:51:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1924:59:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4345,
													"nodeType": "ExpressionStatement",
													"src": "1924:59:28"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4351,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4349,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4347,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4260,
															"src": "1997:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783130",
															"id": 4348,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2007:4:28",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_16_by_1",
																"typeString": "int_const 16"
															},
															"value": "0x10"
														},
														"src": "1997:14:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4350,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2015:1:28",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1997:19:28",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4361,
												"nodeType": "IfStatement",
												"src": "1993:84:28",
												"trueBody": {
													"expression": {
														"id": 4359,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4352,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4292,
															"src": "2018:5:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4358,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4355,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4353,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4292,
																			"src": "2027:5:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666636239383433643630663631353963396462353838333563393236363434",
																			"id": 4354,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2035:34:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340010263488231146823593991679159461444_by_1",
																				"typeString": "int_const 3400...(31 digits omitted)...1444"
																			},
																			"value": "0xffcb9843d60f6159c9db58835c926644"
																		},
																		"src": "2027:42:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4356,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2026:44:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4357,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2074:3:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2026:51:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2018:59:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4360,
													"nodeType": "ExpressionStatement",
													"src": "2018:59:28"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4366,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4364,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4362,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4260,
															"src": "2091:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783230",
															"id": 4363,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2101:4:28",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "0x20"
														},
														"src": "2091:14:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4365,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2109:1:28",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2091:19:28",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4376,
												"nodeType": "IfStatement",
												"src": "2087:84:28",
												"trueBody": {
													"expression": {
														"id": 4374,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4367,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4292,
															"src": "2112:5:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4373,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4370,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4368,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4292,
																			"src": "2121:5:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666393733623431666139386330383134373265363839366466623235346330",
																			"id": 4369,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2129:34:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_339738377640345403697157401104375502016_by_1",
																				"typeString": "int_const 3397...(31 digits omitted)...2016"
																			},
																			"value": "0xff973b41fa98c081472e6896dfb254c0"
																		},
																		"src": "2121:42:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4371,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2120:44:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4372,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2168:3:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2120:51:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2112:59:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4375,
													"nodeType": "ExpressionStatement",
													"src": "2112:59:28"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4381,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4379,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4377,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4260,
															"src": "2185:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783430",
															"id": 4378,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2195:4:28",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_64_by_1",
																"typeString": "int_const 64"
															},
															"value": "0x40"
														},
														"src": "2185:14:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4380,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2203:1:28",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2185:19:28",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4391,
												"nodeType": "IfStatement",
												"src": "2181:84:28",
												"trueBody": {
													"expression": {
														"id": 4389,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4382,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4292,
															"src": "2206:5:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4388,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4385,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4383,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4292,
																			"src": "2215:5:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666326561313634363663393661333834336563373862333236623532383631",
																			"id": 4384,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2223:34:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_339195258003219555707034227454543997025_by_1",
																				"typeString": "int_const 3391...(31 digits omitted)...7025"
																			},
																			"value": "0xff2ea16466c96a3843ec78b326b52861"
																		},
																		"src": "2215:42:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4386,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2214:44:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4387,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2262:3:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2214:51:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2206:59:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4390,
													"nodeType": "ExpressionStatement",
													"src": "2206:59:28"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4396,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4394,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4392,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4260,
															"src": "2279:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783830",
															"id": 4393,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2289:4:28",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_128_by_1",
																"typeString": "int_const 128"
															},
															"value": "0x80"
														},
														"src": "2279:14:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4395,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2297:1:28",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2279:19:28",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4406,
												"nodeType": "IfStatement",
												"src": "2275:84:28",
												"trueBody": {
													"expression": {
														"id": 4404,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4397,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4292,
															"src": "2300:5:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4403,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4400,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4398,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4292,
																			"src": "2309:5:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786665356465653034366139396132613831316334363166313936396333303533",
																			"id": 4399,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2317:34:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_338111622100601834656805679988414885971_by_1",
																				"typeString": "int_const 3381...(31 digits omitted)...5971"
																			},
																			"value": "0xfe5dee046a99a2a811c461f1969c3053"
																		},
																		"src": "2309:42:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4401,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2308:44:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4402,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2356:3:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2308:51:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2300:59:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4405,
													"nodeType": "ExpressionStatement",
													"src": "2300:59:28"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4411,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4409,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4407,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4260,
															"src": "2373:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078313030",
															"id": 4408,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2383:5:28",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_256_by_1",
																"typeString": "int_const 256"
															},
															"value": "0x100"
														},
														"src": "2373:15:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4410,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2392:1:28",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2373:20:28",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4421,
												"nodeType": "IfStatement",
												"src": "2369:85:28",
												"trueBody": {
													"expression": {
														"id": 4419,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4412,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4292,
															"src": "2395:5:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4418,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4415,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4413,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4292,
																			"src": "2404:5:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786663626538366337393030613838616564636666633833623437396161336134",
																			"id": 4414,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2412:34:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_335954724994790223023589805789778977700_by_1",
																				"typeString": "int_const 3359...(31 digits omitted)...7700"
																			},
																			"value": "0xfcbe86c7900a88aedcffc83b479aa3a4"
																		},
																		"src": "2404:42:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4416,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2403:44:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4417,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2451:3:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2403:51:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2395:59:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4420,
													"nodeType": "ExpressionStatement",
													"src": "2395:59:28"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4426,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4424,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4422,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4260,
															"src": "2468:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078323030",
															"id": 4423,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2478:5:28",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_512_by_1",
																"typeString": "int_const 512"
															},
															"value": "0x200"
														},
														"src": "2468:15:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4425,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2487:1:28",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2468:20:28",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4436,
												"nodeType": "IfStatement",
												"src": "2464:85:28",
												"trueBody": {
													"expression": {
														"id": 4434,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4427,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4292,
															"src": "2490:5:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4433,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4430,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4428,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4292,
																			"src": "2499:5:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786639383761373235336163343133313736663262303734636637383135653534",
																			"id": 4429,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2507:34:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_331682121138379247127172139078559817300_by_1",
																				"typeString": "int_const 3316...(31 digits omitted)...7300"
																			},
																			"value": "0xf987a7253ac413176f2b074cf7815e54"
																		},
																		"src": "2499:42:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4431,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2498:44:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4432,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2546:3:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2498:51:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2490:59:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4435,
													"nodeType": "ExpressionStatement",
													"src": "2490:59:28"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4441,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4439,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4437,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4260,
															"src": "2563:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078343030",
															"id": 4438,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2573:5:28",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1024_by_1",
																"typeString": "int_const 1024"
															},
															"value": "0x400"
														},
														"src": "2563:15:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4440,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2582:1:28",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2563:20:28",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4451,
												"nodeType": "IfStatement",
												"src": "2559:85:28",
												"trueBody": {
													"expression": {
														"id": 4449,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4442,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4292,
															"src": "2585:5:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4448,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4445,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4443,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4292,
																			"src": "2594:5:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786633333932623038323262373030303539343063376133393865346237306633",
																			"id": 4444,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2602:34:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_323299236684853023288211250268160618739_by_1",
																				"typeString": "int_const 3232...(31 digits omitted)...8739"
																			},
																			"value": "0xf3392b0822b70005940c7a398e4b70f3"
																		},
																		"src": "2594:42:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4446,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2593:44:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4447,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2641:3:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2593:51:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2585:59:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4450,
													"nodeType": "ExpressionStatement",
													"src": "2585:59:28"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4456,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4454,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4452,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4260,
															"src": "2658:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078383030",
															"id": 4453,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2668:5:28",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2048_by_1",
																"typeString": "int_const 2048"
															},
															"value": "0x800"
														},
														"src": "2658:15:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4455,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2677:1:28",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2658:20:28",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4466,
												"nodeType": "IfStatement",
												"src": "2654:85:28",
												"trueBody": {
													"expression": {
														"id": 4464,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4457,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4292,
															"src": "2680:5:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4463,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4460,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4458,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4292,
																			"src": "2689:5:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786537313539343735613263323962373434336232396337666136653838396439",
																			"id": 4459,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2697:34:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_307163716377032989948697243942600083929_by_1",
																				"typeString": "int_const 3071...(31 digits omitted)...3929"
																			},
																			"value": "0xe7159475a2c29b7443b29c7fa6e889d9"
																		},
																		"src": "2689:42:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4461,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2688:44:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4462,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2736:3:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2688:51:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2680:59:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4465,
													"nodeType": "ExpressionStatement",
													"src": "2680:59:28"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4471,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4469,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4467,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4260,
															"src": "2753:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307831303030",
															"id": 4468,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2763:6:28",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_4096_by_1",
																"typeString": "int_const 4096"
															},
															"value": "0x1000"
														},
														"src": "2753:16:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4470,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2773:1:28",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2753:21:28",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4481,
												"nodeType": "IfStatement",
												"src": "2749:86:28",
												"trueBody": {
													"expression": {
														"id": 4479,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4472,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4292,
															"src": "2776:5:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4478,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4475,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4473,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4292,
																			"src": "2785:5:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786430393766336264666432303232623838343561643866373932616135383235",
																			"id": 4474,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2793:34:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_277268403626896220162999269216087595045_by_1",
																				"typeString": "int_const 2772...(31 digits omitted)...5045"
																			},
																			"value": "0xd097f3bdfd2022b8845ad8f792aa5825"
																		},
																		"src": "2785:42:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4476,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2784:44:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4477,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2832:3:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2784:51:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2776:59:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4480,
													"nodeType": "ExpressionStatement",
													"src": "2776:59:28"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4486,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4484,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4482,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4260,
															"src": "2849:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307832303030",
															"id": 4483,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2859:6:28",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_8192_by_1",
																"typeString": "int_const 8192"
															},
															"value": "0x2000"
														},
														"src": "2849:16:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4485,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2869:1:28",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2849:21:28",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4496,
												"nodeType": "IfStatement",
												"src": "2845:86:28",
												"trueBody": {
													"expression": {
														"id": 4494,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4487,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4292,
															"src": "2872:5:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4493,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4490,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4488,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4292,
																			"src": "2881:5:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786139663734363436326438373066646638613635646331663930653036316535",
																			"id": 4489,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2889:34:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_225923453940442621947126027127485391333_by_1",
																				"typeString": "int_const 2259...(31 digits omitted)...1333"
																			},
																			"value": "0xa9f746462d870fdf8a65dc1f90e061e5"
																		},
																		"src": "2881:42:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4491,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2880:44:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4492,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2928:3:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2880:51:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2872:59:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4495,
													"nodeType": "ExpressionStatement",
													"src": "2872:59:28"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4501,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4499,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4497,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4260,
															"src": "2945:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307834303030",
															"id": 4498,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2955:6:28",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_16384_by_1",
																"typeString": "int_const 16384"
															},
															"value": "0x4000"
														},
														"src": "2945:16:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4500,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2965:1:28",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2945:21:28",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4511,
												"nodeType": "IfStatement",
												"src": "2941:86:28",
												"trueBody": {
													"expression": {
														"id": 4509,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4502,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4292,
															"src": "2968:5:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4508,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4505,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4503,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4292,
																			"src": "2977:5:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783730643836396131353664326131623839306262336466363262616633326637",
																			"id": 4504,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2985:34:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_149997214084966997727330242082538205943_by_1",
																				"typeString": "int_const 1499...(31 digits omitted)...5943"
																			},
																			"value": "0x70d869a156d2a1b890bb3df62baf32f7"
																		},
																		"src": "2977:42:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4506,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2976:44:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4507,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3024:3:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2976:51:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2968:59:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4510,
													"nodeType": "ExpressionStatement",
													"src": "2968:59:28"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4516,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4514,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4512,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4260,
															"src": "3041:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307838303030",
															"id": 4513,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3051:6:28",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32768_by_1",
																"typeString": "int_const 32768"
															},
															"value": "0x8000"
														},
														"src": "3041:16:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4515,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3061:1:28",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3041:21:28",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4526,
												"nodeType": "IfStatement",
												"src": "3037:86:28",
												"trueBody": {
													"expression": {
														"id": 4524,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4517,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4292,
															"src": "3064:5:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4523,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4520,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4518,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4292,
																			"src": "3073:5:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783331626531333566393764303866643938313233313530353534326663666136",
																			"id": 4519,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3081:34:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_66119101136024775622716233608466517926_by_1",
																				"typeString": "int_const 6611...(30 digits omitted)...7926"
																			},
																			"value": "0x31be135f97d08fd981231505542fcfa6"
																		},
																		"src": "3073:42:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4521,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3072:44:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4522,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3120:3:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3072:51:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3064:59:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4525,
													"nodeType": "ExpressionStatement",
													"src": "3064:59:28"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4531,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4529,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4527,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4260,
															"src": "3137:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783130303030",
															"id": 4528,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3147:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_65536_by_1",
																"typeString": "int_const 65536"
															},
															"value": "0x10000"
														},
														"src": "3137:17:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4530,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3158:1:28",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3137:22:28",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4541,
												"nodeType": "IfStatement",
												"src": "3133:86:28",
												"trueBody": {
													"expression": {
														"id": 4539,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4532,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4292,
															"src": "3161:5:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4538,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4535,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4533,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4292,
																			"src": "3170:5:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "307839616135303862356237613834653163363737646535346633653939626339",
																			"id": 4534,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3178:33:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_12847376061809297530290974190478138313_by_1",
																				"typeString": "int_const 1284...(30 digits omitted)...8313"
																			},
																			"value": "0x9aa508b5b7a84e1c677de54f3e99bc9"
																		},
																		"src": "3170:41:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4536,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3169:43:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4537,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3216:3:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3169:50:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3161:58:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4540,
													"nodeType": "ExpressionStatement",
													"src": "3161:58:28"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4546,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4544,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4542,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4260,
															"src": "3233:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783230303030",
															"id": 4543,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3243:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_131072_by_1",
																"typeString": "int_const 131072"
															},
															"value": "0x20000"
														},
														"src": "3233:17:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4545,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3254:1:28",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3233:22:28",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4556,
												"nodeType": "IfStatement",
												"src": "3229:85:28",
												"trueBody": {
													"expression": {
														"id": 4554,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4547,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4292,
															"src": "3257:5:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4553,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4550,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4548,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4292,
																			"src": "3266:5:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "3078356436616638646564623831313936363939633332393232356565363034",
																			"id": 4549,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3274:32:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_485053260817066172746253684029974020_by_1",
																				"typeString": "int_const 4850...(28 digits omitted)...4020"
																			},
																			"value": "0x5d6af8dedb81196699c329225ee604"
																		},
																		"src": "3266:40:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4551,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3265:42:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4552,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3311:3:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3265:49:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3257:57:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4555,
													"nodeType": "ExpressionStatement",
													"src": "3257:57:28"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4561,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4559,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4557,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4260,
															"src": "3328:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783430303030",
															"id": 4558,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3338:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_262144_by_1",
																"typeString": "int_const 262144"
															},
															"value": "0x40000"
														},
														"src": "3328:17:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4560,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3349:1:28",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3328:22:28",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4571,
												"nodeType": "IfStatement",
												"src": "3324:83:28",
												"trueBody": {
													"expression": {
														"id": 4569,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4562,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4292,
															"src": "3352:5:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4568,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4565,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4563,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4292,
																			"src": "3361:5:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "307832323136653538346635666131656139323630343162656466653938",
																			"id": 4564,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3369:30:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_691415978906521570653435304214168_by_1",
																				"typeString": "int_const 6914...(25 digits omitted)...4168"
																			},
																			"value": "0x2216e584f5fa1ea926041bedfe98"
																		},
																		"src": "3361:38:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4566,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3360:40:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4567,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3404:3:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3360:47:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3352:55:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4570,
													"nodeType": "ExpressionStatement",
													"src": "3352:55:28"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4576,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4574,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4572,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4260,
															"src": "3421:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783830303030",
															"id": 4573,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3431:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_524288_by_1",
																"typeString": "int_const 524288"
															},
															"value": "0x80000"
														},
														"src": "3421:17:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 4575,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3442:1:28",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3421:22:28",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4586,
												"nodeType": "IfStatement",
												"src": "3417:78:28",
												"trueBody": {
													"expression": {
														"id": 4584,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4577,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4292,
															"src": "3445:5:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4583,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4580,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4578,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4292,
																			"src": "3454:5:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783438613137303339316637646334323434346538666132",
																			"id": 4579,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3462:25:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1404880482679654955896180642_by_1",
																				"typeString": "int_const 1404880482679654955896180642"
																			},
																			"value": "0x48a170391f7dc42444e8fa2"
																		},
																		"src": "3454:33:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4581,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3453:35:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4582,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3492:3:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3453:42:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3445:50:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4585,
													"nodeType": "ExpressionStatement",
													"src": "3445:50:28"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													},
													"id": 4589,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 4587,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4254,
														"src": "3510:4:28",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 4588,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3517:1:28",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3510:8:28",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4600,
												"nodeType": "IfStatement",
												"src": "3506:47:28",
												"trueBody": {
													"expression": {
														"id": 4598,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4590,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4292,
															"src": "3520:5:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4597,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 4593,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3533:7:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 4592,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "3533:7:28",
																				"typeDescriptions": {}
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			}
																		],
																		"id": 4591,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "3528:4:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 4594,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3528:13:28",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_uint256",
																		"typeString": "type(uint256)"
																	}
																},
																"id": 4595,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "max",
																"nodeType": "MemberAccess",
																"src": "3528:17:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 4596,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4292,
																"src": "3548:5:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3528:25:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3520:33:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4599,
													"nodeType": "ExpressionStatement",
													"src": "3520:33:28"
												}
											},
											{
												"expression": {
													"id": 4622,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 4601,
														"name": "sqrtPriceX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4257,
														"src": "3863:12:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 4620,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 4606,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 4604,
																				"name": "ratio",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4292,
																				"src": "3887:5:28",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">>",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 4605,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3896:2:28",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "3887:11:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 4607,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3886:13:28",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"components": [
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 4615,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 4613,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 4608,
																						"name": "ratio",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4292,
																						"src": "3903:5:28",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "%",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_rational_4294967296_by_1",
																									"typeString": "int_const 4294967296"
																								},
																								"id": 4611,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"leftExpression": {
																									"hexValue": "31",
																									"id": 4609,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "3912:1:28",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_1_by_1",
																										"typeString": "int_const 1"
																									},
																									"value": "1"
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "3332",
																									"id": 4610,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "3917:2:28",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_32_by_1",
																										"typeString": "int_const 32"
																									},
																									"value": "32"
																								},
																								"src": "3912:7:28",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_4294967296_by_1",
																									"typeString": "int_const 4294967296"
																								}
																							}
																						],
																						"id": 4612,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "3911:9:28",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_4294967296_by_1",
																							"typeString": "int_const 4294967296"
																						}
																					},
																					"src": "3903:17:28",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"hexValue": "30",
																					"id": 4614,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3924:1:28",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0"
																				},
																				"src": "3903:22:28",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseExpression": {
																				"hexValue": "31",
																				"id": 4617,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3932:1:28",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"id": 4618,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "Conditional",
																			"src": "3903:30:28",
																			"trueExpression": {
																				"hexValue": "30",
																				"id": 4616,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3928:1:28",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"id": 4619,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3902:32:28",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "3886:48:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 4603,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3878:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint160_$",
																"typeString": "type(uint160)"
															},
															"typeName": {
																"id": 4602,
																"name": "uint160",
																"nodeType": "ElementaryTypeName",
																"src": "3878:7:28",
																"typeDescriptions": {}
															}
														},
														"id": 4621,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3878:57:28",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "3863:72:28",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"id": 4623,
												"nodeType": "ExpressionStatement",
												"src": "3863:72:28"
											}
										]
									},
									"documentation": {
										"id": 4252,
										"nodeType": "StructuredDocumentation",
										"src": "1060:297:28",
										"text": "@notice Calculates sqrt(1.0001^tick) * 2^96\n @dev Throws if |tick| > max tick\n @param tick The input tick for the above formula\n @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n at the given tick"
									},
									"id": 4625,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getSqrtRatioAtTick",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4255,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4254,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 4625,
												"src": "1390:10:28",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 4253,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1390:5:28",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1389:12:28"
									},
									"returnParameters": {
										"id": 4258,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4257,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 4625,
												"src": "1425:20:28",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 4256,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1425:7:28",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1424:22:28"
									},
									"scope": 4765,
									"src": "1362:2580:28",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 4763,
										"nodeType": "Block",
										"src": "4446:4196:28",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 4640,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 4636,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 4634,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4628,
																	"src": "4563:12:28",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"id": 4635,
																	"name": "MIN_SQRT_RATIO",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4247,
																	"src": "4579:14:28",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "4563:30:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 4639,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 4637,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4628,
																	"src": "4597:12:28",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 4638,
																	"name": "MAX_SQRT_RATIO",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4251,
																	"src": "4612:14:28",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "4597:29:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "4563:63:28",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "52",
															"id": 4641,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4628:3:28",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2",
																"typeString": "literal_string \"R\""
															},
															"value": "R"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2",
																"typeString": "literal_string \"R\""
															}
														],
														"id": 4633,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4555:7:28",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 4642,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4555:77:28",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4643,
												"nodeType": "ExpressionStatement",
												"src": "4555:77:28"
											},
											{
												"assignments": [
													4645
												],
												"declarations": [
													{
														"constant": false,
														"id": 4645,
														"mutability": "mutable",
														"name": "ratio",
														"nodeType": "VariableDeclaration",
														"scope": 4763,
														"src": "4642:13:28",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 4644,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4642:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4652,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4651,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 4648,
																"name": "sqrtPriceX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4628,
																"src": "4666:12:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															],
															"id": 4647,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4658:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 4646,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "4658:7:28",
																"typeDescriptions": {}
															}
														},
														"id": 4649,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4658:21:28",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "3332",
														"id": 4650,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4683:2:28",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"src": "4658:27:28",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4642:43:28"
											},
											{
												"assignments": [
													4654
												],
												"declarations": [
													{
														"constant": false,
														"id": 4654,
														"mutability": "mutable",
														"name": "r",
														"nodeType": "VariableDeclaration",
														"scope": 4763,
														"src": "4696:9:28",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 4653,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4696:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4656,
												"initialValue": {
													"id": 4655,
													"name": "ratio",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 4645,
													"src": "4708:5:28",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4696:17:28"
											},
											{
												"assignments": [
													4658
												],
												"declarations": [
													{
														"constant": false,
														"id": 4658,
														"mutability": "mutable",
														"name": "msb",
														"nodeType": "VariableDeclaration",
														"scope": 4763,
														"src": "4723:11:28",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 4657,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4723:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4660,
												"initialValue": {
													"hexValue": "30",
													"id": 4659,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4737:1:28",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4723:15:28"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4758:139:28",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4772:58:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4785:1:28",
																		"type": "",
																		"value": "7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "4791:1:28"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4794:34:28",
																				"type": "",
																				"value": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4788:2:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4788:41:28"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "4781:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "4781:49:28"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "4776:1:28",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4843:17:28",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "4853:3:28"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4858:1:28"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "4850:2:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "4850:10:28"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "4843:3:28"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4873:14:28",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4882:1:28"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "4885:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "4878:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "4878:9:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "4873:1:28"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4658,
														"isOffset": false,
														"isSlot": false,
														"src": "4843:3:28",
														"valueSize": 1
													},
													{
														"declaration": 4658,
														"isOffset": false,
														"isSlot": false,
														"src": "4853:3:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "4791:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "4873:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "4885:1:28",
														"valueSize": 1
													}
												],
												"id": 4661,
												"nodeType": "InlineAssembly",
												"src": "4749:148:28"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4915:123:28",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4929:42:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4942:1:28",
																		"type": "",
																		"value": "6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "4948:1:28"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4951:18:28",
																				"type": "",
																				"value": "0xFFFFFFFFFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4945:2:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4945:25:28"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "4938:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "4938:33:28"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "4933:1:28",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4984:17:28",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "4994:3:28"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4999:1:28"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "4991:2:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "4991:10:28"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "4984:3:28"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5014:14:28",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5023:1:28"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5026:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5019:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "5019:9:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5014:1:28"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4658,
														"isOffset": false,
														"isSlot": false,
														"src": "4984:3:28",
														"valueSize": 1
													},
													{
														"declaration": 4658,
														"isOffset": false,
														"isSlot": false,
														"src": "4994:3:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "4948:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "5014:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "5026:1:28",
														"valueSize": 1
													}
												],
												"id": 4662,
												"nodeType": "InlineAssembly",
												"src": "4906:132:28"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5056:115:28",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5070:34:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5083:1:28",
																		"type": "",
																		"value": "5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5089:1:28"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5092:10:28",
																				"type": "",
																				"value": "0xFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5086:2:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5086:17:28"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5079:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "5079:25:28"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5074:1:28",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5117:17:28",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5127:3:28"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5132:1:28"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5124:2:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "5124:10:28"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5117:3:28"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5147:14:28",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5156:1:28"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5159:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5152:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "5152:9:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5147:1:28"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4658,
														"isOffset": false,
														"isSlot": false,
														"src": "5117:3:28",
														"valueSize": 1
													},
													{
														"declaration": 4658,
														"isOffset": false,
														"isSlot": false,
														"src": "5127:3:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "5089:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "5147:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "5159:1:28",
														"valueSize": 1
													}
												],
												"id": 4663,
												"nodeType": "InlineAssembly",
												"src": "5047:124:28"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5189:111:28",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5203:30:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5216:1:28",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5222:1:28"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5225:6:28",
																				"type": "",
																				"value": "0xFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5219:2:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5219:13:28"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5212:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "5212:21:28"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5207:1:28",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5246:17:28",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5256:3:28"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5261:1:28"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5253:2:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "5253:10:28"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5246:3:28"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5276:14:28",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5285:1:28"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5288:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5281:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "5281:9:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5276:1:28"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4658,
														"isOffset": false,
														"isSlot": false,
														"src": "5246:3:28",
														"valueSize": 1
													},
													{
														"declaration": 4658,
														"isOffset": false,
														"isSlot": false,
														"src": "5256:3:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "5222:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "5276:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "5288:1:28",
														"valueSize": 1
													}
												],
												"id": 4664,
												"nodeType": "InlineAssembly",
												"src": "5180:120:28"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5318:109:28",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5332:28:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5345:1:28",
																		"type": "",
																		"value": "3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5351:1:28"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5354:4:28",
																				"type": "",
																				"value": "0xFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5348:2:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5348:11:28"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5341:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "5341:19:28"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5336:1:28",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5373:17:28",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5383:3:28"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5388:1:28"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5380:2:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "5380:10:28"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5373:3:28"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5403:14:28",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5412:1:28"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5415:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5408:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "5408:9:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5403:1:28"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4658,
														"isOffset": false,
														"isSlot": false,
														"src": "5373:3:28",
														"valueSize": 1
													},
													{
														"declaration": 4658,
														"isOffset": false,
														"isSlot": false,
														"src": "5383:3:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "5351:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "5403:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "5415:1:28",
														"valueSize": 1
													}
												],
												"id": 4665,
												"nodeType": "InlineAssembly",
												"src": "5309:118:28"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5445:108:28",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5459:27:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5472:1:28",
																		"type": "",
																		"value": "2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5478:1:28"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5481:3:28",
																				"type": "",
																				"value": "0xF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5475:2:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5475:10:28"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5468:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "5468:18:28"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5463:1:28",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5499:17:28",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5509:3:28"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5514:1:28"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5506:2:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "5506:10:28"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5499:3:28"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5529:14:28",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5538:1:28"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5541:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5534:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "5534:9:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5529:1:28"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4658,
														"isOffset": false,
														"isSlot": false,
														"src": "5499:3:28",
														"valueSize": 1
													},
													{
														"declaration": 4658,
														"isOffset": false,
														"isSlot": false,
														"src": "5509:3:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "5478:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "5529:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "5541:1:28",
														"valueSize": 1
													}
												],
												"id": 4666,
												"nodeType": "InlineAssembly",
												"src": "5436:117:28"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5571:108:28",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5585:27:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5598:1:28",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5604:1:28"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5607:3:28",
																				"type": "",
																				"value": "0x3"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5601:2:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5601:10:28"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5594:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "5594:18:28"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5589:1:28",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5625:17:28",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5635:3:28"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5640:1:28"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5632:2:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "5632:10:28"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5625:3:28"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5655:14:28",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5664:1:28"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5667:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5660:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "5660:9:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5655:1:28"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4658,
														"isOffset": false,
														"isSlot": false,
														"src": "5625:3:28",
														"valueSize": 1
													},
													{
														"declaration": 4658,
														"isOffset": false,
														"isSlot": false,
														"src": "5635:3:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "5604:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "5655:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "5667:1:28",
														"valueSize": 1
													}
												],
												"id": 4667,
												"nodeType": "InlineAssembly",
												"src": "5562:117:28"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5697:73:28",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5711:19:28",
															"value": {
																"arguments": [
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5723:1:28"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5726:3:28",
																		"type": "",
																		"value": "0x1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5720:2:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "5720:10:28"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5715:1:28",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5743:17:28",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5753:3:28"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5758:1:28"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5750:2:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "5750:10:28"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5743:3:28"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4658,
														"isOffset": false,
														"isSlot": false,
														"src": "5743:3:28",
														"valueSize": 1
													},
													{
														"declaration": 4658,
														"isOffset": false,
														"isSlot": false,
														"src": "5753:3:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "5723:1:28",
														"valueSize": 1
													}
												],
												"id": 4668,
												"nodeType": "InlineAssembly",
												"src": "5688:82:28"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4671,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 4669,
														"name": "msb",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4658,
														"src": "5784:3:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"hexValue": "313238",
														"id": 4670,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5791:3:28",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_128_by_1",
															"typeString": "int_const 128"
														},
														"value": "128"
													},
													"src": "5784:10:28",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"expression": {
														"id": 4688,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4681,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4654,
															"src": "5835:1:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4687,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 4682,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4645,
																"src": "5839:5:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<<",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4685,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "313237",
																			"id": 4683,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5849:3:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_127_by_1",
																				"typeString": "int_const 127"
																			},
																			"value": "127"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 4684,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4658,
																			"src": "5855:3:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5849:9:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4686,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5848:11:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5839:20:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "5835:24:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4689,
													"nodeType": "ExpressionStatement",
													"src": "5835:24:28"
												},
												"id": 4690,
												"nodeType": "IfStatement",
												"src": "5780:79:28",
												"trueBody": {
													"expression": {
														"id": 4679,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 4672,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4654,
															"src": "5796:1:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4678,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 4673,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4645,
																"src": "5800:5:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4676,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4674,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4658,
																			"src": "5810:3:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "313237",
																			"id": 4675,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5816:3:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_127_by_1",
																				"typeString": "int_const 127"
																			},
																			"value": "127"
																		},
																		"src": "5810:9:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4677,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5809:11:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5800:20:28",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "5796:24:28",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4680,
													"nodeType": "ExpressionStatement",
													"src": "5796:24:28"
												}
											},
											{
												"assignments": [
													4692
												],
												"declarations": [
													{
														"constant": false,
														"id": 4692,
														"mutability": "mutable",
														"name": "log_2",
														"nodeType": "VariableDeclaration",
														"scope": 4763,
														"src": "5870:12:28",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 4691,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "5870:6:28",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4702,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 4701,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 4698,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 4695,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4658,
																			"src": "5893:3:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 4694,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5886:6:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 4693,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "5886:6:28",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 4696,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5886:11:28",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 4697,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5900:3:28",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "5886:17:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 4699,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "5885:19:28",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "3634",
														"id": 4700,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5908:2:28",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_64_by_1",
															"typeString": "int_const 64"
														},
														"value": "64"
													},
													"src": "5885:25:28",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5870:40:28"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5930:151:28",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5944:24:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5953:3:28",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5962:1:28"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5965:1:28"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "5958:3:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5958:9:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5949:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "5949:19:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5944:1:28"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5981:20:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5994:3:28",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5999:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5990:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "5990:11:28"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5985:1:28",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6014:30:28",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6026:5:28"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6037:2:28",
																				"type": "",
																				"value": "63"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6041:1:28"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6033:3:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6033:10:28"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6023:2:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "6023:21:28"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6014:5:28"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6057:14:28",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6066:1:28"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6069:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6062:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "6062:9:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6057:1:28"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4692,
														"isOffset": false,
														"isSlot": false,
														"src": "6014:5:28",
														"valueSize": 1
													},
													{
														"declaration": 4692,
														"isOffset": false,
														"isSlot": false,
														"src": "6026:5:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "5944:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "5962:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "5965:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "5999:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6057:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6069:1:28",
														"valueSize": 1
													}
												],
												"id": 4703,
												"nodeType": "InlineAssembly",
												"src": "5921:160:28"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6099:151:28",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6113:24:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6122:3:28",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6131:1:28"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6134:1:28"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6127:3:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6127:9:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6118:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "6118:19:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6113:1:28"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6150:20:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6163:3:28",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6168:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6159:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "6159:11:28"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6154:1:28",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6183:30:28",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6195:5:28"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6206:2:28",
																				"type": "",
																				"value": "62"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6210:1:28"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6202:3:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6202:10:28"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6192:2:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "6192:21:28"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6183:5:28"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6226:14:28",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6235:1:28"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6238:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6231:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "6231:9:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6226:1:28"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4692,
														"isOffset": false,
														"isSlot": false,
														"src": "6183:5:28",
														"valueSize": 1
													},
													{
														"declaration": 4692,
														"isOffset": false,
														"isSlot": false,
														"src": "6195:5:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6113:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6131:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6134:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6168:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6226:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6238:1:28",
														"valueSize": 1
													}
												],
												"id": 4704,
												"nodeType": "InlineAssembly",
												"src": "6090:160:28"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6268:151:28",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6282:24:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6291:3:28",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6300:1:28"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6303:1:28"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6296:3:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6296:9:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6287:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "6287:19:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6282:1:28"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6319:20:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6332:3:28",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6337:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6328:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "6328:11:28"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6323:1:28",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6352:30:28",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6364:5:28"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6375:2:28",
																				"type": "",
																				"value": "61"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6379:1:28"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6371:3:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6371:10:28"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6361:2:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "6361:21:28"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6352:5:28"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6395:14:28",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6404:1:28"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6407:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6400:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "6400:9:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6395:1:28"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4692,
														"isOffset": false,
														"isSlot": false,
														"src": "6352:5:28",
														"valueSize": 1
													},
													{
														"declaration": 4692,
														"isOffset": false,
														"isSlot": false,
														"src": "6364:5:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6282:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6300:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6303:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6337:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6395:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6407:1:28",
														"valueSize": 1
													}
												],
												"id": 4705,
												"nodeType": "InlineAssembly",
												"src": "6259:160:28"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6437:151:28",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6451:24:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6460:3:28",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6469:1:28"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6472:1:28"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6465:3:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6465:9:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6456:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "6456:19:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6451:1:28"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6488:20:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6501:3:28",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6506:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6497:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "6497:11:28"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6492:1:28",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6521:30:28",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6533:5:28"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6544:2:28",
																				"type": "",
																				"value": "60"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6548:1:28"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6540:3:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6540:10:28"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6530:2:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "6530:21:28"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6521:5:28"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6564:14:28",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6573:1:28"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6576:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6569:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "6569:9:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6564:1:28"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4692,
														"isOffset": false,
														"isSlot": false,
														"src": "6521:5:28",
														"valueSize": 1
													},
													{
														"declaration": 4692,
														"isOffset": false,
														"isSlot": false,
														"src": "6533:5:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6451:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6469:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6472:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6506:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6564:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6576:1:28",
														"valueSize": 1
													}
												],
												"id": 4706,
												"nodeType": "InlineAssembly",
												"src": "6428:160:28"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6606:151:28",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6620:24:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6629:3:28",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6638:1:28"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6641:1:28"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6634:3:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6634:9:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6625:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "6625:19:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6620:1:28"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6657:20:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6670:3:28",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6675:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6666:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "6666:11:28"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6661:1:28",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6690:30:28",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6702:5:28"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6713:2:28",
																				"type": "",
																				"value": "59"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6717:1:28"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6709:3:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6709:10:28"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6699:2:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "6699:21:28"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6690:5:28"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6733:14:28",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6742:1:28"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6745:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6738:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "6738:9:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6733:1:28"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4692,
														"isOffset": false,
														"isSlot": false,
														"src": "6690:5:28",
														"valueSize": 1
													},
													{
														"declaration": 4692,
														"isOffset": false,
														"isSlot": false,
														"src": "6702:5:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6620:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6638:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6641:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6675:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6733:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6745:1:28",
														"valueSize": 1
													}
												],
												"id": 4707,
												"nodeType": "InlineAssembly",
												"src": "6597:160:28"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6775:151:28",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6789:24:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6798:3:28",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6807:1:28"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6810:1:28"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6803:3:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6803:9:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6794:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "6794:19:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6789:1:28"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6826:20:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6839:3:28",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6844:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6835:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "6835:11:28"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6830:1:28",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6859:30:28",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6871:5:28"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6882:2:28",
																				"type": "",
																				"value": "58"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6886:1:28"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6878:3:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6878:10:28"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6868:2:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "6868:21:28"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6859:5:28"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6902:14:28",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6911:1:28"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6914:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6907:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "6907:9:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6902:1:28"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4692,
														"isOffset": false,
														"isSlot": false,
														"src": "6859:5:28",
														"valueSize": 1
													},
													{
														"declaration": 4692,
														"isOffset": false,
														"isSlot": false,
														"src": "6871:5:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6789:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6807:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6810:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6844:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6902:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6914:1:28",
														"valueSize": 1
													}
												],
												"id": 4708,
												"nodeType": "InlineAssembly",
												"src": "6766:160:28"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6944:151:28",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6958:24:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6967:3:28",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6976:1:28"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6979:1:28"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6972:3:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6972:9:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6963:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "6963:19:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6958:1:28"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6995:20:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7008:3:28",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7013:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7004:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "7004:11:28"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6999:1:28",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7028:30:28",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7040:5:28"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7051:2:28",
																				"type": "",
																				"value": "57"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7055:1:28"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7047:3:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7047:10:28"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7037:2:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "7037:21:28"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7028:5:28"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7071:14:28",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7080:1:28"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7083:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7076:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "7076:9:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7071:1:28"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4692,
														"isOffset": false,
														"isSlot": false,
														"src": "7028:5:28",
														"valueSize": 1
													},
													{
														"declaration": 4692,
														"isOffset": false,
														"isSlot": false,
														"src": "7040:5:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6958:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6976:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "6979:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7013:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7071:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7083:1:28",
														"valueSize": 1
													}
												],
												"id": 4709,
												"nodeType": "InlineAssembly",
												"src": "6935:160:28"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7113:151:28",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7127:24:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7136:3:28",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7145:1:28"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7148:1:28"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7141:3:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7141:9:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7132:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "7132:19:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7127:1:28"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7164:20:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7177:3:28",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7182:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7173:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "7173:11:28"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7168:1:28",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7197:30:28",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7209:5:28"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7220:2:28",
																				"type": "",
																				"value": "56"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7224:1:28"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7216:3:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7216:10:28"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7206:2:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "7206:21:28"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7197:5:28"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7240:14:28",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7249:1:28"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7252:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7245:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "7245:9:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7240:1:28"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4692,
														"isOffset": false,
														"isSlot": false,
														"src": "7197:5:28",
														"valueSize": 1
													},
													{
														"declaration": 4692,
														"isOffset": false,
														"isSlot": false,
														"src": "7209:5:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7127:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7145:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7148:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7182:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7240:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7252:1:28",
														"valueSize": 1
													}
												],
												"id": 4710,
												"nodeType": "InlineAssembly",
												"src": "7104:160:28"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7282:151:28",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7296:24:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7305:3:28",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7314:1:28"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7317:1:28"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7310:3:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7310:9:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7301:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "7301:19:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7296:1:28"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7333:20:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7346:3:28",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7351:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7342:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "7342:11:28"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7337:1:28",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7366:30:28",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7378:5:28"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7389:2:28",
																				"type": "",
																				"value": "55"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7393:1:28"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7385:3:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7385:10:28"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7375:2:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "7375:21:28"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7366:5:28"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7409:14:28",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7418:1:28"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7421:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7414:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "7414:9:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7409:1:28"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4692,
														"isOffset": false,
														"isSlot": false,
														"src": "7366:5:28",
														"valueSize": 1
													},
													{
														"declaration": 4692,
														"isOffset": false,
														"isSlot": false,
														"src": "7378:5:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7296:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7314:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7317:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7351:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7409:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7421:1:28",
														"valueSize": 1
													}
												],
												"id": 4711,
												"nodeType": "InlineAssembly",
												"src": "7273:160:28"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7451:151:28",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7465:24:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7474:3:28",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7483:1:28"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7486:1:28"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7479:3:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7479:9:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7470:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "7470:19:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7465:1:28"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7502:20:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7515:3:28",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7520:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7511:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "7511:11:28"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7506:1:28",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7535:30:28",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7547:5:28"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7558:2:28",
																				"type": "",
																				"value": "54"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7562:1:28"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7554:3:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7554:10:28"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7544:2:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "7544:21:28"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7535:5:28"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7578:14:28",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7587:1:28"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7590:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7583:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "7583:9:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7578:1:28"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4692,
														"isOffset": false,
														"isSlot": false,
														"src": "7535:5:28",
														"valueSize": 1
													},
													{
														"declaration": 4692,
														"isOffset": false,
														"isSlot": false,
														"src": "7547:5:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7465:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7483:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7486:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7520:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7578:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7590:1:28",
														"valueSize": 1
													}
												],
												"id": 4712,
												"nodeType": "InlineAssembly",
												"src": "7442:160:28"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7620:151:28",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7634:24:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7643:3:28",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7652:1:28"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7655:1:28"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7648:3:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7648:9:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7639:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "7639:19:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7634:1:28"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7671:20:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7684:3:28",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7689:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7680:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "7680:11:28"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7675:1:28",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7704:30:28",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7716:5:28"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7727:2:28",
																				"type": "",
																				"value": "53"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7731:1:28"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7723:3:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7723:10:28"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7713:2:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "7713:21:28"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7704:5:28"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7747:14:28",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7756:1:28"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7759:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7752:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "7752:9:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7747:1:28"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4692,
														"isOffset": false,
														"isSlot": false,
														"src": "7704:5:28",
														"valueSize": 1
													},
													{
														"declaration": 4692,
														"isOffset": false,
														"isSlot": false,
														"src": "7716:5:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7634:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7652:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7655:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7689:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7747:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7759:1:28",
														"valueSize": 1
													}
												],
												"id": 4713,
												"nodeType": "InlineAssembly",
												"src": "7611:160:28"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7789:151:28",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7803:24:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7812:3:28",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7821:1:28"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7824:1:28"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7817:3:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7817:9:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7808:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "7808:19:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7803:1:28"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7840:20:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7853:3:28",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7858:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7849:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "7849:11:28"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7844:1:28",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7873:30:28",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7885:5:28"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7896:2:28",
																				"type": "",
																				"value": "52"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7900:1:28"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7892:3:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7892:10:28"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7882:2:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "7882:21:28"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7873:5:28"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7916:14:28",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7925:1:28"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7928:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7921:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "7921:9:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7916:1:28"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4692,
														"isOffset": false,
														"isSlot": false,
														"src": "7873:5:28",
														"valueSize": 1
													},
													{
														"declaration": 4692,
														"isOffset": false,
														"isSlot": false,
														"src": "7885:5:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7803:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7821:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7824:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7858:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7916:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7928:1:28",
														"valueSize": 1
													}
												],
												"id": 4714,
												"nodeType": "InlineAssembly",
												"src": "7780:160:28"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7958:151:28",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7972:24:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7981:3:28",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7990:1:28"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7993:1:28"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7986:3:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7986:9:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7977:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "7977:19:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7972:1:28"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8009:20:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8022:3:28",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8027:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8018:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "8018:11:28"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "8013:1:28",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8042:30:28",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "8054:5:28"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8065:2:28",
																				"type": "",
																				"value": "51"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "8069:1:28"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "8061:3:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8061:10:28"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "8051:2:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "8051:21:28"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "8042:5:28"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8085:14:28",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "8094:1:28"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8097:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8090:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "8090:9:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "8085:1:28"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4692,
														"isOffset": false,
														"isSlot": false,
														"src": "8042:5:28",
														"valueSize": 1
													},
													{
														"declaration": 4692,
														"isOffset": false,
														"isSlot": false,
														"src": "8054:5:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7972:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7990:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "7993:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "8027:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "8085:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "8097:1:28",
														"valueSize": 1
													}
												],
												"id": 4715,
												"nodeType": "InlineAssembly",
												"src": "7949:160:28"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "8127:124:28",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8141:24:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8150:3:28",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "8159:1:28"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "8162:1:28"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "8155:3:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8155:9:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8146:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "8146:19:28"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "8141:1:28"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8178:20:28",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8191:3:28",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8196:1:28"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8187:3:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "8187:11:28"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "8182:1:28",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8211:30:28",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "8223:5:28"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8234:2:28",
																				"type": "",
																				"value": "50"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "8238:1:28"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "8230:3:28"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8230:10:28"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "8220:2:28"
																},
																"nodeType": "YulFunctionCall",
																"src": "8220:21:28"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "8211:5:28"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4692,
														"isOffset": false,
														"isSlot": false,
														"src": "8211:5:28",
														"valueSize": 1
													},
													{
														"declaration": 4692,
														"isOffset": false,
														"isSlot": false,
														"src": "8223:5:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "8141:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "8159:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "8162:1:28",
														"valueSize": 1
													},
													{
														"declaration": 4654,
														"isOffset": false,
														"isSlot": false,
														"src": "8196:1:28",
														"valueSize": 1
													}
												],
												"id": 4716,
												"nodeType": "InlineAssembly",
												"src": "8118:133:28"
											},
											{
												"assignments": [
													4718
												],
												"declarations": [
													{
														"constant": false,
														"id": 4718,
														"mutability": "mutable",
														"name": "log_sqrt10001",
														"nodeType": "VariableDeclaration",
														"scope": 4763,
														"src": "8261:20:28",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 4717,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "8261:6:28",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4722,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 4721,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 4719,
														"name": "log_2",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4692,
														"src": "8284:5:28",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"hexValue": "323535373338393538393939363033383236333437313431",
														"id": 4720,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8292:24:28",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_255738958999603826347141_by_1",
															"typeString": "int_const 255738958999603826347141"
														},
														"value": "255738958999603826347141"
													},
													"src": "8284:32:28",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8261:55:28"
											},
											{
												"assignments": [
													4724
												],
												"declarations": [
													{
														"constant": false,
														"id": 4724,
														"mutability": "mutable",
														"name": "tickLow",
														"nodeType": "VariableDeclaration",
														"scope": 4763,
														"src": "8345:13:28",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 4723,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8345:5:28",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4734,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															"id": 4732,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 4729,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4727,
																			"name": "log_sqrt10001",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4718,
																			"src": "8368:13:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "33343032393932393536383039313332343138353936313430313030363630323437323130",
																			"id": 4728,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8384:37:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3402992956809132418596140100660247210_by_1",
																				"typeString": "int_const 3402...(29 digits omitted)...7210"
																			},
																			"value": "3402992956809132418596140100660247210"
																		},
																		"src": "8368:53:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"id": 4730,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8367:55:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4731,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8426:3:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "8367:62:28",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														],
														"id": 4726,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "8361:5:28",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_int24_$",
															"typeString": "type(int24)"
														},
														"typeName": {
															"id": 4725,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8361:5:28",
															"typeDescriptions": {}
														}
													},
													"id": 4733,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8361:69:28",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8345:85:28"
											},
											{
												"assignments": [
													4736
												],
												"declarations": [
													{
														"constant": false,
														"id": 4736,
														"mutability": "mutable",
														"name": "tickHi",
														"nodeType": "VariableDeclaration",
														"scope": 4763,
														"src": "8440:12:28",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 4735,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8440:5:28",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4746,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															"id": 4744,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 4741,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4739,
																			"name": "log_sqrt10001",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4718,
																			"src": "8462:13:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"hexValue": "323931333339343634373731393839363232393037303237363231313533333938303838343935",
																			"id": 4740,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8478:39:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_291339464771989622907027621153398088495_by_1",
																				"typeString": "int_const 2913...(31 digits omitted)...8495"
																			},
																			"value": "291339464771989622907027621153398088495"
																		},
																		"src": "8462:55:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"id": 4742,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8461:57:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 4743,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8522:3:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "8461:64:28",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														],
														"id": 4738,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "8455:5:28",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_int24_$",
															"typeString": "type(int24)"
														},
														"typeName": {
															"id": 4737,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8455:5:28",
															"typeDescriptions": {}
														}
													},
													"id": 4745,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8455:71:28",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8440:86:28"
											},
											{
												"expression": {
													"id": 4761,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 4747,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4631,
														"src": "8537:4:28",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															},
															"id": 4750,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 4748,
																"name": "tickLow",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4724,
																"src": "8544:7:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 4749,
																"name": "tickHi",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4736,
																"src": "8555:6:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"src": "8544:17:28",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseExpression": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 4756,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 4753,
																			"name": "tickHi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4736,
																			"src": "8593:6:28",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		],
																		"id": 4752,
																		"name": "getSqrtRatioAtTick",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4625,
																		"src": "8574:18:28",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_int24_$returns$_t_uint160_$",
																			"typeString": "function (int24) pure returns (uint160)"
																		}
																	},
																	"id": 4754,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8574:26:28",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"id": 4755,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4628,
																	"src": "8604:12:28",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "8574:42:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseExpression": {
																"id": 4758,
																"name": "tickLow",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4724,
																"src": "8628:7:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"id": 4759,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "Conditional",
															"src": "8574:61:28",
															"trueExpression": {
																"id": 4757,
																"name": "tickHi",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4736,
																"src": "8619:6:28",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"id": 4760,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "Conditional",
														"src": "8544:91:28",
														"trueExpression": {
															"id": 4751,
															"name": "tickLow",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4724,
															"src": "8564:7:28",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "8537:98:28",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"id": 4762,
												"nodeType": "ExpressionStatement",
												"src": "8537:98:28"
											}
										]
									},
									"documentation": {
										"id": 4626,
										"nodeType": "StructuredDocumentation",
										"src": "3948:408:28",
										"text": "@notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n ever return.\n @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n @return tick The greatest tick for which the ratio is less than or equal to the input ratio"
									},
									"id": 4764,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getTickAtSqrtRatio",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4629,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4628,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 4764,
												"src": "4389:20:28",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 4627,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4389:7:28",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4388:22:28"
									},
									"returnParameters": {
										"id": 4632,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4631,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 4764,
												"src": "4434:10:28",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 4630,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "4434:5:28",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4433:12:28"
									},
									"scope": 4765,
									"src": "4361:4281:28",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 4766,
							"src": "313:8331:28"
						}
					],
					"src": "45:8600:28"
				},
				"id": 28
			},
			"contracts/core/libraries/TransferHelper.sol": {
				"ast": {
					"absolutePath": "contracts/core/libraries/TransferHelper.sol",
					"exportedSymbols": {
						"IERC20Minimal": [
							1186
						],
						"TransferHelper": [
							4816
						]
					},
					"id": 4817,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 4767,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:29"
						},
						{
							"absolutePath": "contracts/core/interfaces/IERC20Minimal.sol",
							"file": "../interfaces/IERC20Minimal.sol",
							"id": 4768,
							"nodeType": "ImportDirective",
							"scope": 4817,
							"sourceUnit": 1187,
							"src": "71:41:29",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 4769,
								"nodeType": "StructuredDocumentation",
								"src": "114:139:29",
								"text": "@title TransferHelper\n @notice Contains helper methods for interacting with ERC20 tokens that do not consistently return true/false"
							},
							"fullyImplemented": true,
							"id": 4816,
							"linearizedBaseContracts": [
								4816
							],
							"name": "TransferHelper",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 4814,
										"nodeType": "Block",
										"src": "675:225:29",
										"statements": [
											{
												"assignments": [
													4780,
													4782
												],
												"declarations": [
													{
														"constant": false,
														"id": 4780,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 4814,
														"src": "686:12:29",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 4779,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "686:4:29",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 4782,
														"mutability": "mutable",
														"name": "data",
														"nodeType": "VariableDeclaration",
														"scope": 4814,
														"src": "700:17:29",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 4781,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "700:5:29",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4794,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 4787,
																			"name": "IERC20Minimal",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1186,
																			"src": "767:13:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20Minimal_$1186_$",
																				"typeString": "type(contract IERC20Minimal)"
																			}
																		},
																		"id": 4788,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1135,
																		"src": "767:22:29",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function IERC20Minimal.transfer(address,uint256) returns (bool)"
																		}
																	},
																	"id": 4789,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "767:31:29",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 4790,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4774,
																	"src": "800:2:29",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 4791,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4776,
																	"src": "804:5:29",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 4785,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "744:3:29",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 4786,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "744:22:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 4792,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "744:66:29",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 4783,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4772,
															"src": "733:5:29",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 4784,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "733:10:29",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 4793,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "733:78:29",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "685:126:29"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 4810,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 4796,
																"name": "success",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4780,
																"src": "829:7:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 4808,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 4800,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 4797,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4782,
																					"src": "841:4:29",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 4798,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "841:11:29",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "30",
																				"id": 4799,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "856:1:29",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"src": "841:16:29",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"arguments": [
																				{
																					"id": 4803,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4782,
																					"src": "872:4:29",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				{
																					"components": [
																						{
																							"id": 4805,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "879:4:29",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_bool_$",
																								"typeString": "type(bool)"
																							},
																							"typeName": {
																								"id": 4804,
																								"name": "bool",
																								"nodeType": "ElementaryTypeName",
																								"src": "879:4:29",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"id": 4806,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "878:6:29",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					},
																					{
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				],
																				"expression": {
																					"id": 4801,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "861:3:29",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 4802,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "decode",
																				"nodeType": "MemberAccess",
																				"src": "861:10:29",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 4807,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "861:24:29",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "841:44:29",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 4809,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "840:46:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "829:57:29",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5446",
															"id": 4811,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "888:4:29",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cebb2b2e317200ffcf39e4291b6400d95f06e73adfd258bd495d227b7d846ff0",
																"typeString": "literal_string \"TF\""
															},
															"value": "TF"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cebb2b2e317200ffcf39e4291b6400d95f06e73adfd258bd495d227b7d846ff0",
																"typeString": "literal_string \"TF\""
															}
														],
														"id": 4795,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "821:7:29",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 4812,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "821:72:29",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4813,
												"nodeType": "ExpressionStatement",
												"src": "821:72:29"
											}
										]
									},
									"documentation": {
										"id": 4770,
										"nodeType": "StructuredDocumentation",
										"src": "282:315:29",
										"text": "@notice Transfers tokens from msg.sender to a recipient\n @dev Calls transfer on token contract, errors with TF if transfer fails\n @param token The contract address of the token which will be transferred\n @param to The recipient of the transfer\n @param value The value of the transfer"
									},
									"id": 4815,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4777,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4772,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 4815,
												"src": "624:13:29",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4771,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "624:7:29",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4774,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 4815,
												"src": "639:10:29",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4773,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "639:7:29",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4776,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 4815,
												"src": "651:13:29",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4775,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "651:7:29",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "623:42:29"
									},
									"returnParameters": {
										"id": 4778,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:0:29"
									},
									"scope": 4816,
									"src": "602:298:29",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 4817,
							"src": "253:649:29"
						}
					],
					"src": "45:858:29"
				},
				"id": 29
			},
			"contracts/core/libraries/UnsafeMath.sol": {
				"ast": {
					"absolutePath": "contracts/core/libraries/UnsafeMath.sol",
					"exportedSymbols": {
						"UnsafeMath": [
							4832
						]
					},
					"id": 4833,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 4818,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:30"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 4819,
								"nodeType": "StructuredDocumentation",
								"src": "71:173:30",
								"text": "@title Math functions that do not check inputs or outputs\n @notice Contains methods that perform common math functions but do not do any overflow or underflow checks"
							},
							"fullyImplemented": true,
							"id": 4832,
							"linearizedBaseContracts": [
								4832
							],
							"name": "UnsafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 4830,
										"nodeType": "Block",
										"src": "571:86:30",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "590:61:30",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "604:37:30",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "617:1:30"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "620:1:30"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "613:3:30"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "613:9:30"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "631:1:30"
																					},
																					{
																						"name": "y",
																						"nodeType": "YulIdentifier",
																						"src": "634:1:30"
																					}
																				],
																				"functionName": {
																					"name": "mod",
																					"nodeType": "YulIdentifier",
																					"src": "627:3:30"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "627:9:30"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "638:1:30",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "624:2:30"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "624:16:30"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "609:3:30"
																},
																"nodeType": "YulFunctionCall",
																"src": "609:32:30"
															},
															"variableNames": [
																{
																	"name": "z",
																	"nodeType": "YulIdentifier",
																	"src": "604:1:30"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 4822,
														"isOffset": false,
														"isSlot": false,
														"src": "617:1:30",
														"valueSize": 1
													},
													{
														"declaration": 4822,
														"isOffset": false,
														"isSlot": false,
														"src": "631:1:30",
														"valueSize": 1
													},
													{
														"declaration": 4824,
														"isOffset": false,
														"isSlot": false,
														"src": "620:1:30",
														"valueSize": 1
													},
													{
														"declaration": 4824,
														"isOffset": false,
														"isSlot": false,
														"src": "634:1:30",
														"valueSize": 1
													},
													{
														"declaration": 4827,
														"isOffset": false,
														"isSlot": false,
														"src": "604:1:30",
														"valueSize": 1
													}
												],
												"id": 4829,
												"nodeType": "InlineAssembly",
												"src": "581:70:30"
											}
										]
									},
									"documentation": {
										"id": 4820,
										"nodeType": "StructuredDocumentation",
										"src": "269:218:30",
										"text": "@notice Returns ceil(x / y)\n @dev division by 0 has unspecified behavior, and must be checked externally\n @param x The dividend\n @param y The divisor\n @return z The quotient, ceil(x / y)"
									},
									"id": 4831,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "divRoundingUp",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4825,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4822,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 4831,
												"src": "515:9:30",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4821,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "515:7:30",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4824,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 4831,
												"src": "526:9:30",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4823,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "526:7:30",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "514:22:30"
									},
									"returnParameters": {
										"id": 4828,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4827,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 4831,
												"src": "560:9:30",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4826,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "560:7:30",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "559:11:30"
									},
									"scope": 4832,
									"src": "492:165:30",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 4833,
							"src": "244:415:30"
						}
					],
					"src": "45:615:30"
				},
				"id": 30
			},
			"contracts/libraries/VelodromeTimeLibrary.sol": {
				"ast": {
					"absolutePath": "contracts/libraries/VelodromeTimeLibrary.sol",
					"exportedSymbols": {
						"VelodromeTimeLibrary": [
							4910
						]
					},
					"id": 4911,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 4834,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:31"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"fullyImplemented": true,
							"id": 4910,
							"linearizedBaseContracts": [
								4910
							],
							"name": "VelodromeTimeLibrary",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 4837,
									"mutability": "constant",
									"name": "WEEK",
									"nodeType": "VariableDeclaration",
									"scope": 4910,
									"src": "92:39:31",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 4835,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "92:7:31",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "37",
										"id": 4836,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "125:6:31",
										"subdenomination": "days",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_604800_by_1",
											"typeString": "int_const 604800"
										},
										"value": "7"
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 4852,
										"nodeType": "Block",
										"src": "272:54:31",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4850,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 4845,
														"name": "timestamp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4840,
														"src": "289:9:31",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 4848,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 4846,
																	"name": "timestamp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4840,
																	"src": "302:9:31",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "%",
																"rightExpression": {
																	"id": 4847,
																	"name": "WEEK",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4837,
																	"src": "314:4:31",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "302:16:31",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 4849,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "301:18:31",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "289:30:31",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 4844,
												"id": 4851,
												"nodeType": "Return",
												"src": "282:37:31"
											}
										]
									},
									"documentation": {
										"id": 4838,
										"nodeType": "StructuredDocumentation",
										"src": "138:58:31",
										"text": "@dev Returns start of epoch based on current timestamp"
									},
									"id": 4853,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "epochStart",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4841,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4840,
												"mutability": "mutable",
												"name": "timestamp",
												"nodeType": "VariableDeclaration",
												"scope": 4853,
												"src": "221:17:31",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4839,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "221:7:31",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "220:19:31"
									},
									"returnParameters": {
										"id": 4844,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4843,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 4853,
												"src": "263:7:31",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4842,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "263:7:31",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "262:9:31"
									},
									"scope": 4910,
									"src": "201:125:31",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 4870,
										"nodeType": "Block",
										"src": "466:61:31",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4868,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4866,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4861,
															"name": "timestamp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4856,
															"src": "483:9:31",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 4864,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 4862,
																		"name": "timestamp",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4856,
																		"src": "496:9:31",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 4863,
																		"name": "WEEK",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4837,
																		"src": "508:4:31",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "496:16:31",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 4865,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "495:18:31",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "483:30:31",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 4867,
														"name": "WEEK",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4837,
														"src": "516:4:31",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "483:37:31",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 4860,
												"id": 4869,
												"nodeType": "Return",
												"src": "476:44:31"
											}
										]
									},
									"documentation": {
										"id": 4854,
										"nodeType": "StructuredDocumentation",
										"src": "332:59:31",
										"text": "@dev Returns start of next epoch / end of current epoch"
									},
									"id": 4871,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "epochNext",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4857,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4856,
												"mutability": "mutable",
												"name": "timestamp",
												"nodeType": "VariableDeclaration",
												"scope": 4871,
												"src": "415:17:31",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4855,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "415:7:31",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "414:19:31"
									},
									"returnParameters": {
										"id": 4860,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4859,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 4871,
												"src": "457:7:31",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4858,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "457:7:31",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "456:9:31"
									},
									"scope": 4910,
									"src": "396:131:31",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 4888,
										"nodeType": "Block",
										"src": "652:64:31",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4886,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4884,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4879,
															"name": "timestamp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4874,
															"src": "669:9:31",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 4882,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 4880,
																		"name": "timestamp",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4874,
																		"src": "682:9:31",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 4881,
																		"name": "WEEK",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4837,
																		"src": "694:4:31",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "682:16:31",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 4883,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "681:18:31",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "669:30:31",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"hexValue": "31",
														"id": 4885,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "702:7:31",
														"subdenomination": "hours",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_3600_by_1",
															"typeString": "int_const 3600"
														},
														"value": "1"
													},
													"src": "669:40:31",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 4878,
												"id": 4887,
												"nodeType": "Return",
												"src": "662:47:31"
											}
										]
									},
									"documentation": {
										"id": 4872,
										"nodeType": "StructuredDocumentation",
										"src": "533:39:31",
										"text": "@dev Returns start of voting window"
									},
									"id": 4889,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "epochVoteStart",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4875,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4874,
												"mutability": "mutable",
												"name": "timestamp",
												"nodeType": "VariableDeclaration",
												"scope": 4889,
												"src": "601:17:31",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4873,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "601:7:31",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "600:19:31"
									},
									"returnParameters": {
										"id": 4878,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4877,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 4889,
												"src": "643:7:31",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4876,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "643:7:31",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "642:9:31"
									},
									"scope": 4910,
									"src": "577:139:31",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 4908,
										"nodeType": "Block",
										"src": "879:71:31",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4906,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 4904,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4902,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 4897,
																"name": "timestamp",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4892,
																"src": "896:9:31",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 4900,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 4898,
																			"name": "timestamp",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4892,
																			"src": "909:9:31",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "%",
																		"rightExpression": {
																			"id": 4899,
																			"name": "WEEK",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4837,
																			"src": "921:4:31",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "909:16:31",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 4901,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "908:18:31",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "896:30:31",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"id": 4903,
															"name": "WEEK",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4837,
															"src": "929:4:31",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "896:37:31",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"hexValue": "31",
														"id": 4905,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "936:7:31",
														"subdenomination": "hours",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_3600_by_1",
															"typeString": "int_const 3600"
														},
														"value": "1"
													},
													"src": "896:47:31",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 4896,
												"id": 4907,
												"nodeType": "Return",
												"src": "889:54:31"
											}
										]
									},
									"documentation": {
										"id": 4890,
										"nodeType": "StructuredDocumentation",
										"src": "722:79:31",
										"text": "@dev Returns end of voting window / beginning of unrestricted voting window"
									},
									"id": 4909,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "epochVoteEnd",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4893,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4892,
												"mutability": "mutable",
												"name": "timestamp",
												"nodeType": "VariableDeclaration",
												"scope": 4909,
												"src": "828:17:31",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4891,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "828:7:31",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "827:19:31"
									},
									"returnParameters": {
										"id": 4896,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4895,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 4909,
												"src": "870:7:31",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4894,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "870:7:31",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "869:9:31"
									},
									"scope": 4910,
									"src": "806:144:31",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 4911,
							"src": "57:895:31"
						}
					],
					"src": "32:921:31"
				},
				"id": 31
			}
		}
	}
}